diff --git a/.gitignore b/.gitignore
index 9b111cc..7f0daa8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -61,8 +61,20 @@ build/*
 !/levels/**/*custom*.png
 !/levels/**/*custom*/**/*.png
 !/actors/**/*custom*.png
+!/actors/**/*rainbow*.png
+!/actors/**/*stored*.png
+!/actors/**/*mario*.png
+!/actors/**/*wing*.png
+!/actors/**/*cursya*.png
+!/actors/**/*skipsqueak*.png
 !/actors/**/*custom*/**/*.png
+!/textures/**/*meta*.png
+!/textures/**/*mario*.png
 !/textures/**/*custom*.png
+!/textures/**/*rainbow*.png
+!/textures/**/*cursya*.png
+!/textures/**/*skipsqueak*.png
+!/textures/**/*curseya*.png
 !/textures/**/*custom*/**/*.png
 !/sound/**/*custom*.m64
 !/sound/**/*custom*/**/*.m64
diff --git a/.gitignore.rej b/.gitignore.rej
new file mode 100644
index 0000000..8ff6971
--- /dev/null
+++ b/.gitignore.rej
@@ -0,0 +1,22 @@
+diff a/.gitignore b/.gitignore	(rejected hunks)
+@@ -61,8 +61,20 @@ build/*
+ !/levels/**/*custom*.png
+ !/levels/**/*custom*/**/*.png
+ !/actors/**/*custom*.png
++!/actors/**/*rainbow*.png
++!/actors/**/*stored*.png
++!/actors/**/*mario*.png
++!/actors/**/*wing*.png
++!/actors/**/*cursya*.png
++!/actors/**/*skipsqueak*.png
+ !/actors/**/*custom*/**/*.png
++!/textures/**/*meta*.png
++!/textures/**/*mario*.png
+ !/textures/**/*custom*.png
++!/textures/**/*rainbow*.png
++!/textures/**/*cursya*.png
++!/textures/**/*skipsqueak*.png
++!/textures/**/*curseya*.png
+ !/textures/**/*custom*/**/*.png
+ !/sound/**/*custom*.m64
+ !/sound/**/*custom*/**/*.m64
diff --git a/Makefile.split b/Makefile.split
index 0503611..81261d8 100644
--- a/Makefile.split
+++ b/Makefile.split
@@ -66,12 +66,12 @@ KING_BOBOMB_DIRS := king_bobomb water_bubble
 BOO_DIRS         := bookend book chair small_key mad_piano boo haunted_cage
 MR_I_DIRS        := mr_i_eyeball mr_i_iris swoop snufit dorrie scuttlebug
 HOOT_DIRS        := yellow_sphere_small hoot yoshi_egg thwomp bullet_bill heave_ho
-COINS_DIRS       := mist explosion butterfly coin warp_pipe door bowser_key flame blue_fish pebble leaves warp_collision mario_cap power_meter mushroom_1up star sand dirt transparent_star white_particle wooden_signpost tree
+COINS_DIRS       := mist explosion butterfly coin warp_pipe door bowser_key flame blue_fish pebble leaves warp_collision mario_cap power_meter mushroom_1up star rainbow_star rainbow_trail sand dirt transparent_star white_particle wooden_signpost tree rainbow_star rainbow_trail
 BUBBA_DIRS       := bubba wiggler wiggler_body_part lakitu_enemy spiny_egg spiny
 SKEETER_DIRS     := skeeter seaweed water_mine cyan_fish bub water_ring treasure_chest
 KLEPTO_DIRS      := klepto eyerok pokey tornado
 SEA_DIRS         := clam_shell manta sushi unagi whirlpool
-AMP_DIRS         := blue_coin_switch amp cannon_lid cannon_base cannon_barrel chuckya purple_switch checkerboard_platform heart flyguy breakable_box exclamation_box goomba bobomb metal_box exclamation_box_outline test_platform koopa_shell
+AMP_DIRS         := blue_coin_switch amp cannon_lid cannon_base cannon_barrel chuckya purple_switch checkerboard_platform heart flyguy breakable_box exclamation_box goomba bobomb metal_box exclamation_box_outline test_platform koopa_shell skipsqueak spiny_skipsqueak cursya cursya_cyan cursya_yellow cursya_purple cursya_red cursya_blue
 MOLE_DIRS        := monty_mole_hole monty_mole smoke ukiki fwoosh
 LAKITU_DIRS      := lakitu_cameraman toad mips boo_castle
 PEACH_DIRS       := bird peach yoshi
diff --git a/Makefile.split.rej b/Makefile.split.rej
new file mode 100644
index 0000000..72acd9e
--- /dev/null
+++ b/Makefile.split.rej
@@ -0,0 +1,16 @@
+diff a/Makefile.split b/Makefile.split	(rejected hunks)
+@@ -66,12 +66,12 @@ KING_BOBOMB_DIRS := king_bobomb water_bubble
+ BOO_DIRS         := bookend book chair small_key mad_piano boo haunted_cage
+ MR_I_DIRS        := mr_i_eyeball mr_i_iris swoop snufit dorrie scuttlebug
+ HOOT_DIRS        := yellow_sphere_small hoot yoshi_egg thwomp bullet_bill heave_ho
+-COINS_DIRS       := mist explosion butterfly coin warp_pipe door bowser_key flame blue_fish pebble leaves warp_collision mario_cap power_meter mushroom_1up star sand dirt transparent_star white_particle wooden_signpost tree
++COINS_DIRS       := mist explosion butterfly coin warp_pipe door bowser_key flame blue_fish pebble leaves warp_collision mario_cap power_meter mushroom_1up star rainbow_star rainbow_trail sand dirt transparent_star white_particle wooden_signpost tree rainbow_star rainbow_trail
+ BUBBA_DIRS       := bubba wiggler wiggler_body_part lakitu_enemy spiny_egg spiny
+ SKEETER_DIRS     := skeeter seaweed water_mine cyan_fish bub water_ring treasure_chest
+ KLEPTO_DIRS      := klepto eyerok pokey tornado
+ SEA_DIRS         := clam_shell manta sushi unagi whirlpool
+-AMP_DIRS         := blue_coin_switch amp cannon_lid cannon_base cannon_barrel chuckya purple_switch checkerboard_platform heart flyguy breakable_box exclamation_box goomba bobomb metal_box exclamation_box_outline test_platform koopa_shell
++AMP_DIRS         := blue_coin_switch amp cannon_lid cannon_base cannon_barrel chuckya purple_switch checkerboard_platform heart flyguy breakable_box exclamation_box goomba bobomb metal_box exclamation_box_outline test_platform koopa_shell skipsqueak spiny_skipsqueak cursya cursya_cyan cursya_yellow cursya_purple cursya_red cursya_blue
+ MOLE_DIRS        := monty_mole_hole monty_mole smoke ukiki fwoosh
+ LAKITU_DIRS      := lakitu_cameraman toad mips boo_castle
+ PEACH_DIRS       := bird peach yoshi
diff --git a/actors/butterfly/butterfly_wing.rgba16.png b/actors/butterfly/butterfly_wing.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..90b812d6f137a789ec6dc5cfb80f5556768dcc21
GIT binary patch
literal 2912
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
RmyIlEAbMt8<hgK_{{PZEgG~Sc

literal 0
HcmV?d00001

diff --git a/actors/common0.h b/actors/common0.h
index f4a791d..d7b4a33 100644
--- a/actors/common0.h
+++ b/actors/common0.h
@@ -167,6 +167,12 @@ extern const Gfx goomba_seg8_dl_0801D360[];
 extern const Gfx goomba_seg8_dl_0801D760[];
 extern const struct Animation *const goomba_seg8_anims_0801DA4C[];
 
+//skipsqueak
+extern const struct Animation *const skipsqueak_anims[];
+
+// cursya
+extern const struct Animation *const cursya_anims[];
+
 // heart
 extern const GeoLayout heart_geo[];
 extern const Gfx heart_seg8_dl_0800DFE0[];
diff --git a/actors/common0.h.rej b/actors/common0.h.rej
new file mode 100644
index 0000000..6997fb8
--- /dev/null
+++ b/actors/common0.h.rej
@@ -0,0 +1,14 @@
+diff a/actors/common0.h b/actors/common0.h	(rejected hunks)
+@@ -167,6 +167,12 @@ extern const Gfx goomba_seg8_dl_0801D360[];
+ extern const Gfx goomba_seg8_dl_0801D760[];
+ extern const struct Animation *const goomba_seg8_anims_0801DA4C[];
+ 
++//skipsqueak
++extern const struct Animation *const skipsqueak_anims[];
++
++// cursya
++extern const struct Animation *const cursya_anims[];
++
+ // heart
+ extern const GeoLayout heart_geo[];
+ extern const Gfx heart_seg8_dl_0800DFE0[];
diff --git a/actors/common1.c b/actors/common1.c
index 702fd21..20f904a 100644
--- a/actors/common1.c
+++ b/actors/common1.c
@@ -64,6 +64,8 @@ UNUSED static const u64 binid_14 = 14;
 UNUSED static const u64 binid_15 = 15;
 
 #include "star/model.inc.c"
+#include "rainbow_star/model.inc.c"
+#include "rainbow_trail/model.inc.c"
 UNUSED static const u64 binid_16 = 16;
 
 #include "sand/model.inc.c"
diff --git a/actors/common1.c.rej b/actors/common1.c.rej
new file mode 100644
index 0000000..5366da5
--- /dev/null
+++ b/actors/common1.c.rej
@@ -0,0 +1,10 @@
+diff a/actors/common1.c b/actors/common1.c	(rejected hunks)
+@@ -64,6 +64,8 @@ UNUSED static const u64 binid_14 = 14;
+ UNUSED static const u64 binid_15 = 15;
+ 
+ #include "star/model.inc.c"
++#include "rainbow_star/model.inc.c"
++#include "rainbow_trail/model.inc.c"
+ UNUSED static const u64 binid_16 = 16;
+ 
+ #include "sand/model.inc.c"
diff --git a/actors/common1.h b/actors/common1.h
index 9a1b650..7372b33 100644
--- a/actors/common1.h
+++ b/actors/common1.h
@@ -205,6 +205,49 @@ extern const Gfx star_seg3_dl_0302B870[];
 extern const Gfx star_seg3_dl_0302B9C0[];
 extern const Gfx star_seg3_dl_0302BA18[];
 
+// rainbow star
+extern const GeoLayout rainbow_star_geo[];
+extern Vtx rainbow_star_000_displaylist_mesh_vtx_0[12];
+extern Gfx rainbow_star_000_displaylist_mesh_tri_0[];
+extern Gfx rainbow_star_000_displaylist_mesh[];
+extern Gfx rainbow_star_material_revert_render_settings[];
+
+//rainbow trail
+extern const GeoLayout red_trail_shadow_geo[];
+extern const GeoLayout red_trail_geo[];
+extern const GeoLayout blue_trail_geo[];
+extern const GeoLayout green_trail_geo[];
+extern const GeoLayout white_trail_geo[];
+extern const GeoLayout yellow_trail_geo[];
+extern const GeoLayout cyan_trail_geo[];
+extern const GeoLayout pink_trail_geo[];
+//red
+extern const Gfx rainbow_trail_seg3_dl_0301B320[];
+extern const Gfx rainbow_trail_seg3_dl_0301B3B0[];
+//blue
+extern const Gfx rainbow_trail_seg3_dl_0301B470[];
+extern const Gfx rainbow_trail_seg3_dl_0301B500[];
+//green
+extern const Gfx rainbow_trail_seg3_dl_0301B5C0[];
+extern const Gfx rainbow_trail_seg3_dl_0301B650[];
+//white
+extern const Gfx rainbow_trail_seg3_dl_white_color[];
+extern const Gfx rainbow_trail_seg3_dl_white_texture[];
+
+// yellow
+extern const Gfx rainbow_trail_seg3_dl_yellow_color[];
+extern const Gfx rainbow_trail_seg3_dl_yellow_texture[];
+
+// cyan
+extern const Gfx rainbow_trail_seg3_dl_cyan_color[];
+extern const Gfx rainbow_trail_seg3_dl_cyan_texture[];
+
+// pink
+extern const Gfx rainbow_trail_seg3_dl_pink_color[];
+extern const Gfx rainbow_trail_seg3_dl_pink_texture[];
+
+
+
 // transparent_star
 extern const GeoLayout transparent_star_geo[];
 extern const Gfx transparent_star_seg3_dl_0302C560[];
@@ -250,4 +293,7 @@ extern const Gfx wooden_signpost_seg3_dl_0302DCD0[];
 extern const Gfx wooden_signpost_seg3_dl_0302DD08[];
 extern const Collision wooden_signpost_seg3_collision_0302DD80[];
 
+
+#include "rainbow_star/geo_header.h"
+
 #endif
diff --git a/actors/common1.h.rej b/actors/common1.h.rej
new file mode 100644
index 0000000..2854520
--- /dev/null
+++ b/actors/common1.h.rej
@@ -0,0 +1,59 @@
+diff a/actors/common1.h b/actors/common1.h	(rejected hunks)
+@@ -205,6 +205,49 @@ extern const Gfx star_seg3_dl_0302B870[];
+ extern const Gfx star_seg3_dl_0302B9C0[];
+ extern const Gfx star_seg3_dl_0302BA18[];
+ 
++// rainbow star
++extern const GeoLayout rainbow_star_geo[];
++extern Vtx rainbow_star_000_displaylist_mesh_vtx_0[12];
++extern Gfx rainbow_star_000_displaylist_mesh_tri_0[];
++extern Gfx rainbow_star_000_displaylist_mesh[];
++extern Gfx rainbow_star_material_revert_render_settings[];
++
++//rainbow trail
++extern const GeoLayout red_trail_shadow_geo[];
++extern const GeoLayout red_trail_geo[];
++extern const GeoLayout blue_trail_geo[];
++extern const GeoLayout green_trail_geo[];
++extern const GeoLayout white_trail_geo[];
++extern const GeoLayout yellow_trail_geo[];
++extern const GeoLayout cyan_trail_geo[];
++extern const GeoLayout pink_trail_geo[];
++//red
++extern const Gfx rainbow_trail_seg3_dl_0301B320[];
++extern const Gfx rainbow_trail_seg3_dl_0301B3B0[];
++//blue
++extern const Gfx rainbow_trail_seg3_dl_0301B470[];
++extern const Gfx rainbow_trail_seg3_dl_0301B500[];
++//green
++extern const Gfx rainbow_trail_seg3_dl_0301B5C0[];
++extern const Gfx rainbow_trail_seg3_dl_0301B650[];
++//white
++extern const Gfx rainbow_trail_seg3_dl_white_color[];
++extern const Gfx rainbow_trail_seg3_dl_white_texture[];
++
++// yellow
++extern const Gfx rainbow_trail_seg3_dl_yellow_color[];
++extern const Gfx rainbow_trail_seg3_dl_yellow_texture[];
++
++// cyan
++extern const Gfx rainbow_trail_seg3_dl_cyan_color[];
++extern const Gfx rainbow_trail_seg3_dl_cyan_texture[];
++
++// pink
++extern const Gfx rainbow_trail_seg3_dl_pink_color[];
++extern const Gfx rainbow_trail_seg3_dl_pink_texture[];
++
++
++
+ // transparent_star
+ extern const GeoLayout transparent_star_geo[];
+ extern const Gfx transparent_star_seg3_dl_0302C560[];
+@@ -250,4 +293,7 @@ extern const Gfx wooden_signpost_seg3_dl_0302DCD0[];
+ extern const Gfx wooden_signpost_seg3_dl_0302DD08[];
+ extern const Collision wooden_signpost_seg3_collision_0302DD80[];
+ 
++
++#include "rainbow_star/geo_header.h"
++
+ #endif
diff --git a/actors/common1_geo.c b/actors/common1_geo.c
index 7f75637..66b6eaa 100644
--- a/actors/common1_geo.c
+++ b/actors/common1_geo.c
@@ -20,6 +20,8 @@
 #include "number/geo.inc.c"
 #include "mushroom_1up/geo.inc.c"
 #include "star/geo.inc.c"
+#include "rainbow_star/geo.inc.c"
+#include "rainbow_trail/geo.inc.c"
 #include "dirt/geo.inc.c"
 #include "transparent_star/geo.inc.c"
 #include "white_particle/geo.inc.c"
diff --git a/actors/common1_geo.c.rej b/actors/common1_geo.c.rej
new file mode 100644
index 0000000..cd11811
--- /dev/null
+++ b/actors/common1_geo.c.rej
@@ -0,0 +1,10 @@
+diff a/actors/common1_geo.c b/actors/common1_geo.c	(rejected hunks)
+@@ -20,6 +20,8 @@
+ #include "number/geo.inc.c"
+ #include "mushroom_1up/geo.inc.c"
+ #include "star/geo.inc.c"
++#include "rainbow_star/geo.inc.c"
++#include "rainbow_trail/geo.inc.c"
+ #include "dirt/geo.inc.c"
+ #include "transparent_star/geo.inc.c"
+ #include "white_particle/geo.inc.c"
diff --git a/actors/cursya/anim_header.h b/actors/cursya/anim_header.h
new file mode 100644
index 0000000..6810b5d
--- /dev/null
+++ b/actors/cursya/anim_header.h
@@ -0,0 +1 @@
+extern const struct Animation *const cursya_anims[];
diff --git a/actors/cursya/anims/anim_cursyaarmatureAction_001.inc.c b/actors/cursya/anims/anim_cursyaarmatureAction_001.inc.c
new file mode 100644
index 0000000..d0df821
--- /dev/null
+++ b/actors/cursya/anims/anim_cursyaarmatureAction_001.inc.c
@@ -0,0 +1,153 @@
+static const s16 cursya_anim_cursyaarmatureAction_001_values[] = {
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0056, 0x00AB, 0x0101, 
+	0x0157, 0x01AC, 0x0202, 0x0258, 0x02AD, 0x0303, 0x0359, 0x03AE, 0x0404, 
+	0x045A, 0x04AF, 0x0505, 0x055A, 0x04C7, 0x0434, 0x03A1, 0x030D, 0x027A, 
+	0x01E6, 0x0152, 0x00BF, 0x002B, 0xFF96, 0xFF03, 0xFE6F, 0xFDDC, 0xFD48, 
+	0xFCB5, 0xFC21, 0xFB8E, 0xFBD5, 0xFC1C, 0xFC63, 0xFCAA, 0xFCF1, 0xFD39, 
+	0xFD80, 0xFDC7, 0xFE0E, 0xFE55, 0xFE9C, 0xFEE3, 0xFF2A, 0xFF71, 0xFFB8, 
+	0x0000, 0x0059, 0x00BC, 0x012B, 0x01A5, 0x022C, 0x02BF, 0x035F, 0x040B, 
+	0x04C1, 0x0581, 0x0647, 0x0711, 0x07DA, 0x089F, 0x095B, 0x0A0A, 0x0AA8, 
+	0x0B31, 0x0BA5, 0x0C00, 0x0C43, 0x0C6F, 0x0C84, 0x0C85, 0x0C74, 0x0C53, 
+	0x0C25, 0x0BED, 0x0BAC, 0x0B64, 0x0B18, 0x0AC9, 0x0A78, 0x09B9, 0x08C4, 
+	0x0793, 0x0624, 0x0480, 0x02C1, 0x010E, 0xFF92, 0xFE77, 0xFDCF, 0xFD95, 
+	0xFDB8, 0xFE1D, 0xFEAD, 0xFF52, 0xFFFF, 0x004D, 0x0099, 0x00E2, 0x0127, 
+	0x0166, 0x019D, 0x01CA, 0x01E9, 0x01FA, 0x01F8, 0x01E2, 0x01B5, 0x0170, 
+	0x0113, 0x009E, 0x0012, 0xFF71, 0xFEC1, 0xFE03, 0xFD3E, 0xFC74, 0xFBAA, 
+	0xFAE4, 0xFA25, 0xF96F, 0xF8C3, 0xF824, 0xF791, 0xF70A, 0xF690, 0xF622, 
+	0xF5C0, 0xF568, 0xF4BE, 0xF41D, 0xF396, 0xF33E, 0xF330, 0xF384, 0xF449, 
+	0xF57A, 0xF6FE, 0xF8AB, 0xFA5A, 0xFBE7, 0xFD41, 0xFE61, 0xFF49, 0x0000, 
+	0x0281, 0x052A, 0x07FD, 0x0AFC, 0x0E2A, 0x1186, 0x1514, 0x18D1, 0x1CBF, 
+	0x20DA, 0x2520, 0x298C, 0x2E19, 0x32C0, 0x377A, 0x3C3E, 0x4105, 0x45C4, 
+	0x4A76, 0x4F12, 0x5392, 0x57F1, 0x5C2B, 0x603D, 0x6424, 0x67DF, 0x6B6E, 
+	0x6ED1, 0x7208, 0x7514, 0x77F7, 0x7AB2, 0x7D47, 0x82D1, 0x8924, 0x9056, 
+	0x9872, 0xA173, 0xAB3A, 0xB58A, 0xC011, 0xCA76, 0xD468, 0xDDAF, 0xE62B, 
+	0xEDCF, 0xF49F, 0xFAA9, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
+	0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
+	0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 
+	0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
+	0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
+	0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
+	0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
+	0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
+	0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
+	0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0029, 0x0058, 0x008B, 
+	0x00C4, 0x0103, 0x0148, 0x0193, 0x01E4, 0x023A, 0x0294, 0x02F1, 0x0350, 
+	0x03AF, 0x040B, 0x0463, 0x04B5, 0x04FE, 0x053D, 0x0571, 0x0599, 0x05B5, 
+	0x05C6, 0x05CD, 0x05C9, 0x05BD, 0x05AA, 0x0592, 0x0574, 0x0553, 0x052F, 
+	0x050A, 0x04E4, 0x04BD, 0x0463, 0x03F1, 0x0366, 0x02C1, 0x0206, 0x0140, 
+	0x007F, 0xFFD4, 0xFF53, 0xFF04, 0xFEE7, 0xFEF4, 0xFF22, 0xFF63, 0xFFAF, 
+	0xFFFF, 0x0024, 0x0048, 0x006A, 0x008B, 0x00A8, 0x00C2, 0x00D7, 0x00E6, 
+	0x00ED, 0x00EC, 0x00E0, 0x00CA, 0x00A9, 0x007C, 0x0043, 0xFFFF, 0xFFB1, 
+	0xFF5D, 0xFF02, 0xFEA3, 0xFE43, 0xFDE3, 0xFD85, 0xFD2B, 0xFCD6, 0xFC86, 
+	0xFC3C, 0xFBF9, 0xFBBB, 0xFB84, 0xFB52, 0xFB26, 0xFAFF, 0xFAB3, 0xFA6D, 
+	0xFA34, 0xFA11, 0xFA0F, 0xFA39, 0xFA94, 0xFB21, 0xFBD2, 0xFC97, 0xFD5E, 
+	0xFE16, 0xFEB7, 0xFF3D, 0xFFAA, 0x7FFF, 0x8289, 0x853B, 0x8817, 0x8B21, 
+	0x8E59, 0x91C1, 0x955A, 0x9925, 0x9D21, 0xA14C, 0xA5A3, 0xAA23, 0xAEC7, 
+	0xB387, 0xB85D, 0xBD40, 0xC227, 0xC708, 0xCBDC, 0xD09A, 0xD53B, 0xD9B9, 
+	0xDE0E, 0xE237, 0xE631, 0xE9FC, 0xED96, 0xF100, 0xF43A, 0xF747, 0xFA27, 
+	0xFCDD, 0xFF6B, 0x04E0, 0x0B0E, 0x1208, 0x19D9, 0x227D, 0x2BDE, 0x35CC, 
+	0x4003, 0x4A33, 0x540E, 0x5D55, 0x65DD, 0x6D95, 0x747A, 0x7A98, 0x0000, 
+	0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
+	0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
+	0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
+	0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 
+	0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
+	0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 
+	0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
+	0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 
+	0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
+	0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
+	0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 
+	0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 
+	0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
+	0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 
+	0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
+	0x0000, 0xFFFF, 0xFFFF, 0xFFDB, 0xFF78, 0xFEE3, 0xFE27, 0xFD52, 0xFC71, 
+	0xFB8F, 0xFABA, 0xF9FF, 0xF969, 0xF906, 0xF8E3, 0xF96E, 0xF9FA, 0xFA86, 
+	0xFB13, 0xFB9F, 0xFC2B, 0xFCB7, 0xFD43, 0xFDCF, 0xFE5B, 0xFEE7, 0xFF73, 
+	0x0000, 0x0098, 0x0121, 0x019C, 0x0208, 0x0266, 0x02B7, 0x02FA, 0x0330, 
+	0x035A, 0x0377, 0x0389, 0x038E, 0x0342, 0x02F7, 0x02AB, 0x025F, 0x0213, 
+	0x01C7, 0x017B, 0x012F, 0x00E4, 0x0098, 0x004C, 0x0000, 0xFFFF, 0xFFFF, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0061, 0x00C2, 
+	0x0123, 0x0184, 0x01E4, 0x0245, 0x02A6, 0x0307, 0x0368, 0x03C9, 0x042A, 
+	0x048B, 0x04EC, 0x054D, 0x05AE, 0x060F, 0x0542, 0x0475, 0x03A8, 0x02DB, 
+	0x020D, 0x013F, 0x0072, 0xFFA3, 0xFED5, 0xFE07, 0xFD39, 0xFC6B, 0xFB9E, 
+	0xFAD0, 0xFA03, 0xF936, 0xF869, 0xF8E3, 0xF95C, 0xF9D5, 0xFA4F, 0xFAC8, 
+	0xFB41, 0xFBBB, 0xFC34, 0xFCAE, 0xFD27, 0xFDA1, 0xFE1A, 0xFE93, 0xFF0D, 
+	0xFF86, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFEC, 0xFFB5, 0xFF60, 
+	0xFEF1, 0xFE6F, 0xFDDD, 0xFD41, 0xFCA0, 0xFBFF, 0xFB63, 0xFAD1, 0xFA4F, 
+	0xF9E0, 0xF98B, 0xF954, 0xF941, 0xFA17, 0xFAED, 0xFBC3, 0xFC9A, 0xFD71, 
+	0xFE48, 0xFF1F, 0xFFF6, 0x00CF, 0x01A6, 0x027D, 0x0354, 0x042B, 0x0502, 
+	0x05D8, 0x06AF, 0x0784, 0x070C, 0x0694, 0x061C, 0x05A4, 0x052B, 0x04B3, 
+	0x043B, 0x03C2, 0x034A, 0x02D2, 0x0259, 0x01E1, 0x0169, 0x00F0, 0x0078, 
+	0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
+	0x0000, 0x0000, 0x0048, 0x0090, 0x00D8, 0x0120, 0x0169, 0x01B1, 0x01F9, 
+	0x0241, 0x0289, 0x02D1, 0x0319, 0x0361, 0x03AA, 0x03F2, 0x043A, 0x0482, 
+	0x048F, 0x049D, 0x04AB, 0x04B8, 0x04C6, 0x04D4, 0x04E1, 0x04EF, 0x04FD, 
+	0x050A, 0x0518, 0x0525, 0x0533, 0x0541, 0x054E, 0x055C, 0x056A, 0x0513, 
+	0x04BC, 0x0466, 0x040F, 0x03B9, 0x0362, 0x030B, 0x02B5, 0x025E, 0x0208, 
+	0x01B1, 0x015A, 0x0104, 0x00AD, 0x0057, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFF56, 0xFEAD, 
+	0xFE03, 0xFD5A, 0xFCB0, 0xFC06, 0xFB5D, 0xFAB3, 0xFA09, 0xF960, 0xF8B6, 
+	0xF80C, 0xF763, 0xF6B9, 0xF610, 0xF567, 0xF609, 0xF6AB, 0xF74D, 0xF7EF, 
+	0xF892, 0xF934, 0xF9D7, 0xFA79, 0xFB1C, 0xFBBE, 0xFC61, 0xFD03, 0xFDA6, 
+	0xFE48, 0xFEEA, 0xFF8C, 0x002F, 0x002C, 0x0029, 0x0026, 0x0023, 0x0020, 
+	0x001D, 0x001A, 0x0018, 0x0015, 0x0012, 0x000F, 0x000C, 0x0009, 0x0006, 
+	0x0003, 
+};
+
+static const u16 cursya_anim_cursyaarmatureAction_001_indices[] = {
+	0x0001, 0x0000, 0x0001, 0x0001, 0x0001, 0x0002, 0x0001, 0x0003, 0x0001, 
+	0x0004, 0x0031, 0x0005, 0x0031, 0x0036, 0x0031, 0x0067, 0x0031, 0x0098, 
+	0x0030, 0x00C9, 0x0031, 0x00F9, 0x0031, 0x012A, 0x0031, 0x015B, 0x0031, 
+	0x018C, 0x0031, 0x01BD, 0x0031, 0x01EE, 0x0030, 0x021F, 0x002F, 0x024F, 
+	0x0025, 0x027E, 0x0026, 0x02A3, 0x0031, 0x02C9, 0x001A, 0x02FA, 0x0001, 
+	0x0314, 0x0031, 0x0315, 0x0031, 0x0346, 0x0012, 0x0377, 0x0031, 0x0389, 
+	0x0012, 0x03BA, 0x0001, 0x03CC, 0x0031, 0x03CD, 0x0022, 0x03FE, 0x001E, 
+	0x0420, 0x0031, 0x043E, 
+};
+
+static const struct Animation cursya_anim_cursyaarmatureAction_001 = {
+	0,
+	0,
+	0,
+	0,
+	48,
+	ANIMINDEX_NUMPARTS(cursya_anim_cursyaarmatureAction_001_indices),
+	cursya_anim_cursyaarmatureAction_001_values,
+	cursya_anim_cursyaarmatureAction_001_indices,
+	0,
+};
+
diff --git a/actors/cursya/anims/data.inc.c b/actors/cursya/anims/data.inc.c
new file mode 100644
index 0000000..1a7c398
--- /dev/null
+++ b/actors/cursya/anims/data.inc.c
@@ -0,0 +1,2 @@
+
+#include "anim_cursyaarmatureAction_001.inc.c"
diff --git a/actors/cursya/anims/table.inc.c b/actors/cursya/anims/table.inc.c
new file mode 100644
index 0000000..d207524
--- /dev/null
+++ b/actors/cursya/anims/table.inc.c
@@ -0,0 +1,6 @@
+const struct Animation *const cursya_anims[] = {
+
+	&cursya_anim_cursyaarmatureAction_001,
+
+	NULL,
+};
diff --git a/actors/cursya/cursya_eyeball.rgba16.png b/actors/cursya/cursya_eyeball.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..27b32c029eed25f4701ee5b43f129eaf72c6ffd9
GIT binary patch
literal 1197
zcmV;e1XBBnP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XU
z000XU0RWnu7ytkSUr9tkR9FecRv~oTFc4Mt24rS48wMt<gN1`FTVY|xQW&<tj%Bd0
zuym}2Wh)#^Va8JCFq?V*pLDVuJ4v^<_omj7bkg1b_fJYZYMLMBf3|mj1OEJU*TApy
zc-tR`8@*M5<;}dgxI8m?J~2r$29S-w5@RY(H>RrBX1#tf(+_8(Xv5y&Q34MS-<s3Y
zPbSL>1X0kPUciX~BB7OL_455Fk%I(QtH)+MK5=0af@XNwD*??sp!Nn;y)sFb?Nwv%
z8Q83!n{hF50f)eub;!Jj8w`n^Vx02447Nc6>(x_ZEwiPl%$Cw>*0i$4a&xZA#69h7
z+&fI7M_~2yv9SrjB@R9Whm%8X-@3O4wQNs`4uSjouT5g%Bz{9dqkw^r?qjdxu-FdT
zL^>oo1WqO=-oZ+!U6Dhyu;4)x+z_h9$E0CfXHa>ks=FQtFne*31J`klCbb*KhfhGG
zEeV0TAkivF)}}1iL4`n|C|V~KGREl!(V6blx$lEQp773cmQ8{s5U{o-(08Lnt=cn2
zJPtAU42IJY0=LUWW9m3qeLQr+fbgjX0#|V?Y@;GU74oa`b^R=5c+crzBOxlx_#I~&
z34op?s#iQvPtT5kbKR2=UnS{n&KsY`bO<o-L;}Fe<5V6;z{Dti_=rhhsu;RV;30Ly
zuT@wGR4~>6=2t*v8MuwcsgO`c0zh_bKBJC8Zbd$W-R~1416IIti*g3)t%Ixy%)L~B
zz3;?Nlp(Pa4;&O+7X9XqjSFg*O@3Yh1qqjo<4Yidu;zGVEK&driBbWEaq^%<QtMVB
zF1dQSQI}Y3V-)yFB1qLAdMN?PY+;c4TgX!r8T$$DNk}LVs}MkbpyU=Pz_GpsCouoE
zwNoIx58T}@nmo_&;*lcR%-GZlkY&cGmwY*c0C`ajsi2;G!4C!BVdK>TaRq1cMKO_g
zgm4Qs8yvz^ZvoiV{uj|zA}FDX@L=j$4bVCuCdX9V6%g@|x6i(=Jt=Gn1lF6a$qHnM
zz*&NOt(zhsR~8y5Db+xaDT?N7ZQMZ4ohvRYfq0WKp#<1s7W3<7JV{NSX82(v8I}X`
zi{t=-<b+~L905+y$eNveI(lvhg7WYCsuV@0)Aoh6Lx4_v`z@eE8k68@AczpbCM80h
z6%_*=0?s!Dc2|!o?7l6B5~#~7&Vp+^r5*r3p$^Gqt|gE<`|Y?NT5WL`GY=kTUj8kv
z8{ZJ))>D9s^VxNiLxl`wNONYN%KfJblBM1XZgvKax(%Rga_MlM>T+v7p3i!3$Abju
zND`@%0AQNCYZ>HMGO7}tv;o`Y&Vz^ZSiYL`i!VKJZr@9Qi&s~labMF0UkRdyO{oTx
z1{n@m5t*@fP4ng#7Hjfry&28sOI_~u2MOrz8Pwpxq}uLw5Z05SF=`~h-<EAznc4hi
zFzaahVFlui9A92Sk<>P+Tu~TAgqA@Gy%&q+QP4Q<n-qv0{`L4b*-o>~#>oCn00000
LNkvXXu0mjfC4C>i

literal 0
HcmV?d00001

diff --git a/actors/cursya/cursya_iris.rgba16.png b/actors/cursya/cursya_iris.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..b259db9e80eeeaade72889ee938e98039aed9d13
GIT binary patch
literal 1054
zcmV+(1mXLMP)<h;3K|Lk000e1NJLTq001BW001Bm1^@s6BkHEN00009a7bBm000XU
z000XU0RWnu7ytkR&`Cr=RA>e5*jbMpMGyqwTw^Z71BYZJV<Xx8|3768iNk<7Y=gmV
zDM#P56hqQI?CcZ7OH5{EWmQCXb@y)7e;ijgt^d=;vgA5fjm%apjWz#O<Lbutd9lX#
z8p}dh@+#@@%XsF~0ORubQpQ}{09TlxEhb2vm@qMxpZLqhzrRDyHej#dTMaU*GG0gi
z`4{1@8tV~}$HvdSGj<!0!U=LEGnSv2Y~$}Vs@`o>-EOF=dfBM@tx@%?QT11&iUADS
zduMDKuvd5*kTIe7%|_J+jg>!aRK3?&uQ=g9G^(C7s=jYj{n0qzh})~jfB(ydQ_vfY
zsvK8`jbm4q&<BmG!$Y*{lg4U*UH#gq`leC!MPpt6yT+*z=1)8tkXN376qZJar@9pW
zuu=7>QFXUb^?qaBHUmCxRK3+$4R8b);mF)?EX#BxP7Ih{X9OiPCWUA0j1xx4XN{`Q
z8&!82t8l*@3G)ej+Nk=rQT20UeKvR|Oh(+Y048XQ8IeN8$!|BR+ySn%m_YlOSe<!}
z%twtX>)5}2inH&@9iR|r195T+7OT@QH{e#5&pKDoI3`qV-o)yXk9WXy=1rIy%M+Sx
zT%Tl5@63y*`8iMB7CQ?19}SSe8WAK;HlD0bzdsvQ&a8*kPmT5cu0B~m@BbegRr-iM
z8`LLf-;*Pd1>$Tp#f&fyGvGy|ig2$puSd@Y4?FX{1w8D`^IgE0G{Agp-{PYI29g!x
z9M4!?va|e4qw4F%TJ?LQ%9YHw0fD{)4xhYL*wf!SYv;o+`^@~&fE>7~*!wz-aE0B{
zlL77=Mu~kApS$nTfXT_si}BtK*sy1UD@>Rpp<f=M=Z(|%z53*7e@6op;H?H(C&tq)
zH}&;Y$5|(K2Vv_O7h`#x`SC3<P0#@6M#Sb{n)SDSa;|4Q^Wvic`FFI5d)da4Ep%OW
zWU{|_?>_Tyg5wde!L3FXbc=7XzSHZ`_{4jK+ZUd6<T_^?kc};vjm24?hN;8q^-X37
z&T;c6whkWuA>xzKm76%f`PF4Ug^O(j=f+duBwXDze)w=Y{omnefDIk~VX-WP?PUV9
zUSH#4JQ*NQ=w5!@I2CTalOtdNTSz>y4PwH@`VfxwQ<t&4`FP43$NEjYc?X#2NZ2@m
zSRPM#<N78OCNCyvD^{0Jd;OAk8(?A@LC}_9by&Y-0_DZYgvyKe3fKQ^15Cte$d(c2
zZ82e6JU!gD`WwHt0UD(d@~$|}yqHiimQOzSO6!+=F$1!(m@(osLLL(;zLZe?{^xMu
YHFt?YIN$&x(f|Me07*qoM6N<$g0ABP+W-In

literal 0
HcmV?d00001

diff --git a/actors/cursya/cursya_sphere_left.rgba16.png b/actors/cursya/cursya_sphere_left.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..a5104dc23678fb27d2f69a00fb5008b765930716
GIT binary patch
literal 2075
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
FV1kxh=e7U<

literal 0
HcmV?d00001

diff --git a/actors/cursya/cursya_sphere_right.rgba16.png b/actors/cursya/cursya_sphere_right.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..ffd08727119be5256a410c55ae011e99a10180f0
GIT binary patch
literal 2460
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
af!_d1AH6p}=p0`F0000<MNUMnLSTaTB%<X2

literal 0
HcmV?d00001

diff --git a/actors/cursya/geo.inc.c b/actors/cursya/geo.inc.c
new file mode 100644
index 0000000..6ab80b8
--- /dev/null
+++ b/actors/cursya/geo.inc.c
@@ -0,0 +1,56 @@
+#include "src/game/envfx_snow.h"
+
+const GeoLayout cursya_geo[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_SHADOW(0, 153, 100),
+		GEO_OPEN_NODE(),
+			GEO_SCALE(LAYER_FORCE, 65536),
+			GEO_OPEN_NODE(),
+				GEO_ANIMATED_PART(LAYER_OPAQUE, 0, -12, 0, NULL),
+				GEO_OPEN_NODE(),
+					GEO_ANIMATED_PART(LAYER_ALPHA, 17, 138, 12, cursya_eye_l_mesh),
+					GEO_OPEN_NODE(),
+						GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 3, 5),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, -2, 4, cursya_eye_l_002_mesh),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+					GEO_ANIMATED_PART(LAYER_ALPHA, -17, 138, 12, cursya_eye_r_mesh),
+					GEO_OPEN_NODE(),
+						GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 3, 5),
+						GEO_OPEN_NODE(),
+							GEO_TRANSLATE_ROTATE(LAYER_OPAQUE, 0, -2, 4, 0, 0, 0),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, cursya_eye_r_002_mesh),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+					GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 94, 0, cursya_wings_mesh),
+				GEO_CLOSE_NODE(),
+				GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 0, 1),
+				GEO_OPEN_NODE(),
+					GEO_SWITCH_CASE(3, geo_switch_anim_state),
+					GEO_OPEN_NODE(),
+						GEO_NODE_START(),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 24, 0, cursya_seg0_mesh),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 52, 0, cursya_seg1_mesh),
+								GEO_OPEN_NODE(),
+									GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 53, 0, cursya_seg2_mesh),
+									GEO_OPEN_NODE(),
+										GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 35, 0, cursya_seg3_mesh),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+			GEO_CLOSE_NODE(),
+		GEO_CLOSE_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, cursya_material_revert_render_settings),
+		GEO_DISPLAY_LIST(LAYER_ALPHA, cursya_material_revert_render_settings),
+	GEO_CLOSE_NODE(),
+	GEO_END(),
+};
diff --git a/actors/cursya/geo_header.h b/actors/cursya/geo_header.h
new file mode 100644
index 0000000..129a501
--- /dev/null
+++ b/actors/cursya/geo_header.h
@@ -0,0 +1,39 @@
+extern const GeoLayout cursya_geo[];
+extern Vtx cursya_eye_l_mesh_vtx_0[4];
+extern Gfx cursya_eye_l_mesh_tri_0[];
+extern Vtx cursya_eye_l_002_mesh_vtx_0[4];
+extern Gfx cursya_eye_l_002_mesh_tri_0[];
+extern Vtx cursya_eye_r_mesh_vtx_0[4];
+extern Gfx cursya_eye_r_mesh_tri_0[];
+extern Vtx cursya_eye_r_002_mesh_vtx_0[4];
+extern Gfx cursya_eye_r_002_mesh_tri_0[];
+extern Vtx cursya_wings_mesh_vtx_0[36];
+extern Gfx cursya_wings_mesh_tri_0[];
+extern Vtx cursya_seg0_mesh_vtx_0[4];
+extern Gfx cursya_seg0_mesh_tri_0[];
+extern Vtx cursya_seg0_mesh_vtx_1[4];
+extern Gfx cursya_seg0_mesh_tri_1[];
+extern Vtx cursya_seg1_mesh_vtx_0[5];
+extern Gfx cursya_seg1_mesh_tri_0[];
+extern Vtx cursya_seg1_mesh_vtx_1[5];
+extern Gfx cursya_seg1_mesh_tri_1[];
+extern Vtx cursya_seg2_mesh_vtx_0[5];
+extern Gfx cursya_seg2_mesh_tri_0[];
+extern Vtx cursya_seg2_mesh_vtx_1[5];
+extern Gfx cursya_seg2_mesh_tri_1[];
+extern Vtx cursya_seg3_mesh_vtx_0[5];
+extern Gfx cursya_seg3_mesh_tri_0[];
+extern Vtx cursya_seg3_mesh_vtx_1[5];
+extern Gfx cursya_seg3_mesh_tri_1[];
+
+extern Gfx cursya_eye_l_mesh[];
+extern Gfx cursya_eye_l_002_mesh[];
+extern Gfx cursya_eye_r_mesh[];
+extern Gfx cursya_eye_r_002_mesh[];
+extern Gfx cursya_wings_mesh[];
+extern Gfx cursya_seg0_mesh[];
+extern Gfx cursya_seg1_mesh[];
+extern Gfx cursya_seg2_mesh[];
+extern Gfx cursya_seg3_mesh[];
+extern Gfx cursya_material_revert_render_settings[];
+
diff --git a/actors/cursya/model.inc.c b/actors/cursya/model.inc.c
new file mode 100644
index 0000000..7b0d07f
--- /dev/null
+++ b/actors/cursya/model.inc.c
@@ -0,0 +1,509 @@
+Lights1 cursya_pupil_layer4_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_eyeball_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_curseyawings_lights = gdSPDefLights1(
+	0x23, 0x0, 0x7F,
+	0x47, 0x0, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_sphere_left_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_sphere_right_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Gfx cursya_cursya_iris_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_cursya_iris_rgba16[] = {
+	#include "actors/cursya/cursya_iris.rgba16.inc.c"
+};
+
+Gfx cursya_cursya_eyeball_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_cursya_eyeball_rgba16[] = {
+	#include "actors/cursya/cursya_eyeball.rgba16.inc.c"
+};
+
+Gfx cursya_cursya_sphere_left_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_cursya_sphere_left_rgba16[] = {
+	#include "actors/cursya/cursya_sphere_left.rgba16.inc.c"
+};
+
+Gfx cursya_cursya_sphere_right_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_cursya_sphere_right_rgba16[] = {
+	#include "actors/cursya/cursya_sphere_right.rgba16.inc.c"
+};
+
+Vtx cursya_eye_l_mesh_vtx_0[4] = {
+	{{{7, -6, 24},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{7, 7, 24},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, 7, 24},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, -6, 24},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_eye_l_mesh_tri_0[] = {
+	gsSPVertex(cursya_eye_l_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_eye_l_002_mesh_vtx_0[4] = {
+	{{{16, -16, 1},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{16, 15, 1},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, 15, 1},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, -16, 1},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_eye_l_002_mesh_tri_0[] = {
+	gsSPVertex(cursya_eye_l_002_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_eye_r_mesh_vtx_0[4] = {
+	{{{7, -6, 24},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{7, 7, 24},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, 7, 24},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, -6, 24},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_eye_r_mesh_tri_0[] = {
+	gsSPVertex(cursya_eye_r_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_eye_r_002_mesh_vtx_0[4] = {
+	{{{16, -16, 1},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{16, 15, 1},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, 15, 1},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, -16, 1},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_eye_r_002_mesh_tri_0[] = {
+	gsSPVertex(cursya_eye_r_002_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_wings_mesh_vtx_0[36] = {
+	{{{62, -13, -15},0, {-16, 1008},{0xC7, 0xBA, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0x9E, 0x51, 0x0, 0xFF}}},
+	{{{70, -1, -15},0, {-16, 1008},{0x39, 0x46, 0xA7, 0xFF}}},
+	{{{62, -13, -2},0, {-16, 1008},{0xC7, 0xBA, 0x59, 0xFF}}},
+	{{{94, -31, -8},0, {-16, 1008},{0x62, 0xAF, 0x0, 0xFF}}},
+	{{{70, -1, -2},0, {-16, 1008},{0x39, 0x46, 0x59, 0xFF}}},
+	{{{76, 10, -15},0, {-16, 1008},{0x2, 0xA6, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0x81, 0xFF, 0x0, 0xFF}}},
+	{{{73, 24, -15},0, {-16, 1008},{0xFE, 0x5A, 0xA7, 0xFF}}},
+	{{{76, 10, -2},0, {-16, 1008},{0x2, 0xA6, 0x59, 0xFF}}},
+	{{{112, 17, -8},0, {-16, 1008},{0x7F, 0x1, 0x0, 0xFF}}},
+	{{{73, 24, -2},0, {-16, 1008},{0xFE, 0x5A, 0x59, 0xFF}}},
+	{{{71, 36, -15},0, {-16, 1008},{0x3C, 0xBC, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0xA0, 0xAD, 0x0, 0xFF}}},
+	{{{60, 45, -15},0, {-16, 1008},{0xC4, 0x44, 0xA7, 0xFF}}},
+	{{{71, 36, -2},0, {-16, 1008},{0x3C, 0xBC, 0x59, 0xFF}}},
+	{{{94, 65, -8},0, {-16, 1008},{0x60, 0x53, 0x0, 0xFF}}},
+	{{{60, 45, -2},0, {-16, 1008},{0xC4, 0x44, 0x59, 0xFF}}},
+	{{{-62, -13, -15},0, {-16, 1008},{0x39, 0xBA, 0xA7, 0xFF}}},
+	{{{-70, -1, -15},0, {-16, 1008},{0xC7, 0x46, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x62, 0x51, 0x0, 0xFF}}},
+	{{{-94, -31, -8},0, {-16, 1008},{0x9E, 0xAF, 0x0, 0xFF}}},
+	{{{-62, -13, -2},0, {-16, 1008},{0x39, 0xBA, 0x59, 0xFF}}},
+	{{{-70, -1, -2},0, {-16, 1008},{0xC7, 0x46, 0x59, 0xFF}}},
+	{{{-76, 10, -15},0, {-16, 1008},{0xFE, 0xA6, 0xA7, 0xFF}}},
+	{{{-73, 24, -15},0, {-16, 1008},{0x2, 0x5A, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x7F, 0xFF, 0x0, 0xFF}}},
+	{{{-112, 17, -8},0, {-16, 1008},{0x81, 0x1, 0x0, 0xFF}}},
+	{{{-76, 10, -2},0, {-16, 1008},{0xFE, 0xA6, 0x59, 0xFF}}},
+	{{{-73, 24, -2},0, {-16, 1008},{0x2, 0x5A, 0x59, 0xFF}}},
+	{{{-71, 36, -15},0, {-16, 1008},{0xC4, 0xBC, 0xA7, 0xFF}}},
+	{{{-60, 45, -15},0, {-16, 1008},{0x3C, 0x44, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x60, 0xAD, 0x0, 0xFF}}},
+	{{{-94, 65, -8},0, {-16, 1008},{0xA0, 0x53, 0x0, 0xFF}}},
+	{{{-71, 36, -2},0, {-16, 1008},{0xC4, 0xBC, 0x59, 0xFF}}},
+	{{{-60, 45, -2},0, {-16, 1008},{0x3C, 0x44, 0x59, 0xFF}}},
+};
+
+Gfx cursya_wings_mesh_tri_0[] = {
+	gsSPVertex(cursya_wings_mesh_vtx_0 + 0, 30, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(0, 4, 3, 0, 4, 0, 2, 0),
+	gsSP2Triangles(4, 2, 5, 0, 2, 1, 5, 0),
+	gsSP2Triangles(3, 5, 1, 0, 5, 3, 4, 0),
+	gsSP2Triangles(6, 7, 8, 0, 9, 7, 6, 0),
+	gsSP2Triangles(6, 10, 9, 0, 10, 6, 8, 0),
+	gsSP2Triangles(10, 8, 11, 0, 8, 7, 11, 0),
+	gsSP2Triangles(9, 11, 7, 0, 11, 9, 10, 0),
+	gsSP2Triangles(12, 13, 14, 0, 15, 13, 12, 0),
+	gsSP2Triangles(12, 16, 15, 0, 16, 12, 14, 0),
+	gsSP2Triangles(16, 14, 17, 0, 14, 13, 17, 0),
+	gsSP2Triangles(15, 17, 13, 0, 17, 15, 16, 0),
+	gsSP2Triangles(18, 19, 20, 0, 21, 19, 18, 0),
+	gsSP2Triangles(18, 22, 21, 0, 22, 18, 20, 0),
+	gsSP2Triangles(22, 20, 23, 0, 19, 23, 20, 0),
+	gsSP2Triangles(21, 23, 19, 0, 23, 21, 22, 0),
+	gsSP2Triangles(24, 25, 26, 0, 27, 25, 24, 0),
+	gsSP2Triangles(24, 28, 27, 0, 28, 24, 26, 0),
+	gsSP2Triangles(28, 26, 29, 0, 25, 29, 26, 0),
+	gsSP2Triangles(27, 29, 25, 0, 29, 27, 28, 0),
+	gsSPVertex(cursya_wings_mesh_vtx_0 + 30, 6, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(0, 4, 3, 0, 4, 0, 2, 0),
+	gsSP2Triangles(4, 2, 5, 0, 1, 5, 2, 0),
+	gsSP2Triangles(3, 5, 1, 0, 5, 3, 4, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_seg0_mesh_vtx_0[4] = {
+	{{{0, -32, 7},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-48, 49, 7},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-48, -32, 7},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 49, 7},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_seg0_mesh_tri_0[] = {
+	gsSPVertex(cursya_seg0_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_seg0_mesh_vtx_1[4] = {
+	{{{48, -32, 7},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{48, 49, 7},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 49, 7},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -32, 7},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_seg0_mesh_tri_1[] = {
+	gsSPVertex(cursya_seg0_mesh_vtx_1 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_seg1_mesh_vtx_0[5] = {
+	{{{-39, 8, 9},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-39, -21, 9},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -21, 9},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-39, 36, 9},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 36, 9},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_seg1_mesh_tri_0[] = {
+	gsSPVertex(cursya_seg1_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_seg1_mesh_vtx_1[5] = {
+	{{{0, 36, 9},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -21, 9},0, {-14, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, -21, 9},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, 8, 9},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, 36, 9},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_seg1_mesh_tri_1[] = {
+	gsSPVertex(cursya_seg1_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(3, 4, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_seg2_mesh_vtx_0[5] = {
+	{{{-36, -3, 11},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-36, -23, 11},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -23, 11},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-36, 17, 11},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 17, 11},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_seg2_mesh_tri_0[] = {
+	gsSPVertex(cursya_seg2_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_seg2_mesh_vtx_1[5] = {
+	{{{0, 17, 11},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -23, 11},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, -23, 11},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, -3, 11},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, 17, 11},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_seg2_mesh_tri_1[] = {
+	gsSPVertex(cursya_seg2_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(3, 4, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_seg3_mesh_vtx_0[5] = {
+	{{{-34, -26, 12},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -26, 12},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 7, 12},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-34, -6, 12},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-34, 7, 12},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_seg3_mesh_tri_0[] = {
+	gsSPVertex(cursya_seg3_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_seg3_mesh_vtx_1[5] = {
+	{{{34, -26, 12},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{34, -6, 12},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{34, 7, 12},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -26, 12},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 7, 12},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_seg3_mesh_tri_1[] = {
+	gsSPVertex(cursya_seg3_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_pupil_layer4[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_cursya_iris_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(cursya_pupil_layer4_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_pupil_layer4[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_TEX_EDGE, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_eyeball_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_cursya_eyeball_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(cursya_eyeball_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_eyeball_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_curseyawings[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsSPSetLights1(cursya_curseyawings_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_sphere_left_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_cursya_sphere_left_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 252),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPSetLights1(cursya_sphere_left_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_sphere_left_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_sphere_right_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_cursya_sphere_right_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 252),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPSetLights1(cursya_sphere_right_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_sphere_right_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx cursya_eye_l_mesh[] = {
+	gsSPDisplayList(mat_cursya_pupil_layer4),
+	gsSPDisplayList(cursya_eye_l_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_pupil_layer4),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_eye_l_002_mesh[] = {
+	gsSPDisplayList(mat_cursya_eyeball_layer1),
+	gsSPDisplayList(cursya_eye_l_002_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_eyeball_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_eye_r_mesh[] = {
+	gsSPDisplayList(mat_cursya_pupil_layer4),
+	gsSPDisplayList(cursya_eye_r_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_pupil_layer4),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_eye_r_002_mesh[] = {
+	gsSPDisplayList(mat_cursya_eyeball_layer1),
+	gsSPDisplayList(cursya_eye_r_002_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_eyeball_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_wings_mesh[] = {
+	gsSPDisplayList(mat_cursya_curseyawings),
+	gsSPDisplayList(cursya_wings_mesh_tri_0),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_seg0_mesh[] = {
+	gsSPDisplayList(mat_cursya_sphere_left_layer1),
+	gsSPDisplayList(cursya_seg0_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_sphere_left_layer1),
+	gsSPDisplayList(mat_cursya_sphere_right_layer1),
+	gsSPDisplayList(cursya_seg0_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_sphere_right_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_seg1_mesh[] = {
+	gsSPDisplayList(mat_cursya_sphere_left_layer1),
+	gsSPDisplayList(cursya_seg1_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_sphere_left_layer1),
+	gsSPDisplayList(mat_cursya_sphere_right_layer1),
+	gsSPDisplayList(cursya_seg1_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_sphere_right_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_seg2_mesh[] = {
+	gsSPDisplayList(mat_cursya_sphere_left_layer1),
+	gsSPDisplayList(cursya_seg2_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_sphere_left_layer1),
+	gsSPDisplayList(mat_cursya_sphere_right_layer1),
+	gsSPDisplayList(cursya_seg2_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_sphere_right_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_seg3_mesh[] = {
+	gsSPDisplayList(mat_cursya_sphere_left_layer1),
+	gsSPDisplayList(cursya_seg3_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_sphere_left_layer1),
+	gsSPDisplayList(mat_cursya_sphere_right_layer1),
+	gsSPDisplayList(cursya_seg3_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_sphere_right_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_material_revert_render_settings[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPClearGeometryMode(G_TEXTURE_GEN),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 0),
+	gsDPSetEnvColor(255, 255, 255, 255),
+	gsDPSetAlphaCompare(G_AC_NONE),
+	gsSPEndDisplayList(),
+};
diff --git a/actors/cursya/texscroll.inc.c b/actors/cursya/texscroll.inc.c
new file mode 100644
index 0000000..63ce322
--- /dev/null
+++ b/actors/cursya/texscroll.inc.c
@@ -0,0 +1,3 @@
+void scroll_actor_geo_cursya() {
+	
+}
diff --git a/actors/cursya/texscroll.inc.h b/actors/cursya/texscroll.inc.h
new file mode 100644
index 0000000..32c5cb9
--- /dev/null
+++ b/actors/cursya/texscroll.inc.h
@@ -0,0 +1,3 @@
+
+extern void scroll_actor_geo_cursya();
+
diff --git a/actors/cursya_blue/cursya_eyeball.rgba16.png b/actors/cursya_blue/cursya_eyeball.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..27b32c029eed25f4701ee5b43f129eaf72c6ffd9
GIT binary patch
literal 1197
zcmV;e1XBBnP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XU
z000XU0RWnu7ytkSUr9tkR9FecRv~oTFc4Mt24rS48wMt<gN1`FTVY|xQW&<tj%Bd0
zuym}2Wh)#^Va8JCFq?V*pLDVuJ4v^<_omj7bkg1b_fJYZYMLMBf3|mj1OEJU*TApy
zc-tR`8@*M5<;}dgxI8m?J~2r$29S-w5@RY(H>RrBX1#tf(+_8(Xv5y&Q34MS-<s3Y
zPbSL>1X0kPUciX~BB7OL_455Fk%I(QtH)+MK5=0af@XNwD*??sp!Nn;y)sFb?Nwv%
z8Q83!n{hF50f)eub;!Jj8w`n^Vx02447Nc6>(x_ZEwiPl%$Cw>*0i$4a&xZA#69h7
z+&fI7M_~2yv9SrjB@R9Whm%8X-@3O4wQNs`4uSjouT5g%Bz{9dqkw^r?qjdxu-FdT
zL^>oo1WqO=-oZ+!U6Dhyu;4)x+z_h9$E0CfXHa>ks=FQtFne*31J`klCbb*KhfhGG
zEeV0TAkivF)}}1iL4`n|C|V~KGREl!(V6blx$lEQp773cmQ8{s5U{o-(08Lnt=cn2
zJPtAU42IJY0=LUWW9m3qeLQr+fbgjX0#|V?Y@;GU74oa`b^R=5c+crzBOxlx_#I~&
z34op?s#iQvPtT5kbKR2=UnS{n&KsY`bO<o-L;}Fe<5V6;z{Dti_=rhhsu;RV;30Ly
zuT@wGR4~>6=2t*v8MuwcsgO`c0zh_bKBJC8Zbd$W-R~1416IIti*g3)t%Ixy%)L~B
zz3;?Nlp(Pa4;&O+7X9XqjSFg*O@3Yh1qqjo<4Yidu;zGVEK&driBbWEaq^%<QtMVB
zF1dQSQI}Y3V-)yFB1qLAdMN?PY+;c4TgX!r8T$$DNk}LVs}MkbpyU=Pz_GpsCouoE
zwNoIx58T}@nmo_&;*lcR%-GZlkY&cGmwY*c0C`ajsi2;G!4C!BVdK>TaRq1cMKO_g
zgm4Qs8yvz^ZvoiV{uj|zA}FDX@L=j$4bVCuCdX9V6%g@|x6i(=Jt=Gn1lF6a$qHnM
zz*&NOt(zhsR~8y5Db+xaDT?N7ZQMZ4ohvRYfq0WKp#<1s7W3<7JV{NSX82(v8I}X`
zi{t=-<b+~L905+y$eNveI(lvhg7WYCsuV@0)Aoh6Lx4_v`z@eE8k68@AczpbCM80h
z6%_*=0?s!Dc2|!o?7l6B5~#~7&Vp+^r5*r3p$^Gqt|gE<`|Y?NT5WL`GY=kTUj8kv
z8{ZJ))>D9s^VxNiLxl`wNONYN%KfJblBM1XZgvKax(%Rga_MlM>T+v7p3i!3$Abju
zND`@%0AQNCYZ>HMGO7}tv;o`Y&Vz^ZSiYL`i!VKJZr@9Qi&s~labMF0UkRdyO{oTx
z1{n@m5t*@fP4ng#7Hjfry&28sOI_~u2MOrz8Pwpxq}uLw5Z05SF=`~h-<EAznc4hi
zFzaahVFlui9A92Sk<>P+Tu~TAgqA@Gy%&q+QP4Q<n-qv0{`L4b*-o>~#>oCn00000
LNkvXXu0mjfC4C>i

literal 0
HcmV?d00001

diff --git a/actors/cursya_blue/cursya_iris.rgba16.png b/actors/cursya_blue/cursya_iris.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..b259db9e80eeeaade72889ee938e98039aed9d13
GIT binary patch
literal 1054
zcmV+(1mXLMP)<h;3K|Lk000e1NJLTq001BW001Bm1^@s6BkHEN00009a7bBm000XU
z000XU0RWnu7ytkR&`Cr=RA>e5*jbMpMGyqwTw^Z71BYZJV<Xx8|3768iNk<7Y=gmV
zDM#P56hqQI?CcZ7OH5{EWmQCXb@y)7e;ijgt^d=;vgA5fjm%apjWz#O<Lbutd9lX#
z8p}dh@+#@@%XsF~0ORubQpQ}{09TlxEhb2vm@qMxpZLqhzrRDyHej#dTMaU*GG0gi
z`4{1@8tV~}$HvdSGj<!0!U=LEGnSv2Y~$}Vs@`o>-EOF=dfBM@tx@%?QT11&iUADS
zduMDKuvd5*kTIe7%|_J+jg>!aRK3?&uQ=g9G^(C7s=jYj{n0qzh})~jfB(ydQ_vfY
zsvK8`jbm4q&<BmG!$Y*{lg4U*UH#gq`leC!MPpt6yT+*z=1)8tkXN376qZJar@9pW
zuu=7>QFXUb^?qaBHUmCxRK3+$4R8b);mF)?EX#BxP7Ih{X9OiPCWUA0j1xx4XN{`Q
z8&!82t8l*@3G)ej+Nk=rQT20UeKvR|Oh(+Y048XQ8IeN8$!|BR+ySn%m_YlOSe<!}
z%twtX>)5}2inH&@9iR|r195T+7OT@QH{e#5&pKDoI3`qV-o)yXk9WXy=1rIy%M+Sx
zT%Tl5@63y*`8iMB7CQ?19}SSe8WAK;HlD0bzdsvQ&a8*kPmT5cu0B~m@BbegRr-iM
z8`LLf-;*Pd1>$Tp#f&fyGvGy|ig2$puSd@Y4?FX{1w8D`^IgE0G{Agp-{PYI29g!x
z9M4!?va|e4qw4F%TJ?LQ%9YHw0fD{)4xhYL*wf!SYv;o+`^@~&fE>7~*!wz-aE0B{
zlL77=Mu~kApS$nTfXT_si}BtK*sy1UD@>Rpp<f=M=Z(|%z53*7e@6op;H?H(C&tq)
zH}&;Y$5|(K2Vv_O7h`#x`SC3<P0#@6M#Sb{n)SDSa;|4Q^Wvic`FFI5d)da4Ep%OW
zWU{|_?>_Tyg5wde!L3FXbc=7XzSHZ`_{4jK+ZUd6<T_^?kc};vjm24?hN;8q^-X37
z&T;c6whkWuA>xzKm76%f`PF4Ug^O(j=f+duBwXDze)w=Y{omnefDIk~VX-WP?PUV9
zUSH#4JQ*NQ=w5!@I2CTalOtdNTSz>y4PwH@`VfxwQ<t&4`FP43$NEjYc?X#2NZ2@m
zSRPM#<N78OCNCyvD^{0Jd;OAk8(?A@LC}_9by&Y-0_DZYgvyKe3fKQ^15Cte$d(c2
zZ82e6JU!gD`WwHt0UD(d@~$|}yqHiimQOzSO6!+=F$1!(m@(osLLL(;zLZe?{^xMu
YHFt?YIN$&x(f|Me07*qoM6N<$g0ABP+W-In

literal 0
HcmV?d00001

diff --git a/actors/cursya_blue/cursya_sphere_left_blue.rgba16.png b/actors/cursya_blue/cursya_sphere_left_blue.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..8e4792a0268088e960c71db4a462a6f944c960c9
GIT binary patch
literal 2948
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

literal 0
HcmV?d00001

diff --git a/actors/cursya_blue/cursya_sphere_right_blue.rgba16.png b/actors/cursya_blue/cursya_sphere_right_blue.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..3b6ebe63c13663aa54d96f60866316bcbad66fb8
GIT binary patch
literal 3284
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
S0(2Ds0000<MNUMnLSTYr4MUXx

literal 0
HcmV?d00001

diff --git a/actors/cursya_blue/geo.inc.c b/actors/cursya_blue/geo.inc.c
new file mode 100644
index 0000000..4db8234
--- /dev/null
+++ b/actors/cursya_blue/geo.inc.c
@@ -0,0 +1,56 @@
+#include "src/game/envfx_snow.h"
+
+const GeoLayout cursya_blue_geo[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_SHADOW(0, 153, 100),
+		GEO_OPEN_NODE(),
+			GEO_SCALE(LAYER_FORCE, 65536),
+			GEO_OPEN_NODE(),
+				GEO_ANIMATED_PART(LAYER_OPAQUE, 0, -12, 0, NULL),
+				GEO_OPEN_NODE(),
+					GEO_ANIMATED_PART(LAYER_ALPHA, 17, 138, 12, cursya_blue_eye_l_mesh),
+					GEO_OPEN_NODE(),
+						GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 3, 5),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, -2, 4, cursya_blue_eye_l_002_mesh),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+					GEO_ANIMATED_PART(LAYER_ALPHA, -17, 138, 12, cursya_blue_eye_r_mesh),
+					GEO_OPEN_NODE(),
+						GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 3, 5),
+						GEO_OPEN_NODE(),
+							GEO_TRANSLATE_ROTATE(LAYER_OPAQUE, 0, -2, 4, 0, 0, 0),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, cursya_blue_eye_r_002_mesh),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+					GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 94, 0, cursya_blue_wings_mesh),
+				GEO_CLOSE_NODE(),
+				GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 0, 1),
+				GEO_OPEN_NODE(),
+					GEO_SWITCH_CASE(3, geo_switch_anim_state),
+					GEO_OPEN_NODE(),
+						GEO_NODE_START(),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 24, 0, cursya_blue_seg0_mesh),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 52, 0, cursya_blue_seg1_mesh),
+								GEO_OPEN_NODE(),
+									GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 53, 0, cursya_blue_seg2_mesh),
+									GEO_OPEN_NODE(),
+										GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 35, 0, cursya_blue_seg3_mesh),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+			GEO_CLOSE_NODE(),
+		GEO_CLOSE_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, cursya_blue_material_revert_render_settings),
+		GEO_DISPLAY_LIST(LAYER_ALPHA, cursya_blue_material_revert_render_settings),
+	GEO_CLOSE_NODE(),
+	GEO_END(),
+};
diff --git a/actors/cursya_blue/geo_header.h b/actors/cursya_blue/geo_header.h
new file mode 100644
index 0000000..27980f7
--- /dev/null
+++ b/actors/cursya_blue/geo_header.h
@@ -0,0 +1,39 @@
+extern const GeoLayout cursya_blue_geo[];
+extern Vtx cursya_blue_eye_l_mesh_vtx_0[4];
+extern Gfx cursya_blue_eye_l_mesh_tri_0[];
+extern Vtx cursya_blue_eye_l_002_mesh_vtx_0[4];
+extern Gfx cursya_blue_eye_l_002_mesh_tri_0[];
+extern Vtx cursya_blue_eye_r_mesh_vtx_0[4];
+extern Gfx cursya_blue_eye_r_mesh_tri_0[];
+extern Vtx cursya_blue_eye_r_002_mesh_vtx_0[4];
+extern Gfx cursya_blue_eye_r_002_mesh_tri_0[];
+extern Vtx cursya_blue_wings_mesh_vtx_0[36];
+extern Gfx cursya_blue_wings_mesh_tri_0[];
+extern Vtx cursya_blue_seg0_mesh_vtx_0[4];
+extern Gfx cursya_blue_seg0_mesh_tri_0[];
+extern Vtx cursya_blue_seg0_mesh_vtx_1[4];
+extern Gfx cursya_blue_seg0_mesh_tri_1[];
+extern Vtx cursya_blue_seg1_mesh_vtx_0[5];
+extern Gfx cursya_blue_seg1_mesh_tri_0[];
+extern Vtx cursya_blue_seg1_mesh_vtx_1[5];
+extern Gfx cursya_blue_seg1_mesh_tri_1[];
+extern Vtx cursya_blue_seg2_mesh_vtx_0[5];
+extern Gfx cursya_blue_seg2_mesh_tri_0[];
+extern Vtx cursya_blue_seg2_mesh_vtx_1[5];
+extern Gfx cursya_blue_seg2_mesh_tri_1[];
+extern Vtx cursya_blue_seg3_mesh_vtx_0[5];
+extern Gfx cursya_blue_seg3_mesh_tri_0[];
+extern Vtx cursya_blue_seg3_mesh_vtx_1[5];
+extern Gfx cursya_blue_seg3_mesh_tri_1[];
+
+extern Gfx cursya_blue_eye_l_mesh[];
+extern Gfx cursya_blue_eye_l_002_mesh[];
+extern Gfx cursya_blue_eye_r_mesh[];
+extern Gfx cursya_blue_eye_r_002_mesh[];
+extern Gfx cursya_blue_wings_mesh[];
+extern Gfx cursya_blue_seg0_mesh[];
+extern Gfx cursya_blue_seg1_mesh[];
+extern Gfx cursya_blue_seg2_mesh[];
+extern Gfx cursya_blue_seg3_mesh[];
+extern Gfx cursya_blue_material_revert_render_settings[];
+
diff --git a/actors/cursya_blue/model.inc.c b/actors/cursya_blue/model.inc.c
new file mode 100644
index 0000000..fd44ef7
--- /dev/null
+++ b/actors/cursya_blue/model.inc.c
@@ -0,0 +1,509 @@
+Lights1 cursya_blue_pupil_006_layer4_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_blue_eyeball_006_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_blue_curseyawings_006_lights = gdSPDefLights1(
+	0x23, 0x0, 0x7F,
+	0x47, 0x0, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_blue_sphere_right_blue_001_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_blue_sphere_right_blue_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Gfx cursya_blue_cursya_iris_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_blue_cursya_iris_rgba16[] = {
+	#include "actors/cursya_blue/cursya_iris.rgba16.inc.c"
+};
+
+Gfx cursya_blue_cursya_eyeball_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_blue_cursya_eyeball_rgba16[] = {
+	#include "actors/cursya_blue/cursya_eyeball.rgba16.inc.c"
+};
+
+Gfx cursya_blue_cursya_sphere_left_blue_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_blue_cursya_sphere_left_blue_rgba16[] = {
+	#include "actors/cursya_blue/cursya_sphere_left_blue.rgba16.inc.c"
+};
+
+Gfx cursya_blue_cursya_sphere_right_blue_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_blue_cursya_sphere_right_blue_rgba16[] = {
+	#include "actors/cursya_blue/cursya_sphere_right_blue.rgba16.inc.c"
+};
+
+Vtx cursya_blue_eye_l_mesh_vtx_0[4] = {
+	{{{7, -6, 24},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{7, 7, 24},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, 7, 24},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, -6, 24},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_blue_eye_l_mesh_tri_0[] = {
+	gsSPVertex(cursya_blue_eye_l_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_blue_eye_l_002_mesh_vtx_0[4] = {
+	{{{16, -16, 1},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{16, 15, 1},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, 15, 1},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, -16, 1},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_blue_eye_l_002_mesh_tri_0[] = {
+	gsSPVertex(cursya_blue_eye_l_002_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_blue_eye_r_mesh_vtx_0[4] = {
+	{{{7, -6, 24},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{7, 7, 24},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, 7, 24},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, -6, 24},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_blue_eye_r_mesh_tri_0[] = {
+	gsSPVertex(cursya_blue_eye_r_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_blue_eye_r_002_mesh_vtx_0[4] = {
+	{{{16, -16, 1},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{16, 15, 1},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, 15, 1},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, -16, 1},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_blue_eye_r_002_mesh_tri_0[] = {
+	gsSPVertex(cursya_blue_eye_r_002_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_blue_wings_mesh_vtx_0[36] = {
+	{{{62, -13, -15},0, {-16, 1008},{0xC7, 0xBA, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0x9E, 0x51, 0x0, 0xFF}}},
+	{{{70, -1, -15},0, {-16, 1008},{0x39, 0x46, 0xA7, 0xFF}}},
+	{{{62, -13, -2},0, {-16, 1008},{0xC7, 0xBA, 0x59, 0xFF}}},
+	{{{94, -31, -8},0, {-16, 1008},{0x62, 0xAF, 0x0, 0xFF}}},
+	{{{70, -1, -2},0, {-16, 1008},{0x39, 0x46, 0x59, 0xFF}}},
+	{{{76, 10, -15},0, {-16, 1008},{0x2, 0xA6, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0x81, 0xFF, 0x0, 0xFF}}},
+	{{{73, 24, -15},0, {-16, 1008},{0xFE, 0x5A, 0xA7, 0xFF}}},
+	{{{76, 10, -2},0, {-16, 1008},{0x2, 0xA6, 0x59, 0xFF}}},
+	{{{112, 17, -8},0, {-16, 1008},{0x7F, 0x1, 0x0, 0xFF}}},
+	{{{73, 24, -2},0, {-16, 1008},{0xFE, 0x5A, 0x59, 0xFF}}},
+	{{{71, 36, -15},0, {-16, 1008},{0x3C, 0xBC, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0xA0, 0xAD, 0x0, 0xFF}}},
+	{{{60, 45, -15},0, {-16, 1008},{0xC4, 0x44, 0xA7, 0xFF}}},
+	{{{71, 36, -2},0, {-16, 1008},{0x3C, 0xBC, 0x59, 0xFF}}},
+	{{{94, 65, -8},0, {-16, 1008},{0x60, 0x53, 0x0, 0xFF}}},
+	{{{60, 45, -2},0, {-16, 1008},{0xC4, 0x44, 0x59, 0xFF}}},
+	{{{-62, -13, -15},0, {-16, 1008},{0x39, 0xBA, 0xA7, 0xFF}}},
+	{{{-70, -1, -15},0, {-16, 1008},{0xC7, 0x46, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x62, 0x51, 0x0, 0xFF}}},
+	{{{-94, -31, -8},0, {-16, 1008},{0x9E, 0xAF, 0x0, 0xFF}}},
+	{{{-62, -13, -2},0, {-16, 1008},{0x39, 0xBA, 0x59, 0xFF}}},
+	{{{-70, -1, -2},0, {-16, 1008},{0xC7, 0x46, 0x59, 0xFF}}},
+	{{{-76, 10, -15},0, {-16, 1008},{0xFE, 0xA6, 0xA7, 0xFF}}},
+	{{{-73, 24, -15},0, {-16, 1008},{0x2, 0x5A, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x7F, 0xFF, 0x0, 0xFF}}},
+	{{{-112, 17, -8},0, {-16, 1008},{0x81, 0x1, 0x0, 0xFF}}},
+	{{{-76, 10, -2},0, {-16, 1008},{0xFE, 0xA6, 0x59, 0xFF}}},
+	{{{-73, 24, -2},0, {-16, 1008},{0x2, 0x5A, 0x59, 0xFF}}},
+	{{{-71, 36, -15},0, {-16, 1008},{0xC4, 0xBC, 0xA7, 0xFF}}},
+	{{{-60, 45, -15},0, {-16, 1008},{0x3C, 0x44, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x60, 0xAD, 0x0, 0xFF}}},
+	{{{-94, 65, -8},0, {-16, 1008},{0xA0, 0x53, 0x0, 0xFF}}},
+	{{{-71, 36, -2},0, {-16, 1008},{0xC4, 0xBC, 0x59, 0xFF}}},
+	{{{-60, 45, -2},0, {-16, 1008},{0x3C, 0x44, 0x59, 0xFF}}},
+};
+
+Gfx cursya_blue_wings_mesh_tri_0[] = {
+	gsSPVertex(cursya_blue_wings_mesh_vtx_0 + 0, 30, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(0, 4, 3, 0, 4, 0, 2, 0),
+	gsSP2Triangles(4, 2, 5, 0, 2, 1, 5, 0),
+	gsSP2Triangles(3, 5, 1, 0, 5, 3, 4, 0),
+	gsSP2Triangles(6, 7, 8, 0, 9, 7, 6, 0),
+	gsSP2Triangles(6, 10, 9, 0, 10, 6, 8, 0),
+	gsSP2Triangles(10, 8, 11, 0, 8, 7, 11, 0),
+	gsSP2Triangles(9, 11, 7, 0, 11, 9, 10, 0),
+	gsSP2Triangles(12, 13, 14, 0, 15, 13, 12, 0),
+	gsSP2Triangles(12, 16, 15, 0, 16, 12, 14, 0),
+	gsSP2Triangles(16, 14, 17, 0, 14, 13, 17, 0),
+	gsSP2Triangles(15, 17, 13, 0, 17, 15, 16, 0),
+	gsSP2Triangles(18, 19, 20, 0, 21, 19, 18, 0),
+	gsSP2Triangles(18, 22, 21, 0, 22, 18, 20, 0),
+	gsSP2Triangles(22, 20, 23, 0, 19, 23, 20, 0),
+	gsSP2Triangles(21, 23, 19, 0, 23, 21, 22, 0),
+	gsSP2Triangles(24, 25, 26, 0, 27, 25, 24, 0),
+	gsSP2Triangles(24, 28, 27, 0, 28, 24, 26, 0),
+	gsSP2Triangles(28, 26, 29, 0, 25, 29, 26, 0),
+	gsSP2Triangles(27, 29, 25, 0, 29, 27, 28, 0),
+	gsSPVertex(cursya_blue_wings_mesh_vtx_0 + 30, 6, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(0, 4, 3, 0, 4, 0, 2, 0),
+	gsSP2Triangles(4, 2, 5, 0, 1, 5, 2, 0),
+	gsSP2Triangles(3, 5, 1, 0, 5, 3, 4, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_blue_seg0_mesh_vtx_0[4] = {
+	{{{0, -32, 7},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-48, 49, 7},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-48, -32, 7},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 49, 7},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_blue_seg0_mesh_tri_0[] = {
+	gsSPVertex(cursya_blue_seg0_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_blue_seg0_mesh_vtx_1[4] = {
+	{{{48, -32, 7},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{48, 49, 7},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 49, 7},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -32, 7},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_blue_seg0_mesh_tri_1[] = {
+	gsSPVertex(cursya_blue_seg0_mesh_vtx_1 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_blue_seg1_mesh_vtx_0[5] = {
+	{{{-39, 8, 9},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-39, -21, 9},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -21, 9},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-39, 36, 9},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 36, 9},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_blue_seg1_mesh_tri_0[] = {
+	gsSPVertex(cursya_blue_seg1_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_blue_seg1_mesh_vtx_1[5] = {
+	{{{0, 36, 9},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -21, 9},0, {-14, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, -21, 9},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, 8, 9},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, 36, 9},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_blue_seg1_mesh_tri_1[] = {
+	gsSPVertex(cursya_blue_seg1_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(3, 4, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_blue_seg2_mesh_vtx_0[5] = {
+	{{{-36, -3, 11},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-36, -23, 11},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -23, 11},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-36, 17, 11},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 17, 11},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_blue_seg2_mesh_tri_0[] = {
+	gsSPVertex(cursya_blue_seg2_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_blue_seg2_mesh_vtx_1[5] = {
+	{{{0, 17, 11},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -23, 11},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, -23, 11},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, -3, 11},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, 17, 11},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_blue_seg2_mesh_tri_1[] = {
+	gsSPVertex(cursya_blue_seg2_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(3, 4, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_blue_seg3_mesh_vtx_0[5] = {
+	{{{-34, -26, 12},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -26, 12},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 7, 12},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-34, -6, 12},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-34, 7, 12},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_blue_seg3_mesh_tri_0[] = {
+	gsSPVertex(cursya_blue_seg3_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_blue_seg3_mesh_vtx_1[5] = {
+	{{{34, -26, 12},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{34, -6, 12},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{34, 7, 12},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -26, 12},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 7, 12},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_blue_seg3_mesh_tri_1[] = {
+	gsSPVertex(cursya_blue_seg3_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_blue_pupil_006_layer4[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_blue_cursya_iris_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(cursya_blue_pupil_006_layer4_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_blue_pupil_006_layer4[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_TEX_EDGE, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_blue_eyeball_006_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_blue_cursya_eyeball_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(cursya_blue_eyeball_006_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_blue_eyeball_006_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_blue_curseyawings_006[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsSPSetLights1(cursya_blue_curseyawings_006_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_blue_sphere_right_blue_001_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_blue_cursya_sphere_left_blue_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 252),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPSetLights1(cursya_blue_sphere_right_blue_001_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_blue_sphere_right_blue_001_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_blue_sphere_right_blue_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_blue_cursya_sphere_right_blue_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 252),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPSetLights1(cursya_blue_sphere_right_blue_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_blue_sphere_right_blue_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx cursya_blue_eye_l_mesh[] = {
+	gsSPDisplayList(mat_cursya_blue_pupil_006_layer4),
+	gsSPDisplayList(cursya_blue_eye_l_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_blue_pupil_006_layer4),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_blue_eye_l_002_mesh[] = {
+	gsSPDisplayList(mat_cursya_blue_eyeball_006_layer1),
+	gsSPDisplayList(cursya_blue_eye_l_002_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_blue_eyeball_006_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_blue_eye_r_mesh[] = {
+	gsSPDisplayList(mat_cursya_blue_pupil_006_layer4),
+	gsSPDisplayList(cursya_blue_eye_r_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_blue_pupil_006_layer4),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_blue_eye_r_002_mesh[] = {
+	gsSPDisplayList(mat_cursya_blue_eyeball_006_layer1),
+	gsSPDisplayList(cursya_blue_eye_r_002_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_blue_eyeball_006_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_blue_wings_mesh[] = {
+	gsSPDisplayList(mat_cursya_blue_curseyawings_006),
+	gsSPDisplayList(cursya_blue_wings_mesh_tri_0),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_blue_seg0_mesh[] = {
+	gsSPDisplayList(mat_cursya_blue_sphere_right_blue_001_layer1),
+	gsSPDisplayList(cursya_blue_seg0_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_blue_sphere_right_blue_001_layer1),
+	gsSPDisplayList(mat_cursya_blue_sphere_right_blue_layer1),
+	gsSPDisplayList(cursya_blue_seg0_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_blue_sphere_right_blue_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_blue_seg1_mesh[] = {
+	gsSPDisplayList(mat_cursya_blue_sphere_right_blue_001_layer1),
+	gsSPDisplayList(cursya_blue_seg1_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_blue_sphere_right_blue_001_layer1),
+	gsSPDisplayList(mat_cursya_blue_sphere_right_blue_layer1),
+	gsSPDisplayList(cursya_blue_seg1_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_blue_sphere_right_blue_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_blue_seg2_mesh[] = {
+	gsSPDisplayList(mat_cursya_blue_sphere_right_blue_001_layer1),
+	gsSPDisplayList(cursya_blue_seg2_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_blue_sphere_right_blue_001_layer1),
+	gsSPDisplayList(mat_cursya_blue_sphere_right_blue_layer1),
+	gsSPDisplayList(cursya_blue_seg2_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_blue_sphere_right_blue_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_blue_seg3_mesh[] = {
+	gsSPDisplayList(mat_cursya_blue_sphere_right_blue_001_layer1),
+	gsSPDisplayList(cursya_blue_seg3_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_blue_sphere_right_blue_001_layer1),
+	gsSPDisplayList(mat_cursya_blue_sphere_right_blue_layer1),
+	gsSPDisplayList(cursya_blue_seg3_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_blue_sphere_right_blue_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_blue_material_revert_render_settings[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPClearGeometryMode(G_TEXTURE_GEN),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 0),
+	gsDPSetEnvColor(255, 255, 255, 255),
+	gsDPSetAlphaCompare(G_AC_NONE),
+	gsSPEndDisplayList(),
+};
diff --git a/actors/cursya_blue/texscroll.inc.c b/actors/cursya_blue/texscroll.inc.c
new file mode 100644
index 0000000..069d236
--- /dev/null
+++ b/actors/cursya_blue/texscroll.inc.c
@@ -0,0 +1,3 @@
+void scroll_actor_geo_cursya_blue() {
+	
+}
diff --git a/actors/cursya_blue/texscroll.inc.h b/actors/cursya_blue/texscroll.inc.h
new file mode 100644
index 0000000..4903bfa
--- /dev/null
+++ b/actors/cursya_blue/texscroll.inc.h
@@ -0,0 +1,3 @@
+
+extern void scroll_actor_geo_cursya_blue();
+
diff --git a/actors/cursya_cyan/cursya_eyeball.rgba16.png b/actors/cursya_cyan/cursya_eyeball.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..27b32c029eed25f4701ee5b43f129eaf72c6ffd9
GIT binary patch
literal 1197
zcmV;e1XBBnP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XU
z000XU0RWnu7ytkSUr9tkR9FecRv~oTFc4Mt24rS48wMt<gN1`FTVY|xQW&<tj%Bd0
zuym}2Wh)#^Va8JCFq?V*pLDVuJ4v^<_omj7bkg1b_fJYZYMLMBf3|mj1OEJU*TApy
zc-tR`8@*M5<;}dgxI8m?J~2r$29S-w5@RY(H>RrBX1#tf(+_8(Xv5y&Q34MS-<s3Y
zPbSL>1X0kPUciX~BB7OL_455Fk%I(QtH)+MK5=0af@XNwD*??sp!Nn;y)sFb?Nwv%
z8Q83!n{hF50f)eub;!Jj8w`n^Vx02447Nc6>(x_ZEwiPl%$Cw>*0i$4a&xZA#69h7
z+&fI7M_~2yv9SrjB@R9Whm%8X-@3O4wQNs`4uSjouT5g%Bz{9dqkw^r?qjdxu-FdT
zL^>oo1WqO=-oZ+!U6Dhyu;4)x+z_h9$E0CfXHa>ks=FQtFne*31J`klCbb*KhfhGG
zEeV0TAkivF)}}1iL4`n|C|V~KGREl!(V6blx$lEQp773cmQ8{s5U{o-(08Lnt=cn2
zJPtAU42IJY0=LUWW9m3qeLQr+fbgjX0#|V?Y@;GU74oa`b^R=5c+crzBOxlx_#I~&
z34op?s#iQvPtT5kbKR2=UnS{n&KsY`bO<o-L;}Fe<5V6;z{Dti_=rhhsu;RV;30Ly
zuT@wGR4~>6=2t*v8MuwcsgO`c0zh_bKBJC8Zbd$W-R~1416IIti*g3)t%Ixy%)L~B
zz3;?Nlp(Pa4;&O+7X9XqjSFg*O@3Yh1qqjo<4Yidu;zGVEK&driBbWEaq^%<QtMVB
zF1dQSQI}Y3V-)yFB1qLAdMN?PY+;c4TgX!r8T$$DNk}LVs}MkbpyU=Pz_GpsCouoE
zwNoIx58T}@nmo_&;*lcR%-GZlkY&cGmwY*c0C`ajsi2;G!4C!BVdK>TaRq1cMKO_g
zgm4Qs8yvz^ZvoiV{uj|zA}FDX@L=j$4bVCuCdX9V6%g@|x6i(=Jt=Gn1lF6a$qHnM
zz*&NOt(zhsR~8y5Db+xaDT?N7ZQMZ4ohvRYfq0WKp#<1s7W3<7JV{NSX82(v8I}X`
zi{t=-<b+~L905+y$eNveI(lvhg7WYCsuV@0)Aoh6Lx4_v`z@eE8k68@AczpbCM80h
z6%_*=0?s!Dc2|!o?7l6B5~#~7&Vp+^r5*r3p$^Gqt|gE<`|Y?NT5WL`GY=kTUj8kv
z8{ZJ))>D9s^VxNiLxl`wNONYN%KfJblBM1XZgvKax(%Rga_MlM>T+v7p3i!3$Abju
zND`@%0AQNCYZ>HMGO7}tv;o`Y&Vz^ZSiYL`i!VKJZr@9Qi&s~labMF0UkRdyO{oTx
z1{n@m5t*@fP4ng#7Hjfry&28sOI_~u2MOrz8Pwpxq}uLw5Z05SF=`~h-<EAznc4hi
zFzaahVFlui9A92Sk<>P+Tu~TAgqA@Gy%&q+QP4Q<n-qv0{`L4b*-o>~#>oCn00000
LNkvXXu0mjfC4C>i

literal 0
HcmV?d00001

diff --git a/actors/cursya_cyan/cursya_iris.rgba16.png b/actors/cursya_cyan/cursya_iris.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..b259db9e80eeeaade72889ee938e98039aed9d13
GIT binary patch
literal 1054
zcmV+(1mXLMP)<h;3K|Lk000e1NJLTq001BW001Bm1^@s6BkHEN00009a7bBm000XU
z000XU0RWnu7ytkR&`Cr=RA>e5*jbMpMGyqwTw^Z71BYZJV<Xx8|3768iNk<7Y=gmV
zDM#P56hqQI?CcZ7OH5{EWmQCXb@y)7e;ijgt^d=;vgA5fjm%apjWz#O<Lbutd9lX#
z8p}dh@+#@@%XsF~0ORubQpQ}{09TlxEhb2vm@qMxpZLqhzrRDyHej#dTMaU*GG0gi
z`4{1@8tV~}$HvdSGj<!0!U=LEGnSv2Y~$}Vs@`o>-EOF=dfBM@tx@%?QT11&iUADS
zduMDKuvd5*kTIe7%|_J+jg>!aRK3?&uQ=g9G^(C7s=jYj{n0qzh})~jfB(ydQ_vfY
zsvK8`jbm4q&<BmG!$Y*{lg4U*UH#gq`leC!MPpt6yT+*z=1)8tkXN376qZJar@9pW
zuu=7>QFXUb^?qaBHUmCxRK3+$4R8b);mF)?EX#BxP7Ih{X9OiPCWUA0j1xx4XN{`Q
z8&!82t8l*@3G)ej+Nk=rQT20UeKvR|Oh(+Y048XQ8IeN8$!|BR+ySn%m_YlOSe<!}
z%twtX>)5}2inH&@9iR|r195T+7OT@QH{e#5&pKDoI3`qV-o)yXk9WXy=1rIy%M+Sx
zT%Tl5@63y*`8iMB7CQ?19}SSe8WAK;HlD0bzdsvQ&a8*kPmT5cu0B~m@BbegRr-iM
z8`LLf-;*Pd1>$Tp#f&fyGvGy|ig2$puSd@Y4?FX{1w8D`^IgE0G{Agp-{PYI29g!x
z9M4!?va|e4qw4F%TJ?LQ%9YHw0fD{)4xhYL*wf!SYv;o+`^@~&fE>7~*!wz-aE0B{
zlL77=Mu~kApS$nTfXT_si}BtK*sy1UD@>Rpp<f=M=Z(|%z53*7e@6op;H?H(C&tq)
zH}&;Y$5|(K2Vv_O7h`#x`SC3<P0#@6M#Sb{n)SDSa;|4Q^Wvic`FFI5d)da4Ep%OW
zWU{|_?>_Tyg5wde!L3FXbc=7XzSHZ`_{4jK+ZUd6<T_^?kc};vjm24?hN;8q^-X37
z&T;c6whkWuA>xzKm76%f`PF4Ug^O(j=f+duBwXDze)w=Y{omnefDIk~VX-WP?PUV9
zUSH#4JQ*NQ=w5!@I2CTalOtdNTSz>y4PwH@`VfxwQ<t&4`FP43$NEjYc?X#2NZ2@m
zSRPM#<N78OCNCyvD^{0Jd;OAk8(?A@LC}_9by&Y-0_DZYgvyKe3fKQ^15Cte$d(c2
zZ82e6JU!gD`WwHt0UD(d@~$|}yqHiimQOzSO6!+=F$1!(m@(osLLL(;zLZe?{^xMu
YHFt?YIN$&x(f|Me07*qoM6N<$g0ABP+W-In

literal 0
HcmV?d00001

diff --git a/actors/cursya_cyan/cursya_sphere_left_cyan.rgba16.png b/actors/cursya_cyan/cursya_sphere_left_cyan.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..4b522e0a329742ddcc3ffcf149ca82cb7caef1ae
GIT binary patch
literal 2920
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
S0|1%;0000<MNUMnLSTY-C}|V`

literal 0
HcmV?d00001

diff --git a/actors/cursya_cyan/cursya_sphere_right_cyan.rgba16.png b/actors/cursya_cyan/cursya_sphere_right_cyan.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..8168babfd13b0619891999c0ac804b8c090fc8aa
GIT binary patch
literal 3314
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

literal 0
HcmV?d00001

diff --git a/actors/cursya_cyan/geo.inc.c b/actors/cursya_cyan/geo.inc.c
new file mode 100644
index 0000000..511af44
--- /dev/null
+++ b/actors/cursya_cyan/geo.inc.c
@@ -0,0 +1,56 @@
+#include "src/game/envfx_snow.h"
+
+const GeoLayout cursya_cyan_geo[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_SHADOW(0, 153, 100),
+		GEO_OPEN_NODE(),
+			GEO_SCALE(LAYER_FORCE, 65536),
+			GEO_OPEN_NODE(),
+				GEO_ANIMATED_PART(LAYER_OPAQUE, 0, -12, 0, NULL),
+				GEO_OPEN_NODE(),
+					GEO_ANIMATED_PART(LAYER_ALPHA, 17, 138, 12, cursya_cyan_eye_l_mesh),
+					GEO_OPEN_NODE(),
+						GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 3, 5),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, -2, 4, cursya_cyan_eye_l_002_mesh),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+					GEO_ANIMATED_PART(LAYER_ALPHA, -17, 138, 12, cursya_cyan_eye_r_mesh),
+					GEO_OPEN_NODE(),
+						GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 3, 5),
+						GEO_OPEN_NODE(),
+							GEO_TRANSLATE_ROTATE(LAYER_OPAQUE, 0, -2, 4, 0, 0, 0),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, cursya_cyan_eye_r_002_mesh),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+					GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 94, 0, cursya_cyan_wings_mesh),
+				GEO_CLOSE_NODE(),
+				GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 0, 1),
+				GEO_OPEN_NODE(),
+					GEO_SWITCH_CASE(3, geo_switch_anim_state),
+					GEO_OPEN_NODE(),
+						GEO_NODE_START(),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 24, 0, cursya_cyan_seg0_mesh),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 52, 0, cursya_cyan_seg1_mesh),
+								GEO_OPEN_NODE(),
+									GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 53, 0, cursya_cyan_seg2_mesh),
+									GEO_OPEN_NODE(),
+										GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 35, 0, cursya_cyan_seg3_mesh),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+			GEO_CLOSE_NODE(),
+		GEO_CLOSE_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, cursya_cyan_material_revert_render_settings),
+		GEO_DISPLAY_LIST(LAYER_ALPHA, cursya_cyan_material_revert_render_settings),
+	GEO_CLOSE_NODE(),
+	GEO_END(),
+};
diff --git a/actors/cursya_cyan/geo_header.h b/actors/cursya_cyan/geo_header.h
new file mode 100644
index 0000000..fc978e0
--- /dev/null
+++ b/actors/cursya_cyan/geo_header.h
@@ -0,0 +1,39 @@
+extern const GeoLayout cursya_cyan_geo[];
+extern Vtx cursya_cyan_eye_l_mesh_vtx_0[4];
+extern Gfx cursya_cyan_eye_l_mesh_tri_0[];
+extern Vtx cursya_cyan_eye_l_002_mesh_vtx_0[4];
+extern Gfx cursya_cyan_eye_l_002_mesh_tri_0[];
+extern Vtx cursya_cyan_eye_r_mesh_vtx_0[4];
+extern Gfx cursya_cyan_eye_r_mesh_tri_0[];
+extern Vtx cursya_cyan_eye_r_002_mesh_vtx_0[4];
+extern Gfx cursya_cyan_eye_r_002_mesh_tri_0[];
+extern Vtx cursya_cyan_wings_mesh_vtx_0[36];
+extern Gfx cursya_cyan_wings_mesh_tri_0[];
+extern Vtx cursya_cyan_seg0_mesh_vtx_0[4];
+extern Gfx cursya_cyan_seg0_mesh_tri_0[];
+extern Vtx cursya_cyan_seg0_mesh_vtx_1[4];
+extern Gfx cursya_cyan_seg0_mesh_tri_1[];
+extern Vtx cursya_cyan_seg1_mesh_vtx_0[5];
+extern Gfx cursya_cyan_seg1_mesh_tri_0[];
+extern Vtx cursya_cyan_seg1_mesh_vtx_1[5];
+extern Gfx cursya_cyan_seg1_mesh_tri_1[];
+extern Vtx cursya_cyan_seg2_mesh_vtx_0[5];
+extern Gfx cursya_cyan_seg2_mesh_tri_0[];
+extern Vtx cursya_cyan_seg2_mesh_vtx_1[5];
+extern Gfx cursya_cyan_seg2_mesh_tri_1[];
+extern Vtx cursya_cyan_seg3_mesh_vtx_0[5];
+extern Gfx cursya_cyan_seg3_mesh_tri_0[];
+extern Vtx cursya_cyan_seg3_mesh_vtx_1[5];
+extern Gfx cursya_cyan_seg3_mesh_tri_1[];
+
+extern Gfx cursya_cyan_eye_l_mesh[];
+extern Gfx cursya_cyan_eye_l_002_mesh[];
+extern Gfx cursya_cyan_eye_r_mesh[];
+extern Gfx cursya_cyan_eye_r_002_mesh[];
+extern Gfx cursya_cyan_wings_mesh[];
+extern Gfx cursya_cyan_seg0_mesh[];
+extern Gfx cursya_cyan_seg1_mesh[];
+extern Gfx cursya_cyan_seg2_mesh[];
+extern Gfx cursya_cyan_seg3_mesh[];
+extern Gfx cursya_cyan_material_revert_render_settings[];
+
diff --git a/actors/cursya_cyan/model.inc.c b/actors/cursya_cyan/model.inc.c
new file mode 100644
index 0000000..da60cda
--- /dev/null
+++ b/actors/cursya_cyan/model.inc.c
@@ -0,0 +1,509 @@
+Lights1 cursya_cyan_pupil_002_layer4_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_cyan_eyeball_002_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_cyan_curseyawings_002_lights = gdSPDefLights1(
+	0x23, 0x0, 0x7F,
+	0x47, 0x0, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_cyan_sphere_left_cyan_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_cyan_sphere_right_cyan_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Gfx cursya_cyan_cursya_iris_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_cyan_cursya_iris_rgba16[] = {
+	#include "actors/cursya_cyan/cursya_iris.rgba16.inc.c"
+};
+
+Gfx cursya_cyan_cursya_eyeball_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_cyan_cursya_eyeball_rgba16[] = {
+	#include "actors/cursya_cyan/cursya_eyeball.rgba16.inc.c"
+};
+
+Gfx cursya_cyan_cursya_sphere_left_cyan_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_cyan_cursya_sphere_left_cyan_rgba16[] = {
+	#include "actors/cursya_cyan/cursya_sphere_left_cyan.rgba16.inc.c"
+};
+
+Gfx cursya_cyan_cursya_sphere_right_cyan_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_cyan_cursya_sphere_right_cyan_rgba16[] = {
+	#include "actors/cursya_cyan/cursya_sphere_right_cyan.rgba16.inc.c"
+};
+
+Vtx cursya_cyan_eye_l_mesh_vtx_0[4] = {
+	{{{7, -6, 24},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{7, 7, 24},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, 7, 24},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, -6, 24},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_cyan_eye_l_mesh_tri_0[] = {
+	gsSPVertex(cursya_cyan_eye_l_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_cyan_eye_l_002_mesh_vtx_0[4] = {
+	{{{16, -16, 1},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{16, 15, 1},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, 15, 1},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, -16, 1},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_cyan_eye_l_002_mesh_tri_0[] = {
+	gsSPVertex(cursya_cyan_eye_l_002_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_cyan_eye_r_mesh_vtx_0[4] = {
+	{{{7, -6, 24},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{7, 7, 24},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, 7, 24},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, -6, 24},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_cyan_eye_r_mesh_tri_0[] = {
+	gsSPVertex(cursya_cyan_eye_r_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_cyan_eye_r_002_mesh_vtx_0[4] = {
+	{{{16, -16, 1},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{16, 15, 1},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, 15, 1},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, -16, 1},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_cyan_eye_r_002_mesh_tri_0[] = {
+	gsSPVertex(cursya_cyan_eye_r_002_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_cyan_wings_mesh_vtx_0[36] = {
+	{{{62, -13, -15},0, {-16, 1008},{0xC7, 0xBA, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0x9E, 0x51, 0x0, 0xFF}}},
+	{{{70, -1, -15},0, {-16, 1008},{0x39, 0x46, 0xA7, 0xFF}}},
+	{{{62, -13, -2},0, {-16, 1008},{0xC7, 0xBA, 0x59, 0xFF}}},
+	{{{94, -31, -8},0, {-16, 1008},{0x62, 0xAF, 0x0, 0xFF}}},
+	{{{70, -1, -2},0, {-16, 1008},{0x39, 0x46, 0x59, 0xFF}}},
+	{{{76, 10, -15},0, {-16, 1008},{0x2, 0xA6, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0x81, 0xFF, 0x0, 0xFF}}},
+	{{{73, 24, -15},0, {-16, 1008},{0xFE, 0x5A, 0xA7, 0xFF}}},
+	{{{76, 10, -2},0, {-16, 1008},{0x2, 0xA6, 0x59, 0xFF}}},
+	{{{112, 17, -8},0, {-16, 1008},{0x7F, 0x1, 0x0, 0xFF}}},
+	{{{73, 24, -2},0, {-16, 1008},{0xFE, 0x5A, 0x59, 0xFF}}},
+	{{{71, 36, -15},0, {-16, 1008},{0x3C, 0xBC, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0xA0, 0xAD, 0x0, 0xFF}}},
+	{{{60, 45, -15},0, {-16, 1008},{0xC4, 0x44, 0xA7, 0xFF}}},
+	{{{71, 36, -2},0, {-16, 1008},{0x3C, 0xBC, 0x59, 0xFF}}},
+	{{{94, 65, -8},0, {-16, 1008},{0x60, 0x53, 0x0, 0xFF}}},
+	{{{60, 45, -2},0, {-16, 1008},{0xC4, 0x44, 0x59, 0xFF}}},
+	{{{-62, -13, -15},0, {-16, 1008},{0x39, 0xBA, 0xA7, 0xFF}}},
+	{{{-70, -1, -15},0, {-16, 1008},{0xC7, 0x46, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x62, 0x51, 0x0, 0xFF}}},
+	{{{-94, -31, -8},0, {-16, 1008},{0x9E, 0xAF, 0x0, 0xFF}}},
+	{{{-62, -13, -2},0, {-16, 1008},{0x39, 0xBA, 0x59, 0xFF}}},
+	{{{-70, -1, -2},0, {-16, 1008},{0xC7, 0x46, 0x59, 0xFF}}},
+	{{{-76, 10, -15},0, {-16, 1008},{0xFE, 0xA6, 0xA7, 0xFF}}},
+	{{{-73, 24, -15},0, {-16, 1008},{0x2, 0x5A, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x7F, 0xFF, 0x0, 0xFF}}},
+	{{{-112, 17, -8},0, {-16, 1008},{0x81, 0x1, 0x0, 0xFF}}},
+	{{{-76, 10, -2},0, {-16, 1008},{0xFE, 0xA6, 0x59, 0xFF}}},
+	{{{-73, 24, -2},0, {-16, 1008},{0x2, 0x5A, 0x59, 0xFF}}},
+	{{{-71, 36, -15},0, {-16, 1008},{0xC4, 0xBC, 0xA7, 0xFF}}},
+	{{{-60, 45, -15},0, {-16, 1008},{0x3C, 0x44, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x60, 0xAD, 0x0, 0xFF}}},
+	{{{-94, 65, -8},0, {-16, 1008},{0xA0, 0x53, 0x0, 0xFF}}},
+	{{{-71, 36, -2},0, {-16, 1008},{0xC4, 0xBC, 0x59, 0xFF}}},
+	{{{-60, 45, -2},0, {-16, 1008},{0x3C, 0x44, 0x59, 0xFF}}},
+};
+
+Gfx cursya_cyan_wings_mesh_tri_0[] = {
+	gsSPVertex(cursya_cyan_wings_mesh_vtx_0 + 0, 30, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(0, 4, 3, 0, 4, 0, 2, 0),
+	gsSP2Triangles(4, 2, 5, 0, 2, 1, 5, 0),
+	gsSP2Triangles(3, 5, 1, 0, 5, 3, 4, 0),
+	gsSP2Triangles(6, 7, 8, 0, 9, 7, 6, 0),
+	gsSP2Triangles(6, 10, 9, 0, 10, 6, 8, 0),
+	gsSP2Triangles(10, 8, 11, 0, 8, 7, 11, 0),
+	gsSP2Triangles(9, 11, 7, 0, 11, 9, 10, 0),
+	gsSP2Triangles(12, 13, 14, 0, 15, 13, 12, 0),
+	gsSP2Triangles(12, 16, 15, 0, 16, 12, 14, 0),
+	gsSP2Triangles(16, 14, 17, 0, 14, 13, 17, 0),
+	gsSP2Triangles(15, 17, 13, 0, 17, 15, 16, 0),
+	gsSP2Triangles(18, 19, 20, 0, 21, 19, 18, 0),
+	gsSP2Triangles(18, 22, 21, 0, 22, 18, 20, 0),
+	gsSP2Triangles(22, 20, 23, 0, 19, 23, 20, 0),
+	gsSP2Triangles(21, 23, 19, 0, 23, 21, 22, 0),
+	gsSP2Triangles(24, 25, 26, 0, 27, 25, 24, 0),
+	gsSP2Triangles(24, 28, 27, 0, 28, 24, 26, 0),
+	gsSP2Triangles(28, 26, 29, 0, 25, 29, 26, 0),
+	gsSP2Triangles(27, 29, 25, 0, 29, 27, 28, 0),
+	gsSPVertex(cursya_cyan_wings_mesh_vtx_0 + 30, 6, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(0, 4, 3, 0, 4, 0, 2, 0),
+	gsSP2Triangles(4, 2, 5, 0, 1, 5, 2, 0),
+	gsSP2Triangles(3, 5, 1, 0, 5, 3, 4, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_cyan_seg0_mesh_vtx_0[4] = {
+	{{{0, -32, 7},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-48, 49, 7},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-48, -32, 7},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 49, 7},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_cyan_seg0_mesh_tri_0[] = {
+	gsSPVertex(cursya_cyan_seg0_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_cyan_seg0_mesh_vtx_1[4] = {
+	{{{48, -32, 7},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{48, 49, 7},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 49, 7},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -32, 7},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_cyan_seg0_mesh_tri_1[] = {
+	gsSPVertex(cursya_cyan_seg0_mesh_vtx_1 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_cyan_seg1_mesh_vtx_0[5] = {
+	{{{-39, 8, 9},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-39, -21, 9},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -21, 9},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-39, 36, 9},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 36, 9},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_cyan_seg1_mesh_tri_0[] = {
+	gsSPVertex(cursya_cyan_seg1_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_cyan_seg1_mesh_vtx_1[5] = {
+	{{{0, 36, 9},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -21, 9},0, {-14, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, -21, 9},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, 8, 9},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, 36, 9},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_cyan_seg1_mesh_tri_1[] = {
+	gsSPVertex(cursya_cyan_seg1_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(3, 4, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_cyan_seg2_mesh_vtx_0[5] = {
+	{{{-36, -3, 11},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-36, -23, 11},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -23, 11},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-36, 17, 11},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 17, 11},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_cyan_seg2_mesh_tri_0[] = {
+	gsSPVertex(cursya_cyan_seg2_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_cyan_seg2_mesh_vtx_1[5] = {
+	{{{0, 17, 11},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -23, 11},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, -23, 11},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, -3, 11},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, 17, 11},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_cyan_seg2_mesh_tri_1[] = {
+	gsSPVertex(cursya_cyan_seg2_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(3, 4, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_cyan_seg3_mesh_vtx_0[5] = {
+	{{{-34, -26, 12},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -26, 12},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 7, 12},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-34, -6, 12},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-34, 7, 12},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_cyan_seg3_mesh_tri_0[] = {
+	gsSPVertex(cursya_cyan_seg3_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_cyan_seg3_mesh_vtx_1[5] = {
+	{{{34, -26, 12},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{34, -6, 12},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{34, 7, 12},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -26, 12},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 7, 12},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_cyan_seg3_mesh_tri_1[] = {
+	gsSPVertex(cursya_cyan_seg3_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_cyan_pupil_002_layer4[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_cyan_cursya_iris_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(cursya_cyan_pupil_002_layer4_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_cyan_pupil_002_layer4[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_TEX_EDGE, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_cyan_eyeball_002_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_cyan_cursya_eyeball_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(cursya_cyan_eyeball_002_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_cyan_eyeball_002_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_cyan_curseyawings_002[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsSPSetLights1(cursya_cyan_curseyawings_002_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_cyan_sphere_left_cyan_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_cyan_cursya_sphere_left_cyan_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 252),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPSetLights1(cursya_cyan_sphere_left_cyan_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_cyan_sphere_left_cyan_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_cyan_sphere_right_cyan_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_cyan_cursya_sphere_right_cyan_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 252),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPSetLights1(cursya_cyan_sphere_right_cyan_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_cyan_sphere_right_cyan_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx cursya_cyan_eye_l_mesh[] = {
+	gsSPDisplayList(mat_cursya_cyan_pupil_002_layer4),
+	gsSPDisplayList(cursya_cyan_eye_l_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_cyan_pupil_002_layer4),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_cyan_eye_l_002_mesh[] = {
+	gsSPDisplayList(mat_cursya_cyan_eyeball_002_layer1),
+	gsSPDisplayList(cursya_cyan_eye_l_002_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_cyan_eyeball_002_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_cyan_eye_r_mesh[] = {
+	gsSPDisplayList(mat_cursya_cyan_pupil_002_layer4),
+	gsSPDisplayList(cursya_cyan_eye_r_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_cyan_pupil_002_layer4),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_cyan_eye_r_002_mesh[] = {
+	gsSPDisplayList(mat_cursya_cyan_eyeball_002_layer1),
+	gsSPDisplayList(cursya_cyan_eye_r_002_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_cyan_eyeball_002_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_cyan_wings_mesh[] = {
+	gsSPDisplayList(mat_cursya_cyan_curseyawings_002),
+	gsSPDisplayList(cursya_cyan_wings_mesh_tri_0),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_cyan_seg0_mesh[] = {
+	gsSPDisplayList(mat_cursya_cyan_sphere_left_cyan_layer1),
+	gsSPDisplayList(cursya_cyan_seg0_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_cyan_sphere_left_cyan_layer1),
+	gsSPDisplayList(mat_cursya_cyan_sphere_right_cyan_layer1),
+	gsSPDisplayList(cursya_cyan_seg0_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_cyan_sphere_right_cyan_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_cyan_seg1_mesh[] = {
+	gsSPDisplayList(mat_cursya_cyan_sphere_left_cyan_layer1),
+	gsSPDisplayList(cursya_cyan_seg1_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_cyan_sphere_left_cyan_layer1),
+	gsSPDisplayList(mat_cursya_cyan_sphere_right_cyan_layer1),
+	gsSPDisplayList(cursya_cyan_seg1_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_cyan_sphere_right_cyan_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_cyan_seg2_mesh[] = {
+	gsSPDisplayList(mat_cursya_cyan_sphere_left_cyan_layer1),
+	gsSPDisplayList(cursya_cyan_seg2_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_cyan_sphere_left_cyan_layer1),
+	gsSPDisplayList(mat_cursya_cyan_sphere_right_cyan_layer1),
+	gsSPDisplayList(cursya_cyan_seg2_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_cyan_sphere_right_cyan_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_cyan_seg3_mesh[] = {
+	gsSPDisplayList(mat_cursya_cyan_sphere_left_cyan_layer1),
+	gsSPDisplayList(cursya_cyan_seg3_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_cyan_sphere_left_cyan_layer1),
+	gsSPDisplayList(mat_cursya_cyan_sphere_right_cyan_layer1),
+	gsSPDisplayList(cursya_cyan_seg3_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_cyan_sphere_right_cyan_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_cyan_material_revert_render_settings[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPClearGeometryMode(G_TEXTURE_GEN),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 0),
+	gsDPSetEnvColor(255, 255, 255, 255),
+	gsDPSetAlphaCompare(G_AC_NONE),
+	gsSPEndDisplayList(),
+};
diff --git a/actors/cursya_cyan/texscroll.inc.c b/actors/cursya_cyan/texscroll.inc.c
new file mode 100644
index 0000000..aff44c3
--- /dev/null
+++ b/actors/cursya_cyan/texscroll.inc.c
@@ -0,0 +1,3 @@
+void scroll_actor_geo_cursya_cyan() {
+	
+}
diff --git a/actors/cursya_cyan/texscroll.inc.h b/actors/cursya_cyan/texscroll.inc.h
new file mode 100644
index 0000000..678c46d
--- /dev/null
+++ b/actors/cursya_cyan/texscroll.inc.h
@@ -0,0 +1,3 @@
+
+extern void scroll_actor_geo_cursya_cyan();
+
diff --git a/actors/cursya_purple/cursya_eyeball.rgba16.png b/actors/cursya_purple/cursya_eyeball.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..27b32c029eed25f4701ee5b43f129eaf72c6ffd9
GIT binary patch
literal 1197
zcmV;e1XBBnP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XU
z000XU0RWnu7ytkSUr9tkR9FecRv~oTFc4Mt24rS48wMt<gN1`FTVY|xQW&<tj%Bd0
zuym}2Wh)#^Va8JCFq?V*pLDVuJ4v^<_omj7bkg1b_fJYZYMLMBf3|mj1OEJU*TApy
zc-tR`8@*M5<;}dgxI8m?J~2r$29S-w5@RY(H>RrBX1#tf(+_8(Xv5y&Q34MS-<s3Y
zPbSL>1X0kPUciX~BB7OL_455Fk%I(QtH)+MK5=0af@XNwD*??sp!Nn;y)sFb?Nwv%
z8Q83!n{hF50f)eub;!Jj8w`n^Vx02447Nc6>(x_ZEwiPl%$Cw>*0i$4a&xZA#69h7
z+&fI7M_~2yv9SrjB@R9Whm%8X-@3O4wQNs`4uSjouT5g%Bz{9dqkw^r?qjdxu-FdT
zL^>oo1WqO=-oZ+!U6Dhyu;4)x+z_h9$E0CfXHa>ks=FQtFne*31J`klCbb*KhfhGG
zEeV0TAkivF)}}1iL4`n|C|V~KGREl!(V6blx$lEQp773cmQ8{s5U{o-(08Lnt=cn2
zJPtAU42IJY0=LUWW9m3qeLQr+fbgjX0#|V?Y@;GU74oa`b^R=5c+crzBOxlx_#I~&
z34op?s#iQvPtT5kbKR2=UnS{n&KsY`bO<o-L;}Fe<5V6;z{Dti_=rhhsu;RV;30Ly
zuT@wGR4~>6=2t*v8MuwcsgO`c0zh_bKBJC8Zbd$W-R~1416IIti*g3)t%Ixy%)L~B
zz3;?Nlp(Pa4;&O+7X9XqjSFg*O@3Yh1qqjo<4Yidu;zGVEK&driBbWEaq^%<QtMVB
zF1dQSQI}Y3V-)yFB1qLAdMN?PY+;c4TgX!r8T$$DNk}LVs}MkbpyU=Pz_GpsCouoE
zwNoIx58T}@nmo_&;*lcR%-GZlkY&cGmwY*c0C`ajsi2;G!4C!BVdK>TaRq1cMKO_g
zgm4Qs8yvz^ZvoiV{uj|zA}FDX@L=j$4bVCuCdX9V6%g@|x6i(=Jt=Gn1lF6a$qHnM
zz*&NOt(zhsR~8y5Db+xaDT?N7ZQMZ4ohvRYfq0WKp#<1s7W3<7JV{NSX82(v8I}X`
zi{t=-<b+~L905+y$eNveI(lvhg7WYCsuV@0)Aoh6Lx4_v`z@eE8k68@AczpbCM80h
z6%_*=0?s!Dc2|!o?7l6B5~#~7&Vp+^r5*r3p$^Gqt|gE<`|Y?NT5WL`GY=kTUj8kv
z8{ZJ))>D9s^VxNiLxl`wNONYN%KfJblBM1XZgvKax(%Rga_MlM>T+v7p3i!3$Abju
zND`@%0AQNCYZ>HMGO7}tv;o`Y&Vz^ZSiYL`i!VKJZr@9Qi&s~labMF0UkRdyO{oTx
z1{n@m5t*@fP4ng#7Hjfry&28sOI_~u2MOrz8Pwpxq}uLw5Z05SF=`~h-<EAznc4hi
zFzaahVFlui9A92Sk<>P+Tu~TAgqA@Gy%&q+QP4Q<n-qv0{`L4b*-o>~#>oCn00000
LNkvXXu0mjfC4C>i

literal 0
HcmV?d00001

diff --git a/actors/cursya_purple/cursya_iris.rgba16.png b/actors/cursya_purple/cursya_iris.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..b259db9e80eeeaade72889ee938e98039aed9d13
GIT binary patch
literal 1054
zcmV+(1mXLMP)<h;3K|Lk000e1NJLTq001BW001Bm1^@s6BkHEN00009a7bBm000XU
z000XU0RWnu7ytkR&`Cr=RA>e5*jbMpMGyqwTw^Z71BYZJV<Xx8|3768iNk<7Y=gmV
zDM#P56hqQI?CcZ7OH5{EWmQCXb@y)7e;ijgt^d=;vgA5fjm%apjWz#O<Lbutd9lX#
z8p}dh@+#@@%XsF~0ORubQpQ}{09TlxEhb2vm@qMxpZLqhzrRDyHej#dTMaU*GG0gi
z`4{1@8tV~}$HvdSGj<!0!U=LEGnSv2Y~$}Vs@`o>-EOF=dfBM@tx@%?QT11&iUADS
zduMDKuvd5*kTIe7%|_J+jg>!aRK3?&uQ=g9G^(C7s=jYj{n0qzh})~jfB(ydQ_vfY
zsvK8`jbm4q&<BmG!$Y*{lg4U*UH#gq`leC!MPpt6yT+*z=1)8tkXN376qZJar@9pW
zuu=7>QFXUb^?qaBHUmCxRK3+$4R8b);mF)?EX#BxP7Ih{X9OiPCWUA0j1xx4XN{`Q
z8&!82t8l*@3G)ej+Nk=rQT20UeKvR|Oh(+Y048XQ8IeN8$!|BR+ySn%m_YlOSe<!}
z%twtX>)5}2inH&@9iR|r195T+7OT@QH{e#5&pKDoI3`qV-o)yXk9WXy=1rIy%M+Sx
zT%Tl5@63y*`8iMB7CQ?19}SSe8WAK;HlD0bzdsvQ&a8*kPmT5cu0B~m@BbegRr-iM
z8`LLf-;*Pd1>$Tp#f&fyGvGy|ig2$puSd@Y4?FX{1w8D`^IgE0G{Agp-{PYI29g!x
z9M4!?va|e4qw4F%TJ?LQ%9YHw0fD{)4xhYL*wf!SYv;o+`^@~&fE>7~*!wz-aE0B{
zlL77=Mu~kApS$nTfXT_si}BtK*sy1UD@>Rpp<f=M=Z(|%z53*7e@6op;H?H(C&tq)
zH}&;Y$5|(K2Vv_O7h`#x`SC3<P0#@6M#Sb{n)SDSa;|4Q^Wvic`FFI5d)da4Ep%OW
zWU{|_?>_Tyg5wde!L3FXbc=7XzSHZ`_{4jK+ZUd6<T_^?kc};vjm24?hN;8q^-X37
z&T;c6whkWuA>xzKm76%f`PF4Ug^O(j=f+duBwXDze)w=Y{omnefDIk~VX-WP?PUV9
zUSH#4JQ*NQ=w5!@I2CTalOtdNTSz>y4PwH@`VfxwQ<t&4`FP43$NEjYc?X#2NZ2@m
zSRPM#<N78OCNCyvD^{0Jd;OAk8(?A@LC}_9by&Y-0_DZYgvyKe3fKQ^15Cte$d(c2
zZ82e6JU!gD`WwHt0UD(d@~$|}yqHiimQOzSO6!+=F$1!(m@(osLLL(;zLZe?{^xMu
YHFt?YIN$&x(f|Me07*qoM6N<$g0ABP+W-In

literal 0
HcmV?d00001

diff --git a/actors/cursya_purple/cursya_sphere_left_purple.rgba16.png b/actors/cursya_purple/cursya_sphere_left_purple.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..e621abff682b92e0f05a1d99e75073f5b08e6f41
GIT binary patch
literal 2860
zcmV+{3)A$8P)<h;3K|Lk000e1NJLTq001BW002M;1^@s6dyaLk00009a7bBm000XU
z000XU0RWnu7ytkY-bqA3RA>e5na^*WM;XUwce}gqdi`VlE4GuSjT@;bB@$F{;s6R4
zq)OZn2aX^iZX9~55C>H8pY+%Z7jCFGgaoA(qAIG?CQ?%3I*Gmc<$dkVdii{2cGkOc
zow!XR4lwDnGw-}J&+~nL&b)32|8M_A3zT6vtUPb|Z-&o?_0S3DLJ<x^EBp|F-wr!r
zSS*FV6(PLvJOKPIe1y=&DD+kOO@#a%Do4V@dNcf!hx^bo1@Qag{oz8n7}{v7#^*=E
zRk91IeYnsK54x{}8p2nfl?C1ke;U4unTv8GEF*XcTEX1w$ZKNm51E-q*xLFoNajKx
z;b(YmJS~9VhIfZ**+Enlf%7A+TL|uqgnxnX_Yw4CC$<c^xv<z7gtDlydiU$QU{bjL
z*6eD$2-z0GF!l!8oTLxRLy+AMp?HDSm;snyD+b;U?+jl?l+kTuWBhOtYBRQ}Y(Tra
zXn&2-1!PsDya6v2=|d6z+HHL`0KW=v4=)naYhfb{5YvUpdB`Zw!WoX6roYM4E6Cep
z+$?5zszOEBE?eOb%%9o<zYf0{o<;B+g73rN05+>=tmb%?r=*vC6Z7w*{f7v+>jdo~
z02TpoP*!3_{DpUdJ2ik=1kWHWH>3SBlzmQo$L8~XsD!KZl1@2fn-<tc_`Q+ff6%*D
zdpxoI674l{6@f;(IsQ$085}Ua9eUBL@QlrP`vBU4Otk^D&&w~MZRit7aHpyRzX)#*
z*GHybLD(F$3e7@yAzjgrdg|FDHweIIGr+tj_G8oR5>v#)6I}4q@blq3rq|rk41#on
zR?y@MA29CGr}z(X{4vjJXz@|FExSnTWb*xEW5C>I%~X?LA29>o>@z-KTpNiu{d}+X
z`rS6;#As|Fl89rfgZe}OKM6mJ2a0~z&yrfyBeejLET9$IkTR6zn$LM~Z0>7jV?e<%
z80jDJ?4BBkPXv%7UjNEWv(*t})XJ;|mHb;6=Rp#Bjd|B1BP@)BGaOsQv8{>rC&s`J
z!W+XrEHVfIC{*nQpxN!Mgbx`PfHVe-g-;P`q<h%ZML|<@c}Tj!7R&QVE?A8@FU!RA
z5q&1L))G=JvP>Km{%?jxxWT0WQ?S9aEdw}U&|_W~n8wFk@SSjF$XVr{_&XUi2h6Co
z%{5iV@QS3CMt*daf+648oU<7pdF*|__s0s6KG*!V%)oI5<=E!CCLq+-U^4L3-hgv1
z*)J*KdR0=mmeLB#45VWgaG^*SAbk$6*yjLr&H&VWjiL;FXpiwH94>c8!rdd~b{D4d
zy$hK&9!VQ4Fh!>TB=d7pvAxNnlyU?S+Z#|Fz1p&3a|N;pZLw|}y4kTdw4&fPOY*sA
ztx&kyTa*N^@QY5;rT}REWhNDT4SEQzLT6xmz^0jKK!Y!Y2WV_WZ^OQ%A7GPt-p?@4
zV{FP$sQtY(6)ks}iA@&iiYWjtv@Niu2D2VP_9?%&V5zy53eSL&j9_<>4xlP?7A3*e
z5uSZNS%T%OFhYexEQCvJcdS*80nq;|kUlo>tblja0YSOyHHt3LOHnF1F^bh#f%US-
znpRxLRBQ@%p8{WlE<y6P8MIRX;w(QhuOoC0DhaX*Odm2{X1q_|fQ4!1=049!xTa3-
zu>|wqxMkt5Gvn>4#$IcNX*&k6QCt~vWsHSGrVW_+taiqNsny45Yg|2Bj4dQ?9w13)
zSTA(N!_xX75bugfTZJlo1F~LtG^_nB_KpGYj32G_M<<|KsQEzuGCl*#4puk=a|3aP
zcUtI>j}bxkN5U;G2D7HV00|(Q{Wbv9{&VKGzpM@zL>|LQxVmxOM#u(2H|V{PG>YAL
z4>Z;4q(GH`%oeD#(aVZ)qy>=0&Qx2xmfc{y19?08jOQr}xY(R`n<jF!g3y<pLFgfR
z>=S^sR)@5*reUoX)sUe==J?f8bI}sMbylH0_O*iAZ}GefWBK2p9|OqOYTck<Ne!~!
zeD1?w2u}|owcpVaq#oCMgd6RtP^qbwxXrqK_*q}9l4h76q&FCU)D7WV7bXDc=X7$V
ziwA4N8Ve6Fum1G}d&HWW+C~rwU>(ioU>Yrfh;%=&YNqDR$%--%C{rImRR%A??;G$L
zTi|N>US+v>W9T*)b|CA(E)0y?l+S3?B=`W)CKdE!TTs0BrYz7~Ji|Kz@KCGc4wk{E
z3|9%(I`7G&@FI)8^j5sbLK(e8;n{@*a|aH6&d(CK1;<?plRZ!sfH-IXm3-al^@#jd
zOy9Lq_!cDr!H+=IwQXRmGj|R;3xEdJ8(V-mwx{FLMfy?XTU_WBT;As`p<W&`OEOyv
zlszCwmv~iWf<l-A46U`8wZfaUaD;u9U(@kCd(bUr&J+ON#V?mNcEBra!Kk}Wn)UoB
zNlY}iW2@bxZVJp;umI74ddwT7o)<OtTPyr@Q?Q!buOhw5`~%iZ0Wc5`g+_x<=*k%+
zjR?otR*VZrHifAva$&_f25km{)KK0bw8Ap`eLqXz*6cj=S!>Eq0r)e4c$q*n2DV^O
zVrn<q{1~w@9R)bj5~kxemT=t?)Ml9g>R8e2sA7d#V!-!pl$!^DcMI<cUSy^K@I2kn
ze)1}|Gy<V;Biu9IpcMpiqDAHbpe1IRlPpg50yxC?eFCupkeH_IIR-#CY{{ILHBTDG
z`L7=e%FTnv!1B26(%)pM8aDxr^3n936AI2ZYWaAIYI?P|d>;ewF>ctv4Qk|Hab&O#
z$#fBL*%j%ONW!h{GW=JUiwxSCUVe5JRIifK?a?kTL3`2~TEe$K1|Ys0{V3cf15GBJ
z<5oxjuNx3>ybcKNDXdJO;s{F|qS28%$q+1sjxmntrrXW#A1mgW8`9yF-n(HBE7<4e
znh4aq9JN%;Ea7Q?=Ha}neD;g#9`SIp1%yZz*xaZlZr7CNrU#GD2IDnmY%<obu62AL
zN*9~7)@m5Hv%*Yyd=~WIs~qx;sAz-I6tgMRU@`-Ix7XyC@?0m<tnJ>MgqWLFm@rPB
zj%E4|PbXV|m-&RWE-1{~lFh?OD;SWg6%He~oZ|)}Fk+97Qr(hn(ykPQ^YYR3Ue{Da
z02S!5t$`KN9WQ0XYA5vt(LM_*A$gaucb$SJn_hGthsGAI#+<#DeIfvN2}1v!LAdES
z@972yHO_avBf+v3*lO(e`Kzc0n*d5c`_^lIkMVV+p9+AS<^dsq6@;sKc1Nxi0@JVw
zh%V5(K4}~Npal@Wq;{ZfT;w0Pb|?&wjRAI!oAF?A%0)yi?!hDnrD8UC-lSKoSD73w
z*e)z^M-Y@5<sY@Hf?>s}Ex=k#er32xm0QIMn)DWoEXB5zo*`Ud{2HV+Eb6va{M0?N
zMh_msyM@`l5`f5!A5Tm{*tP-CrOz(W6)!Tk2>`>)=9MIuuXH_$)BKz=2=nsE{=0x!
zMux#@F;bi$geCb$&2+o;jm_uO(*MdZF#YU%iuOG|=e(A;BO9-;Ue1$1PW~y*IV%Q4
zzb$43{Zj#mocQ?>8B)UzO#oElmw>UIHCOj}uJ?2C&o`!|N4)_2JJB-%kbztY-yc3I
zynZCtv`arrQabjEYCKx}BDzD+<lud#0HS1mj1O~O4bKy-Ev(YRK2}AG(E|Wv`#cu_
z8HoMs#L0Y&lRoD_J$`F=QW~&=c<ulu!Ay=X0WANKdvgANZ~PyF-`X&Y%Y^X&0000<
KMNUMnLSTXiH({0l

literal 0
HcmV?d00001

diff --git a/actors/cursya_purple/cursya_sphere_right_purple.rgba16.png b/actors/cursya_purple/cursya_sphere_right_purple.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..1c12ac78f4dc5143fba9a3a9a297414a2b2c7118
GIT binary patch
literal 3296
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

literal 0
HcmV?d00001

diff --git a/actors/cursya_purple/geo.inc.c b/actors/cursya_purple/geo.inc.c
new file mode 100644
index 0000000..eba8223
--- /dev/null
+++ b/actors/cursya_purple/geo.inc.c
@@ -0,0 +1,56 @@
+#include "src/game/envfx_snow.h"
+
+const GeoLayout cursya_purple_geo[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_SHADOW(0, 153, 100),
+		GEO_OPEN_NODE(),
+			GEO_SCALE(LAYER_FORCE, 65536),
+			GEO_OPEN_NODE(),
+				GEO_ANIMATED_PART(LAYER_OPAQUE, 0, -12, 0, NULL),
+				GEO_OPEN_NODE(),
+					GEO_ANIMATED_PART(LAYER_ALPHA, 17, 138, 12, cursya_purple_eye_l_mesh),
+					GEO_OPEN_NODE(),
+						GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 3, 5),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, -2, 4, cursya_purple_eye_l_002_mesh),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+					GEO_ANIMATED_PART(LAYER_ALPHA, -17, 138, 12, cursya_purple_eye_r_mesh),
+					GEO_OPEN_NODE(),
+						GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 3, 5),
+						GEO_OPEN_NODE(),
+							GEO_TRANSLATE_ROTATE(LAYER_OPAQUE, 0, -2, 4, 0, 0, 0),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, cursya_purple_eye_r_002_mesh),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+					GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 94, 0, cursya_purple_wings_mesh),
+				GEO_CLOSE_NODE(),
+				GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 0, 1),
+				GEO_OPEN_NODE(),
+					GEO_SWITCH_CASE(3, geo_switch_anim_state),
+					GEO_OPEN_NODE(),
+						GEO_NODE_START(),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 24, 0, cursya_purple_seg0_mesh),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 52, 0, cursya_purple_seg1_mesh),
+								GEO_OPEN_NODE(),
+									GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 53, 0, cursya_purple_seg2_mesh),
+									GEO_OPEN_NODE(),
+										GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 35, 0, cursya_purple_seg3_mesh),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+			GEO_CLOSE_NODE(),
+		GEO_CLOSE_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, cursya_purple_material_revert_render_settings),
+		GEO_DISPLAY_LIST(LAYER_ALPHA, cursya_purple_material_revert_render_settings),
+	GEO_CLOSE_NODE(),
+	GEO_END(),
+};
diff --git a/actors/cursya_purple/geo_header.h b/actors/cursya_purple/geo_header.h
new file mode 100644
index 0000000..e671be9
--- /dev/null
+++ b/actors/cursya_purple/geo_header.h
@@ -0,0 +1,39 @@
+extern const GeoLayout cursya_purple_geo[];
+extern Vtx cursya_purple_eye_l_mesh_vtx_0[4];
+extern Gfx cursya_purple_eye_l_mesh_tri_0[];
+extern Vtx cursya_purple_eye_l_002_mesh_vtx_0[4];
+extern Gfx cursya_purple_eye_l_002_mesh_tri_0[];
+extern Vtx cursya_purple_eye_r_mesh_vtx_0[4];
+extern Gfx cursya_purple_eye_r_mesh_tri_0[];
+extern Vtx cursya_purple_eye_r_002_mesh_vtx_0[4];
+extern Gfx cursya_purple_eye_r_002_mesh_tri_0[];
+extern Vtx cursya_purple_wings_mesh_vtx_0[36];
+extern Gfx cursya_purple_wings_mesh_tri_0[];
+extern Vtx cursya_purple_seg0_mesh_vtx_0[4];
+extern Gfx cursya_purple_seg0_mesh_tri_0[];
+extern Vtx cursya_purple_seg0_mesh_vtx_1[4];
+extern Gfx cursya_purple_seg0_mesh_tri_1[];
+extern Vtx cursya_purple_seg1_mesh_vtx_0[5];
+extern Gfx cursya_purple_seg1_mesh_tri_0[];
+extern Vtx cursya_purple_seg1_mesh_vtx_1[5];
+extern Gfx cursya_purple_seg1_mesh_tri_1[];
+extern Vtx cursya_purple_seg2_mesh_vtx_0[5];
+extern Gfx cursya_purple_seg2_mesh_tri_0[];
+extern Vtx cursya_purple_seg2_mesh_vtx_1[5];
+extern Gfx cursya_purple_seg2_mesh_tri_1[];
+extern Vtx cursya_purple_seg3_mesh_vtx_0[5];
+extern Gfx cursya_purple_seg3_mesh_tri_0[];
+extern Vtx cursya_purple_seg3_mesh_vtx_1[5];
+extern Gfx cursya_purple_seg3_mesh_tri_1[];
+
+extern Gfx cursya_purple_eye_l_mesh[];
+extern Gfx cursya_purple_eye_l_002_mesh[];
+extern Gfx cursya_purple_eye_r_mesh[];
+extern Gfx cursya_purple_eye_r_002_mesh[];
+extern Gfx cursya_purple_wings_mesh[];
+extern Gfx cursya_purple_seg0_mesh[];
+extern Gfx cursya_purple_seg1_mesh[];
+extern Gfx cursya_purple_seg2_mesh[];
+extern Gfx cursya_purple_seg3_mesh[];
+extern Gfx cursya_purple_material_revert_render_settings[];
+
diff --git a/actors/cursya_purple/model.inc.c b/actors/cursya_purple/model.inc.c
new file mode 100644
index 0000000..a04a7e1
--- /dev/null
+++ b/actors/cursya_purple/model.inc.c
@@ -0,0 +1,509 @@
+Lights1 cursya_purple_pupil_005_layer4_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_purple_eyeball_005_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_purple_curseyawings_005_lights = gdSPDefLights1(
+	0x23, 0x0, 0x7F,
+	0x47, 0x0, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_purple_sphere_left_purple_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_purple_sphere_right_purple_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Gfx cursya_purple_cursya_iris_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_purple_cursya_iris_rgba16[] = {
+	#include "actors/cursya_purple/cursya_iris.rgba16.inc.c"
+};
+
+Gfx cursya_purple_cursya_eyeball_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_purple_cursya_eyeball_rgba16[] = {
+	#include "actors/cursya_purple/cursya_eyeball.rgba16.inc.c"
+};
+
+Gfx cursya_purple_cursya_sphere_left_purple_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_purple_cursya_sphere_left_purple_rgba16[] = {
+	#include "actors/cursya_purple/cursya_sphere_left_purple.rgba16.inc.c"
+};
+
+Gfx cursya_purple_cursya_sphere_right_purple_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_purple_cursya_sphere_right_purple_rgba16[] = {
+	#include "actors/cursya_purple/cursya_sphere_right_purple.rgba16.inc.c"
+};
+
+Vtx cursya_purple_eye_l_mesh_vtx_0[4] = {
+	{{{7, -6, 24},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{7, 7, 24},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, 7, 24},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, -6, 24},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_purple_eye_l_mesh_tri_0[] = {
+	gsSPVertex(cursya_purple_eye_l_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_purple_eye_l_002_mesh_vtx_0[4] = {
+	{{{16, -16, 1},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{16, 15, 1},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, 15, 1},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, -16, 1},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_purple_eye_l_002_mesh_tri_0[] = {
+	gsSPVertex(cursya_purple_eye_l_002_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_purple_eye_r_mesh_vtx_0[4] = {
+	{{{7, -6, 24},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{7, 7, 24},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, 7, 24},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, -6, 24},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_purple_eye_r_mesh_tri_0[] = {
+	gsSPVertex(cursya_purple_eye_r_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_purple_eye_r_002_mesh_vtx_0[4] = {
+	{{{16, -16, 1},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{16, 15, 1},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, 15, 1},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, -16, 1},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_purple_eye_r_002_mesh_tri_0[] = {
+	gsSPVertex(cursya_purple_eye_r_002_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_purple_wings_mesh_vtx_0[36] = {
+	{{{62, -13, -15},0, {-16, 1008},{0xC7, 0xBA, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0x9E, 0x51, 0x0, 0xFF}}},
+	{{{70, -1, -15},0, {-16, 1008},{0x39, 0x46, 0xA7, 0xFF}}},
+	{{{62, -13, -2},0, {-16, 1008},{0xC7, 0xBA, 0x59, 0xFF}}},
+	{{{94, -31, -8},0, {-16, 1008},{0x62, 0xAF, 0x0, 0xFF}}},
+	{{{70, -1, -2},0, {-16, 1008},{0x39, 0x46, 0x59, 0xFF}}},
+	{{{76, 10, -15},0, {-16, 1008},{0x2, 0xA6, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0x81, 0xFF, 0x0, 0xFF}}},
+	{{{73, 24, -15},0, {-16, 1008},{0xFE, 0x5A, 0xA7, 0xFF}}},
+	{{{76, 10, -2},0, {-16, 1008},{0x2, 0xA6, 0x59, 0xFF}}},
+	{{{112, 17, -8},0, {-16, 1008},{0x7F, 0x1, 0x0, 0xFF}}},
+	{{{73, 24, -2},0, {-16, 1008},{0xFE, 0x5A, 0x59, 0xFF}}},
+	{{{71, 36, -15},0, {-16, 1008},{0x3C, 0xBC, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0xA0, 0xAD, 0x0, 0xFF}}},
+	{{{60, 45, -15},0, {-16, 1008},{0xC4, 0x44, 0xA7, 0xFF}}},
+	{{{71, 36, -2},0, {-16, 1008},{0x3C, 0xBC, 0x59, 0xFF}}},
+	{{{94, 65, -8},0, {-16, 1008},{0x60, 0x53, 0x0, 0xFF}}},
+	{{{60, 45, -2},0, {-16, 1008},{0xC4, 0x44, 0x59, 0xFF}}},
+	{{{-62, -13, -15},0, {-16, 1008},{0x39, 0xBA, 0xA7, 0xFF}}},
+	{{{-70, -1, -15},0, {-16, 1008},{0xC7, 0x46, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x62, 0x51, 0x0, 0xFF}}},
+	{{{-94, -31, -8},0, {-16, 1008},{0x9E, 0xAF, 0x0, 0xFF}}},
+	{{{-62, -13, -2},0, {-16, 1008},{0x39, 0xBA, 0x59, 0xFF}}},
+	{{{-70, -1, -2},0, {-16, 1008},{0xC7, 0x46, 0x59, 0xFF}}},
+	{{{-76, 10, -15},0, {-16, 1008},{0xFE, 0xA6, 0xA7, 0xFF}}},
+	{{{-73, 24, -15},0, {-16, 1008},{0x2, 0x5A, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x7F, 0xFF, 0x0, 0xFF}}},
+	{{{-112, 17, -8},0, {-16, 1008},{0x81, 0x1, 0x0, 0xFF}}},
+	{{{-76, 10, -2},0, {-16, 1008},{0xFE, 0xA6, 0x59, 0xFF}}},
+	{{{-73, 24, -2},0, {-16, 1008},{0x2, 0x5A, 0x59, 0xFF}}},
+	{{{-71, 36, -15},0, {-16, 1008},{0xC4, 0xBC, 0xA7, 0xFF}}},
+	{{{-60, 45, -15},0, {-16, 1008},{0x3C, 0x44, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x60, 0xAD, 0x0, 0xFF}}},
+	{{{-94, 65, -8},0, {-16, 1008},{0xA0, 0x53, 0x0, 0xFF}}},
+	{{{-71, 36, -2},0, {-16, 1008},{0xC4, 0xBC, 0x59, 0xFF}}},
+	{{{-60, 45, -2},0, {-16, 1008},{0x3C, 0x44, 0x59, 0xFF}}},
+};
+
+Gfx cursya_purple_wings_mesh_tri_0[] = {
+	gsSPVertex(cursya_purple_wings_mesh_vtx_0 + 0, 30, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(0, 4, 3, 0, 4, 0, 2, 0),
+	gsSP2Triangles(4, 2, 5, 0, 2, 1, 5, 0),
+	gsSP2Triangles(3, 5, 1, 0, 5, 3, 4, 0),
+	gsSP2Triangles(6, 7, 8, 0, 9, 7, 6, 0),
+	gsSP2Triangles(6, 10, 9, 0, 10, 6, 8, 0),
+	gsSP2Triangles(10, 8, 11, 0, 8, 7, 11, 0),
+	gsSP2Triangles(9, 11, 7, 0, 11, 9, 10, 0),
+	gsSP2Triangles(12, 13, 14, 0, 15, 13, 12, 0),
+	gsSP2Triangles(12, 16, 15, 0, 16, 12, 14, 0),
+	gsSP2Triangles(16, 14, 17, 0, 14, 13, 17, 0),
+	gsSP2Triangles(15, 17, 13, 0, 17, 15, 16, 0),
+	gsSP2Triangles(18, 19, 20, 0, 21, 19, 18, 0),
+	gsSP2Triangles(18, 22, 21, 0, 22, 18, 20, 0),
+	gsSP2Triangles(22, 20, 23, 0, 19, 23, 20, 0),
+	gsSP2Triangles(21, 23, 19, 0, 23, 21, 22, 0),
+	gsSP2Triangles(24, 25, 26, 0, 27, 25, 24, 0),
+	gsSP2Triangles(24, 28, 27, 0, 28, 24, 26, 0),
+	gsSP2Triangles(28, 26, 29, 0, 25, 29, 26, 0),
+	gsSP2Triangles(27, 29, 25, 0, 29, 27, 28, 0),
+	gsSPVertex(cursya_purple_wings_mesh_vtx_0 + 30, 6, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(0, 4, 3, 0, 4, 0, 2, 0),
+	gsSP2Triangles(4, 2, 5, 0, 1, 5, 2, 0),
+	gsSP2Triangles(3, 5, 1, 0, 5, 3, 4, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_purple_seg0_mesh_vtx_0[4] = {
+	{{{0, -32, 7},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-48, 49, 7},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-48, -32, 7},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 49, 7},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_purple_seg0_mesh_tri_0[] = {
+	gsSPVertex(cursya_purple_seg0_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_purple_seg0_mesh_vtx_1[4] = {
+	{{{48, -32, 7},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{48, 49, 7},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 49, 7},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -32, 7},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_purple_seg0_mesh_tri_1[] = {
+	gsSPVertex(cursya_purple_seg0_mesh_vtx_1 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_purple_seg1_mesh_vtx_0[5] = {
+	{{{-39, 8, 9},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-39, -21, 9},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -21, 9},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-39, 36, 9},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 36, 9},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_purple_seg1_mesh_tri_0[] = {
+	gsSPVertex(cursya_purple_seg1_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_purple_seg1_mesh_vtx_1[5] = {
+	{{{0, 36, 9},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -21, 9},0, {-14, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, -21, 9},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, 8, 9},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, 36, 9},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_purple_seg1_mesh_tri_1[] = {
+	gsSPVertex(cursya_purple_seg1_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(3, 4, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_purple_seg2_mesh_vtx_0[5] = {
+	{{{-36, -3, 11},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-36, -23, 11},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -23, 11},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-36, 17, 11},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 17, 11},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_purple_seg2_mesh_tri_0[] = {
+	gsSPVertex(cursya_purple_seg2_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_purple_seg2_mesh_vtx_1[5] = {
+	{{{0, 17, 11},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -23, 11},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, -23, 11},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, -3, 11},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, 17, 11},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_purple_seg2_mesh_tri_1[] = {
+	gsSPVertex(cursya_purple_seg2_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(3, 4, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_purple_seg3_mesh_vtx_0[5] = {
+	{{{-34, -26, 12},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -26, 12},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 7, 12},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-34, -6, 12},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-34, 7, 12},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_purple_seg3_mesh_tri_0[] = {
+	gsSPVertex(cursya_purple_seg3_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_purple_seg3_mesh_vtx_1[5] = {
+	{{{34, -26, 12},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{34, -6, 12},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{34, 7, 12},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -26, 12},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 7, 12},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_purple_seg3_mesh_tri_1[] = {
+	gsSPVertex(cursya_purple_seg3_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_purple_pupil_005_layer4[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_purple_cursya_iris_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(cursya_purple_pupil_005_layer4_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_purple_pupil_005_layer4[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_TEX_EDGE, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_purple_eyeball_005_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_purple_cursya_eyeball_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(cursya_purple_eyeball_005_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_purple_eyeball_005_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_purple_curseyawings_005[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsSPSetLights1(cursya_purple_curseyawings_005_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_purple_sphere_left_purple_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_purple_cursya_sphere_left_purple_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 252),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPSetLights1(cursya_purple_sphere_left_purple_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_purple_sphere_left_purple_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_purple_sphere_right_purple_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_purple_cursya_sphere_right_purple_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 252),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPSetLights1(cursya_purple_sphere_right_purple_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_purple_sphere_right_purple_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx cursya_purple_eye_l_mesh[] = {
+	gsSPDisplayList(mat_cursya_purple_pupil_005_layer4),
+	gsSPDisplayList(cursya_purple_eye_l_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_purple_pupil_005_layer4),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_purple_eye_l_002_mesh[] = {
+	gsSPDisplayList(mat_cursya_purple_eyeball_005_layer1),
+	gsSPDisplayList(cursya_purple_eye_l_002_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_purple_eyeball_005_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_purple_eye_r_mesh[] = {
+	gsSPDisplayList(mat_cursya_purple_pupil_005_layer4),
+	gsSPDisplayList(cursya_purple_eye_r_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_purple_pupil_005_layer4),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_purple_eye_r_002_mesh[] = {
+	gsSPDisplayList(mat_cursya_purple_eyeball_005_layer1),
+	gsSPDisplayList(cursya_purple_eye_r_002_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_purple_eyeball_005_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_purple_wings_mesh[] = {
+	gsSPDisplayList(mat_cursya_purple_curseyawings_005),
+	gsSPDisplayList(cursya_purple_wings_mesh_tri_0),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_purple_seg0_mesh[] = {
+	gsSPDisplayList(mat_cursya_purple_sphere_left_purple_layer1),
+	gsSPDisplayList(cursya_purple_seg0_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_purple_sphere_left_purple_layer1),
+	gsSPDisplayList(mat_cursya_purple_sphere_right_purple_layer1),
+	gsSPDisplayList(cursya_purple_seg0_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_purple_sphere_right_purple_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_purple_seg1_mesh[] = {
+	gsSPDisplayList(mat_cursya_purple_sphere_left_purple_layer1),
+	gsSPDisplayList(cursya_purple_seg1_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_purple_sphere_left_purple_layer1),
+	gsSPDisplayList(mat_cursya_purple_sphere_right_purple_layer1),
+	gsSPDisplayList(cursya_purple_seg1_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_purple_sphere_right_purple_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_purple_seg2_mesh[] = {
+	gsSPDisplayList(mat_cursya_purple_sphere_left_purple_layer1),
+	gsSPDisplayList(cursya_purple_seg2_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_purple_sphere_left_purple_layer1),
+	gsSPDisplayList(mat_cursya_purple_sphere_right_purple_layer1),
+	gsSPDisplayList(cursya_purple_seg2_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_purple_sphere_right_purple_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_purple_seg3_mesh[] = {
+	gsSPDisplayList(mat_cursya_purple_sphere_left_purple_layer1),
+	gsSPDisplayList(cursya_purple_seg3_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_purple_sphere_left_purple_layer1),
+	gsSPDisplayList(mat_cursya_purple_sphere_right_purple_layer1),
+	gsSPDisplayList(cursya_purple_seg3_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_purple_sphere_right_purple_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_purple_material_revert_render_settings[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPClearGeometryMode(G_TEXTURE_GEN),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 0),
+	gsDPSetEnvColor(255, 255, 255, 255),
+	gsDPSetAlphaCompare(G_AC_NONE),
+	gsSPEndDisplayList(),
+};
diff --git a/actors/cursya_purple/texscroll.inc.c b/actors/cursya_purple/texscroll.inc.c
new file mode 100644
index 0000000..a5800fe
--- /dev/null
+++ b/actors/cursya_purple/texscroll.inc.c
@@ -0,0 +1,3 @@
+void scroll_actor_geo_cursya_purple() {
+	
+}
diff --git a/actors/cursya_purple/texscroll.inc.h b/actors/cursya_purple/texscroll.inc.h
new file mode 100644
index 0000000..7890fc6
--- /dev/null
+++ b/actors/cursya_purple/texscroll.inc.h
@@ -0,0 +1,3 @@
+
+extern void scroll_actor_geo_cursya_purple();
+
diff --git a/actors/cursya_red/cursya_eyeball.rgba16.png b/actors/cursya_red/cursya_eyeball.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..27b32c029eed25f4701ee5b43f129eaf72c6ffd9
GIT binary patch
literal 1197
zcmV;e1XBBnP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XU
z000XU0RWnu7ytkSUr9tkR9FecRv~oTFc4Mt24rS48wMt<gN1`FTVY|xQW&<tj%Bd0
zuym}2Wh)#^Va8JCFq?V*pLDVuJ4v^<_omj7bkg1b_fJYZYMLMBf3|mj1OEJU*TApy
zc-tR`8@*M5<;}dgxI8m?J~2r$29S-w5@RY(H>RrBX1#tf(+_8(Xv5y&Q34MS-<s3Y
zPbSL>1X0kPUciX~BB7OL_455Fk%I(QtH)+MK5=0af@XNwD*??sp!Nn;y)sFb?Nwv%
z8Q83!n{hF50f)eub;!Jj8w`n^Vx02447Nc6>(x_ZEwiPl%$Cw>*0i$4a&xZA#69h7
z+&fI7M_~2yv9SrjB@R9Whm%8X-@3O4wQNs`4uSjouT5g%Bz{9dqkw^r?qjdxu-FdT
zL^>oo1WqO=-oZ+!U6Dhyu;4)x+z_h9$E0CfXHa>ks=FQtFne*31J`klCbb*KhfhGG
zEeV0TAkivF)}}1iL4`n|C|V~KGREl!(V6blx$lEQp773cmQ8{s5U{o-(08Lnt=cn2
zJPtAU42IJY0=LUWW9m3qeLQr+fbgjX0#|V?Y@;GU74oa`b^R=5c+crzBOxlx_#I~&
z34op?s#iQvPtT5kbKR2=UnS{n&KsY`bO<o-L;}Fe<5V6;z{Dti_=rhhsu;RV;30Ly
zuT@wGR4~>6=2t*v8MuwcsgO`c0zh_bKBJC8Zbd$W-R~1416IIti*g3)t%Ixy%)L~B
zz3;?Nlp(Pa4;&O+7X9XqjSFg*O@3Yh1qqjo<4Yidu;zGVEK&driBbWEaq^%<QtMVB
zF1dQSQI}Y3V-)yFB1qLAdMN?PY+;c4TgX!r8T$$DNk}LVs}MkbpyU=Pz_GpsCouoE
zwNoIx58T}@nmo_&;*lcR%-GZlkY&cGmwY*c0C`ajsi2;G!4C!BVdK>TaRq1cMKO_g
zgm4Qs8yvz^ZvoiV{uj|zA}FDX@L=j$4bVCuCdX9V6%g@|x6i(=Jt=Gn1lF6a$qHnM
zz*&NOt(zhsR~8y5Db+xaDT?N7ZQMZ4ohvRYfq0WKp#<1s7W3<7JV{NSX82(v8I}X`
zi{t=-<b+~L905+y$eNveI(lvhg7WYCsuV@0)Aoh6Lx4_v`z@eE8k68@AczpbCM80h
z6%_*=0?s!Dc2|!o?7l6B5~#~7&Vp+^r5*r3p$^Gqt|gE<`|Y?NT5WL`GY=kTUj8kv
z8{ZJ))>D9s^VxNiLxl`wNONYN%KfJblBM1XZgvKax(%Rga_MlM>T+v7p3i!3$Abju
zND`@%0AQNCYZ>HMGO7}tv;o`Y&Vz^ZSiYL`i!VKJZr@9Qi&s~labMF0UkRdyO{oTx
z1{n@m5t*@fP4ng#7Hjfry&28sOI_~u2MOrz8Pwpxq}uLw5Z05SF=`~h-<EAznc4hi
zFzaahVFlui9A92Sk<>P+Tu~TAgqA@Gy%&q+QP4Q<n-qv0{`L4b*-o>~#>oCn00000
LNkvXXu0mjfC4C>i

literal 0
HcmV?d00001

diff --git a/actors/cursya_red/cursya_iris.rgba16.png b/actors/cursya_red/cursya_iris.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..b259db9e80eeeaade72889ee938e98039aed9d13
GIT binary patch
literal 1054
zcmV+(1mXLMP)<h;3K|Lk000e1NJLTq001BW001Bm1^@s6BkHEN00009a7bBm000XU
z000XU0RWnu7ytkR&`Cr=RA>e5*jbMpMGyqwTw^Z71BYZJV<Xx8|3768iNk<7Y=gmV
zDM#P56hqQI?CcZ7OH5{EWmQCXb@y)7e;ijgt^d=;vgA5fjm%apjWz#O<Lbutd9lX#
z8p}dh@+#@@%XsF~0ORubQpQ}{09TlxEhb2vm@qMxpZLqhzrRDyHej#dTMaU*GG0gi
z`4{1@8tV~}$HvdSGj<!0!U=LEGnSv2Y~$}Vs@`o>-EOF=dfBM@tx@%?QT11&iUADS
zduMDKuvd5*kTIe7%|_J+jg>!aRK3?&uQ=g9G^(C7s=jYj{n0qzh})~jfB(ydQ_vfY
zsvK8`jbm4q&<BmG!$Y*{lg4U*UH#gq`leC!MPpt6yT+*z=1)8tkXN376qZJar@9pW
zuu=7>QFXUb^?qaBHUmCxRK3+$4R8b);mF)?EX#BxP7Ih{X9OiPCWUA0j1xx4XN{`Q
z8&!82t8l*@3G)ej+Nk=rQT20UeKvR|Oh(+Y048XQ8IeN8$!|BR+ySn%m_YlOSe<!}
z%twtX>)5}2inH&@9iR|r195T+7OT@QH{e#5&pKDoI3`qV-o)yXk9WXy=1rIy%M+Sx
zT%Tl5@63y*`8iMB7CQ?19}SSe8WAK;HlD0bzdsvQ&a8*kPmT5cu0B~m@BbegRr-iM
z8`LLf-;*Pd1>$Tp#f&fyGvGy|ig2$puSd@Y4?FX{1w8D`^IgE0G{Agp-{PYI29g!x
z9M4!?va|e4qw4F%TJ?LQ%9YHw0fD{)4xhYL*wf!SYv;o+`^@~&fE>7~*!wz-aE0B{
zlL77=Mu~kApS$nTfXT_si}BtK*sy1UD@>Rpp<f=M=Z(|%z53*7e@6op;H?H(C&tq)
zH}&;Y$5|(K2Vv_O7h`#x`SC3<P0#@6M#Sb{n)SDSa;|4Q^Wvic`FFI5d)da4Ep%OW
zWU{|_?>_Tyg5wde!L3FXbc=7XzSHZ`_{4jK+ZUd6<T_^?kc};vjm24?hN;8q^-X37
z&T;c6whkWuA>xzKm76%f`PF4Ug^O(j=f+duBwXDze)w=Y{omnefDIk~VX-WP?PUV9
zUSH#4JQ*NQ=w5!@I2CTalOtdNTSz>y4PwH@`VfxwQ<t&4`FP43$NEjYc?X#2NZ2@m
zSRPM#<N78OCNCyvD^{0Jd;OAk8(?A@LC}_9by&Y-0_DZYgvyKe3fKQ^15Cte$d(c2
zZ82e6JU!gD`WwHt0UD(d@~$|}yqHiimQOzSO6!+=F$1!(m@(osLLL(;zLZe?{^xMu
YHFt?YIN$&x(f|Me07*qoM6N<$g0ABP+W-In

literal 0
HcmV?d00001

diff --git a/actors/cursya_red/cursya_sphere_left_red.rgba16.png b/actors/cursya_red/cursya_sphere_left_red.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..07247db52aca0b4fe2f7eafd5962c8d0b525a1ee
GIT binary patch
literal 2916
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
O0000<MNUMnLSTZj*^!$7

literal 0
HcmV?d00001

diff --git a/actors/cursya_red/cursya_sphere_right_red.rgba16.png b/actors/cursya_red/cursya_sphere_right_red.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..2b9b2edccfbdf612e1111e6f826130a6226f1fb2
GIT binary patch
literal 3278
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
M07*qoM6N<$g0Oin*#H0l

literal 0
HcmV?d00001

diff --git a/actors/cursya_red/geo.inc.c b/actors/cursya_red/geo.inc.c
new file mode 100644
index 0000000..4dc62f7
--- /dev/null
+++ b/actors/cursya_red/geo.inc.c
@@ -0,0 +1,56 @@
+#include "src/game/envfx_snow.h"
+
+const GeoLayout cursya_red_geo[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_SHADOW(0, 153, 100),
+		GEO_OPEN_NODE(),
+			GEO_SCALE(LAYER_FORCE, 65536),
+			GEO_OPEN_NODE(),
+				GEO_ANIMATED_PART(LAYER_OPAQUE, 0, -12, 0, NULL),
+				GEO_OPEN_NODE(),
+					GEO_ANIMATED_PART(LAYER_ALPHA, 17, 138, 12, cursya_red_eye_l_mesh),
+					GEO_OPEN_NODE(),
+						GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 3, 5),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, -2, 4, cursya_red_eye_l_002_mesh),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+					GEO_ANIMATED_PART(LAYER_ALPHA, -17, 138, 12, cursya_red_eye_r_mesh),
+					GEO_OPEN_NODE(),
+						GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 3, 5),
+						GEO_OPEN_NODE(),
+							GEO_TRANSLATE_ROTATE(LAYER_OPAQUE, 0, -2, 4, 0, 0, 0),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, cursya_red_eye_r_002_mesh),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+					GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 94, 0, cursya_red_wings_mesh),
+				GEO_CLOSE_NODE(),
+				GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 0, 1),
+				GEO_OPEN_NODE(),
+					GEO_SWITCH_CASE(3, geo_switch_anim_state),
+					GEO_OPEN_NODE(),
+						GEO_NODE_START(),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 24, 0, cursya_red_seg0_mesh),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 52, 0, cursya_red_seg1_mesh),
+								GEO_OPEN_NODE(),
+									GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 53, 0, cursya_red_seg2_mesh),
+									GEO_OPEN_NODE(),
+										GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 35, 0, cursya_red_seg3_mesh),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+			GEO_CLOSE_NODE(),
+		GEO_CLOSE_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, cursya_red_material_revert_render_settings),
+		GEO_DISPLAY_LIST(LAYER_ALPHA, cursya_red_material_revert_render_settings),
+	GEO_CLOSE_NODE(),
+	GEO_END(),
+};
diff --git a/actors/cursya_red/geo_header.h b/actors/cursya_red/geo_header.h
new file mode 100644
index 0000000..0acb29f
--- /dev/null
+++ b/actors/cursya_red/geo_header.h
@@ -0,0 +1,39 @@
+extern const GeoLayout cursya_red_geo[];
+extern Vtx cursya_red_eye_l_mesh_vtx_0[4];
+extern Gfx cursya_red_eye_l_mesh_tri_0[];
+extern Vtx cursya_red_eye_l_002_mesh_vtx_0[4];
+extern Gfx cursya_red_eye_l_002_mesh_tri_0[];
+extern Vtx cursya_red_eye_r_mesh_vtx_0[4];
+extern Gfx cursya_red_eye_r_mesh_tri_0[];
+extern Vtx cursya_red_eye_r_002_mesh_vtx_0[4];
+extern Gfx cursya_red_eye_r_002_mesh_tri_0[];
+extern Vtx cursya_red_wings_mesh_vtx_0[36];
+extern Gfx cursya_red_wings_mesh_tri_0[];
+extern Vtx cursya_red_seg0_mesh_vtx_0[4];
+extern Gfx cursya_red_seg0_mesh_tri_0[];
+extern Vtx cursya_red_seg0_mesh_vtx_1[4];
+extern Gfx cursya_red_seg0_mesh_tri_1[];
+extern Vtx cursya_red_seg1_mesh_vtx_0[5];
+extern Gfx cursya_red_seg1_mesh_tri_0[];
+extern Vtx cursya_red_seg1_mesh_vtx_1[5];
+extern Gfx cursya_red_seg1_mesh_tri_1[];
+extern Vtx cursya_red_seg2_mesh_vtx_0[5];
+extern Gfx cursya_red_seg2_mesh_tri_0[];
+extern Vtx cursya_red_seg2_mesh_vtx_1[5];
+extern Gfx cursya_red_seg2_mesh_tri_1[];
+extern Vtx cursya_red_seg3_mesh_vtx_0[5];
+extern Gfx cursya_red_seg3_mesh_tri_0[];
+extern Vtx cursya_red_seg3_mesh_vtx_1[5];
+extern Gfx cursya_red_seg3_mesh_tri_1[];
+
+extern Gfx cursya_red_eye_l_mesh[];
+extern Gfx cursya_red_eye_l_002_mesh[];
+extern Gfx cursya_red_eye_r_mesh[];
+extern Gfx cursya_red_eye_r_002_mesh[];
+extern Gfx cursya_red_wings_mesh[];
+extern Gfx cursya_red_seg0_mesh[];
+extern Gfx cursya_red_seg1_mesh[];
+extern Gfx cursya_red_seg2_mesh[];
+extern Gfx cursya_red_seg3_mesh[];
+extern Gfx cursya_red_material_revert_render_settings[];
+
diff --git a/actors/cursya_red/model.inc.c b/actors/cursya_red/model.inc.c
new file mode 100644
index 0000000..595db6e
--- /dev/null
+++ b/actors/cursya_red/model.inc.c
@@ -0,0 +1,509 @@
+Lights1 cursya_red_pupil_004_layer4_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_red_eyeball_004_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_red_curseyawings_004_lights = gdSPDefLights1(
+	0x23, 0x0, 0x7F,
+	0x47, 0x0, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_red_sphere_left_red_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_red_sphere_right_red_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Gfx cursya_red_cursya_iris_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_red_cursya_iris_rgba16[] = {
+	#include "actors/cursya_red/cursya_iris.rgba16.inc.c"
+};
+
+Gfx cursya_red_cursya_eyeball_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_red_cursya_eyeball_rgba16[] = {
+	#include "actors/cursya_red/cursya_eyeball.rgba16.inc.c"
+};
+
+Gfx cursya_red_cursya_sphere_left_red_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_red_cursya_sphere_left_red_rgba16[] = {
+	#include "actors/cursya_red/cursya_sphere_left_red.rgba16.inc.c"
+};
+
+Gfx cursya_red_cursya_sphere_right_red_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_red_cursya_sphere_right_red_rgba16[] = {
+	#include "actors/cursya_red/cursya_sphere_right_red.rgba16.inc.c"
+};
+
+Vtx cursya_red_eye_l_mesh_vtx_0[4] = {
+	{{{7, -6, 24},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{7, 7, 24},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, 7, 24},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, -6, 24},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_red_eye_l_mesh_tri_0[] = {
+	gsSPVertex(cursya_red_eye_l_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_red_eye_l_002_mesh_vtx_0[4] = {
+	{{{16, -16, 1},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{16, 15, 1},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, 15, 1},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, -16, 1},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_red_eye_l_002_mesh_tri_0[] = {
+	gsSPVertex(cursya_red_eye_l_002_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_red_eye_r_mesh_vtx_0[4] = {
+	{{{7, -6, 24},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{7, 7, 24},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, 7, 24},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, -6, 24},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_red_eye_r_mesh_tri_0[] = {
+	gsSPVertex(cursya_red_eye_r_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_red_eye_r_002_mesh_vtx_0[4] = {
+	{{{16, -16, 1},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{16, 15, 1},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, 15, 1},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, -16, 1},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_red_eye_r_002_mesh_tri_0[] = {
+	gsSPVertex(cursya_red_eye_r_002_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_red_wings_mesh_vtx_0[36] = {
+	{{{62, -13, -15},0, {-16, 1008},{0xC7, 0xBA, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0x9E, 0x51, 0x0, 0xFF}}},
+	{{{70, -1, -15},0, {-16, 1008},{0x39, 0x46, 0xA7, 0xFF}}},
+	{{{62, -13, -2},0, {-16, 1008},{0xC7, 0xBA, 0x59, 0xFF}}},
+	{{{94, -31, -8},0, {-16, 1008},{0x62, 0xAF, 0x0, 0xFF}}},
+	{{{70, -1, -2},0, {-16, 1008},{0x39, 0x46, 0x59, 0xFF}}},
+	{{{76, 10, -15},0, {-16, 1008},{0x2, 0xA6, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0x81, 0xFF, 0x0, 0xFF}}},
+	{{{73, 24, -15},0, {-16, 1008},{0xFE, 0x5A, 0xA7, 0xFF}}},
+	{{{76, 10, -2},0, {-16, 1008},{0x2, 0xA6, 0x59, 0xFF}}},
+	{{{112, 17, -8},0, {-16, 1008},{0x7F, 0x1, 0x0, 0xFF}}},
+	{{{73, 24, -2},0, {-16, 1008},{0xFE, 0x5A, 0x59, 0xFF}}},
+	{{{71, 36, -15},0, {-16, 1008},{0x3C, 0xBC, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0xA0, 0xAD, 0x0, 0xFF}}},
+	{{{60, 45, -15},0, {-16, 1008},{0xC4, 0x44, 0xA7, 0xFF}}},
+	{{{71, 36, -2},0, {-16, 1008},{0x3C, 0xBC, 0x59, 0xFF}}},
+	{{{94, 65, -8},0, {-16, 1008},{0x60, 0x53, 0x0, 0xFF}}},
+	{{{60, 45, -2},0, {-16, 1008},{0xC4, 0x44, 0x59, 0xFF}}},
+	{{{-62, -13, -15},0, {-16, 1008},{0x39, 0xBA, 0xA7, 0xFF}}},
+	{{{-70, -1, -15},0, {-16, 1008},{0xC7, 0x46, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x62, 0x51, 0x0, 0xFF}}},
+	{{{-94, -31, -8},0, {-16, 1008},{0x9E, 0xAF, 0x0, 0xFF}}},
+	{{{-62, -13, -2},0, {-16, 1008},{0x39, 0xBA, 0x59, 0xFF}}},
+	{{{-70, -1, -2},0, {-16, 1008},{0xC7, 0x46, 0x59, 0xFF}}},
+	{{{-76, 10, -15},0, {-16, 1008},{0xFE, 0xA6, 0xA7, 0xFF}}},
+	{{{-73, 24, -15},0, {-16, 1008},{0x2, 0x5A, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x7F, 0xFF, 0x0, 0xFF}}},
+	{{{-112, 17, -8},0, {-16, 1008},{0x81, 0x1, 0x0, 0xFF}}},
+	{{{-76, 10, -2},0, {-16, 1008},{0xFE, 0xA6, 0x59, 0xFF}}},
+	{{{-73, 24, -2},0, {-16, 1008},{0x2, 0x5A, 0x59, 0xFF}}},
+	{{{-71, 36, -15},0, {-16, 1008},{0xC4, 0xBC, 0xA7, 0xFF}}},
+	{{{-60, 45, -15},0, {-16, 1008},{0x3C, 0x44, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x60, 0xAD, 0x0, 0xFF}}},
+	{{{-94, 65, -8},0, {-16, 1008},{0xA0, 0x53, 0x0, 0xFF}}},
+	{{{-71, 36, -2},0, {-16, 1008},{0xC4, 0xBC, 0x59, 0xFF}}},
+	{{{-60, 45, -2},0, {-16, 1008},{0x3C, 0x44, 0x59, 0xFF}}},
+};
+
+Gfx cursya_red_wings_mesh_tri_0[] = {
+	gsSPVertex(cursya_red_wings_mesh_vtx_0 + 0, 30, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(0, 4, 3, 0, 4, 0, 2, 0),
+	gsSP2Triangles(4, 2, 5, 0, 2, 1, 5, 0),
+	gsSP2Triangles(3, 5, 1, 0, 5, 3, 4, 0),
+	gsSP2Triangles(6, 7, 8, 0, 9, 7, 6, 0),
+	gsSP2Triangles(6, 10, 9, 0, 10, 6, 8, 0),
+	gsSP2Triangles(10, 8, 11, 0, 8, 7, 11, 0),
+	gsSP2Triangles(9, 11, 7, 0, 11, 9, 10, 0),
+	gsSP2Triangles(12, 13, 14, 0, 15, 13, 12, 0),
+	gsSP2Triangles(12, 16, 15, 0, 16, 12, 14, 0),
+	gsSP2Triangles(16, 14, 17, 0, 14, 13, 17, 0),
+	gsSP2Triangles(15, 17, 13, 0, 17, 15, 16, 0),
+	gsSP2Triangles(18, 19, 20, 0, 21, 19, 18, 0),
+	gsSP2Triangles(18, 22, 21, 0, 22, 18, 20, 0),
+	gsSP2Triangles(22, 20, 23, 0, 19, 23, 20, 0),
+	gsSP2Triangles(21, 23, 19, 0, 23, 21, 22, 0),
+	gsSP2Triangles(24, 25, 26, 0, 27, 25, 24, 0),
+	gsSP2Triangles(24, 28, 27, 0, 28, 24, 26, 0),
+	gsSP2Triangles(28, 26, 29, 0, 25, 29, 26, 0),
+	gsSP2Triangles(27, 29, 25, 0, 29, 27, 28, 0),
+	gsSPVertex(cursya_red_wings_mesh_vtx_0 + 30, 6, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(0, 4, 3, 0, 4, 0, 2, 0),
+	gsSP2Triangles(4, 2, 5, 0, 1, 5, 2, 0),
+	gsSP2Triangles(3, 5, 1, 0, 5, 3, 4, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_red_seg0_mesh_vtx_0[4] = {
+	{{{0, -32, 7},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-48, 49, 7},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-48, -32, 7},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 49, 7},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_red_seg0_mesh_tri_0[] = {
+	gsSPVertex(cursya_red_seg0_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_red_seg0_mesh_vtx_1[4] = {
+	{{{48, -32, 7},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{48, 49, 7},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 49, 7},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -32, 7},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_red_seg0_mesh_tri_1[] = {
+	gsSPVertex(cursya_red_seg0_mesh_vtx_1 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_red_seg1_mesh_vtx_0[5] = {
+	{{{-39, 8, 9},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-39, -21, 9},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -21, 9},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-39, 36, 9},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 36, 9},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_red_seg1_mesh_tri_0[] = {
+	gsSPVertex(cursya_red_seg1_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_red_seg1_mesh_vtx_1[5] = {
+	{{{0, 36, 9},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -21, 9},0, {-14, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, -21, 9},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, 8, 9},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, 36, 9},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_red_seg1_mesh_tri_1[] = {
+	gsSPVertex(cursya_red_seg1_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(3, 4, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_red_seg2_mesh_vtx_0[5] = {
+	{{{-36, -3, 11},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-36, -23, 11},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -23, 11},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-36, 17, 11},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 17, 11},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_red_seg2_mesh_tri_0[] = {
+	gsSPVertex(cursya_red_seg2_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_red_seg2_mesh_vtx_1[5] = {
+	{{{0, 17, 11},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -23, 11},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, -23, 11},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, -3, 11},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, 17, 11},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_red_seg2_mesh_tri_1[] = {
+	gsSPVertex(cursya_red_seg2_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(3, 4, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_red_seg3_mesh_vtx_0[5] = {
+	{{{-34, -26, 12},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -26, 12},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 7, 12},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-34, -6, 12},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-34, 7, 12},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_red_seg3_mesh_tri_0[] = {
+	gsSPVertex(cursya_red_seg3_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_red_seg3_mesh_vtx_1[5] = {
+	{{{34, -26, 12},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{34, -6, 12},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{34, 7, 12},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -26, 12},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 7, 12},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_red_seg3_mesh_tri_1[] = {
+	gsSPVertex(cursya_red_seg3_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_red_pupil_004_layer4[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_red_cursya_iris_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(cursya_red_pupil_004_layer4_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_red_pupil_004_layer4[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_TEX_EDGE, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_red_eyeball_004_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_red_cursya_eyeball_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(cursya_red_eyeball_004_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_red_eyeball_004_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_red_curseyawings_004[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsSPSetLights1(cursya_red_curseyawings_004_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_red_sphere_left_red_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_red_cursya_sphere_left_red_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 252),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPSetLights1(cursya_red_sphere_left_red_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_red_sphere_left_red_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_red_sphere_right_red_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_red_cursya_sphere_right_red_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 252),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPSetLights1(cursya_red_sphere_right_red_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_red_sphere_right_red_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx cursya_red_eye_l_mesh[] = {
+	gsSPDisplayList(mat_cursya_red_pupil_004_layer4),
+	gsSPDisplayList(cursya_red_eye_l_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_red_pupil_004_layer4),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_red_eye_l_002_mesh[] = {
+	gsSPDisplayList(mat_cursya_red_eyeball_004_layer1),
+	gsSPDisplayList(cursya_red_eye_l_002_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_red_eyeball_004_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_red_eye_r_mesh[] = {
+	gsSPDisplayList(mat_cursya_red_pupil_004_layer4),
+	gsSPDisplayList(cursya_red_eye_r_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_red_pupil_004_layer4),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_red_eye_r_002_mesh[] = {
+	gsSPDisplayList(mat_cursya_red_eyeball_004_layer1),
+	gsSPDisplayList(cursya_red_eye_r_002_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_red_eyeball_004_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_red_wings_mesh[] = {
+	gsSPDisplayList(mat_cursya_red_curseyawings_004),
+	gsSPDisplayList(cursya_red_wings_mesh_tri_0),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_red_seg0_mesh[] = {
+	gsSPDisplayList(mat_cursya_red_sphere_left_red_layer1),
+	gsSPDisplayList(cursya_red_seg0_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_red_sphere_left_red_layer1),
+	gsSPDisplayList(mat_cursya_red_sphere_right_red_layer1),
+	gsSPDisplayList(cursya_red_seg0_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_red_sphere_right_red_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_red_seg1_mesh[] = {
+	gsSPDisplayList(mat_cursya_red_sphere_left_red_layer1),
+	gsSPDisplayList(cursya_red_seg1_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_red_sphere_left_red_layer1),
+	gsSPDisplayList(mat_cursya_red_sphere_right_red_layer1),
+	gsSPDisplayList(cursya_red_seg1_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_red_sphere_right_red_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_red_seg2_mesh[] = {
+	gsSPDisplayList(mat_cursya_red_sphere_left_red_layer1),
+	gsSPDisplayList(cursya_red_seg2_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_red_sphere_left_red_layer1),
+	gsSPDisplayList(mat_cursya_red_sphere_right_red_layer1),
+	gsSPDisplayList(cursya_red_seg2_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_red_sphere_right_red_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_red_seg3_mesh[] = {
+	gsSPDisplayList(mat_cursya_red_sphere_left_red_layer1),
+	gsSPDisplayList(cursya_red_seg3_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_red_sphere_left_red_layer1),
+	gsSPDisplayList(mat_cursya_red_sphere_right_red_layer1),
+	gsSPDisplayList(cursya_red_seg3_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_red_sphere_right_red_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_red_material_revert_render_settings[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPClearGeometryMode(G_TEXTURE_GEN),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 0),
+	gsDPSetEnvColor(255, 255, 255, 255),
+	gsDPSetAlphaCompare(G_AC_NONE),
+	gsSPEndDisplayList(),
+};
diff --git a/actors/cursya_red/texscroll.inc.c b/actors/cursya_red/texscroll.inc.c
new file mode 100644
index 0000000..bbc1014
--- /dev/null
+++ b/actors/cursya_red/texscroll.inc.c
@@ -0,0 +1,3 @@
+void scroll_actor_geo_cursya_red() {
+	
+}
diff --git a/actors/cursya_red/texscroll.inc.h b/actors/cursya_red/texscroll.inc.h
new file mode 100644
index 0000000..85f09c2
--- /dev/null
+++ b/actors/cursya_red/texscroll.inc.h
@@ -0,0 +1,3 @@
+
+extern void scroll_actor_geo_cursya_red();
+
diff --git a/actors/cursya_yellow/cursya_eyeball.rgba16.png b/actors/cursya_yellow/cursya_eyeball.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..27b32c029eed25f4701ee5b43f129eaf72c6ffd9
GIT binary patch
literal 1197
zcmV;e1XBBnP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XU
z000XU0RWnu7ytkSUr9tkR9FecRv~oTFc4Mt24rS48wMt<gN1`FTVY|xQW&<tj%Bd0
zuym}2Wh)#^Va8JCFq?V*pLDVuJ4v^<_omj7bkg1b_fJYZYMLMBf3|mj1OEJU*TApy
zc-tR`8@*M5<;}dgxI8m?J~2r$29S-w5@RY(H>RrBX1#tf(+_8(Xv5y&Q34MS-<s3Y
zPbSL>1X0kPUciX~BB7OL_455Fk%I(QtH)+MK5=0af@XNwD*??sp!Nn;y)sFb?Nwv%
z8Q83!n{hF50f)eub;!Jj8w`n^Vx02447Nc6>(x_ZEwiPl%$Cw>*0i$4a&xZA#69h7
z+&fI7M_~2yv9SrjB@R9Whm%8X-@3O4wQNs`4uSjouT5g%Bz{9dqkw^r?qjdxu-FdT
zL^>oo1WqO=-oZ+!U6Dhyu;4)x+z_h9$E0CfXHa>ks=FQtFne*31J`klCbb*KhfhGG
zEeV0TAkivF)}}1iL4`n|C|V~KGREl!(V6blx$lEQp773cmQ8{s5U{o-(08Lnt=cn2
zJPtAU42IJY0=LUWW9m3qeLQr+fbgjX0#|V?Y@;GU74oa`b^R=5c+crzBOxlx_#I~&
z34op?s#iQvPtT5kbKR2=UnS{n&KsY`bO<o-L;}Fe<5V6;z{Dti_=rhhsu;RV;30Ly
zuT@wGR4~>6=2t*v8MuwcsgO`c0zh_bKBJC8Zbd$W-R~1416IIti*g3)t%Ixy%)L~B
zz3;?Nlp(Pa4;&O+7X9XqjSFg*O@3Yh1qqjo<4Yidu;zGVEK&driBbWEaq^%<QtMVB
zF1dQSQI}Y3V-)yFB1qLAdMN?PY+;c4TgX!r8T$$DNk}LVs}MkbpyU=Pz_GpsCouoE
zwNoIx58T}@nmo_&;*lcR%-GZlkY&cGmwY*c0C`ajsi2;G!4C!BVdK>TaRq1cMKO_g
zgm4Qs8yvz^ZvoiV{uj|zA}FDX@L=j$4bVCuCdX9V6%g@|x6i(=Jt=Gn1lF6a$qHnM
zz*&NOt(zhsR~8y5Db+xaDT?N7ZQMZ4ohvRYfq0WKp#<1s7W3<7JV{NSX82(v8I}X`
zi{t=-<b+~L905+y$eNveI(lvhg7WYCsuV@0)Aoh6Lx4_v`z@eE8k68@AczpbCM80h
z6%_*=0?s!Dc2|!o?7l6B5~#~7&Vp+^r5*r3p$^Gqt|gE<`|Y?NT5WL`GY=kTUj8kv
z8{ZJ))>D9s^VxNiLxl`wNONYN%KfJblBM1XZgvKax(%Rga_MlM>T+v7p3i!3$Abju
zND`@%0AQNCYZ>HMGO7}tv;o`Y&Vz^ZSiYL`i!VKJZr@9Qi&s~labMF0UkRdyO{oTx
z1{n@m5t*@fP4ng#7Hjfry&28sOI_~u2MOrz8Pwpxq}uLw5Z05SF=`~h-<EAznc4hi
zFzaahVFlui9A92Sk<>P+Tu~TAgqA@Gy%&q+QP4Q<n-qv0{`L4b*-o>~#>oCn00000
LNkvXXu0mjfC4C>i

literal 0
HcmV?d00001

diff --git a/actors/cursya_yellow/cursya_iris.rgba16.png b/actors/cursya_yellow/cursya_iris.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..b259db9e80eeeaade72889ee938e98039aed9d13
GIT binary patch
literal 1054
zcmV+(1mXLMP)<h;3K|Lk000e1NJLTq001BW001Bm1^@s6BkHEN00009a7bBm000XU
z000XU0RWnu7ytkR&`Cr=RA>e5*jbMpMGyqwTw^Z71BYZJV<Xx8|3768iNk<7Y=gmV
zDM#P56hqQI?CcZ7OH5{EWmQCXb@y)7e;ijgt^d=;vgA5fjm%apjWz#O<Lbutd9lX#
z8p}dh@+#@@%XsF~0ORubQpQ}{09TlxEhb2vm@qMxpZLqhzrRDyHej#dTMaU*GG0gi
z`4{1@8tV~}$HvdSGj<!0!U=LEGnSv2Y~$}Vs@`o>-EOF=dfBM@tx@%?QT11&iUADS
zduMDKuvd5*kTIe7%|_J+jg>!aRK3?&uQ=g9G^(C7s=jYj{n0qzh})~jfB(ydQ_vfY
zsvK8`jbm4q&<BmG!$Y*{lg4U*UH#gq`leC!MPpt6yT+*z=1)8tkXN376qZJar@9pW
zuu=7>QFXUb^?qaBHUmCxRK3+$4R8b);mF)?EX#BxP7Ih{X9OiPCWUA0j1xx4XN{`Q
z8&!82t8l*@3G)ej+Nk=rQT20UeKvR|Oh(+Y048XQ8IeN8$!|BR+ySn%m_YlOSe<!}
z%twtX>)5}2inH&@9iR|r195T+7OT@QH{e#5&pKDoI3`qV-o)yXk9WXy=1rIy%M+Sx
zT%Tl5@63y*`8iMB7CQ?19}SSe8WAK;HlD0bzdsvQ&a8*kPmT5cu0B~m@BbegRr-iM
z8`LLf-;*Pd1>$Tp#f&fyGvGy|ig2$puSd@Y4?FX{1w8D`^IgE0G{Agp-{PYI29g!x
z9M4!?va|e4qw4F%TJ?LQ%9YHw0fD{)4xhYL*wf!SYv;o+`^@~&fE>7~*!wz-aE0B{
zlL77=Mu~kApS$nTfXT_si}BtK*sy1UD@>Rpp<f=M=Z(|%z53*7e@6op;H?H(C&tq)
zH}&;Y$5|(K2Vv_O7h`#x`SC3<P0#@6M#Sb{n)SDSa;|4Q^Wvic`FFI5d)da4Ep%OW
zWU{|_?>_Tyg5wde!L3FXbc=7XzSHZ`_{4jK+ZUd6<T_^?kc};vjm24?hN;8q^-X37
z&T;c6whkWuA>xzKm76%f`PF4Ug^O(j=f+duBwXDze)w=Y{omnefDIk~VX-WP?PUV9
zUSH#4JQ*NQ=w5!@I2CTalOtdNTSz>y4PwH@`VfxwQ<t&4`FP43$NEjYc?X#2NZ2@m
zSRPM#<N78OCNCyvD^{0Jd;OAk8(?A@LC}_9by&Y-0_DZYgvyKe3fKQ^15Cte$d(c2
zZ82e6JU!gD`WwHt0UD(d@~$|}yqHiimQOzSO6!+=F$1!(m@(osLLL(;zLZe?{^xMu
YHFt?YIN$&x(f|Me07*qoM6N<$g0ABP+W-In

literal 0
HcmV?d00001

diff --git a/actors/cursya_yellow/cursya_sphere_left_yellow.rgba16.png b/actors/cursya_yellow/cursya_sphere_left_yellow.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..3924bf9a44d1e89708d3083220bf461d887ab4cd
GIT binary patch
literal 3095
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

literal 0
HcmV?d00001

diff --git a/actors/cursya_yellow/cursya_sphere_right_yellow.rgba16.png b/actors/cursya_yellow/cursya_sphere_right_yellow.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..b9b7522e100c872821286519c4a0d69e842d05fb
GIT binary patch
literal 3378
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
IM6N<$f<h5&r~m)}

literal 0
HcmV?d00001

diff --git a/actors/cursya_yellow/geo.inc.c b/actors/cursya_yellow/geo.inc.c
new file mode 100644
index 0000000..fb49a6f
--- /dev/null
+++ b/actors/cursya_yellow/geo.inc.c
@@ -0,0 +1,56 @@
+#include "src/game/envfx_snow.h"
+
+const GeoLayout cursya_yellow_geo[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_SHADOW(0, 153, 100),
+		GEO_OPEN_NODE(),
+			GEO_SCALE(LAYER_FORCE, 65536),
+			GEO_OPEN_NODE(),
+				GEO_ANIMATED_PART(LAYER_OPAQUE, 0, -12, 0, NULL),
+				GEO_OPEN_NODE(),
+					GEO_ANIMATED_PART(LAYER_ALPHA, 17, 138, 12, cursya_yellow_eye_l_mesh),
+					GEO_OPEN_NODE(),
+						GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 3, 5),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, -2, 4, cursya_yellow_eye_l_002_mesh),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+					GEO_ANIMATED_PART(LAYER_ALPHA, -17, 138, 12, cursya_yellow_eye_r_mesh),
+					GEO_OPEN_NODE(),
+						GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 3, 5),
+						GEO_OPEN_NODE(),
+							GEO_TRANSLATE_ROTATE(LAYER_OPAQUE, 0, -2, 4, 0, 0, 0),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, cursya_yellow_eye_r_002_mesh),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+					GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 94, 0, cursya_yellow_wings_mesh),
+				GEO_CLOSE_NODE(),
+				GEO_BILLBOARD_WITH_PARAMS(LAYER_OPAQUE, 0, 0, 1),
+				GEO_OPEN_NODE(),
+					GEO_SWITCH_CASE(3, geo_switch_anim_state),
+					GEO_OPEN_NODE(),
+						GEO_NODE_START(),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 24, 0, cursya_yellow_seg0_mesh),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 52, 0, cursya_yellow_seg1_mesh),
+								GEO_OPEN_NODE(),
+									GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 53, 0, cursya_yellow_seg2_mesh),
+									GEO_OPEN_NODE(),
+										GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 35, 0, cursya_yellow_seg3_mesh),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+			GEO_CLOSE_NODE(),
+		GEO_CLOSE_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, cursya_yellow_material_revert_render_settings),
+		GEO_DISPLAY_LIST(LAYER_ALPHA, cursya_yellow_material_revert_render_settings),
+	GEO_CLOSE_NODE(),
+	GEO_END(),
+};
diff --git a/actors/cursya_yellow/geo_header.h b/actors/cursya_yellow/geo_header.h
new file mode 100644
index 0000000..c10d284
--- /dev/null
+++ b/actors/cursya_yellow/geo_header.h
@@ -0,0 +1,39 @@
+extern const GeoLayout cursya_yellow_geo[];
+extern Vtx cursya_yellow_eye_l_mesh_vtx_0[4];
+extern Gfx cursya_yellow_eye_l_mesh_tri_0[];
+extern Vtx cursya_yellow_eye_l_002_mesh_vtx_0[4];
+extern Gfx cursya_yellow_eye_l_002_mesh_tri_0[];
+extern Vtx cursya_yellow_eye_r_mesh_vtx_0[4];
+extern Gfx cursya_yellow_eye_r_mesh_tri_0[];
+extern Vtx cursya_yellow_eye_r_002_mesh_vtx_0[4];
+extern Gfx cursya_yellow_eye_r_002_mesh_tri_0[];
+extern Vtx cursya_yellow_wings_mesh_vtx_0[36];
+extern Gfx cursya_yellow_wings_mesh_tri_0[];
+extern Vtx cursya_yellow_seg0_mesh_vtx_0[4];
+extern Gfx cursya_yellow_seg0_mesh_tri_0[];
+extern Vtx cursya_yellow_seg0_mesh_vtx_1[4];
+extern Gfx cursya_yellow_seg0_mesh_tri_1[];
+extern Vtx cursya_yellow_seg1_mesh_vtx_0[5];
+extern Gfx cursya_yellow_seg1_mesh_tri_0[];
+extern Vtx cursya_yellow_seg1_mesh_vtx_1[5];
+extern Gfx cursya_yellow_seg1_mesh_tri_1[];
+extern Vtx cursya_yellow_seg2_mesh_vtx_0[5];
+extern Gfx cursya_yellow_seg2_mesh_tri_0[];
+extern Vtx cursya_yellow_seg2_mesh_vtx_1[5];
+extern Gfx cursya_yellow_seg2_mesh_tri_1[];
+extern Vtx cursya_yellow_seg3_mesh_vtx_0[5];
+extern Gfx cursya_yellow_seg3_mesh_tri_0[];
+extern Vtx cursya_yellow_seg3_mesh_vtx_1[5];
+extern Gfx cursya_yellow_seg3_mesh_tri_1[];
+
+extern Gfx cursya_yellow_eye_l_mesh[];
+extern Gfx cursya_yellow_eye_l_002_mesh[];
+extern Gfx cursya_yellow_eye_r_mesh[];
+extern Gfx cursya_yellow_eye_r_002_mesh[];
+extern Gfx cursya_yellow_wings_mesh[];
+extern Gfx cursya_yellow_seg0_mesh[];
+extern Gfx cursya_yellow_seg1_mesh[];
+extern Gfx cursya_yellow_seg2_mesh[];
+extern Gfx cursya_yellow_seg3_mesh[];
+extern Gfx cursya_yellow_material_revert_render_settings[];
+
diff --git a/actors/cursya_yellow/model.inc.c b/actors/cursya_yellow/model.inc.c
new file mode 100644
index 0000000..76da623
--- /dev/null
+++ b/actors/cursya_yellow/model.inc.c
@@ -0,0 +1,509 @@
+Lights1 cursya_yellow_pupil_003_layer4_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_yellow_eyeball_003_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_yellow_curseyawings_003_lights = gdSPDefLights1(
+	0x23, 0x0, 0x7F,
+	0x47, 0x0, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_yellow_sphere_left_yellow_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 cursya_yellow_sphere_right_yellow_layer1_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Gfx cursya_yellow_cursya_iris_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_yellow_cursya_iris_rgba16[] = {
+	#include "actors/cursya_yellow/cursya_iris.rgba16.inc.c"
+};
+
+Gfx cursya_yellow_cursya_eyeball_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_yellow_cursya_eyeball_rgba16[] = {
+	#include "actors/cursya_yellow/cursya_eyeball.rgba16.inc.c"
+};
+
+Gfx cursya_yellow_cursya_sphere_left_yellow_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_yellow_cursya_sphere_left_yellow_rgba16[] = {
+	#include "actors/cursya_yellow/cursya_sphere_left_yellow.rgba16.inc.c"
+};
+
+Gfx cursya_yellow_cursya_sphere_right_yellow_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 cursya_yellow_cursya_sphere_right_yellow_rgba16[] = {
+	#include "actors/cursya_yellow/cursya_sphere_right_yellow.rgba16.inc.c"
+};
+
+Vtx cursya_yellow_eye_l_mesh_vtx_0[4] = {
+	{{{7, -6, 24},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{7, 7, 24},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, 7, 24},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, -6, 24},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_yellow_eye_l_mesh_tri_0[] = {
+	gsSPVertex(cursya_yellow_eye_l_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_yellow_eye_l_002_mesh_vtx_0[4] = {
+	{{{16, -16, 1},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{16, 15, 1},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, 15, 1},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, -16, 1},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_yellow_eye_l_002_mesh_tri_0[] = {
+	gsSPVertex(cursya_yellow_eye_l_002_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_yellow_eye_r_mesh_vtx_0[4] = {
+	{{{7, -6, 24},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{7, 7, 24},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, 7, 24},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-7, -6, 24},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_yellow_eye_r_mesh_tri_0[] = {
+	gsSPVertex(cursya_yellow_eye_r_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_yellow_eye_r_002_mesh_vtx_0[4] = {
+	{{{16, -16, 1},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{16, 15, 1},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, 15, 1},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-16, -16, 1},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_yellow_eye_r_002_mesh_tri_0[] = {
+	gsSPVertex(cursya_yellow_eye_r_002_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_yellow_wings_mesh_vtx_0[36] = {
+	{{{62, -13, -15},0, {-16, 1008},{0xC7, 0xBA, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0x9E, 0x51, 0x0, 0xFF}}},
+	{{{70, -1, -15},0, {-16, 1008},{0x39, 0x46, 0xA7, 0xFF}}},
+	{{{62, -13, -2},0, {-16, 1008},{0xC7, 0xBA, 0x59, 0xFF}}},
+	{{{94, -31, -8},0, {-16, 1008},{0x62, 0xAF, 0x0, 0xFF}}},
+	{{{70, -1, -2},0, {-16, 1008},{0x39, 0x46, 0x59, 0xFF}}},
+	{{{76, 10, -15},0, {-16, 1008},{0x2, 0xA6, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0x81, 0xFF, 0x0, 0xFF}}},
+	{{{73, 24, -15},0, {-16, 1008},{0xFE, 0x5A, 0xA7, 0xFF}}},
+	{{{76, 10, -2},0, {-16, 1008},{0x2, 0xA6, 0x59, 0xFF}}},
+	{{{112, 17, -8},0, {-16, 1008},{0x7F, 0x1, 0x0, 0xFF}}},
+	{{{73, 24, -2},0, {-16, 1008},{0xFE, 0x5A, 0x59, 0xFF}}},
+	{{{71, 36, -15},0, {-16, 1008},{0x3C, 0xBC, 0xA7, 0xFF}}},
+	{{{37, 17, -8},0, {-16, 1008},{0xA0, 0xAD, 0x0, 0xFF}}},
+	{{{60, 45, -15},0, {-16, 1008},{0xC4, 0x44, 0xA7, 0xFF}}},
+	{{{71, 36, -2},0, {-16, 1008},{0x3C, 0xBC, 0x59, 0xFF}}},
+	{{{94, 65, -8},0, {-16, 1008},{0x60, 0x53, 0x0, 0xFF}}},
+	{{{60, 45, -2},0, {-16, 1008},{0xC4, 0x44, 0x59, 0xFF}}},
+	{{{-62, -13, -15},0, {-16, 1008},{0x39, 0xBA, 0xA7, 0xFF}}},
+	{{{-70, -1, -15},0, {-16, 1008},{0xC7, 0x46, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x62, 0x51, 0x0, 0xFF}}},
+	{{{-94, -31, -8},0, {-16, 1008},{0x9E, 0xAF, 0x0, 0xFF}}},
+	{{{-62, -13, -2},0, {-16, 1008},{0x39, 0xBA, 0x59, 0xFF}}},
+	{{{-70, -1, -2},0, {-16, 1008},{0xC7, 0x46, 0x59, 0xFF}}},
+	{{{-76, 10, -15},0, {-16, 1008},{0xFE, 0xA6, 0xA7, 0xFF}}},
+	{{{-73, 24, -15},0, {-16, 1008},{0x2, 0x5A, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x7F, 0xFF, 0x0, 0xFF}}},
+	{{{-112, 17, -8},0, {-16, 1008},{0x81, 0x1, 0x0, 0xFF}}},
+	{{{-76, 10, -2},0, {-16, 1008},{0xFE, 0xA6, 0x59, 0xFF}}},
+	{{{-73, 24, -2},0, {-16, 1008},{0x2, 0x5A, 0x59, 0xFF}}},
+	{{{-71, 36, -15},0, {-16, 1008},{0xC4, 0xBC, 0xA7, 0xFF}}},
+	{{{-60, 45, -15},0, {-16, 1008},{0x3C, 0x44, 0xA7, 0xFF}}},
+	{{{-37, 17, -8},0, {-16, 1008},{0x60, 0xAD, 0x0, 0xFF}}},
+	{{{-94, 65, -8},0, {-16, 1008},{0xA0, 0x53, 0x0, 0xFF}}},
+	{{{-71, 36, -2},0, {-16, 1008},{0xC4, 0xBC, 0x59, 0xFF}}},
+	{{{-60, 45, -2},0, {-16, 1008},{0x3C, 0x44, 0x59, 0xFF}}},
+};
+
+Gfx cursya_yellow_wings_mesh_tri_0[] = {
+	gsSPVertex(cursya_yellow_wings_mesh_vtx_0 + 0, 30, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(0, 4, 3, 0, 4, 0, 2, 0),
+	gsSP2Triangles(4, 2, 5, 0, 2, 1, 5, 0),
+	gsSP2Triangles(3, 5, 1, 0, 5, 3, 4, 0),
+	gsSP2Triangles(6, 7, 8, 0, 9, 7, 6, 0),
+	gsSP2Triangles(6, 10, 9, 0, 10, 6, 8, 0),
+	gsSP2Triangles(10, 8, 11, 0, 8, 7, 11, 0),
+	gsSP2Triangles(9, 11, 7, 0, 11, 9, 10, 0),
+	gsSP2Triangles(12, 13, 14, 0, 15, 13, 12, 0),
+	gsSP2Triangles(12, 16, 15, 0, 16, 12, 14, 0),
+	gsSP2Triangles(16, 14, 17, 0, 14, 13, 17, 0),
+	gsSP2Triangles(15, 17, 13, 0, 17, 15, 16, 0),
+	gsSP2Triangles(18, 19, 20, 0, 21, 19, 18, 0),
+	gsSP2Triangles(18, 22, 21, 0, 22, 18, 20, 0),
+	gsSP2Triangles(22, 20, 23, 0, 19, 23, 20, 0),
+	gsSP2Triangles(21, 23, 19, 0, 23, 21, 22, 0),
+	gsSP2Triangles(24, 25, 26, 0, 27, 25, 24, 0),
+	gsSP2Triangles(24, 28, 27, 0, 28, 24, 26, 0),
+	gsSP2Triangles(28, 26, 29, 0, 25, 29, 26, 0),
+	gsSP2Triangles(27, 29, 25, 0, 29, 27, 28, 0),
+	gsSPVertex(cursya_yellow_wings_mesh_vtx_0 + 30, 6, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(0, 4, 3, 0, 4, 0, 2, 0),
+	gsSP2Triangles(4, 2, 5, 0, 1, 5, 2, 0),
+	gsSP2Triangles(3, 5, 1, 0, 5, 3, 4, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_yellow_seg0_mesh_vtx_0[4] = {
+	{{{0, -32, 7},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-48, 49, 7},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-48, -32, 7},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 49, 7},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_yellow_seg0_mesh_tri_0[] = {
+	gsSPVertex(cursya_yellow_seg0_mesh_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_yellow_seg0_mesh_vtx_1[4] = {
+	{{{48, -32, 7},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{48, 49, 7},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 49, 7},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -32, 7},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_yellow_seg0_mesh_tri_1[] = {
+	gsSPVertex(cursya_yellow_seg0_mesh_vtx_1 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_yellow_seg1_mesh_vtx_0[5] = {
+	{{{-39, 8, 9},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-39, -21, 9},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -21, 9},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-39, 36, 9},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 36, 9},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_yellow_seg1_mesh_tri_0[] = {
+	gsSPVertex(cursya_yellow_seg1_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_yellow_seg1_mesh_vtx_1[5] = {
+	{{{0, 36, 9},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -21, 9},0, {-14, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, -21, 9},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, 8, 9},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{39, 36, 9},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_yellow_seg1_mesh_tri_1[] = {
+	gsSPVertex(cursya_yellow_seg1_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(3, 4, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_yellow_seg2_mesh_vtx_0[5] = {
+	{{{-36, -3, 11},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-36, -23, 11},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -23, 11},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-36, 17, 11},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 17, 11},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_yellow_seg2_mesh_tri_0[] = {
+	gsSPVertex(cursya_yellow_seg2_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_yellow_seg2_mesh_vtx_1[5] = {
+	{{{0, 17, 11},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -23, 11},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, -23, 11},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, -3, 11},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{36, 17, 11},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_yellow_seg2_mesh_tri_1[] = {
+	gsSPVertex(cursya_yellow_seg2_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(3, 4, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx cursya_yellow_seg3_mesh_vtx_0[5] = {
+	{{{-34, -26, 12},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -26, 12},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 7, 12},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-34, -6, 12},0, {-16, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{-34, 7, 12},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_yellow_seg3_mesh_tri_0[] = {
+	gsSPVertex(cursya_yellow_seg3_mesh_vtx_0 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx cursya_yellow_seg3_mesh_vtx_1[5] = {
+	{{{34, -26, 12},0, {1008, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{34, -6, 12},0, {1008, 1008},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{34, 7, 12},0, {1008, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, -26, 12},0, {-16, 2032},{0x0, 0x0, 0x7F, 0xFF}}},
+	{{{0, 7, 12},0, {-16, -16},{0x0, 0x0, 0x7F, 0xFF}}},
+};
+
+Gfx cursya_yellow_seg3_mesh_tri_1[] = {
+	gsSPVertex(cursya_yellow_seg3_mesh_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_yellow_pupil_003_layer4[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_yellow_cursya_iris_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(cursya_yellow_pupil_003_layer4_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_yellow_pupil_003_layer4[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_TEX_EDGE, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_yellow_eyeball_003_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_yellow_cursya_eyeball_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(cursya_yellow_eyeball_003_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_yellow_eyeball_003_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_yellow_curseyawings_003[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsSPSetLights1(cursya_yellow_curseyawings_003_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_yellow_sphere_left_yellow_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_yellow_cursya_sphere_left_yellow_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 252),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPSetLights1(cursya_yellow_sphere_left_yellow_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_yellow_sphere_left_yellow_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_cursya_yellow_sphere_right_yellow_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, cursya_yellow_cursya_sphere_right_yellow_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 252),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPSetLights1(cursya_yellow_sphere_right_yellow_layer1_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_cursya_yellow_sphere_right_yellow_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx cursya_yellow_eye_l_mesh[] = {
+	gsSPDisplayList(mat_cursya_yellow_pupil_003_layer4),
+	gsSPDisplayList(cursya_yellow_eye_l_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_yellow_pupil_003_layer4),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_yellow_eye_l_002_mesh[] = {
+	gsSPDisplayList(mat_cursya_yellow_eyeball_003_layer1),
+	gsSPDisplayList(cursya_yellow_eye_l_002_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_yellow_eyeball_003_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_yellow_eye_r_mesh[] = {
+	gsSPDisplayList(mat_cursya_yellow_pupil_003_layer4),
+	gsSPDisplayList(cursya_yellow_eye_r_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_yellow_pupil_003_layer4),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_yellow_eye_r_002_mesh[] = {
+	gsSPDisplayList(mat_cursya_yellow_eyeball_003_layer1),
+	gsSPDisplayList(cursya_yellow_eye_r_002_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_yellow_eyeball_003_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_yellow_wings_mesh[] = {
+	gsSPDisplayList(mat_cursya_yellow_curseyawings_003),
+	gsSPDisplayList(cursya_yellow_wings_mesh_tri_0),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_yellow_seg0_mesh[] = {
+	gsSPDisplayList(mat_cursya_yellow_sphere_left_yellow_layer1),
+	gsSPDisplayList(cursya_yellow_seg0_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_yellow_sphere_left_yellow_layer1),
+	gsSPDisplayList(mat_cursya_yellow_sphere_right_yellow_layer1),
+	gsSPDisplayList(cursya_yellow_seg0_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_yellow_sphere_right_yellow_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_yellow_seg1_mesh[] = {
+	gsSPDisplayList(mat_cursya_yellow_sphere_left_yellow_layer1),
+	gsSPDisplayList(cursya_yellow_seg1_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_yellow_sphere_left_yellow_layer1),
+	gsSPDisplayList(mat_cursya_yellow_sphere_right_yellow_layer1),
+	gsSPDisplayList(cursya_yellow_seg1_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_yellow_sphere_right_yellow_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_yellow_seg2_mesh[] = {
+	gsSPDisplayList(mat_cursya_yellow_sphere_left_yellow_layer1),
+	gsSPDisplayList(cursya_yellow_seg2_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_yellow_sphere_left_yellow_layer1),
+	gsSPDisplayList(mat_cursya_yellow_sphere_right_yellow_layer1),
+	gsSPDisplayList(cursya_yellow_seg2_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_yellow_sphere_right_yellow_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_yellow_seg3_mesh[] = {
+	gsSPDisplayList(mat_cursya_yellow_sphere_left_yellow_layer1),
+	gsSPDisplayList(cursya_yellow_seg3_mesh_tri_0),
+	gsSPDisplayList(mat_revert_cursya_yellow_sphere_left_yellow_layer1),
+	gsSPDisplayList(mat_cursya_yellow_sphere_right_yellow_layer1),
+	gsSPDisplayList(cursya_yellow_seg3_mesh_tri_1),
+	gsSPDisplayList(mat_revert_cursya_yellow_sphere_right_yellow_layer1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx cursya_yellow_material_revert_render_settings[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPClearGeometryMode(G_TEXTURE_GEN),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 0),
+	gsDPSetEnvColor(255, 255, 255, 255),
+	gsDPSetAlphaCompare(G_AC_NONE),
+	gsSPEndDisplayList(),
+};
diff --git a/actors/cursya_yellow/texscroll.inc.c b/actors/cursya_yellow/texscroll.inc.c
new file mode 100644
index 0000000..3a7da97
--- /dev/null
+++ b/actors/cursya_yellow/texscroll.inc.c
@@ -0,0 +1,3 @@
+void scroll_actor_geo_cursya_yellow() {
+	
+}
diff --git a/actors/cursya_yellow/texscroll.inc.h b/actors/cursya_yellow/texscroll.inc.h
new file mode 100644
index 0000000..d506cea
--- /dev/null
+++ b/actors/cursya_yellow/texscroll.inc.h
@@ -0,0 +1,3 @@
+
+extern void scroll_actor_geo_cursya_yellow();
+
diff --git a/actors/exclamation_box/wing_cap_box_front.rgba16.png b/actors/exclamation_box/wing_cap_box_front.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..bb0d4447539df3ef5297ff9932aafc86ebea04ef
GIT binary patch
literal 710
zcmV;%0y+JOP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F80007wNkl<ZcwS@t
zFCg%r0Uf-5k18T4$UrMKObi1IMjgQTpMwJ>4KV)rLDNV9+J|C3<9{GP7GY#$WZ3KI
z$lye6XE-@AFxJ*GpjpSjg3X?_`}Z>lP}u=SILu=q+a3V{1`b6<22KtRhVRdxGcde(
z!SI8O=p)$y_kkAwh>BuR3=U?H)YN2<l#~Sf;rrID3@>_n8Qud!j}%X_FkmZWaG3A`
zD83D7sUpZykgtKh7XUhllarHy)7zUt0%+EEpu>IuLj$KH(Ci~A1fByeybm(@{(S}x
zAe#f~08l7^*bIh-3=F_%VZi4AG?$SU1wacy@%#d4fgsQ)AfIzU#Xx)xkl`F045UQ?
z391Evi40`?dthDh92f;0P|HA$0w+MAILH0_v~z$Y&;go2OO6A54{`t~{$Wu8b__59
zN<Mf%q65%tK43wF&jc%A@Sg`d0Pbs`VsJEk_`o2zZ5v_B(d;9+GE#(w0t3`yPyz&D
z!Ryx<1b~=<L_o3wKxx3}!w0Z6utW%shV$nc$N^-PgbF|hNCNSFV1knXmIDI71Sxs$
z9GMOvp&)|U04n=}fR=;&`~y@Vfl@xPd7qMk2-%C8ptL|noTCR5`IQl{NanD#1Xo53
z!1(_T#B`~QKt4FHpunJ+oz0-><puE&Fd9G=5yQH53_oa{3qTg^16D?$_<!;JI|GA+
z1Oum)6_{oaAiWjA!a!m{1j>e*z(ltVSm=OqfhI621b{`dATSXMK(i;_KtQvPtTf;S
zv`lf|K8E|itOx2rfa(aMEXU$9vJ)XV7m!fx;tCb44w%M3eeeN?kr-VwMq=WT0{8t#
sOQ;wj09G*CH)Nn6U|}GpEl)!=0Am*8tBoTA%m4rY07*qoM6N<$f&kSaDF6Tf

literal 0
HcmV?d00001

diff --git a/actors/exclamation_box/wing_cap_box_side.rgba16.png b/actors/exclamation_box/wing_cap_box_side.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..c371e5e885a33142ac0f56077d7920a7dd158bbb
GIT binary patch
literal 294
zcmeAS@N?(olHy`uVBq!ia0vp^3P9|@!3HF&`%2dVskfdkjv*Cs$$#_}KFnv7-BaJM
zrKEAfLEF@ahndGs)<BABv7*5P#RE-oJO*_?4jede!ed8?LNM=!2hN7GKiUf@bQ=gI
z8?d&D&no57xpC$ew@67*$&x(Dmrsryh=}e^R10HY!>Tp;#{T)M_%0kuyp>@l!`tW>
zAdr~-*5HD`f}7^E*xZ~GOjv+~z?7C3e;uT@cSu}#Bkju!v=?Z(?xKq(5Jw<5Iy>5w
z&IMQYI0=|AbszOv!&ku=QqgmY??TN#nbn=m2`kDPj&~R=Vz8NIYn6N4!QLQBpttQn
c1_uMfCnuAayRO<L13k{*>FVdQ&MBb@09Jo$7ytkO

literal 0
HcmV?d00001

diff --git a/actors/group0.c b/actors/group0.c
index f852e6c..9c3e3ba 100644
--- a/actors/group0.c
+++ b/actors/group0.c
@@ -25,3 +25,17 @@
 #include "white_particle_small/model.inc.c"
 
 #include "sparkle_animation/model.inc.c"
+
+
+#include "skipsqueak/model.inc.c"
+#include "skipsqueak/anims/data.inc.c"
+#include "skipsqueak/anims/table.inc.c"
+#include "spiny_skipsqueak/model.inc.c"
+#include "cursya/model.inc.c"
+#include "cursya/anims/data.inc.c"
+#include "cursya/anims/table.inc.c"
+#include "cursya_cyan/model.inc.c"
+#include "cursya_yellow/model.inc.c"
+#include "cursya_purple/model.inc.c"
+#include "cursya_red/model.inc.c"
+#include "cursya_blue/model.inc.c"
\ No newline at end of file
diff --git a/actors/group0.c.rej b/actors/group0.c.rej
new file mode 100644
index 0000000..e8cdb2c
--- /dev/null
+++ b/actors/group0.c.rej
@@ -0,0 +1,20 @@
+diff a/actors/group0.c b/actors/group0.c	(rejected hunks)
+@@ -25,3 +25,17 @@
+ #include "white_particle_small/model.inc.c"
+ 
+ #include "sparkle_animation/model.inc.c"
++
++
++#include "skipsqueak/model.inc.c"
++#include "skipsqueak/anims/data.inc.c"
++#include "skipsqueak/anims/table.inc.c"
++#include "spiny_skipsqueak/model.inc.c"
++#include "cursya/model.inc.c"
++#include "cursya/anims/data.inc.c"
++#include "cursya/anims/table.inc.c"
++#include "cursya_cyan/model.inc.c"
++#include "cursya_yellow/model.inc.c"
++#include "cursya_purple/model.inc.c"
++#include "cursya_red/model.inc.c"
++#include "cursya_blue/model.inc.c"
+\ No newline at end of file
diff --git a/actors/group0.h b/actors/group0.h
index 44f8b05..84b9e7d 100644
--- a/actors/group0.h
+++ b/actors/group0.h
@@ -342,4 +342,31 @@ extern const Gfx white_particle_small_dl_end[];
 extern const Gfx white_particle_small_dl[];
 extern const Gfx white_particle_small_unused_dl[];
 
+
+
+#include "mario/geo_header.h"
+
+
+
+#include "skipsqueak/geo_header.h"
+
+
+#include "skipsqueak/anim_header.h"
+#include "spiny_skipsqueak/geo_header.h"
+
+
+#include "cursya/geo_header.h"
+
+
+#include "cursya/anim_header.h"
+#include "cursya_cyan/geo_header.h"
+
+#include "cursya_yellow/geo_header.h"
+
+#include "cursya_purple/geo_header.h"
+
+#include "cursya_red/geo_header.h"
+
+#include "cursya_blue/geo_header.h"
+
 #endif
diff --git a/actors/group0.h.rej b/actors/group0.h.rej
new file mode 100644
index 0000000..26620ea
--- /dev/null
+++ b/actors/group0.h.rej
@@ -0,0 +1,33 @@
+diff a/actors/group0.h b/actors/group0.h	(rejected hunks)
+@@ -342,4 +342,31 @@ extern const Gfx white_particle_small_dl_end[];
+ extern const Gfx white_particle_small_dl[];
+ extern const Gfx white_particle_small_unused_dl[];
+ 
++
++
++#include "mario/geo_header.h"
++
++
++
++#include "skipsqueak/geo_header.h"
++
++
++#include "skipsqueak/anim_header.h"
++#include "spiny_skipsqueak/geo_header.h"
++
++
++#include "cursya/geo_header.h"
++
++
++#include "cursya/anim_header.h"
++#include "cursya_cyan/geo_header.h"
++
++#include "cursya_yellow/geo_header.h"
++
++#include "cursya_purple/geo_header.h"
++
++#include "cursya_red/geo_header.h"
++
++#include "cursya_blue/geo_header.h"
++
+ #endif
diff --git a/actors/group0_geo.c b/actors/group0_geo.c
index bddefae..660f6cf 100644
--- a/actors/group0_geo.c
+++ b/actors/group0_geo.c
@@ -16,3 +16,12 @@
 #include "water_splash/geo.inc.c"
 #include "sparkle_animation/geo.inc.c"
 #include "mario/geo.inc.c"
+
+#include "skipsqueak/geo.inc.c"
+#include "spiny_skipsqueak/geo.inc.c"
+#include "cursya/geo.inc.c"
+#include "cursya_cyan/geo.inc.c"
+#include "cursya_yellow/geo.inc.c"
+#include "cursya_purple/geo.inc.c"
+#include "cursya_red/geo.inc.c"
+#include "cursya_blue/geo.inc.c"
\ No newline at end of file
diff --git a/actors/group0_geo.c.rej b/actors/group0_geo.c.rej
new file mode 100644
index 0000000..2eb37a1
--- /dev/null
+++ b/actors/group0_geo.c.rej
@@ -0,0 +1,15 @@
+diff a/actors/group0_geo.c b/actors/group0_geo.c	(rejected hunks)
+@@ -16,3 +16,12 @@
+ #include "water_splash/geo.inc.c"
+ #include "sparkle_animation/geo.inc.c"
+ #include "mario/geo.inc.c"
++
++#include "skipsqueak/geo.inc.c"
++#include "spiny_skipsqueak/geo.inc.c"
++#include "cursya/geo.inc.c"
++#include "cursya_cyan/geo.inc.c"
++#include "cursya_yellow/geo.inc.c"
++#include "cursya_purple/geo.inc.c"
++#include "cursya_red/geo.inc.c"
++#include "cursya_blue/geo.inc.c"
+\ No newline at end of file
diff --git a/actors/hoot/hoot_wing.rgba16.png b/actors/hoot/hoot_wing.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..1bbb093b04e8ca8ce65bb3853a1d9afc2e254bec
GIT binary patch
literal 1174
zcmV;H1Zn$;P)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F8000DCNkl<ZcwS=|
z1tUHL7zZi@k{B5N-v?SwcLz8EE&c$sSQ3Z@fS3te2vl1t{O15F1S<F+rK#|r(oix4
znxzTEAj?4(8$vB-z!m}^h1Y=+nowIo!Sn;j4pLBHSoh!oNg)RE1jsT)pneXhc|V{u
zjE`a<NCN|s<;Xq<IqC;O0INeB1qA-@|L}nUWVj_zts<JG3}^tP4%wjpAYX&x1!NJr
zOF?=;Vz3ZV017-{V1ViW4|6!kQUNSJMz)&+i32tOXxM)(sNi=XjqCt)hj2jU-vj9v
zP>Vnog5nky)IS&q1DH81u!I5gA-YzWLS%864>_TNAT^Ru$Dmt|9QPb(hJ*Mll1PFa
zNCy5u3Xu;;;(|anD3qQ9X^;aXfHXGCksba6>NuEH$b1%TK4ySwKvoEH1jy&ez6V)?
zo@S6O0kL5o`GLhukUWM1K!O55lR>_F4%GDn>O=I95`fx-E54CK06FN<qXBC{1hSk1
z7`Di%nE?%eEXHOzdYq$Mh-?f<KUN342g+~&UBL--1U}a@-~b%Z;Kn8mb2!ZLEVvYb
z#i3CEGw=tJ!N|VH=Sv0x0PX<fICJt6V9>O*Vz_?%90S8SU~UK6_8sbUm^yMTMYadz
zHfCK0h6b2nUw|SY9F^w8U>2Xnps8!dASn8W;r{j83_sp5F#G|^vj7$U`NKdF_yY||
zkXhg~01jdx0ZMd+K*G3m8zZBX591Gp9}JpKK@5_L0t~RSfD@>WgM%^$z_f#Cumc2v
zm4KC(1VePSB}3~6c=^sCWSztK<Nb4nsFofEP_%&40MLPg0;D?t=1GuVWDhWb3l|_E
zARx%#+<F|NmXq?SW&H5|J%d+q3j?Tp_yG(G0brpZ2s9CvDA5Ci11YhBoC?pfPziV_
z0wtJ0btfp_`^>wJv##e5lw^1hbVT-&W(Lb3Lk2-f4u<c@fdGvbkoh3XIDsAlWnr)b
zK~W2JA;|IHK^_3g8vz>%Acru00IJG4&VaX}A!QxIC<t@}1BW1kQBV}ve?NfwU>1Vh
z!U^>qh<XmR1SY2lOjOaujtq*xXa<V`_1y>7;~@Qt!0MC5%29w}+5Qg%BUQ>dh4J2+
z=Kmm{OK2K0Xg=T101CbP=NTA&Knn$sBNR0`7!(aP8SbCI&LHvP2ZK{k5QC<b5ilVu
zG8|hvkKs8mR|_gCFlZVA8vsAvGmzXUy}G3OKLZCe%wODR*bg%F{tpI4MNqf{E!Wg!
z&~)@-cn@qDF#s))lmI0dMPP!C0o!%9+VMZb`}+)nT2>4kz{EsWtN84k;{O~H5)6Wz
zf(-AU-)8^?fFRJY?;oCnLy{AeN<j$=m~I4sVJ~DHg3}(do8@QcWc>%F2|-Cn%kMj|
zsN@93!T0a)8GgKY0rZ^&gLX(MLGu|YDN^oj>Hh!x!F2`!2}NK!02W&x-ZO9jgWNcz
omXU#;;407|_x8^D&oC4L0Ho>{+0B;7Pyhe`07*qoM6N<$g0b`C_y7O^

literal 0
HcmV?d00001

diff --git a/actors/hoot/hoot_wing_tip.rgba16.png b/actors/hoot/hoot_wing_tip.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..952b2d1f42d380e88d2070bf304bf1fd590f0445
GIT binary patch
literal 1947
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

literal 0
HcmV?d00001

diff --git a/actors/klepto/klepto_wing.rgba16.png b/actors/klepto/klepto_wing.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..d17ed7ae012ddcdc313713e776c521b7514ea77a
GIT binary patch
literal 1852
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

literal 0
HcmV?d00001

diff --git a/actors/klepto/klepto_wing_flap.rgba16.png b/actors/klepto/klepto_wing_flap.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..a8df840f720fdf85c0d7ec359ee4709204b24f11
GIT binary patch
literal 1324
zcmV+{1=IS8P)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F8000E@Nkl<ZcwS@7
zN=jlt2G`G@X8>UaIsqm{MaBP$l9C_{wvtmofI-vHkY4sPuxKhOGJN>(f#Lb{=l?l@
z)+$I!GCly(AV=T|349JDHS`$oUA_AMInV(hjrZ^0XL$eoIl}`W2D*XqJ5(GN959Oo
zB?VAI=>78#7$HWiLs%q$A;1B&2xKt`|KQ+YkPsAPc=7)Ie~=^4O$J%6D51!psj10u
z{rYvVw4ww=)j44LAvNw;I5|1NdIW)%atd%TaJ=V0F#|ccku3)~TtHIr|BoLG3_sq#
z2RjBR&j`|tEkuwFRRlWzKGg9nU<r^ZKnBoy1_r2uK+gEizyJ>gG|T@>N=gECNWwz_
z=okh?p!)kS?lZzH16f2UL|DFm|IY9O=zt$UdfT>b4CjC@10_n3#t%SoM_`UXviv{D
z=O8%_U{rxZ4a5egoe%JIfD(0*5)v40c>dxAT#N-~QA=$t!+B^N0z;MI2UN-a^XLB;
z8zwOtT3LY%W&l|V%(@H$K!bk(Ed@FL1C;&_bTBOVLB0oBE&&cHh+!`vi5tv;MFR`a
z`wVk?dccK`00$)gKR~182g2?DK|TgqEC?(oK<p1dUx0iLN{GNL%<uu24qkkC4$=XR
z0z+t70#Xk(2J8WlBY+NLgoOeN$dGl*mN9@7f?NxViXWgL!gK@!2QZNWBMh8XKLCAm
z|G@(Wu;oBD$Uva)!Ipz^2+U$&S^--OQU?<QI^sXb5uk*~v~Alu22g$n`OeDGkwH*W
z5F^g6107^!1uPwbLGs}Ru+X}HodKlzIk4RL0JR)w0VBv_5C$0lvKWLxp#{R=L<`Jt
zoWM}#048*J2wXo8%*!A_0Z8HU{=<6)P_)1@BRCp>36uetB|uU0{QYx=7x$ktTm#h^
zzyu2lL70n?d=5^mAWK1(gF^{Y+A@5HCU}@0mh;Dsf!WVr082rjq7PU~wfn#j0F{;?
zA0G#*-v<n}=MNw$8RS4v`d1JT00*@IFwucR6XY09VA%r7WelKDdJZ)o<d7FH;8~Rg
z78K9#zhL0x_yBex%yqCtC;?3IAj_96o6B%+-*E;`Xo&qlWIculK(-bz;epbTBrr5V
zmV@-%2S?X^2Bc76M2=$?xMiTA`SF7R7nnB}X!-vA42lX042oJ>4EL{HW4Mpx08mg1
z2tv{iD75bH+Xqje??1c%R(S7${11#jpmv~^gjj4vcFOtV$HD1B0IBc+7hXVpFm<3>
z732s|6g__cOr+QDGk~J*1FEO~15+AG2rx=OidzgPAQwiU1PR7K2XI2miua(x2dE2H
z{&hDuGn_xZ4;V7{!PWbFw9rI$2(lw^I)DMmcOW(gniFA(59I5ls3?XHz(joh*m<xj
zP)gT=7DS-j0#=JCR~SKN!76m39DvPoSO_U7NH7R8a4>)hB@SrlC;}6$ATT$8;`uu$
zl%Syn)B_HF<k|tR0~oOQ8du1G9SL;+h>e^^;JJx`ff3zI76vi^a)=<ae;^g#un>a!
zmJydVBsqWsiz&#t1;z%^ge-;`MOFwPM+0(hL5f>OVgr^e2f!>vid&d{jHJdWNe(~`
zVvt4T_?WCjh-@(^|3cFO$-c!FIs`)iW;wJpq>81;4k73Oq?Au}%Rvqy<N%sjN=yjQ
i++yT%fNqvyON0QC3quVL({c3x0000<MNUMnLSTX$I~+g&

literal 0
HcmV?d00001

diff --git a/actors/mario/geo.inc.c b/actors/mario/geo.inc.c
index 736d31f..496a1b6 100644
--- a/actors/mario/geo.inc.c
+++ b/actors/mario/geo.inc.c
@@ -1,1825 +1,1013 @@
-// Normal Mario Geo
-
-// 0x170002E0
-const GeoLayout mario_geo_face_and_wings[] = {
-   GEO_ASM(0, geo_mario_head_rotation),
-   GEO_ROTATION_NODE(0x00, 0, 0, 0),
-   GEO_OPEN_NODE(),
-      GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
-      GEO_OPEN_NODE(),
-         GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_on_eyes_front),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_on_eyes_half_closed),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_on_eyes_closed),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_on_eyes_right), // unused
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_on_eyes_left), // unused
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_on_eyes_up), // unused
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_on_eyes_down), // unused
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_on_eyes_dead),
-         GEO_CLOSE_NODE(),
-         GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_off_eyes_front),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_off_eyes_half_closed),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_off_eyes_closed),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_off_eyes_right), // unused
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_off_eyes_left), // unused
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_off_eyes_up), // unused
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_off_eyes_down), // unused
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_off_eyes_dead),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_TRANSLATE_ROTATE(0, 142, -51, -126, 22, -40, -135),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_ALPHA, mario_cap_wings), // left
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_TRANSLATE_ROTATE(0, 142, -51, 126, -22, 40, -135),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_ALPHA, mario_cap_wings), // right
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x1700041C
-const GeoLayout mario_geo_left_hand[] = {
-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_left_hand_closed),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_open),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_closed),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_closed),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_closed),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17000494
-const GeoLayout mario_geo_right_hand[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_right_hand_closed),
-         GEO_CLOSE_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_open),
-      GEO_OPEN_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_peace), // here we go hand
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_cap),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_cap),
-      GEO_OPEN_NODE(),
-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_right_hand_cap_wings),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// The body loads all the parts with some shared dls to apply the solid color of the dl that has it, the same rule applies to the medium and low poly geos
-
-// 0x1700053C
-const GeoLayout mario_geo_body[] = {
-   GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_butt), // starts sharing solid color with mario_torso (blue)
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_move_mario_part_from_parent),
-         GEO_ASM(0, geo_mario_tilt_torso),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 68, 0, 0, mario_torso),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_BRANCH(1, mario_geo_face_and_wings), // stops sharing because faces has its own dl
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_left_arm), // starts sharing solid color with mario_left_forearm (red)
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_left_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_geo_left_hand), // stops sharing because hand has its solid color (white)
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_right_arm), // starts sharing solid color of his dl with mario_right_forearm (red)
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_right_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_geo_right_hand), // stops sharing because hand has its solid color (white)
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_left_thigh), // starts sharing solid color of his dl with mario_left_leg (blue)
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_left_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, mario_left_foot), // stops sharing because foot has its solid color (brown)
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_right_thigh), // starts sharing solid color of his dl with mario_left_leg (blue)
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_right_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
-                  GEO_OPEN_NODE(),
-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
-                     GEO_SCALE(0x00, 65536),
-                     GEO_OPEN_NODE(),
-                        GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_right_foot), // stops sharing because foot has its solid color (brown)
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x170006F8
-const GeoLayout mario_geo_medium_poly_left_hand[] = {
-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_medium_poly_left_hand_closed),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_open),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_medium_poly_left_hand_closed),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_medium_poly_left_hand_closed),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_medium_poly_left_hand_closed),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17000770
-const GeoLayout mario_geo_medium_poly_right_hand[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_medium_poly_right_hand_closed),
-         GEO_CLOSE_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_open),
-      GEO_OPEN_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_peace), // here we go hand
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_cap),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_cap),
-      GEO_OPEN_NODE(),
-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_right_hand_cap_wings),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17000818
-const GeoLayout mario_geo_medium_poly_body[] = {
-   GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_medium_poly_butt), // starts sharing solid color with mario_torso (blue)
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_move_mario_part_from_parent),
-         GEO_ASM(0, geo_mario_tilt_torso),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 68, 0, 0, mario_medium_poly_torso),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_BRANCH(1, mario_geo_face_and_wings), // stops sharing because faces has its own dl - medium poly mario uses high poly face
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_medium_poly_left_arm), // starts sharing solid color with mario_left_forearm (red)
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_medium_poly_left_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_geo_medium_poly_left_hand), // stops sharing because hand has its solid color (white)
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_medium_poly_right_arm), // starts sharing solid color of his dl with mario_right_forearm (red)
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_medium_poly_right_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_geo_medium_poly_right_hand), // stops sharing because hand has its solid color (white)
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_medium_poly_left_thigh), // starts sharing solid color of his dl with mario_left_leg (blue)
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_medium_poly_left_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, mario_medium_poly_left_foot), // stops sharing because foot has its solid color (brown)
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_medium_poly_right_thigh), // starts sharing solid color of his dl with mario_left_leg (blue)
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_medium_poly_right_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
-                  GEO_OPEN_NODE(),
-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
-                     GEO_SCALE(0x00, 65536),
-                     GEO_OPEN_NODE(),
-                        GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_medium_poly_right_foot), // stops sharing because foot has its solid color (brown)
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x170009D4
-const GeoLayout mario_geo_low_poly_face_and_wings[] = {
-   GEO_ASM(0, geo_mario_head_rotation),
-   GEO_ROTATION_NODE(0x00, 0, 0, 0),
-   GEO_OPEN_NODE(),
-      GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
-      GEO_OPEN_NODE(),
-         GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_on_eyes_front),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_on_eyes_half_closed),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_on_eyes_closed),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_on_eyes_right), // unused
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_on_eyes_left), // unused
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_on_eyes_up), // unused
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_on_eyes_down), // unused
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_on_eyes_dead),
-         GEO_CLOSE_NODE(),
-         GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_off_eyes_front),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_off_eyes_half_closed),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_off_eyes_closed),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_off_eyes_right), // unused
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_off_eyes_left), // unused
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_off_eyes_up), // unused
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_off_eyes_down), // unused
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_off_eyes_dead),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_TRANSLATE_ROTATE(0, 142, -51, -126, 22, -40, -135),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_ALPHA, mario_cap_wings), // left
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_TRANSLATE_ROTATE(0, 142, -51, 126, -22, 40, -135),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_ALPHA, mario_cap_wings), // right
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17000B10
-const GeoLayout mario_geo_low_poly_left_hand[] = {
-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_left_hand_closed),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_open),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_low_poly_left_hand_closed),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_low_poly_left_hand_closed),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_low_poly_left_hand_closed),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17000B88
-const GeoLayout mario_geo_low_poly_right_hand[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_right_hand_closed),
-         GEO_CLOSE_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_open),
-      GEO_OPEN_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_peace), // here we go hand
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_cap),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_cap),
-      GEO_OPEN_NODE(),
-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_right_hand_cap_wings),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17000C30
-const GeoLayout mario_geo_low_poly_body[] = {
-   GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_low_poly_butt), // starts sharing solid color with mario_torso (blue)
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_move_mario_part_from_parent),
-         GEO_ASM(0, geo_mario_tilt_torso),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 68, 0, 0, mario_low_poly_torso),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_BRANCH(1, mario_geo_low_poly_face_and_wings), // stops sharing because faces has its own dl
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_low_poly_left_arm), // starts sharing solid color with mario_left_forearm (red)
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_low_poly_left_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_geo_low_poly_left_hand), // stops sharing because hand has its solid color (white)
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_low_poly_right_arm), // starts sharing solid color of his dl with mario_right_forearm (red)
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_low_poly_right_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_geo_low_poly_right_hand), // stops sharing because hand has its solid color (white)
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_low_poly_left_thigh), // starts sharing solid color of his dl with mario_left_leg (blue)
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_low_poly_left_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, mario_low_poly_left_foot), // stops sharing because foot has its solid color (brown)
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_low_poly_right_thigh), // starts sharing solid color of his dl with mario_left_leg (blue)
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_low_poly_right_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
-                  GEO_OPEN_NODE(),
-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
-                     GEO_SCALE(0x00, 65536),
-                     GEO_OPEN_NODE(),
-                        GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_right_foot), // stops sharing because foot has its solid color (brown)
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// Vanish Mario Geo
-
-// 0x17000DEC
-const GeoLayout mario_vanish_geo_face_and_wings[] = {
-   GEO_ASM(0, geo_mario_head_rotation),
-   GEO_ROTATION_NODE(0x00, 0, 0, 0),
-   GEO_OPEN_NODE(),
-      GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
-      GEO_OPEN_NODE(),
-         GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_on_eyes_front),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_on_eyes_half_closed),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_on_eyes_closed),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_on_eyes_right), // unused
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_on_eyes_left), // unused
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_on_eyes_up), // unused
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_on_eyes_down), // unused
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_on_eyes_dead),
-         GEO_CLOSE_NODE(),
-         GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_off_eyes_front),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_off_eyes_half_closed),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_off_eyes_closed),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_off_eyes_right), // unused
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_off_eyes_left), // unused
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_off_eyes_up), // unused
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_off_eyes_down), // unused
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_off_eyes_dead),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_TRANSLATE_ROTATE(0, 142, -51, -126, 22, -40, -135),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_wings_transparent),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_TRANSLATE_ROTATE(0, 142, -51, 126, -22, 40, -135),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_wings_transparent),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17000F28
-const GeoLayout mario_vanish_geo_left_hand[] = {
-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_left_hand_closed),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_open),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_closed),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_closed),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_closed),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
+#include "src/game/envfx_snow.h"
+
+const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt1[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh_mat_override_face_1___eye_half_v3_1),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt2[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt3[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt4[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt5[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt6[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt7[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh_mat_override_face_7___eye_X_v3_3),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_armature_002_switch_option_002[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
+		GEO_OPEN_NODE(),
+			GEO_NODE_START(),
+			GEO_OPEN_NODE(),
+				GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh),
+			GEO_CLOSE_NODE(),
+			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt1),
+			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt2),
+			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt3),
+			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt4),
+			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt5),
+			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt6),
+			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt7),
+		GEO_CLOSE_NODE(),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_right_hand_open_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_002_switch_option_right_hand_open_mesh),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_left_hand_open_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_002_switch_option_left_hand_open_mesh),
+		GEO_OPEN_NODE(),
+			GEO_HELD_OBJECT(0, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+		GEO_CLOSE_NODE(),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_left_hand_peace_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_004_switch_option_left_hand_peace_mesh),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_left_hand_cap_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_005_switch_option_left_hand_cap_mesh),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_left_hand_wing_cap_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_006_switch_option_left_hand_wing_cap_mesh),
+		GEO_OPEN_NODE(),
+			GEO_DISPLAY_LIST(LAYER_ALPHA, mario_006_switch_option_left_hand_wing_cap_wings_mesh),
+		GEO_CLOSE_NODE(),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt1[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh_mat_override_face_1___eye_half_v3_1),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt2[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt3[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt4[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt5[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt6[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt7[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh_mat_override_face_7___eye_X_v3_3),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_armature_002_switch_option_002[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
+		GEO_OPEN_NODE(),
+			GEO_NODE_START(),
+			GEO_OPEN_NODE(),
+				GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh),
+			GEO_CLOSE_NODE(),
+			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt1),
+			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt2),
+			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt3),
+			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt4),
+			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt5),
+			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt6),
+			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt7),
+		GEO_CLOSE_NODE(),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_right_hand_open_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_002_switch_option_right_hand_open_mesh),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_open_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_002_switch_option_left_hand_open_mesh),
+		GEO_OPEN_NODE(),
+			GEO_HELD_OBJECT(0, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+		GEO_CLOSE_NODE(),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_peace_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_004_switch_option_left_hand_peace_mesh),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_cap_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_005_switch_option_left_hand_cap_mesh),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_wing_cap_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_006_switch_option_left_hand_wing_cap_mesh),
+		GEO_OPEN_NODE(),
+			GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_006_switch_option_left_hand_wing_cap_wings_mesh),
+		GEO_CLOSE_NODE(),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt1[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh_mat_override_face_1___eye_half_v3_1),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt2[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt3[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt4[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt5[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt6[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt7[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh_mat_override_face_7___eye_X_v3_3),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt1[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
+		GEO_OPEN_NODE(),
+			GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_mesh),
+			GEO_OPEN_NODE(),
+				GEO_ASM(0, geo_move_mario_part_from_parent),
+				GEO_ASM(0, geo_mario_tilt_torso),
+				GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
+				GEO_OPEN_NODE(),
+					GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, 0, 0, mario_000_offset_001_mesh),
+					GEO_OPEN_NODE(),
+						GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
+						GEO_OPEN_NODE(),
+							GEO_ASM(0, geo_mario_head_rotation),
+							GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
+							GEO_OPEN_NODE(),
+								GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
+								GEO_OPEN_NODE(),
+									GEO_NODE_START(),
+									GEO_OPEN_NODE(),
+										GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
+										GEO_OPEN_NODE(),
+											GEO_NODE_START(),
+											GEO_OPEN_NODE(),
+												GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh),
+											GEO_CLOSE_NODE(),
+											GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt1),
+											GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt2),
+											GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt3),
+											GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt4),
+											GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt5),
+											GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt6),
+											GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt7),
+										GEO_CLOSE_NODE(),
+									GEO_CLOSE_NODE(),
+									GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_jump_mario_armature_002_switch_option_002),
+								GEO_CLOSE_NODE(),
+								GEO_TRANSLATE_ROTATE(LAYER_FORCE, 142, -51, -126, 15, -33, -133),
+								GEO_OPEN_NODE(),
+									GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
+									GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
+									GEO_OPEN_NODE(),
+										GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_001_mesh),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+								GEO_TRANSLATE_ROTATE(LAYER_FORCE, 142, -51, 126, -15, 33, -133),
+								GEO_OPEN_NODE(),
+									GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
+									GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
+									GEO_OPEN_NODE(),
+										GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_002_mesh),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+						GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_003_mesh),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_000_offset_004_mesh),
+								GEO_OPEN_NODE(),
+									GEO_SWITCH_CASE(1, geo_switch_mario_hand),
+									GEO_OPEN_NODE(),
+										GEO_NODE_START(),
+										GEO_OPEN_NODE(),
+											GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+											GEO_OPEN_NODE(),
+												GEO_ASM(1, geo_mario_hand_foot_scaler),
+												GEO_SCALE(LAYER_FORCE, 65536),
+												GEO_OPEN_NODE(),
+													GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_003_mesh),
+												GEO_CLOSE_NODE(),
+											GEO_CLOSE_NODE(),
+										GEO_CLOSE_NODE(),
+										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_jump_mario_right_hand_open_armature),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+						GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_006_mesh),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_000_offset_007_mesh),
+								GEO_OPEN_NODE(),
+									GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+									GEO_OPEN_NODE(),
+										GEO_NODE_START(),
+										GEO_OPEN_NODE(),
+											GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+											GEO_OPEN_NODE(),
+												GEO_ASM(0, geo_mario_hand_foot_scaler),
+												GEO_SCALE(LAYER_FORCE, 65536),
+												GEO_OPEN_NODE(),
+													GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_004_mesh),
+												GEO_CLOSE_NODE(),
+												GEO_HELD_OBJECT(0, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+											GEO_CLOSE_NODE(),
+										GEO_CLOSE_NODE(),
+										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_open_armature),
+										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_peace_armature),
+										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_cap_armature),
+										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_wing_cap_armature),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+				GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
+				GEO_OPEN_NODE(),
+					GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_009_mesh),
+					GEO_OPEN_NODE(),
+						GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_000_offset_010_mesh),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, mario_000_offset_011_mesh),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+				GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
+				GEO_OPEN_NODE(),
+					GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_012_mesh),
+					GEO_OPEN_NODE(),
+						GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_000_offset_013_mesh),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
+							GEO_OPEN_NODE(),
+								GEO_ASM(2, geo_mario_hand_foot_scaler),
+								GEO_SCALE(LAYER_FORCE, 65536),
+								GEO_OPEN_NODE(),
+									GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_005_mesh),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+			GEO_CLOSE_NODE(),
+		GEO_CLOSE_NODE(),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_armature_002_switch_option_002[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
+		GEO_OPEN_NODE(),
+			GEO_NODE_START(),
+			GEO_OPEN_NODE(),
+				GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh_mat_override_metal_v3_0),
+			GEO_CLOSE_NODE(),
+		GEO_CLOSE_NODE(),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_right_hand_open_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_002_switch_option_right_hand_open_mesh_mat_override_metal_v3_0),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_open_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_002_switch_option_left_hand_open_mesh_mat_override_metal_v3_0),
+		GEO_OPEN_NODE(),
+			GEO_HELD_OBJECT(0, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+		GEO_CLOSE_NODE(),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_peace_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_004_switch_option_left_hand_peace_mesh_mat_override_metal_v3_0),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_cap_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_005_switch_option_left_hand_cap_mesh_mat_override_metal_v3_0),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_wing_cap_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_006_switch_option_left_hand_wing_cap_mesh_mat_override_metal_v3_0),
+		GEO_OPEN_NODE(),
+			GEO_DISPLAY_LIST(LAYER_ALPHA, mario_006_switch_option_left_hand_wing_cap_wings_mesh_mat_override_metal_v3_0),
+		GEO_CLOSE_NODE(),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt2[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
+		GEO_OPEN_NODE(),
+			GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_mesh_mat_override_metal_v3_0),
+			GEO_OPEN_NODE(),
+				GEO_ASM(0, geo_move_mario_part_from_parent),
+				GEO_ASM(0, geo_mario_tilt_torso),
+				GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
+				GEO_OPEN_NODE(),
+					GEO_ANIMATED_PART(LAYER_OPAQUE, 68, 0, 0, mario_000_offset_001_mesh_mat_override_metal_v3_0),
+					GEO_OPEN_NODE(),
+						GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
+						GEO_OPEN_NODE(),
+							GEO_ASM(0, geo_mario_head_rotation),
+							GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
+							GEO_OPEN_NODE(),
+								GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
+								GEO_OPEN_NODE(),
+									GEO_NODE_START(),
+									GEO_OPEN_NODE(),
+										GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
+										GEO_OPEN_NODE(),
+											GEO_NODE_START(),
+											GEO_OPEN_NODE(),
+												GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh_mat_override_metal_v3_0),
+											GEO_CLOSE_NODE(),
+										GEO_CLOSE_NODE(),
+									GEO_CLOSE_NODE(),
+									GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt2_jump_mario_armature_002_switch_option_002),
+								GEO_CLOSE_NODE(),
+								GEO_TRANSLATE_ROTATE(LAYER_FORCE, 142, -51, -126, 15, -33, -133),
+								GEO_OPEN_NODE(),
+									GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
+									GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
+									GEO_OPEN_NODE(),
+										GEO_DISPLAY_LIST(LAYER_ALPHA, mario_000_displaylist_001_mesh_mat_override_metal_v3_0),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+								GEO_TRANSLATE_ROTATE(LAYER_FORCE, 142, -51, 126, -15, 33, -133),
+								GEO_OPEN_NODE(),
+									GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
+									GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
+									GEO_OPEN_NODE(),
+										GEO_DISPLAY_LIST(LAYER_ALPHA, mario_000_displaylist_002_mesh_mat_override_metal_v3_0),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+						GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_003_mesh_mat_override_metal_v3_0),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_000_offset_004_mesh_mat_override_metal_v3_0),
+								GEO_OPEN_NODE(),
+									GEO_SWITCH_CASE(1, geo_switch_mario_hand),
+									GEO_OPEN_NODE(),
+										GEO_NODE_START(),
+										GEO_OPEN_NODE(),
+											GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+											GEO_OPEN_NODE(),
+												GEO_ASM(1, geo_mario_hand_foot_scaler),
+												GEO_SCALE(LAYER_FORCE, 65536),
+												GEO_OPEN_NODE(),
+													GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_003_mesh_mat_override_metal_v3_0),
+												GEO_CLOSE_NODE(),
+											GEO_CLOSE_NODE(),
+										GEO_CLOSE_NODE(),
+										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt2_jump_mario_right_hand_open_armature),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+						GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_006_mesh_mat_override_metal_v3_0),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_000_offset_007_mesh_mat_override_metal_v3_0),
+								GEO_OPEN_NODE(),
+									GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+									GEO_OPEN_NODE(),
+										GEO_NODE_START(),
+										GEO_OPEN_NODE(),
+											GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+											GEO_OPEN_NODE(),
+												GEO_ASM(0, geo_mario_hand_foot_scaler),
+												GEO_SCALE(LAYER_FORCE, 65536),
+												GEO_OPEN_NODE(),
+													GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_004_mesh_mat_override_metal_v3_0),
+												GEO_CLOSE_NODE(),
+												GEO_HELD_OBJECT(0, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+											GEO_CLOSE_NODE(),
+										GEO_CLOSE_NODE(),
+										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_open_armature),
+										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_peace_armature),
+										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_cap_armature),
+										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_wing_cap_armature),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+				GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
+				GEO_OPEN_NODE(),
+					GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_009_mesh_mat_override_metal_v3_0),
+					GEO_OPEN_NODE(),
+						GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_000_offset_010_mesh_mat_override_metal_v3_0),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, mario_000_offset_011_mesh_mat_override_metal_v3_0),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+				GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
+				GEO_OPEN_NODE(),
+					GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_012_mesh_mat_override_metal_v3_0),
+					GEO_OPEN_NODE(),
+						GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_000_offset_013_mesh_mat_override_metal_v3_0),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
+							GEO_OPEN_NODE(),
+								GEO_ASM(2, geo_mario_hand_foot_scaler),
+								GEO_SCALE(LAYER_FORCE, 65536),
+								GEO_OPEN_NODE(),
+									GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_005_mesh_mat_override_metal_v3_0),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+			GEO_CLOSE_NODE(),
+		GEO_CLOSE_NODE(),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_armature_002_switch_option_002[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
+		GEO_OPEN_NODE(),
+			GEO_NODE_START(),
+			GEO_OPEN_NODE(),
+				GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh_mat_override_metal_v3_0),
+			GEO_CLOSE_NODE(),
+		GEO_CLOSE_NODE(),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_right_hand_open_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_002_switch_option_right_hand_open_mesh_mat_override_metal_v3_0),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_open_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_002_switch_option_left_hand_open_mesh_mat_override_metal_v3_0),
+		GEO_OPEN_NODE(),
+			GEO_HELD_OBJECT(0, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+		GEO_CLOSE_NODE(),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_peace_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_004_switch_option_left_hand_peace_mesh_mat_override_metal_v3_0),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_cap_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_005_switch_option_left_hand_cap_mesh_mat_override_metal_v3_0),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_wing_cap_armature[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_006_switch_option_left_hand_wing_cap_mesh_mat_override_metal_v3_0),
+		GEO_OPEN_NODE(),
+			GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_006_switch_option_left_hand_wing_cap_wings_mesh_mat_override_metal_v3_0),
+		GEO_CLOSE_NODE(),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt3[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
+		GEO_OPEN_NODE(),
+			GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_mesh_mat_override_metal_v3_0),
+			GEO_OPEN_NODE(),
+				GEO_ASM(0, geo_move_mario_part_from_parent),
+				GEO_ASM(0, geo_mario_tilt_torso),
+				GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
+				GEO_OPEN_NODE(),
+					GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, 0, 0, mario_000_offset_001_mesh_mat_override_metal_v3_0),
+					GEO_OPEN_NODE(),
+						GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
+						GEO_OPEN_NODE(),
+							GEO_ASM(0, geo_mario_head_rotation),
+							GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
+							GEO_OPEN_NODE(),
+								GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
+								GEO_OPEN_NODE(),
+									GEO_NODE_START(),
+									GEO_OPEN_NODE(),
+										GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
+										GEO_OPEN_NODE(),
+											GEO_NODE_START(),
+											GEO_OPEN_NODE(),
+												GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh_mat_override_metal_v3_0),
+											GEO_CLOSE_NODE(),
+										GEO_CLOSE_NODE(),
+									GEO_CLOSE_NODE(),
+									GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt3_jump_mario_armature_002_switch_option_002),
+								GEO_CLOSE_NODE(),
+								GEO_TRANSLATE_ROTATE(LAYER_FORCE, 142, -51, -126, 15, -33, -133),
+								GEO_OPEN_NODE(),
+									GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
+									GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
+									GEO_OPEN_NODE(),
+										GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_001_mesh_mat_override_metal_v3_0),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+								GEO_TRANSLATE_ROTATE(LAYER_FORCE, 142, -51, 126, -15, 33, -133),
+								GEO_OPEN_NODE(),
+									GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
+									GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
+									GEO_OPEN_NODE(),
+										GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_002_mesh_mat_override_metal_v3_0),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+						GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_003_mesh_mat_override_metal_v3_0),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_000_offset_004_mesh_mat_override_metal_v3_0),
+								GEO_OPEN_NODE(),
+									GEO_SWITCH_CASE(1, geo_switch_mario_hand),
+									GEO_OPEN_NODE(),
+										GEO_NODE_START(),
+										GEO_OPEN_NODE(),
+											GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+											GEO_OPEN_NODE(),
+												GEO_ASM(1, geo_mario_hand_foot_scaler),
+												GEO_SCALE(LAYER_FORCE, 65536),
+												GEO_OPEN_NODE(),
+													GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_003_mesh_mat_override_metal_v3_0),
+												GEO_CLOSE_NODE(),
+											GEO_CLOSE_NODE(),
+										GEO_CLOSE_NODE(),
+										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt3_jump_mario_right_hand_open_armature),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+						GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_006_mesh_mat_override_metal_v3_0),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_000_offset_007_mesh_mat_override_metal_v3_0),
+								GEO_OPEN_NODE(),
+									GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+									GEO_OPEN_NODE(),
+										GEO_NODE_START(),
+										GEO_OPEN_NODE(),
+											GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+											GEO_OPEN_NODE(),
+												GEO_ASM(0, geo_mario_hand_foot_scaler),
+												GEO_SCALE(LAYER_FORCE, 65536),
+												GEO_OPEN_NODE(),
+													GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_004_mesh_mat_override_metal_v3_0),
+												GEO_CLOSE_NODE(),
+												GEO_HELD_OBJECT(0, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+											GEO_CLOSE_NODE(),
+										GEO_CLOSE_NODE(),
+										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_open_armature),
+										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_peace_armature),
+										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_cap_armature),
+										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_wing_cap_armature),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+				GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
+				GEO_OPEN_NODE(),
+					GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_009_mesh_mat_override_metal_v3_0),
+					GEO_OPEN_NODE(),
+						GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_000_offset_010_mesh_mat_override_metal_v3_0),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, mario_000_offset_011_mesh_mat_override_metal_v3_0),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+				GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
+				GEO_OPEN_NODE(),
+					GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_012_mesh_mat_override_metal_v3_0),
+					GEO_OPEN_NODE(),
+						GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_000_offset_013_mesh_mat_override_metal_v3_0),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
+							GEO_OPEN_NODE(),
+								GEO_ASM(2, geo_mario_hand_foot_scaler),
+								GEO_SCALE(LAYER_FORCE, 65536),
+								GEO_OPEN_NODE(),
+									GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_005_mesh_mat_override_metal_v3_0),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+			GEO_CLOSE_NODE(),
+		GEO_CLOSE_NODE(),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt1[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh_mat_override_face_1___eye_half_v3_1),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt2[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt3[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt4[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt5[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt6[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
+};
+const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt7[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh_mat_override_face_7___eye_X_v3_3),
+	GEO_CLOSE_NODE(),
+	GEO_RETURN(),
 };
-
-// 0x17000FA0
-const GeoLayout mario_vanish_geo_right_hand[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_right_hand_closed),
-         GEO_CLOSE_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_open),
-      GEO_OPEN_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_peace), // here we go hand
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_cap),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_cap),
-      GEO_OPEN_NODE(),
-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_right_hand_cap_wings),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// Same rule body as Normal Mario
-
-// 0x17001048
-const GeoLayout mario_vanish_geo_body[] = {
-   GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, NULL),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_butt),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_move_mario_part_from_parent),
-         GEO_ASM(0, geo_mario_tilt_torso),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, 0, 0, mario_torso),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 87, 0, 0, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_BRANCH(1, mario_vanish_geo_face_and_wings),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, -10, 79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_left_arm),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_left_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_vanish_geo_left_hand),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, -10, -79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_right_arm),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_right_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_vanish_geo_right_hand),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, 42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_left_thigh),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_left_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, mario_left_foot),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, -42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_right_thigh),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_right_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, NULL),
-                  GEO_OPEN_NODE(),
-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
-                     GEO_SCALE(0x00, 65536),
-                     GEO_OPEN_NODE(),
-                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_right_foot),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17001204
-const GeoLayout mario_vanish_geo_medium_poly_left_hand[] = {
-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_medium_poly_left_hand_closed),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_open),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_medium_poly_left_hand_closed),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_medium_poly_left_hand_closed),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_medium_poly_left_hand_closed),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x1700127C
-const GeoLayout mario_vanish_geo_medium_poly_right_hand[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_medium_poly_right_hand_closed),
-         GEO_CLOSE_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_open),
-      GEO_OPEN_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_peace), // here we go hand
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_cap),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_cap),
-      GEO_OPEN_NODE(),
-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_right_hand_cap_wings),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17001324
-const GeoLayout mario_vanish_geo_medium_poly_body[] = {
-   GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, NULL),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_medium_poly_butt),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_move_mario_part_from_parent),
-         GEO_ASM(0, geo_mario_tilt_torso),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, 0, 0, mario_medium_poly_torso),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 87, 0, 0, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_BRANCH(1, mario_vanish_geo_face_and_wings),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, -10, 79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_medium_poly_left_arm),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_medium_poly_left_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_vanish_geo_medium_poly_left_hand),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, -10, -79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_medium_poly_right_arm),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_medium_poly_right_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_vanish_geo_medium_poly_right_hand),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, 42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_medium_poly_left_thigh),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_medium_poly_left_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, mario_medium_poly_left_foot),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, -42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_medium_poly_right_thigh),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_medium_poly_right_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, NULL),
-                  GEO_OPEN_NODE(),
-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
-                     GEO_SCALE(0x00, 65536),
-                     GEO_OPEN_NODE(),
-                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_medium_poly_right_foot),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x170014E0
-const GeoLayout mario_vanish_geo_low_poly_face_and_wings[] = {
-   GEO_ASM(0, geo_mario_head_rotation),
-   GEO_ROTATION_NODE(0x00, 0, 0, 0),
-   GEO_OPEN_NODE(),
-      GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
-      GEO_OPEN_NODE(),
-         GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_on_eyes_front),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_on_eyes_half_closed),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_on_eyes_closed),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_on_eyes_right),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_on_eyes_left),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_on_eyes_up),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_on_eyes_down),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_on_eyes_dead),
-         GEO_CLOSE_NODE(),
-         GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_off_eyes_front),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_off_eyes_half_closed),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_off_eyes_closed),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_off_eyes_right),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_off_eyes_left),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_off_eyes_up),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_off_eyes_down),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_off_eyes_dead),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_TRANSLATE_ROTATE(0, 142, -51, -126, 22, -40, -135),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_wings_transparent),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_TRANSLATE_ROTATE(0, 142, -51, 126, -22, 40, -135),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_wings_transparent),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x1700161C
-const GeoLayout mario_vanish_geo_low_poly_left_hand[] = {
-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_left_hand_closed),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_open),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_low_poly_left_hand_closed),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_low_poly_left_hand_closed),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_low_poly_left_hand_closed),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17001694
-const GeoLayout mario_vanish_geo_low_poly_right_hand[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_right_hand_closed),
-         GEO_CLOSE_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_open),
-      GEO_OPEN_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_peace), // here we go hand
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_cap),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_cap),
-      GEO_OPEN_NODE(),
-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_right_hand_cap_wings),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x1700173C
-const GeoLayout mario_vanish_geo_low_poly_body[] = {
-   GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, NULL),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_low_poly_butt),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_move_mario_part_from_parent),
-         GEO_ASM(0, geo_mario_tilt_torso),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, 0, 0, mario_low_poly_torso),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 87, 0, 0, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_BRANCH(1, mario_vanish_geo_low_poly_face_and_wings),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, -10, 79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_low_poly_left_arm),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_low_poly_left_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_vanish_geo_low_poly_left_hand),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, -10, -79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_low_poly_right_arm),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_low_poly_right_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_vanish_geo_low_poly_right_hand),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, 42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_low_poly_left_thigh),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_low_poly_left_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, mario_low_poly_left_foot),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, -42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_low_poly_right_thigh),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_low_poly_right_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, NULL),
-                  GEO_OPEN_NODE(),
-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
-                     GEO_SCALE(0x00, 65536),
-                     GEO_OPEN_NODE(),
-                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_right_foot),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// Metal Mario Geo
-
-// 0x170018F8
-const GeoLayout mario_metal_geo_face_and_wings[] = {
-   GEO_ASM(0, geo_mario_head_rotation),
-   GEO_ROTATION_NODE(0x00, 0, 0, 0),
-   GEO_OPEN_NODE(),
-      GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
-      GEO_OPEN_NODE(),
-         GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_cap_on_shared_dl),
-         GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_cap_off_shared_dl),
-      GEO_CLOSE_NODE(),
-      GEO_TRANSLATE_ROTATE(0, 142, -51, -126, 22, -40, -135),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_cap_wings), // left
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_TRANSLATE_ROTATE(0, 142, -51, 126, -22, 40, -135),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_cap_wings), // right
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x170019A4
-const GeoLayout mario_metal_geo_left_hand[] = {
-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_left_hand_closed_shared_dl),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_open_shared_dl),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_closed_shared_dl),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_closed_shared_dl),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_closed_shared_dl),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17001A1C
-const GeoLayout mario_metal_geo_right_hand[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_right_hand_closed),
-         GEO_CLOSE_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_open),
-      GEO_OPEN_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_peace_shared_dl), // here we go hand
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
-      GEO_OPEN_NODE(),
-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_right_hand_cap_shared_dl_wings),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// A difference from Normal Mario is that the dls after the butt and left thigh shares the metal texture of it, same rule applies to the medium and low poly geos
-
-// 0x17001AC4
-const GeoLayout mario_metal_geo_body[] = {
-   GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_metal_butt), // starts sharing metal texture with the dls below
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_move_mario_part_from_parent),
-         GEO_ASM(0, geo_mario_tilt_torso),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 68, 0, 0, mario_metal_torso_shared_dl),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_BRANCH(1, mario_metal_geo_face_and_wings), // unlike normal mario geo, these dls still share the metal texture
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_left_arm_shared_dl),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_left_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_metal_geo_left_hand),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_right_arm_shared_dl),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_right_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_metal_geo_right_hand), // stop sharing because the wing metal cap of it
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_metal_left_thigh), // starts sharing metal texture with the dls below
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_left_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, mario_left_foot_shared_dl),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_right_thigh_shared_dl),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_right_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
-                  GEO_OPEN_NODE(),
-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
-                     GEO_SCALE(0x00, 65536),
-                     GEO_OPEN_NODE(),
-                        GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_right_foot),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17001C80
-const GeoLayout mario_metal_geo_medium_poly_left_hand[] = {
-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_medium_poly_left_hand_closed_shared_dl),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_open_shared_dl),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_medium_poly_left_hand_closed_shared_dl),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_medium_poly_left_hand_closed_shared_dl),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_medium_poly_left_hand_closed_shared_dl),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17001CF8
-const GeoLayout mario_metal_geo_medium_poly_right_hand[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_medium_poly_right_hand_closed),
-         GEO_CLOSE_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_open),
-      GEO_OPEN_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_peace_shared_dl), // here we go hand
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
-      GEO_OPEN_NODE(),
-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_right_hand_cap_shared_dl_wings),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17001DA0
-const GeoLayout mario_metal_geo_medium_poly_body[] = {
-   GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_metal_medium_poly_butt),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_move_mario_part_from_parent),
-         GEO_ASM(0, geo_mario_tilt_torso),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 68, 0, 0, mario_metal_medium_poly_torso),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_BRANCH(1, mario_metal_geo_face_and_wings),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_medium_poly_left_arm_shared_dl),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_medium_poly_left_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_metal_geo_medium_poly_left_hand),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_medium_poly_right_arm_shared_dl),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_medium_poly_right_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_metal_geo_medium_poly_right_hand),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_metal_medium_poly_left_thigh),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_medium_poly_left_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, mario_medium_poly_left_foot_shared_dl),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_medium_poly_right_thigh_shared_dl),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_medium_poly_right_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
-                  GEO_OPEN_NODE(),
-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
-                     GEO_SCALE(0x00, 65536),
-                     GEO_OPEN_NODE(),
-                        GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_medium_poly_right_foot),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17001F5C
-const GeoLayout mario_metal_geo_low_poly_face_and_wings[] = {
-   GEO_ASM(0, geo_mario_head_rotation),
-   GEO_ROTATION_NODE(0x00, 0, 0, 0),
-   GEO_OPEN_NODE(),
-      GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
-      GEO_OPEN_NODE(),
-         GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_low_poly_cap_on),
-         GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_low_poly_cap_off),
-      GEO_CLOSE_NODE(),
-      GEO_TRANSLATE_ROTATE(0, 142, -51, -126, 22, -40, -135),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_cap_wings),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_TRANSLATE_ROTATE(0, 142, -51, 126, -22, 40, -135),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_cap_wings),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17002008
-const GeoLayout mario_metal_geo_low_poly_left_hand[] = {
-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_left_hand_closed_shared_dl),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_open_shared_dl),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_low_poly_left_hand_closed_shared_dl),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_low_poly_left_hand_closed_shared_dl),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_low_poly_left_hand_closed_shared_dl),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17002080
-const GeoLayout mario_metal_geo_low_poly_right_hand[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_low_poly_right_hand_closed),
-         GEO_CLOSE_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_open),
-      GEO_OPEN_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_peace_shared_dl), // here we go hand
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
-      GEO_OPEN_NODE(),
-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_right_hand_cap_shared_dl_wings),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17002128
-const GeoLayout mario_metal_geo_low_poly_body[] = {
-   GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_metal_low_poly_butt),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_move_mario_part_from_parent),
-         GEO_ASM(0, geo_mario_tilt_torso),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 68, 0, 0, mario_metal_low_poly_torso),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_BRANCH(1, mario_metal_geo_low_poly_face_and_wings),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_low_poly_left_arm_shared_dl),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_low_poly_left_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_metal_geo_low_poly_left_hand),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_low_poly_right_arm_shared_dl),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_low_poly_right_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_metal_geo_low_poly_right_hand),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_metal_low_poly_left_thigh),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_low_poly_left_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, mario_low_poly_left_foot_shared_dl),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_low_poly_right_thigh_shared_dl),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_low_poly_right_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
-                  GEO_OPEN_NODE(),
-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
-                     GEO_SCALE(0x00, 65536),
-                     GEO_OPEN_NODE(),
-                        GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_low_poly_right_foot),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// Metal Vanish Mario Geo
-
-// 0x170022E4
-const GeoLayout mario_metal_vanish_geo_face_and_wings[] = {
-   GEO_ASM(0, geo_mario_head_rotation),
-   GEO_ROTATION_NODE(0x00, 0, 0, 0),
-   GEO_OPEN_NODE(),
-      GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
-      GEO_OPEN_NODE(),
-         GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_cap_on_shared_dl),
-         GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_cap_off_shared_dl),
-      GEO_CLOSE_NODE(),
-      GEO_TRANSLATE_ROTATE(0, 142, -51, -126, 22, -40, -135),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_cap_wings_transparent),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_TRANSLATE_ROTATE(0, 142, -51, 126, -22, 40, -135),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_cap_wings_transparent),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17002390
-const GeoLayout mario_metal_vanish_geo_left_hand[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_left_hand_closed_shared_dl),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_open_shared_dl),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_closed_shared_dl),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_closed_shared_dl),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_closed_shared_dl),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17002408
-const GeoLayout mario_metal_vanish_geo_right_hand[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_right_hand_closed),
-         GEO_CLOSE_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_open),
-      GEO_OPEN_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_peace_shared_dl), // here we go hand
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
-      GEO_OPEN_NODE(),
-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_right_hand_cap_shared_dl_wings),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// Same rules as Metal Mario
-
-// 0x170024B0
-const GeoLayout mario_metal_vanish_geo_body[] = {
-   GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, NULL),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_metal_butt),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_move_mario_part_from_parent),
-         GEO_ASM(0, geo_mario_tilt_torso),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, 0, 0, mario_metal_torso_shared_dl),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 87, 0, 0, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_BRANCH(1, mario_metal_vanish_geo_face_and_wings),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, -10, 79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_left_arm_shared_dl),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_left_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_metal_vanish_geo_left_hand),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, -10, -79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_right_arm_shared_dl),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_right_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_metal_vanish_geo_right_hand),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, 42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_metal_left_thigh),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_left_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, mario_left_foot_shared_dl),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, -42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_right_thigh_shared_dl),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_right_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, NULL),
-                  GEO_OPEN_NODE(),
-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
-                     GEO_SCALE(0x00, 65536),
-                     GEO_OPEN_NODE(),
-                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_right_foot),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x1700266C
-const GeoLayout mario_metal_vanish_geo_medium_poly_left_hand[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_medium_poly_left_hand_closed_shared_dl),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_open_shared_dl),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_medium_poly_left_hand_closed_shared_dl),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_medium_poly_left_hand_closed_shared_dl),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_medium_poly_left_hand_closed_shared_dl),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x170026E4
-const GeoLayout mario_metal_vanish_geo_medium_poly_right_hand[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_medium_poly_right_hand_closed),
-         GEO_CLOSE_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_open),
-      GEO_OPEN_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_peace_shared_dl), // here we go hand
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
-      GEO_OPEN_NODE(),
-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_right_hand_cap_shared_dl_wings),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x1700278C
-const GeoLayout mario_metal_vanish_geo_medium_poly_body[] = {
-   GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, NULL),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_metal_medium_poly_butt),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_move_mario_part_from_parent),
-         GEO_ASM(0, geo_mario_tilt_torso),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, 0, 0, mario_metal_medium_poly_torso),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 87, 0, 0, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_BRANCH(1, mario_metal_vanish_geo_face_and_wings),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, -10, 79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_medium_poly_left_arm_shared_dl),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_medium_poly_left_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_metal_vanish_geo_medium_poly_left_hand),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, -10, -79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_medium_poly_right_arm_shared_dl),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_medium_poly_right_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_SWITCH_CASE(0, geo_switch_mario_hand),
-                        GEO_OPEN_NODE(),
-                           GEO_BRANCH(1, mario_metal_vanish_geo_medium_poly_right_hand),
-                        GEO_CLOSE_NODE(),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, 42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_metal_medium_poly_left_thigh),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_medium_poly_left_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, mario_medium_poly_left_foot_shared_dl),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, -42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_medium_poly_right_thigh_shared_dl),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_medium_poly_right_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, NULL),
-                  GEO_OPEN_NODE(),
-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
-                     GEO_SCALE(0x00, 65536),
-                     GEO_OPEN_NODE(),
-                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_medium_poly_right_foot),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17002958
-const GeoLayout mario_metal_vanish_geo_low_poly_face_and_wings[] = {
-   GEO_ASM(0, geo_mario_head_rotation),
-   GEO_ROTATION_NODE(0x00, 0, 0, 0),
-   GEO_OPEN_NODE(),
-      GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
-      GEO_OPEN_NODE(),
-         GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_low_poly_cap_on),
-         GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_low_poly_cap_off),
-      GEO_CLOSE_NODE(),
-      GEO_TRANSLATE_ROTATE(0, 142, -51, -126, 22, -40, -135),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_cap_wings_transparent),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_TRANSLATE_ROTATE(0, 142, -51, 126, -22, 40, -135),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_cap_wings_transparent),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17002A04
-const GeoLayout mario_metal_vanish_geo_low_poly_left_hand[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(1, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_left_hand_closed_shared_dl),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_open_shared_dl),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_low_poly_left_hand_closed_shared_dl),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_low_poly_left_hand_closed_shared_dl),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_low_poly_left_hand_closed_shared_dl),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17002A7C
-const GeoLayout mario_metal_vanish_geo_low_poly_right_hand[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mario_hand_foot_scaler),
-         GEO_SCALE(0x00, 65536),
-         GEO_OPEN_NODE(),
-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_low_poly_right_hand_closed),
-         GEO_CLOSE_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_open),
-      GEO_OPEN_NODE(),
-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
-      GEO_CLOSE_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_peace_shared_dl), // here we go hand
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
-      GEO_OPEN_NODE(),
-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_right_hand_cap_shared_dl_wings),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17002B24
-const GeoLayout mario_metal_vanish_geo_low_poly_body[] = {
-   GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, NULL),
-   GEO_OPEN_NODE(),
-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_metal_low_poly_butt),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_move_mario_part_from_parent),
-         GEO_ASM(0, geo_mario_tilt_torso),
-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, 0, 0, mario_metal_low_poly_torso),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 87, 0, 0, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_BRANCH(1, mario_metal_vanish_geo_low_poly_face_and_wings),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, -10, 79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_low_poly_left_arm_shared_dl),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_low_poly_left_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_metal_vanish_geo_low_poly_left_hand),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, -10, -79, NULL),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_low_poly_right_arm_shared_dl),
-                  GEO_OPEN_NODE(),
-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_low_poly_right_forearm_shared_dl),
-                     GEO_OPEN_NODE(),
-                        GEO_BRANCH(1, mario_metal_vanish_geo_low_poly_right_hand),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, 42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_metal_low_poly_left_thigh),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_low_poly_left_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, mario_low_poly_left_foot_shared_dl),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, -42, NULL),
-         GEO_OPEN_NODE(),
-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_low_poly_right_thigh_shared_dl),
-            GEO_OPEN_NODE(),
-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_low_poly_right_leg_shared_dl),
-               GEO_OPEN_NODE(),
-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, NULL),
-                  GEO_OPEN_NODE(),
-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
-                     GEO_SCALE(0x00, 65536),
-                     GEO_OPEN_NODE(),
-                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_low_poly_right_foot),
-                     GEO_CLOSE_NODE(),
-                  GEO_CLOSE_NODE(),
-               GEO_CLOSE_NODE(),
-            GEO_CLOSE_NODE(),
-         GEO_CLOSE_NODE(),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// High Poly
-
-// 0x17002CE0
-const GeoLayout mario_geo_load_body[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_cap_effect),
-   GEO_OPEN_NODE(),
-      GEO_BRANCH(1, mario_geo_body),
-      GEO_BRANCH(1, mario_vanish_geo_body),
-      GEO_BRANCH(1, mario_metal_geo_body),
-      GEO_BRANCH(1, mario_metal_vanish_geo_body),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// Medium Poly
-
-// 0x17002D14
-const GeoLayout mario_geo_load_medium_poly_body[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_cap_effect),
-   GEO_OPEN_NODE(),
-      GEO_BRANCH(1, mario_geo_medium_poly_body),
-      GEO_BRANCH(1, mario_vanish_geo_medium_poly_body),
-      GEO_BRANCH(1, mario_metal_geo_medium_poly_body),
-      GEO_BRANCH(1, mario_metal_vanish_geo_medium_poly_body),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// Low Poly
-
-// 0x17002D48
-const GeoLayout mario_geo_load_low_poly_body[] = {
-   GEO_SWITCH_CASE(0, geo_switch_mario_cap_effect),
-   GEO_OPEN_NODE(),
-      GEO_BRANCH(1, mario_geo_low_poly_body),
-      GEO_BRANCH(1, mario_vanish_geo_low_poly_body),
-      GEO_BRANCH(1, mario_metal_geo_low_poly_body),
-      GEO_BRANCH(1, mario_metal_vanish_geo_low_poly_body),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// 0x17002D7C
-const GeoLayout mario_geo_render_body[] = {
-   GEO_NODE_START(),
-   GEO_OPEN_NODE(),
-      GEO_RENDER_RANGE(-2048, 600),
-      GEO_OPEN_NODE(),
-         GEO_BRANCH(1, mario_geo_load_body),
-      GEO_CLOSE_NODE(),
-      GEO_RENDER_RANGE(600, 1600),
-      GEO_OPEN_NODE(),
-         GEO_BRANCH(1, mario_geo_load_medium_poly_body),
-      GEO_CLOSE_NODE(),
-      GEO_RENDER_RANGE(1600, 32767),
-      GEO_OPEN_NODE(),
-         GEO_BRANCH(1, mario_geo_load_low_poly_body),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_RETURN(),
-};
-
-// This last geo is used to load all of Mario Geo in the Level Scripts
-
-// 0x17002DD4
 const GeoLayout mario_geo[] = {
-   GEO_SHADOW(SHADOW_CIRCLE_PLAYER, 0xB4, 100),
-   GEO_OPEN_NODE(),
-      GEO_SCALE(0x00, 16384),
-      GEO_OPEN_NODE(),
-         GEO_ASM(0, geo_mirror_mario_backface_culling),
-         GEO_ASM(0, geo_mirror_mario_set_alpha),
-         GEO_SWITCH_CASE(0, geo_switch_mario_stand_run),
-         GEO_OPEN_NODE(),
-            GEO_BRANCH(1, mario_geo_load_body),
-            GEO_BRANCH(1, mario_geo_render_body),
-         GEO_CLOSE_NODE(),
-         GEO_ASM(1, geo_mirror_mario_backface_culling),
-      GEO_CLOSE_NODE(),
-   GEO_CLOSE_NODE(),
-   GEO_END(),
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_SHADOW(1, 180, 100),
+		GEO_OPEN_NODE(),
+			GEO_SCALE(LAYER_FORCE, 16384),
+			GEO_OPEN_NODE(),
+				GEO_ASM(0, geo_mirror_mario_backface_culling),
+				GEO_ASM(0, geo_mirror_mario_set_alpha),
+				GEO_SWITCH_CASE(0, geo_switch_mario_stand_run),
+				GEO_OPEN_NODE(),
+					GEO_NODE_START(),
+					GEO_OPEN_NODE(),
+						GEO_SWITCH_CASE(0, geo_switch_mario_cap_effect),
+						GEO_OPEN_NODE(),
+							GEO_NODE_START(),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
+								GEO_OPEN_NODE(),
+									GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_mesh),
+									GEO_OPEN_NODE(),
+										GEO_ASM(0, geo_move_mario_part_from_parent),
+										GEO_ASM(0, geo_mario_tilt_torso),
+										GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
+										GEO_OPEN_NODE(),
+											GEO_ANIMATED_PART(LAYER_OPAQUE, 68, 0, 0, mario_000_offset_001_mesh),
+											GEO_OPEN_NODE(),
+												GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
+												GEO_OPEN_NODE(),
+													GEO_ASM(0, geo_mario_head_rotation),
+													GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
+													GEO_OPEN_NODE(),
+														GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
+														GEO_OPEN_NODE(),
+															GEO_NODE_START(),
+															GEO_OPEN_NODE(),
+																GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
+																GEO_OPEN_NODE(),
+																	GEO_NODE_START(),
+																	GEO_OPEN_NODE(),
+																		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh),
+																	GEO_CLOSE_NODE(),
+																	GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt1),
+																	GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt2),
+																	GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt3),
+																	GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt4),
+																	GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt5),
+																	GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt6),
+																	GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt7),
+																GEO_CLOSE_NODE(),
+															GEO_CLOSE_NODE(),
+															GEO_BRANCH(1, mario_armature_002_switch_option_002),
+														GEO_CLOSE_NODE(),
+														GEO_TRANSLATE_ROTATE(LAYER_FORCE, 142, -51, -126, 15, -33, -133),
+														GEO_OPEN_NODE(),
+															GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
+															GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
+															GEO_OPEN_NODE(),
+																GEO_DISPLAY_LIST(LAYER_ALPHA, mario_000_displaylist_001_mesh),
+															GEO_CLOSE_NODE(),
+														GEO_CLOSE_NODE(),
+														GEO_TRANSLATE_ROTATE(LAYER_FORCE, 142, -51, 126, -15, 33, -133),
+														GEO_OPEN_NODE(),
+															GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
+															GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
+															GEO_OPEN_NODE(),
+																GEO_DISPLAY_LIST(LAYER_ALPHA, mario_000_displaylist_002_mesh),
+															GEO_CLOSE_NODE(),
+														GEO_CLOSE_NODE(),
+													GEO_CLOSE_NODE(),
+												GEO_CLOSE_NODE(),
+												GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
+												GEO_OPEN_NODE(),
+													GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_003_mesh),
+													GEO_OPEN_NODE(),
+														GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_000_offset_004_mesh),
+														GEO_OPEN_NODE(),
+															GEO_SWITCH_CASE(1, geo_switch_mario_hand),
+															GEO_OPEN_NODE(),
+																GEO_NODE_START(),
+																GEO_OPEN_NODE(),
+																	GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+																	GEO_OPEN_NODE(),
+																		GEO_ASM(1, geo_mario_hand_foot_scaler),
+																		GEO_SCALE(LAYER_FORCE, 65536),
+																		GEO_OPEN_NODE(),
+																			GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_003_mesh),
+																		GEO_CLOSE_NODE(),
+																	GEO_CLOSE_NODE(),
+																GEO_CLOSE_NODE(),
+																GEO_BRANCH(1, mario_right_hand_open_armature),
+															GEO_CLOSE_NODE(),
+														GEO_CLOSE_NODE(),
+													GEO_CLOSE_NODE(),
+												GEO_CLOSE_NODE(),
+												GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
+												GEO_OPEN_NODE(),
+													GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_006_mesh),
+													GEO_OPEN_NODE(),
+														GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_000_offset_007_mesh),
+														GEO_OPEN_NODE(),
+															GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+															GEO_OPEN_NODE(),
+																GEO_NODE_START(),
+																GEO_OPEN_NODE(),
+																	GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+																	GEO_OPEN_NODE(),
+																		GEO_ASM(0, geo_mario_hand_foot_scaler),
+																		GEO_SCALE(LAYER_FORCE, 65536),
+																		GEO_OPEN_NODE(),
+																			GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_004_mesh),
+																		GEO_CLOSE_NODE(),
+																		GEO_HELD_OBJECT(0, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+																	GEO_CLOSE_NODE(),
+																GEO_CLOSE_NODE(),
+																GEO_BRANCH(1, mario_left_hand_open_armature),
+																GEO_BRANCH(1, mario_left_hand_peace_armature),
+																GEO_BRANCH(1, mario_left_hand_cap_armature),
+																GEO_BRANCH(1, mario_left_hand_wing_cap_armature),
+															GEO_CLOSE_NODE(),
+														GEO_CLOSE_NODE(),
+													GEO_CLOSE_NODE(),
+												GEO_CLOSE_NODE(),
+											GEO_CLOSE_NODE(),
+										GEO_CLOSE_NODE(),
+										GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
+										GEO_OPEN_NODE(),
+											GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_009_mesh),
+											GEO_OPEN_NODE(),
+												GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_000_offset_010_mesh),
+												GEO_OPEN_NODE(),
+													GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, mario_000_offset_011_mesh),
+												GEO_CLOSE_NODE(),
+											GEO_CLOSE_NODE(),
+										GEO_CLOSE_NODE(),
+										GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
+										GEO_OPEN_NODE(),
+											GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_012_mesh),
+											GEO_OPEN_NODE(),
+												GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_000_offset_013_mesh),
+												GEO_OPEN_NODE(),
+													GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
+													GEO_OPEN_NODE(),
+														GEO_ASM(2, geo_mario_hand_foot_scaler),
+														GEO_SCALE(LAYER_FORCE, 65536),
+														GEO_OPEN_NODE(),
+															GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_005_mesh),
+														GEO_CLOSE_NODE(),
+													GEO_CLOSE_NODE(),
+												GEO_CLOSE_NODE(),
+											GEO_CLOSE_NODE(),
+										GEO_CLOSE_NODE(),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+							GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1),
+							GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt2),
+							GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt3),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+				GEO_ASM(1, geo_mirror_mario_backface_culling),
+			GEO_CLOSE_NODE(),
+		GEO_CLOSE_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_material_revert_render_settings),
+		GEO_DISPLAY_LIST(LAYER_ALPHA, mario_material_revert_render_settings),
+		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_material_revert_render_settings),
+	GEO_CLOSE_NODE(),
+	GEO_END(),
 };
diff --git a/actors/mario/geo.inc.c.rej b/actors/mario/geo.inc.c.rej
new file mode 100644
index 0000000..37810f9
--- /dev/null
+++ b/actors/mario/geo.inc.c.rej
@@ -0,0 +1,2837 @@
+diff a/actors/mario/geo.inc.c b/actors/mario/geo.inc.c	(rejected hunks)
+@@ -1,1825 +1,1013 @@
+-// Normal Mario Geo
+-
+-// 0x170002E0
+-const GeoLayout mario_geo_face_and_wings[] = {
+-   GEO_ASM(0, geo_mario_head_rotation),
+-   GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-   GEO_OPEN_NODE(),
+-      GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
+-      GEO_OPEN_NODE(),
+-         GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_on_eyes_front),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_on_eyes_half_closed),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_on_eyes_closed),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_on_eyes_right), // unused
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_on_eyes_left), // unused
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_on_eyes_up), // unused
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_on_eyes_down), // unused
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_on_eyes_dead),
+-         GEO_CLOSE_NODE(),
+-         GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_off_eyes_front),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_off_eyes_half_closed),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_off_eyes_closed),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_off_eyes_right), // unused
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_off_eyes_left), // unused
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_off_eyes_up), // unused
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_off_eyes_down), // unused
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_cap_off_eyes_dead),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_TRANSLATE_ROTATE(0, 142, -51, -126, 22, -40, -135),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_ALPHA, mario_cap_wings), // left
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_TRANSLATE_ROTATE(0, 142, -51, 126, -22, 40, -135),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_ALPHA, mario_cap_wings), // right
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x1700041C
+-const GeoLayout mario_geo_left_hand[] = {
+-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_left_hand_closed),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_open),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_closed),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_closed),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_closed),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17000494
+-const GeoLayout mario_geo_right_hand[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_right_hand_closed),
+-         GEO_CLOSE_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_open),
+-      GEO_OPEN_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_peace), // here we go hand
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_cap),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_cap),
+-      GEO_OPEN_NODE(),
+-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_right_hand_cap_wings),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// The body loads all the parts with some shared dls to apply the solid color of the dl that has it, the same rule applies to the medium and low poly geos
+-
+-// 0x1700053C
+-const GeoLayout mario_geo_body[] = {
+-   GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_butt), // starts sharing solid color with mario_torso (blue)
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_move_mario_part_from_parent),
+-         GEO_ASM(0, geo_mario_tilt_torso),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 68, 0, 0, mario_torso),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_BRANCH(1, mario_geo_face_and_wings), // stops sharing because faces has its own dl
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_left_arm), // starts sharing solid color with mario_left_forearm (red)
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_left_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_geo_left_hand), // stops sharing because hand has its solid color (white)
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_right_arm), // starts sharing solid color of his dl with mario_right_forearm (red)
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_right_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_geo_right_hand), // stops sharing because hand has its solid color (white)
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_left_thigh), // starts sharing solid color of his dl with mario_left_leg (blue)
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_left_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, mario_left_foot), // stops sharing because foot has its solid color (brown)
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_right_thigh), // starts sharing solid color of his dl with mario_left_leg (blue)
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_right_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
+-                     GEO_SCALE(0x00, 65536),
+-                     GEO_OPEN_NODE(),
+-                        GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_right_foot), // stops sharing because foot has its solid color (brown)
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x170006F8
+-const GeoLayout mario_geo_medium_poly_left_hand[] = {
+-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_medium_poly_left_hand_closed),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_open),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_medium_poly_left_hand_closed),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_medium_poly_left_hand_closed),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_medium_poly_left_hand_closed),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17000770
+-const GeoLayout mario_geo_medium_poly_right_hand[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_medium_poly_right_hand_closed),
+-         GEO_CLOSE_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_open),
+-      GEO_OPEN_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_peace), // here we go hand
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_cap),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_cap),
+-      GEO_OPEN_NODE(),
+-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_right_hand_cap_wings),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17000818
+-const GeoLayout mario_geo_medium_poly_body[] = {
+-   GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_medium_poly_butt), // starts sharing solid color with mario_torso (blue)
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_move_mario_part_from_parent),
+-         GEO_ASM(0, geo_mario_tilt_torso),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 68, 0, 0, mario_medium_poly_torso),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_BRANCH(1, mario_geo_face_and_wings), // stops sharing because faces has its own dl - medium poly mario uses high poly face
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_medium_poly_left_arm), // starts sharing solid color with mario_left_forearm (red)
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_medium_poly_left_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_geo_medium_poly_left_hand), // stops sharing because hand has its solid color (white)
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_medium_poly_right_arm), // starts sharing solid color of his dl with mario_right_forearm (red)
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_medium_poly_right_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_geo_medium_poly_right_hand), // stops sharing because hand has its solid color (white)
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_medium_poly_left_thigh), // starts sharing solid color of his dl with mario_left_leg (blue)
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_medium_poly_left_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, mario_medium_poly_left_foot), // stops sharing because foot has its solid color (brown)
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_medium_poly_right_thigh), // starts sharing solid color of his dl with mario_left_leg (blue)
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_medium_poly_right_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
+-                     GEO_SCALE(0x00, 65536),
+-                     GEO_OPEN_NODE(),
+-                        GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_medium_poly_right_foot), // stops sharing because foot has its solid color (brown)
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x170009D4
+-const GeoLayout mario_geo_low_poly_face_and_wings[] = {
+-   GEO_ASM(0, geo_mario_head_rotation),
+-   GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-   GEO_OPEN_NODE(),
+-      GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
+-      GEO_OPEN_NODE(),
+-         GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_on_eyes_front),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_on_eyes_half_closed),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_on_eyes_closed),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_on_eyes_right), // unused
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_on_eyes_left), // unused
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_on_eyes_up), // unused
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_on_eyes_down), // unused
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_on_eyes_dead),
+-         GEO_CLOSE_NODE(),
+-         GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_off_eyes_front),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_off_eyes_half_closed),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_off_eyes_closed),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_off_eyes_right), // unused
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_off_eyes_left), // unused
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_off_eyes_up), // unused
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_off_eyes_down), // unused
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_cap_off_eyes_dead),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_TRANSLATE_ROTATE(0, 142, -51, -126, 22, -40, -135),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_ALPHA, mario_cap_wings), // left
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_TRANSLATE_ROTATE(0, 142, -51, 126, -22, 40, -135),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_ALPHA, mario_cap_wings), // right
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17000B10
+-const GeoLayout mario_geo_low_poly_left_hand[] = {
+-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_left_hand_closed),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_open),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_low_poly_left_hand_closed),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_low_poly_left_hand_closed),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_low_poly_left_hand_closed),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17000B88
+-const GeoLayout mario_geo_low_poly_right_hand[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_right_hand_closed),
+-         GEO_CLOSE_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_open),
+-      GEO_OPEN_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_peace), // here we go hand
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_cap),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_cap),
+-      GEO_OPEN_NODE(),
+-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_right_hand_cap_wings),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17000C30
+-const GeoLayout mario_geo_low_poly_body[] = {
+-   GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_low_poly_butt), // starts sharing solid color with mario_torso (blue)
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_move_mario_part_from_parent),
+-         GEO_ASM(0, geo_mario_tilt_torso),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 68, 0, 0, mario_low_poly_torso),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_BRANCH(1, mario_geo_low_poly_face_and_wings), // stops sharing because faces has its own dl
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_low_poly_left_arm), // starts sharing solid color with mario_left_forearm (red)
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_low_poly_left_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_geo_low_poly_left_hand), // stops sharing because hand has its solid color (white)
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_low_poly_right_arm), // starts sharing solid color of his dl with mario_right_forearm (red)
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_low_poly_right_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_geo_low_poly_right_hand), // stops sharing because hand has its solid color (white)
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_low_poly_left_thigh), // starts sharing solid color of his dl with mario_left_leg (blue)
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_low_poly_left_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, mario_low_poly_left_foot), // stops sharing because foot has its solid color (brown)
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_low_poly_right_thigh), // starts sharing solid color of his dl with mario_left_leg (blue)
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_low_poly_right_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
+-                     GEO_SCALE(0x00, 65536),
+-                     GEO_OPEN_NODE(),
+-                        GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_right_foot), // stops sharing because foot has its solid color (brown)
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// Vanish Mario Geo
+-
+-// 0x17000DEC
+-const GeoLayout mario_vanish_geo_face_and_wings[] = {
+-   GEO_ASM(0, geo_mario_head_rotation),
+-   GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-   GEO_OPEN_NODE(),
+-      GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
+-      GEO_OPEN_NODE(),
+-         GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_on_eyes_front),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_on_eyes_half_closed),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_on_eyes_closed),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_on_eyes_right), // unused
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_on_eyes_left), // unused
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_on_eyes_up), // unused
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_on_eyes_down), // unused
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_on_eyes_dead),
+-         GEO_CLOSE_NODE(),
+-         GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_off_eyes_front),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_off_eyes_half_closed),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_off_eyes_closed),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_off_eyes_right), // unused
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_off_eyes_left), // unused
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_off_eyes_up), // unused
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_off_eyes_down), // unused
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_off_eyes_dead),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_TRANSLATE_ROTATE(0, 142, -51, -126, 22, -40, -135),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_wings_transparent),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_TRANSLATE_ROTATE(0, 142, -51, 126, -22, 40, -135),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_wings_transparent),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17000F28
+-const GeoLayout mario_vanish_geo_left_hand[] = {
+-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_left_hand_closed),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_open),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_closed),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_closed),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_closed),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
++#include "src/game/envfx_snow.h"
++
++const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt1[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh_mat_override_face_1___eye_half_v3_1),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt2[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt3[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt4[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt5[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt6[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt7[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh_mat_override_face_7___eye_X_v3_3),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_armature_002_switch_option_002[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
++		GEO_OPEN_NODE(),
++			GEO_NODE_START(),
++			GEO_OPEN_NODE(),
++				GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh),
++			GEO_CLOSE_NODE(),
++			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt1),
++			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt2),
++			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt3),
++			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt4),
++			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt5),
++			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt6),
++			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt7),
++		GEO_CLOSE_NODE(),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_right_hand_open_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_002_switch_option_right_hand_open_mesh),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_left_hand_open_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_002_switch_option_left_hand_open_mesh),
++		GEO_OPEN_NODE(),
++			GEO_HELD_OBJECT(0, 0, 0, 0, geo_switch_mario_hand_grab_pos),
++		GEO_CLOSE_NODE(),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_left_hand_peace_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_004_switch_option_left_hand_peace_mesh),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_left_hand_cap_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_005_switch_option_left_hand_cap_mesh),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_left_hand_wing_cap_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_006_switch_option_left_hand_wing_cap_mesh),
++		GEO_OPEN_NODE(),
++			GEO_DISPLAY_LIST(LAYER_ALPHA, mario_006_switch_option_left_hand_wing_cap_wings_mesh),
++		GEO_CLOSE_NODE(),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt1[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh_mat_override_face_1___eye_half_v3_1),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt2[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt3[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt4[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt5[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt6[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt7[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh_mat_override_face_7___eye_X_v3_3),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_armature_002_switch_option_002[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
++		GEO_OPEN_NODE(),
++			GEO_NODE_START(),
++			GEO_OPEN_NODE(),
++				GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh),
++			GEO_CLOSE_NODE(),
++			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt1),
++			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt2),
++			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt3),
++			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt4),
++			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt5),
++			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt6),
++			GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt7),
++		GEO_CLOSE_NODE(),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_right_hand_open_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_002_switch_option_right_hand_open_mesh),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_open_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_002_switch_option_left_hand_open_mesh),
++		GEO_OPEN_NODE(),
++			GEO_HELD_OBJECT(0, 0, 0, 0, geo_switch_mario_hand_grab_pos),
++		GEO_CLOSE_NODE(),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_peace_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_004_switch_option_left_hand_peace_mesh),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_cap_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_005_switch_option_left_hand_cap_mesh),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_wing_cap_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_006_switch_option_left_hand_wing_cap_mesh),
++		GEO_OPEN_NODE(),
++			GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_006_switch_option_left_hand_wing_cap_wings_mesh),
++		GEO_CLOSE_NODE(),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt1[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh_mat_override_face_1___eye_half_v3_1),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt2[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt3[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt4[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt5[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt6[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt7[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh_mat_override_face_7___eye_X_v3_3),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt1[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
++		GEO_OPEN_NODE(),
++			GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_mesh),
++			GEO_OPEN_NODE(),
++				GEO_ASM(0, geo_move_mario_part_from_parent),
++				GEO_ASM(0, geo_mario_tilt_torso),
++				GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
++				GEO_OPEN_NODE(),
++					GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, 0, 0, mario_000_offset_001_mesh),
++					GEO_OPEN_NODE(),
++						GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
++						GEO_OPEN_NODE(),
++							GEO_ASM(0, geo_mario_head_rotation),
++							GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
++							GEO_OPEN_NODE(),
++								GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
++								GEO_OPEN_NODE(),
++									GEO_NODE_START(),
++									GEO_OPEN_NODE(),
++										GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
++										GEO_OPEN_NODE(),
++											GEO_NODE_START(),
++											GEO_OPEN_NODE(),
++												GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh),
++											GEO_CLOSE_NODE(),
++											GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt1),
++											GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt2),
++											GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt3),
++											GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt4),
++											GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt5),
++											GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt6),
++											GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt7),
++										GEO_CLOSE_NODE(),
++									GEO_CLOSE_NODE(),
++									GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_jump_mario_armature_002_switch_option_002),
++								GEO_CLOSE_NODE(),
++								GEO_TRANSLATE_ROTATE(LAYER_FORCE, 142, -51, -126, 15, -33, -133),
++								GEO_OPEN_NODE(),
++									GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
++									GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
++									GEO_OPEN_NODE(),
++										GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_001_mesh),
++									GEO_CLOSE_NODE(),
++								GEO_CLOSE_NODE(),
++								GEO_TRANSLATE_ROTATE(LAYER_FORCE, 142, -51, 126, -15, 33, -133),
++								GEO_OPEN_NODE(),
++									GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
++									GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
++									GEO_OPEN_NODE(),
++										GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_002_mesh),
++									GEO_CLOSE_NODE(),
++								GEO_CLOSE_NODE(),
++							GEO_CLOSE_NODE(),
++						GEO_CLOSE_NODE(),
++						GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
++						GEO_OPEN_NODE(),
++							GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_003_mesh),
++							GEO_OPEN_NODE(),
++								GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_000_offset_004_mesh),
++								GEO_OPEN_NODE(),
++									GEO_SWITCH_CASE(1, geo_switch_mario_hand),
++									GEO_OPEN_NODE(),
++										GEO_NODE_START(),
++										GEO_OPEN_NODE(),
++											GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
++											GEO_OPEN_NODE(),
++												GEO_ASM(1, geo_mario_hand_foot_scaler),
++												GEO_SCALE(LAYER_FORCE, 65536),
++												GEO_OPEN_NODE(),
++													GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_003_mesh),
++												GEO_CLOSE_NODE(),
++											GEO_CLOSE_NODE(),
++										GEO_CLOSE_NODE(),
++										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_jump_mario_right_hand_open_armature),
++									GEO_CLOSE_NODE(),
++								GEO_CLOSE_NODE(),
++							GEO_CLOSE_NODE(),
++						GEO_CLOSE_NODE(),
++						GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
++						GEO_OPEN_NODE(),
++							GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_006_mesh),
++							GEO_OPEN_NODE(),
++								GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_000_offset_007_mesh),
++								GEO_OPEN_NODE(),
++									GEO_SWITCH_CASE(0, geo_switch_mario_hand),
++									GEO_OPEN_NODE(),
++										GEO_NODE_START(),
++										GEO_OPEN_NODE(),
++											GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
++											GEO_OPEN_NODE(),
++												GEO_ASM(0, geo_mario_hand_foot_scaler),
++												GEO_SCALE(LAYER_FORCE, 65536),
++												GEO_OPEN_NODE(),
++													GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_004_mesh),
++												GEO_CLOSE_NODE(),
++												GEO_HELD_OBJECT(0, 0, 0, 0, geo_switch_mario_hand_grab_pos),
++											GEO_CLOSE_NODE(),
++										GEO_CLOSE_NODE(),
++										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_open_armature),
++										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_peace_armature),
++										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_cap_armature),
++										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_wing_cap_armature),
++									GEO_CLOSE_NODE(),
++								GEO_CLOSE_NODE(),
++							GEO_CLOSE_NODE(),
++						GEO_CLOSE_NODE(),
++					GEO_CLOSE_NODE(),
++				GEO_CLOSE_NODE(),
++				GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
++				GEO_OPEN_NODE(),
++					GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_009_mesh),
++					GEO_OPEN_NODE(),
++						GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_000_offset_010_mesh),
++						GEO_OPEN_NODE(),
++							GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, mario_000_offset_011_mesh),
++						GEO_CLOSE_NODE(),
++					GEO_CLOSE_NODE(),
++				GEO_CLOSE_NODE(),
++				GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
++				GEO_OPEN_NODE(),
++					GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_012_mesh),
++					GEO_OPEN_NODE(),
++						GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_000_offset_013_mesh),
++						GEO_OPEN_NODE(),
++							GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
++							GEO_OPEN_NODE(),
++								GEO_ASM(2, geo_mario_hand_foot_scaler),
++								GEO_SCALE(LAYER_FORCE, 65536),
++								GEO_OPEN_NODE(),
++									GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_005_mesh),
++								GEO_CLOSE_NODE(),
++							GEO_CLOSE_NODE(),
++						GEO_CLOSE_NODE(),
++					GEO_CLOSE_NODE(),
++				GEO_CLOSE_NODE(),
++			GEO_CLOSE_NODE(),
++		GEO_CLOSE_NODE(),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_armature_002_switch_option_002[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
++		GEO_OPEN_NODE(),
++			GEO_NODE_START(),
++			GEO_OPEN_NODE(),
++				GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_002_switch_option_head__no_cap__mesh_mat_override_metal_v3_0),
++			GEO_CLOSE_NODE(),
++		GEO_CLOSE_NODE(),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_right_hand_open_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_002_switch_option_right_hand_open_mesh_mat_override_metal_v3_0),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_open_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_002_switch_option_left_hand_open_mesh_mat_override_metal_v3_0),
++		GEO_OPEN_NODE(),
++			GEO_HELD_OBJECT(0, 0, 0, 0, geo_switch_mario_hand_grab_pos),
++		GEO_CLOSE_NODE(),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_peace_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_004_switch_option_left_hand_peace_mesh_mat_override_metal_v3_0),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_cap_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_005_switch_option_left_hand_cap_mesh_mat_override_metal_v3_0),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_wing_cap_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_006_switch_option_left_hand_wing_cap_mesh_mat_override_metal_v3_0),
++		GEO_OPEN_NODE(),
++			GEO_DISPLAY_LIST(LAYER_ALPHA, mario_006_switch_option_left_hand_wing_cap_wings_mesh_mat_override_metal_v3_0),
++		GEO_CLOSE_NODE(),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt2[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
++		GEO_OPEN_NODE(),
++			GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_mesh_mat_override_metal_v3_0),
++			GEO_OPEN_NODE(),
++				GEO_ASM(0, geo_move_mario_part_from_parent),
++				GEO_ASM(0, geo_mario_tilt_torso),
++				GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
++				GEO_OPEN_NODE(),
++					GEO_ANIMATED_PART(LAYER_OPAQUE, 68, 0, 0, mario_000_offset_001_mesh_mat_override_metal_v3_0),
++					GEO_OPEN_NODE(),
++						GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
++						GEO_OPEN_NODE(),
++							GEO_ASM(0, geo_mario_head_rotation),
++							GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
++							GEO_OPEN_NODE(),
++								GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
++								GEO_OPEN_NODE(),
++									GEO_NODE_START(),
++									GEO_OPEN_NODE(),
++										GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
++										GEO_OPEN_NODE(),
++											GEO_NODE_START(),
++											GEO_OPEN_NODE(),
++												GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh_mat_override_metal_v3_0),
++											GEO_CLOSE_NODE(),
++										GEO_CLOSE_NODE(),
++									GEO_CLOSE_NODE(),
++									GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt2_jump_mario_armature_002_switch_option_002),
++								GEO_CLOSE_NODE(),
++								GEO_TRANSLATE_ROTATE(LAYER_FORCE, 142, -51, -126, 15, -33, -133),
++								GEO_OPEN_NODE(),
++									GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
++									GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
++									GEO_OPEN_NODE(),
++										GEO_DISPLAY_LIST(LAYER_ALPHA, mario_000_displaylist_001_mesh_mat_override_metal_v3_0),
++									GEO_CLOSE_NODE(),
++								GEO_CLOSE_NODE(),
++								GEO_TRANSLATE_ROTATE(LAYER_FORCE, 142, -51, 126, -15, 33, -133),
++								GEO_OPEN_NODE(),
++									GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
++									GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
++									GEO_OPEN_NODE(),
++										GEO_DISPLAY_LIST(LAYER_ALPHA, mario_000_displaylist_002_mesh_mat_override_metal_v3_0),
++									GEO_CLOSE_NODE(),
++								GEO_CLOSE_NODE(),
++							GEO_CLOSE_NODE(),
++						GEO_CLOSE_NODE(),
++						GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
++						GEO_OPEN_NODE(),
++							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_003_mesh_mat_override_metal_v3_0),
++							GEO_OPEN_NODE(),
++								GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_000_offset_004_mesh_mat_override_metal_v3_0),
++								GEO_OPEN_NODE(),
++									GEO_SWITCH_CASE(1, geo_switch_mario_hand),
++									GEO_OPEN_NODE(),
++										GEO_NODE_START(),
++										GEO_OPEN_NODE(),
++											GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
++											GEO_OPEN_NODE(),
++												GEO_ASM(1, geo_mario_hand_foot_scaler),
++												GEO_SCALE(LAYER_FORCE, 65536),
++												GEO_OPEN_NODE(),
++													GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_003_mesh_mat_override_metal_v3_0),
++												GEO_CLOSE_NODE(),
++											GEO_CLOSE_NODE(),
++										GEO_CLOSE_NODE(),
++										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt2_jump_mario_right_hand_open_armature),
++									GEO_CLOSE_NODE(),
++								GEO_CLOSE_NODE(),
++							GEO_CLOSE_NODE(),
++						GEO_CLOSE_NODE(),
++						GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
++						GEO_OPEN_NODE(),
++							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_006_mesh_mat_override_metal_v3_0),
++							GEO_OPEN_NODE(),
++								GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_000_offset_007_mesh_mat_override_metal_v3_0),
++								GEO_OPEN_NODE(),
++									GEO_SWITCH_CASE(0, geo_switch_mario_hand),
++									GEO_OPEN_NODE(),
++										GEO_NODE_START(),
++										GEO_OPEN_NODE(),
++											GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
++											GEO_OPEN_NODE(),
++												GEO_ASM(0, geo_mario_hand_foot_scaler),
++												GEO_SCALE(LAYER_FORCE, 65536),
++												GEO_OPEN_NODE(),
++													GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_004_mesh_mat_override_metal_v3_0),
++												GEO_CLOSE_NODE(),
++												GEO_HELD_OBJECT(0, 0, 0, 0, geo_switch_mario_hand_grab_pos),
++											GEO_CLOSE_NODE(),
++										GEO_CLOSE_NODE(),
++										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_open_armature),
++										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_peace_armature),
++										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_cap_armature),
++										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_wing_cap_armature),
++									GEO_CLOSE_NODE(),
++								GEO_CLOSE_NODE(),
++							GEO_CLOSE_NODE(),
++						GEO_CLOSE_NODE(),
++					GEO_CLOSE_NODE(),
++				GEO_CLOSE_NODE(),
++				GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
++				GEO_OPEN_NODE(),
++					GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_009_mesh_mat_override_metal_v3_0),
++					GEO_OPEN_NODE(),
++						GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_000_offset_010_mesh_mat_override_metal_v3_0),
++						GEO_OPEN_NODE(),
++							GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, mario_000_offset_011_mesh_mat_override_metal_v3_0),
++						GEO_CLOSE_NODE(),
++					GEO_CLOSE_NODE(),
++				GEO_CLOSE_NODE(),
++				GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
++				GEO_OPEN_NODE(),
++					GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_012_mesh_mat_override_metal_v3_0),
++					GEO_OPEN_NODE(),
++						GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_000_offset_013_mesh_mat_override_metal_v3_0),
++						GEO_OPEN_NODE(),
++							GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
++							GEO_OPEN_NODE(),
++								GEO_ASM(2, geo_mario_hand_foot_scaler),
++								GEO_SCALE(LAYER_FORCE, 65536),
++								GEO_OPEN_NODE(),
++									GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_005_mesh_mat_override_metal_v3_0),
++								GEO_CLOSE_NODE(),
++							GEO_CLOSE_NODE(),
++						GEO_CLOSE_NODE(),
++					GEO_CLOSE_NODE(),
++				GEO_CLOSE_NODE(),
++			GEO_CLOSE_NODE(),
++		GEO_CLOSE_NODE(),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_armature_002_switch_option_002[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
++		GEO_OPEN_NODE(),
++			GEO_NODE_START(),
++			GEO_OPEN_NODE(),
++				GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_002_switch_option_head__no_cap__mesh_mat_override_metal_v3_0),
++			GEO_CLOSE_NODE(),
++		GEO_CLOSE_NODE(),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_right_hand_open_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_002_switch_option_right_hand_open_mesh_mat_override_metal_v3_0),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_open_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_002_switch_option_left_hand_open_mesh_mat_override_metal_v3_0),
++		GEO_OPEN_NODE(),
++			GEO_HELD_OBJECT(0, 0, 0, 0, geo_switch_mario_hand_grab_pos),
++		GEO_CLOSE_NODE(),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_peace_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_004_switch_option_left_hand_peace_mesh_mat_override_metal_v3_0),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_cap_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_005_switch_option_left_hand_cap_mesh_mat_override_metal_v3_0),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_wing_cap_armature[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_006_switch_option_left_hand_wing_cap_mesh_mat_override_metal_v3_0),
++		GEO_OPEN_NODE(),
++			GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_006_switch_option_left_hand_wing_cap_wings_mesh_mat_override_metal_v3_0),
++		GEO_CLOSE_NODE(),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt3[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
++		GEO_OPEN_NODE(),
++			GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_mesh_mat_override_metal_v3_0),
++			GEO_OPEN_NODE(),
++				GEO_ASM(0, geo_move_mario_part_from_parent),
++				GEO_ASM(0, geo_mario_tilt_torso),
++				GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
++				GEO_OPEN_NODE(),
++					GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, 0, 0, mario_000_offset_001_mesh_mat_override_metal_v3_0),
++					GEO_OPEN_NODE(),
++						GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
++						GEO_OPEN_NODE(),
++							GEO_ASM(0, geo_mario_head_rotation),
++							GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
++							GEO_OPEN_NODE(),
++								GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
++								GEO_OPEN_NODE(),
++									GEO_NODE_START(),
++									GEO_OPEN_NODE(),
++										GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
++										GEO_OPEN_NODE(),
++											GEO_NODE_START(),
++											GEO_OPEN_NODE(),
++												GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_mesh_mat_override_metal_v3_0),
++											GEO_CLOSE_NODE(),
++										GEO_CLOSE_NODE(),
++									GEO_CLOSE_NODE(),
++									GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt3_jump_mario_armature_002_switch_option_002),
++								GEO_CLOSE_NODE(),
++								GEO_TRANSLATE_ROTATE(LAYER_FORCE, 142, -51, -126, 15, -33, -133),
++								GEO_OPEN_NODE(),
++									GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
++									GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
++									GEO_OPEN_NODE(),
++										GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_001_mesh_mat_override_metal_v3_0),
++									GEO_CLOSE_NODE(),
++								GEO_CLOSE_NODE(),
++								GEO_TRANSLATE_ROTATE(LAYER_FORCE, 142, -51, 126, -15, 33, -133),
++								GEO_OPEN_NODE(),
++									GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
++									GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
++									GEO_OPEN_NODE(),
++										GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_002_mesh_mat_override_metal_v3_0),
++									GEO_CLOSE_NODE(),
++								GEO_CLOSE_NODE(),
++							GEO_CLOSE_NODE(),
++						GEO_CLOSE_NODE(),
++						GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
++						GEO_OPEN_NODE(),
++							GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_003_mesh_mat_override_metal_v3_0),
++							GEO_OPEN_NODE(),
++								GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_000_offset_004_mesh_mat_override_metal_v3_0),
++								GEO_OPEN_NODE(),
++									GEO_SWITCH_CASE(1, geo_switch_mario_hand),
++									GEO_OPEN_NODE(),
++										GEO_NODE_START(),
++										GEO_OPEN_NODE(),
++											GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
++											GEO_OPEN_NODE(),
++												GEO_ASM(1, geo_mario_hand_foot_scaler),
++												GEO_SCALE(LAYER_FORCE, 65536),
++												GEO_OPEN_NODE(),
++													GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_003_mesh_mat_override_metal_v3_0),
++												GEO_CLOSE_NODE(),
++											GEO_CLOSE_NODE(),
++										GEO_CLOSE_NODE(),
++										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt3_jump_mario_right_hand_open_armature),
++									GEO_CLOSE_NODE(),
++								GEO_CLOSE_NODE(),
++							GEO_CLOSE_NODE(),
++						GEO_CLOSE_NODE(),
++						GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
++						GEO_OPEN_NODE(),
++							GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_006_mesh_mat_override_metal_v3_0),
++							GEO_OPEN_NODE(),
++								GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_000_offset_007_mesh_mat_override_metal_v3_0),
++								GEO_OPEN_NODE(),
++									GEO_SWITCH_CASE(0, geo_switch_mario_hand),
++									GEO_OPEN_NODE(),
++										GEO_NODE_START(),
++										GEO_OPEN_NODE(),
++											GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
++											GEO_OPEN_NODE(),
++												GEO_ASM(0, geo_mario_hand_foot_scaler),
++												GEO_SCALE(LAYER_FORCE, 65536),
++												GEO_OPEN_NODE(),
++													GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_004_mesh_mat_override_metal_v3_0),
++												GEO_CLOSE_NODE(),
++												GEO_HELD_OBJECT(0, 0, 0, 0, geo_switch_mario_hand_grab_pos),
++											GEO_CLOSE_NODE(),
++										GEO_CLOSE_NODE(),
++										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_open_armature),
++										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_peace_armature),
++										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_cap_armature),
++										GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_wing_cap_armature),
++									GEO_CLOSE_NODE(),
++								GEO_CLOSE_NODE(),
++							GEO_CLOSE_NODE(),
++						GEO_CLOSE_NODE(),
++					GEO_CLOSE_NODE(),
++				GEO_CLOSE_NODE(),
++				GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
++				GEO_OPEN_NODE(),
++					GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_009_mesh_mat_override_metal_v3_0),
++					GEO_OPEN_NODE(),
++						GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_000_offset_010_mesh_mat_override_metal_v3_0),
++						GEO_OPEN_NODE(),
++							GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, mario_000_offset_011_mesh_mat_override_metal_v3_0),
++						GEO_CLOSE_NODE(),
++					GEO_CLOSE_NODE(),
++				GEO_CLOSE_NODE(),
++				GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
++				GEO_OPEN_NODE(),
++					GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_000_offset_012_mesh_mat_override_metal_v3_0),
++					GEO_OPEN_NODE(),
++						GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_000_offset_013_mesh_mat_override_metal_v3_0),
++						GEO_OPEN_NODE(),
++							GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
++							GEO_OPEN_NODE(),
++								GEO_ASM(2, geo_mario_hand_foot_scaler),
++								GEO_SCALE(LAYER_FORCE, 65536),
++								GEO_OPEN_NODE(),
++									GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_000_displaylist_005_mesh_mat_override_metal_v3_0),
++								GEO_CLOSE_NODE(),
++							GEO_CLOSE_NODE(),
++						GEO_CLOSE_NODE(),
++					GEO_CLOSE_NODE(),
++				GEO_CLOSE_NODE(),
++			GEO_CLOSE_NODE(),
++		GEO_CLOSE_NODE(),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt1[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh_mat_override_face_1___eye_half_v3_1),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt2[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt3[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt4[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt5[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt6[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
++};
++const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt7[] = {
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh_mat_override_face_7___eye_X_v3_3),
++	GEO_CLOSE_NODE(),
++	GEO_RETURN(),
+ };
+-
+-// 0x17000FA0
+-const GeoLayout mario_vanish_geo_right_hand[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_right_hand_closed),
+-         GEO_CLOSE_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_open),
+-      GEO_OPEN_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_peace), // here we go hand
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_cap),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_cap),
+-      GEO_OPEN_NODE(),
+-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_right_hand_cap_wings),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// Same rule body as Normal Mario
+-
+-// 0x17001048
+-const GeoLayout mario_vanish_geo_body[] = {
+-   GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, NULL),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_butt),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_move_mario_part_from_parent),
+-         GEO_ASM(0, geo_mario_tilt_torso),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, 0, 0, mario_torso),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 87, 0, 0, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_BRANCH(1, mario_vanish_geo_face_and_wings),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, -10, 79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_left_arm),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_left_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_vanish_geo_left_hand),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, -10, -79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_right_arm),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_right_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_vanish_geo_right_hand),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, 42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_left_thigh),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_left_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, mario_left_foot),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, -42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_right_thigh),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_right_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, NULL),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
+-                     GEO_SCALE(0x00, 65536),
+-                     GEO_OPEN_NODE(),
+-                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_right_foot),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17001204
+-const GeoLayout mario_vanish_geo_medium_poly_left_hand[] = {
+-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_medium_poly_left_hand_closed),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_open),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_medium_poly_left_hand_closed),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_medium_poly_left_hand_closed),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_medium_poly_left_hand_closed),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x1700127C
+-const GeoLayout mario_vanish_geo_medium_poly_right_hand[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_medium_poly_right_hand_closed),
+-         GEO_CLOSE_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_open),
+-      GEO_OPEN_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_peace), // here we go hand
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_cap),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_cap),
+-      GEO_OPEN_NODE(),
+-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_right_hand_cap_wings),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17001324
+-const GeoLayout mario_vanish_geo_medium_poly_body[] = {
+-   GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, NULL),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_medium_poly_butt),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_move_mario_part_from_parent),
+-         GEO_ASM(0, geo_mario_tilt_torso),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, 0, 0, mario_medium_poly_torso),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 87, 0, 0, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_BRANCH(1, mario_vanish_geo_face_and_wings),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, -10, 79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_medium_poly_left_arm),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_medium_poly_left_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_vanish_geo_medium_poly_left_hand),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, -10, -79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_medium_poly_right_arm),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_medium_poly_right_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_vanish_geo_medium_poly_right_hand),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, 42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_medium_poly_left_thigh),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_medium_poly_left_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, mario_medium_poly_left_foot),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, -42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_medium_poly_right_thigh),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_medium_poly_right_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, NULL),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
+-                     GEO_SCALE(0x00, 65536),
+-                     GEO_OPEN_NODE(),
+-                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_medium_poly_right_foot),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x170014E0
+-const GeoLayout mario_vanish_geo_low_poly_face_and_wings[] = {
+-   GEO_ASM(0, geo_mario_head_rotation),
+-   GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-   GEO_OPEN_NODE(),
+-      GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
+-      GEO_OPEN_NODE(),
+-         GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_on_eyes_front),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_on_eyes_half_closed),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_on_eyes_closed),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_on_eyes_right),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_on_eyes_left),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_on_eyes_up),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_on_eyes_down),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_on_eyes_dead),
+-         GEO_CLOSE_NODE(),
+-         GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_off_eyes_front),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_off_eyes_half_closed),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_off_eyes_closed),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_off_eyes_right),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_off_eyes_left),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_off_eyes_up),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_off_eyes_down),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_cap_off_eyes_dead),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_TRANSLATE_ROTATE(0, 142, -51, -126, 22, -40, -135),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_wings_transparent),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_TRANSLATE_ROTATE(0, 142, -51, 126, -22, 40, -135),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_cap_wings_transparent),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x1700161C
+-const GeoLayout mario_vanish_geo_low_poly_left_hand[] = {
+-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_left_hand_closed),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_open),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_low_poly_left_hand_closed),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_low_poly_left_hand_closed),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_low_poly_left_hand_closed),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17001694
+-const GeoLayout mario_vanish_geo_low_poly_right_hand[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_right_hand_closed),
+-         GEO_CLOSE_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_open),
+-      GEO_OPEN_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_peace), // here we go hand
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_cap),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_cap),
+-      GEO_OPEN_NODE(),
+-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_right_hand_cap_wings),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x1700173C
+-const GeoLayout mario_vanish_geo_low_poly_body[] = {
+-   GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, NULL),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_low_poly_butt),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_move_mario_part_from_parent),
+-         GEO_ASM(0, geo_mario_tilt_torso),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, 0, 0, mario_low_poly_torso),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 87, 0, 0, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_BRANCH(1, mario_vanish_geo_low_poly_face_and_wings),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, -10, 79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_low_poly_left_arm),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_low_poly_left_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_vanish_geo_low_poly_left_hand),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, -10, -79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_low_poly_right_arm),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_low_poly_right_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_vanish_geo_low_poly_right_hand),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, 42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_low_poly_left_thigh),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_low_poly_left_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, mario_low_poly_left_foot),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, -42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_low_poly_right_thigh),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_low_poly_right_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, NULL),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
+-                     GEO_SCALE(0x00, 65536),
+-                     GEO_OPEN_NODE(),
+-                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_right_foot),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// Metal Mario Geo
+-
+-// 0x170018F8
+-const GeoLayout mario_metal_geo_face_and_wings[] = {
+-   GEO_ASM(0, geo_mario_head_rotation),
+-   GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-   GEO_OPEN_NODE(),
+-      GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
+-      GEO_OPEN_NODE(),
+-         GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_cap_on_shared_dl),
+-         GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_cap_off_shared_dl),
+-      GEO_CLOSE_NODE(),
+-      GEO_TRANSLATE_ROTATE(0, 142, -51, -126, 22, -40, -135),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_cap_wings), // left
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_TRANSLATE_ROTATE(0, 142, -51, 126, -22, 40, -135),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_cap_wings), // right
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x170019A4
+-const GeoLayout mario_metal_geo_left_hand[] = {
+-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_left_hand_closed_shared_dl),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_open_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_closed_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_closed_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_closed_shared_dl),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17001A1C
+-const GeoLayout mario_metal_geo_right_hand[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_right_hand_closed),
+-         GEO_CLOSE_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_open),
+-      GEO_OPEN_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_peace_shared_dl), // here we go hand
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
+-      GEO_OPEN_NODE(),
+-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_right_hand_cap_shared_dl_wings),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// A difference from Normal Mario is that the dls after the butt and left thigh shares the metal texture of it, same rule applies to the medium and low poly geos
+-
+-// 0x17001AC4
+-const GeoLayout mario_metal_geo_body[] = {
+-   GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_metal_butt), // starts sharing metal texture with the dls below
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_move_mario_part_from_parent),
+-         GEO_ASM(0, geo_mario_tilt_torso),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 68, 0, 0, mario_metal_torso_shared_dl),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_BRANCH(1, mario_metal_geo_face_and_wings), // unlike normal mario geo, these dls still share the metal texture
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_left_arm_shared_dl),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_left_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_metal_geo_left_hand),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_right_arm_shared_dl),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_right_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_metal_geo_right_hand), // stop sharing because the wing metal cap of it
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_metal_left_thigh), // starts sharing metal texture with the dls below
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_left_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, mario_left_foot_shared_dl),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_right_thigh_shared_dl),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_right_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
+-                     GEO_SCALE(0x00, 65536),
+-                     GEO_OPEN_NODE(),
+-                        GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_right_foot),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17001C80
+-const GeoLayout mario_metal_geo_medium_poly_left_hand[] = {
+-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_medium_poly_left_hand_closed_shared_dl),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_open_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_medium_poly_left_hand_closed_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_medium_poly_left_hand_closed_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_medium_poly_left_hand_closed_shared_dl),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17001CF8
+-const GeoLayout mario_metal_geo_medium_poly_right_hand[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_medium_poly_right_hand_closed),
+-         GEO_CLOSE_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_open),
+-      GEO_OPEN_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_peace_shared_dl), // here we go hand
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
+-      GEO_OPEN_NODE(),
+-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_right_hand_cap_shared_dl_wings),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17001DA0
+-const GeoLayout mario_metal_geo_medium_poly_body[] = {
+-   GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_metal_medium_poly_butt),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_move_mario_part_from_parent),
+-         GEO_ASM(0, geo_mario_tilt_torso),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 68, 0, 0, mario_metal_medium_poly_torso),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_BRANCH(1, mario_metal_geo_face_and_wings),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_medium_poly_left_arm_shared_dl),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_medium_poly_left_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_metal_geo_medium_poly_left_hand),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_medium_poly_right_arm_shared_dl),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_medium_poly_right_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_metal_geo_medium_poly_right_hand),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_metal_medium_poly_left_thigh),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_medium_poly_left_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, mario_medium_poly_left_foot_shared_dl),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_medium_poly_right_thigh_shared_dl),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_medium_poly_right_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
+-                     GEO_SCALE(0x00, 65536),
+-                     GEO_OPEN_NODE(),
+-                        GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_medium_poly_right_foot),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17001F5C
+-const GeoLayout mario_metal_geo_low_poly_face_and_wings[] = {
+-   GEO_ASM(0, geo_mario_head_rotation),
+-   GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-   GEO_OPEN_NODE(),
+-      GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
+-      GEO_OPEN_NODE(),
+-         GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_low_poly_cap_on),
+-         GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_low_poly_cap_off),
+-      GEO_CLOSE_NODE(),
+-      GEO_TRANSLATE_ROTATE(0, 142, -51, -126, 22, -40, -135),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_cap_wings),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_TRANSLATE_ROTATE(0, 142, -51, 126, -22, 40, -135),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_cap_wings),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17002008
+-const GeoLayout mario_metal_geo_low_poly_left_hand[] = {
+-   GEO_SWITCH_CASE(1, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_low_poly_left_hand_closed_shared_dl),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_left_hand_open_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_low_poly_left_hand_closed_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_low_poly_left_hand_closed_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_low_poly_left_hand_closed_shared_dl),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17002080
+-const GeoLayout mario_metal_geo_low_poly_right_hand[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_low_poly_right_hand_closed),
+-         GEO_CLOSE_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_open),
+-      GEO_OPEN_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_right_hand_peace_shared_dl), // here we go hand
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
+-      GEO_OPEN_NODE(),
+-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_right_hand_cap_shared_dl_wings),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17002128
+-const GeoLayout mario_metal_geo_low_poly_body[] = {
+-   GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_metal_low_poly_butt),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_move_mario_part_from_parent),
+-         GEO_ASM(0, geo_mario_tilt_torso),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 68, 0, 0, mario_metal_low_poly_torso),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_BRANCH(1, mario_metal_geo_low_poly_face_and_wings),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_low_poly_left_arm_shared_dl),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_low_poly_left_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_metal_geo_low_poly_left_hand),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_low_poly_right_arm_shared_dl),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_low_poly_right_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_metal_geo_low_poly_right_hand),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_metal_low_poly_left_thigh),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_low_poly_left_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, mario_low_poly_left_foot_shared_dl),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_low_poly_right_thigh_shared_dl),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_low_poly_right_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
+-                     GEO_SCALE(0x00, 65536),
+-                     GEO_OPEN_NODE(),
+-                        GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_metal_low_poly_right_foot),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// Metal Vanish Mario Geo
+-
+-// 0x170022E4
+-const GeoLayout mario_metal_vanish_geo_face_and_wings[] = {
+-   GEO_ASM(0, geo_mario_head_rotation),
+-   GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-   GEO_OPEN_NODE(),
+-      GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
+-      GEO_OPEN_NODE(),
+-         GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_cap_on_shared_dl),
+-         GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_cap_off_shared_dl),
+-      GEO_CLOSE_NODE(),
+-      GEO_TRANSLATE_ROTATE(0, 142, -51, -126, 22, -40, -135),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_cap_wings_transparent),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_TRANSLATE_ROTATE(0, 142, -51, 126, -22, 40, -135),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_cap_wings_transparent),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17002390
+-const GeoLayout mario_metal_vanish_geo_left_hand[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_left_hand_closed_shared_dl),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_open_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_closed_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_closed_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_closed_shared_dl),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17002408
+-const GeoLayout mario_metal_vanish_geo_right_hand[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_right_hand_closed),
+-         GEO_CLOSE_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_open),
+-      GEO_OPEN_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_peace_shared_dl), // here we go hand
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
+-      GEO_OPEN_NODE(),
+-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_right_hand_cap_shared_dl_wings),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// Same rules as Metal Mario
+-
+-// 0x170024B0
+-const GeoLayout mario_metal_vanish_geo_body[] = {
+-   GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, NULL),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_metal_butt),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_move_mario_part_from_parent),
+-         GEO_ASM(0, geo_mario_tilt_torso),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, 0, 0, mario_metal_torso_shared_dl),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 87, 0, 0, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_BRANCH(1, mario_metal_vanish_geo_face_and_wings),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, -10, 79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_left_arm_shared_dl),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_left_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_metal_vanish_geo_left_hand),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, -10, -79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_right_arm_shared_dl),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_right_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_metal_vanish_geo_right_hand),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, 42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_metal_left_thigh),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_left_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, mario_left_foot_shared_dl),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, -42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_right_thigh_shared_dl),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_right_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, NULL),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
+-                     GEO_SCALE(0x00, 65536),
+-                     GEO_OPEN_NODE(),
+-                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_right_foot),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x1700266C
+-const GeoLayout mario_metal_vanish_geo_medium_poly_left_hand[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_medium_poly_left_hand_closed_shared_dl),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_open_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_medium_poly_left_hand_closed_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_medium_poly_left_hand_closed_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_medium_poly_left_hand_closed_shared_dl),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x170026E4
+-const GeoLayout mario_metal_vanish_geo_medium_poly_right_hand[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_medium_poly_right_hand_closed),
+-         GEO_CLOSE_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_open),
+-      GEO_OPEN_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_peace_shared_dl), // here we go hand
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
+-      GEO_OPEN_NODE(),
+-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_right_hand_cap_shared_dl_wings),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x1700278C
+-const GeoLayout mario_metal_vanish_geo_medium_poly_body[] = {
+-   GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, NULL),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_metal_medium_poly_butt),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_move_mario_part_from_parent),
+-         GEO_ASM(0, geo_mario_tilt_torso),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, 0, 0, mario_metal_medium_poly_torso),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 87, 0, 0, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_BRANCH(1, mario_metal_vanish_geo_face_and_wings),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, -10, 79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_medium_poly_left_arm_shared_dl),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_medium_poly_left_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_metal_vanish_geo_medium_poly_left_hand),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, -10, -79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_medium_poly_right_arm_shared_dl),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_medium_poly_right_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+-                        GEO_OPEN_NODE(),
+-                           GEO_BRANCH(1, mario_metal_vanish_geo_medium_poly_right_hand),
+-                        GEO_CLOSE_NODE(),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, 42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_metal_medium_poly_left_thigh),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_medium_poly_left_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, mario_medium_poly_left_foot_shared_dl),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, -42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_medium_poly_right_thigh_shared_dl),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_medium_poly_right_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, NULL),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
+-                     GEO_SCALE(0x00, 65536),
+-                     GEO_OPEN_NODE(),
+-                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_medium_poly_right_foot),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17002958
+-const GeoLayout mario_metal_vanish_geo_low_poly_face_and_wings[] = {
+-   GEO_ASM(0, geo_mario_head_rotation),
+-   GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-   GEO_OPEN_NODE(),
+-      GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
+-      GEO_OPEN_NODE(),
+-         GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_low_poly_cap_on),
+-         GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_low_poly_cap_off),
+-      GEO_CLOSE_NODE(),
+-      GEO_TRANSLATE_ROTATE(0, 142, -51, -126, 22, -40, -135),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_cap_wings_transparent),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_TRANSLATE_ROTATE(0, 142, -51, 126, -22, 40, -135),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_cap_wings_transparent),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17002A04
+-const GeoLayout mario_metal_vanish_geo_low_poly_left_hand[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(1, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_low_poly_left_hand_closed_shared_dl),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_left_hand_open_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_low_poly_left_hand_closed_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_low_poly_left_hand_closed_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_low_poly_left_hand_closed_shared_dl),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17002A7C
+-const GeoLayout mario_metal_vanish_geo_low_poly_right_hand[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_hand),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mario_hand_foot_scaler),
+-         GEO_SCALE(0x00, 65536),
+-         GEO_OPEN_NODE(),
+-            GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_low_poly_right_hand_closed),
+-         GEO_CLOSE_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_open),
+-      GEO_OPEN_NODE(),
+-         GEO_HELD_OBJECT(0x00, 0, 0, 0, geo_switch_mario_hand_grab_pos),
+-      GEO_CLOSE_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_right_hand_peace_shared_dl), // here we go hand
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, mario_metal_right_hand_cap_shared_dl),
+-      GEO_OPEN_NODE(),
+-         GEO_DISPLAY_LIST(LAYER_ALPHA, mario_metal_right_hand_cap_shared_dl_wings),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17002B24
+-const GeoLayout mario_metal_vanish_geo_low_poly_body[] = {
+-   GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, NULL),
+-   GEO_OPEN_NODE(),
+-      GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_metal_low_poly_butt),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_move_mario_part_from_parent),
+-         GEO_ASM(0, geo_mario_tilt_torso),
+-         GEO_ROTATION_NODE(0x00, 0, 0, 0),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, 0, 0, mario_metal_low_poly_torso),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 87, 0, 0, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_BRANCH(1, mario_metal_vanish_geo_low_poly_face_and_wings),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, -10, 79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_low_poly_left_arm_shared_dl),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_low_poly_left_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_metal_vanish_geo_low_poly_left_hand),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, -10, -79, NULL),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_low_poly_right_arm_shared_dl),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, mario_low_poly_right_forearm_shared_dl),
+-                     GEO_OPEN_NODE(),
+-                        GEO_BRANCH(1, mario_metal_vanish_geo_low_poly_right_hand),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, 42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_metal_low_poly_left_thigh),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_low_poly_left_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, mario_low_poly_left_foot_shared_dl),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-         GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, -42, NULL),
+-         GEO_OPEN_NODE(),
+-            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, mario_low_poly_right_thigh_shared_dl),
+-            GEO_OPEN_NODE(),
+-               GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, mario_low_poly_right_leg_shared_dl),
+-               GEO_OPEN_NODE(),
+-                  GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, NULL),
+-                  GEO_OPEN_NODE(),
+-                     GEO_ASM(2, geo_mario_hand_foot_scaler),
+-                     GEO_SCALE(0x00, 65536),
+-                     GEO_OPEN_NODE(),
+-                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_metal_low_poly_right_foot),
+-                     GEO_CLOSE_NODE(),
+-                  GEO_CLOSE_NODE(),
+-               GEO_CLOSE_NODE(),
+-            GEO_CLOSE_NODE(),
+-         GEO_CLOSE_NODE(),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// High Poly
+-
+-// 0x17002CE0
+-const GeoLayout mario_geo_load_body[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_cap_effect),
+-   GEO_OPEN_NODE(),
+-      GEO_BRANCH(1, mario_geo_body),
+-      GEO_BRANCH(1, mario_vanish_geo_body),
+-      GEO_BRANCH(1, mario_metal_geo_body),
+-      GEO_BRANCH(1, mario_metal_vanish_geo_body),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// Medium Poly
+-
+-// 0x17002D14
+-const GeoLayout mario_geo_load_medium_poly_body[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_cap_effect),
+-   GEO_OPEN_NODE(),
+-      GEO_BRANCH(1, mario_geo_medium_poly_body),
+-      GEO_BRANCH(1, mario_vanish_geo_medium_poly_body),
+-      GEO_BRANCH(1, mario_metal_geo_medium_poly_body),
+-      GEO_BRANCH(1, mario_metal_vanish_geo_medium_poly_body),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// Low Poly
+-
+-// 0x17002D48
+-const GeoLayout mario_geo_load_low_poly_body[] = {
+-   GEO_SWITCH_CASE(0, geo_switch_mario_cap_effect),
+-   GEO_OPEN_NODE(),
+-      GEO_BRANCH(1, mario_geo_low_poly_body),
+-      GEO_BRANCH(1, mario_vanish_geo_low_poly_body),
+-      GEO_BRANCH(1, mario_metal_geo_low_poly_body),
+-      GEO_BRANCH(1, mario_metal_vanish_geo_low_poly_body),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// 0x17002D7C
+-const GeoLayout mario_geo_render_body[] = {
+-   GEO_NODE_START(),
+-   GEO_OPEN_NODE(),
+-      GEO_RENDER_RANGE(-2048, 600),
+-      GEO_OPEN_NODE(),
+-         GEO_BRANCH(1, mario_geo_load_body),
+-      GEO_CLOSE_NODE(),
+-      GEO_RENDER_RANGE(600, 1600),
+-      GEO_OPEN_NODE(),
+-         GEO_BRANCH(1, mario_geo_load_medium_poly_body),
+-      GEO_CLOSE_NODE(),
+-      GEO_RENDER_RANGE(1600, 32767),
+-      GEO_OPEN_NODE(),
+-         GEO_BRANCH(1, mario_geo_load_low_poly_body),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_RETURN(),
+-};
+-
+-// This last geo is used to load all of Mario Geo in the Level Scripts
+-
+-// 0x17002DD4
+ const GeoLayout mario_geo[] = {
+-   GEO_SHADOW(SHADOW_CIRCLE_PLAYER, 0xB4, 100),
+-   GEO_OPEN_NODE(),
+-      GEO_SCALE(0x00, 16384),
+-      GEO_OPEN_NODE(),
+-         GEO_ASM(0, geo_mirror_mario_backface_culling),
+-         GEO_ASM(0, geo_mirror_mario_set_alpha),
+-         GEO_SWITCH_CASE(0, geo_switch_mario_stand_run),
+-         GEO_OPEN_NODE(),
+-            GEO_BRANCH(1, mario_geo_load_body),
+-            GEO_BRANCH(1, mario_geo_render_body),
+-         GEO_CLOSE_NODE(),
+-         GEO_ASM(1, geo_mirror_mario_backface_culling),
+-      GEO_CLOSE_NODE(),
+-   GEO_CLOSE_NODE(),
+-   GEO_END(),
++	GEO_NODE_START(),
++	GEO_OPEN_NODE(),
++		GEO_SHADOW(1, 180, 100),
++		GEO_OPEN_NODE(),
++			GEO_SCALE(LAYER_FORCE, 16384),
++			GEO_OPEN_NODE(),
++				GEO_ASM(0, geo_mirror_mario_backface_culling),
++				GEO_ASM(0, geo_mirror_mario_set_alpha),
++				GEO_SWITCH_CASE(0, geo_switch_mario_stand_run),
++				GEO_OPEN_NODE(),
++					GEO_NODE_START(),
++					GEO_OPEN_NODE(),
++						GEO_SWITCH_CASE(0, geo_switch_mario_cap_effect),
++						GEO_OPEN_NODE(),
++							GEO_NODE_START(),
++							GEO_OPEN_NODE(),
++								GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
++								GEO_OPEN_NODE(),
++									GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_mesh),
++									GEO_OPEN_NODE(),
++										GEO_ASM(0, geo_move_mario_part_from_parent),
++										GEO_ASM(0, geo_mario_tilt_torso),
++										GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
++										GEO_OPEN_NODE(),
++											GEO_ANIMATED_PART(LAYER_OPAQUE, 68, 0, 0, mario_000_offset_001_mesh),
++											GEO_OPEN_NODE(),
++												GEO_ANIMATED_PART(LAYER_OPAQUE, 87, 0, 0, NULL),
++												GEO_OPEN_NODE(),
++													GEO_ASM(0, geo_mario_head_rotation),
++													GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
++													GEO_OPEN_NODE(),
++														GEO_SWITCH_CASE(0, geo_switch_mario_cap_on_off),
++														GEO_OPEN_NODE(),
++															GEO_NODE_START(),
++															GEO_OPEN_NODE(),
++																GEO_SWITCH_CASE(0, geo_switch_mario_eyes),
++																GEO_OPEN_NODE(),
++																	GEO_NODE_START(),
++																	GEO_OPEN_NODE(),
++																		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_mesh),
++																	GEO_CLOSE_NODE(),
++																	GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt1),
++																	GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt2),
++																	GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt3),
++																	GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt4),
++																	GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt5),
++																	GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt6),
++																	GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt7),
++																GEO_CLOSE_NODE(),
++															GEO_CLOSE_NODE(),
++															GEO_BRANCH(1, mario_armature_002_switch_option_002),
++														GEO_CLOSE_NODE(),
++														GEO_TRANSLATE_ROTATE(LAYER_FORCE, 142, -51, -126, 15, -33, -133),
++														GEO_OPEN_NODE(),
++															GEO_ASM(0, geo_mario_rotate_wing_cap_wings),
++															GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
++															GEO_OPEN_NODE(),
++																GEO_DISPLAY_LIST(LAYER_ALPHA, mario_000_displaylist_001_mesh),
++															GEO_CLOSE_NODE(),
++														GEO_CLOSE_NODE(),
++														GEO_TRANSLATE_ROTATE(LAYER_FORCE, 142, -51, 126, -15, 33, -133),
++														GEO_OPEN_NODE(),
++															GEO_ASM(1, geo_mario_rotate_wing_cap_wings),
++															GEO_ROTATION_NODE(LAYER_FORCE, 0, 0, 0),
++															GEO_OPEN_NODE(),
++																GEO_DISPLAY_LIST(LAYER_ALPHA, mario_000_displaylist_002_mesh),
++															GEO_CLOSE_NODE(),
++														GEO_CLOSE_NODE(),
++													GEO_CLOSE_NODE(),
++												GEO_CLOSE_NODE(),
++												GEO_ANIMATED_PART(LAYER_OPAQUE, 67, -10, 79, NULL),
++												GEO_OPEN_NODE(),
++													GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_003_mesh),
++													GEO_OPEN_NODE(),
++														GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_000_offset_004_mesh),
++														GEO_OPEN_NODE(),
++															GEO_SWITCH_CASE(1, geo_switch_mario_hand),
++															GEO_OPEN_NODE(),
++																GEO_NODE_START(),
++																GEO_OPEN_NODE(),
++																	GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
++																	GEO_OPEN_NODE(),
++																		GEO_ASM(1, geo_mario_hand_foot_scaler),
++																		GEO_SCALE(LAYER_FORCE, 65536),
++																		GEO_OPEN_NODE(),
++																			GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_003_mesh),
++																		GEO_CLOSE_NODE(),
++																	GEO_CLOSE_NODE(),
++																GEO_CLOSE_NODE(),
++																GEO_BRANCH(1, mario_right_hand_open_armature),
++															GEO_CLOSE_NODE(),
++														GEO_CLOSE_NODE(),
++													GEO_CLOSE_NODE(),
++												GEO_CLOSE_NODE(),
++												GEO_ANIMATED_PART(LAYER_OPAQUE, 68, -10, -79, NULL),
++												GEO_OPEN_NODE(),
++													GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_006_mesh),
++													GEO_OPEN_NODE(),
++														GEO_ANIMATED_PART(LAYER_OPAQUE, 65, 0, 0, mario_000_offset_007_mesh),
++														GEO_OPEN_NODE(),
++															GEO_SWITCH_CASE(0, geo_switch_mario_hand),
++															GEO_OPEN_NODE(),
++																GEO_NODE_START(),
++																GEO_OPEN_NODE(),
++																	GEO_ANIMATED_PART(LAYER_OPAQUE, 60, 0, 0, NULL),
++																	GEO_OPEN_NODE(),
++																		GEO_ASM(0, geo_mario_hand_foot_scaler),
++																		GEO_SCALE(LAYER_FORCE, 65536),
++																		GEO_OPEN_NODE(),
++																			GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_004_mesh),
++																		GEO_CLOSE_NODE(),
++																		GEO_HELD_OBJECT(0, 0, 0, 0, geo_switch_mario_hand_grab_pos),
++																	GEO_CLOSE_NODE(),
++																GEO_CLOSE_NODE(),
++																GEO_BRANCH(1, mario_left_hand_open_armature),
++																GEO_BRANCH(1, mario_left_hand_peace_armature),
++																GEO_BRANCH(1, mario_left_hand_cap_armature),
++																GEO_BRANCH(1, mario_left_hand_wing_cap_armature),
++															GEO_CLOSE_NODE(),
++														GEO_CLOSE_NODE(),
++													GEO_CLOSE_NODE(),
++												GEO_CLOSE_NODE(),
++											GEO_CLOSE_NODE(),
++										GEO_CLOSE_NODE(),
++										GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, 42, NULL),
++										GEO_OPEN_NODE(),
++											GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_009_mesh),
++											GEO_OPEN_NODE(),
++												GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_000_offset_010_mesh),
++												GEO_OPEN_NODE(),
++													GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, mario_000_offset_011_mesh),
++												GEO_CLOSE_NODE(),
++											GEO_CLOSE_NODE(),
++										GEO_CLOSE_NODE(),
++										GEO_ANIMATED_PART(LAYER_OPAQUE, 13, -8, -42, NULL),
++										GEO_OPEN_NODE(),
++											GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, mario_000_offset_012_mesh),
++											GEO_OPEN_NODE(),
++												GEO_ANIMATED_PART(LAYER_OPAQUE, 89, 0, 0, mario_000_offset_013_mesh),
++												GEO_OPEN_NODE(),
++													GEO_ANIMATED_PART(LAYER_OPAQUE, 67, 0, 0, NULL),
++													GEO_OPEN_NODE(),
++														GEO_ASM(2, geo_mario_hand_foot_scaler),
++														GEO_SCALE(LAYER_FORCE, 65536),
++														GEO_OPEN_NODE(),
++															GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_000_displaylist_005_mesh),
++														GEO_CLOSE_NODE(),
++													GEO_CLOSE_NODE(),
++												GEO_CLOSE_NODE(),
++											GEO_CLOSE_NODE(),
++										GEO_CLOSE_NODE(),
++									GEO_CLOSE_NODE(),
++								GEO_CLOSE_NODE(),
++							GEO_CLOSE_NODE(),
++							GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt1),
++							GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt2),
++							GEO_BRANCH(1, mario_002_switch_opt0_001_switch_opt3),
++						GEO_CLOSE_NODE(),
++					GEO_CLOSE_NODE(),
++				GEO_CLOSE_NODE(),
++				GEO_ASM(1, geo_mirror_mario_backface_culling),
++			GEO_CLOSE_NODE(),
++		GEO_CLOSE_NODE(),
++		GEO_DISPLAY_LIST(LAYER_OPAQUE, mario_material_revert_render_settings),
++		GEO_DISPLAY_LIST(LAYER_ALPHA, mario_material_revert_render_settings),
++		GEO_DISPLAY_LIST(LAYER_TRANSPARENT, mario_material_revert_render_settings),
++	GEO_CLOSE_NODE(),
++	GEO_END(),
+ };
diff --git a/actors/mario/geo_header.h b/actors/mario/geo_header.h
new file mode 100644
index 0000000..2a2a3fd
--- /dev/null
+++ b/actors/mario/geo_header.h
@@ -0,0 +1,187 @@
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt1[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt2[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt3[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt4[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt5[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt6[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt1_switch_face_opt7[];
+extern const GeoLayout mario_armature_002_switch_option_002[];
+extern const GeoLayout mario_right_hand_open_armature[];
+extern const GeoLayout mario_left_hand_open_armature[];
+extern const GeoLayout mario_left_hand_peace_armature[];
+extern const GeoLayout mario_left_hand_cap_armature[];
+extern const GeoLayout mario_left_hand_wing_cap_armature[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt1[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt2[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt3[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt4[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt5[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt6[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt1_switch_face_opt7[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_armature_002_switch_option_002[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_right_hand_open_armature[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_open_armature[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_peace_armature[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_cap_armature[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_jump_mario_left_hand_wing_cap_armature[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt1[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt2[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt3[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt4[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt5[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt6[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1_000_switch_opt0_000_switch_001_opt7[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt1[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_armature_002_switch_option_002[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_right_hand_open_armature[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_open_armature[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_peace_armature[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_cap_armature[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt2_jump_mario_left_hand_wing_cap_armature[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt2[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_armature_002_switch_option_002[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_right_hand_open_armature[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_open_armature[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_peace_armature[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_cap_armature[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt3_jump_mario_left_hand_wing_cap_armature[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt3[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt1[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt2[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt3[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt4[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt5[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt6[];
+extern const GeoLayout mario_002_switch_opt0_001_switch_opt0_000_switch_opt0_000_switch_001_opt7[];
+extern const GeoLayout mario_geo[];
+extern Vtx mario_000_offset_mesh_vtx_0[76];
+extern Gfx mario_000_offset_mesh_tri_0[];
+extern Vtx mario_000_offset_001_mesh_vtx_0[108];
+extern Gfx mario_000_offset_001_mesh_tri_0[];
+extern Vtx mario_000_offset_001_mesh_vtx_1[31];
+extern Gfx mario_000_offset_001_mesh_tri_1[];
+extern Vtx mario_000_displaylist_mesh_vtx_0[99];
+extern Gfx mario_000_displaylist_mesh_tri_0[];
+extern Vtx mario_000_displaylist_mesh_vtx_1[27];
+extern Gfx mario_000_displaylist_mesh_tri_1[];
+extern Vtx mario_000_displaylist_mesh_vtx_2[28];
+extern Gfx mario_000_displaylist_mesh_tri_2[];
+extern Vtx mario_000_displaylist_mesh_vtx_3[12];
+extern Gfx mario_000_displaylist_mesh_tri_3[];
+extern Vtx mario_000_displaylist_mesh_vtx_4[57];
+extern Gfx mario_000_displaylist_mesh_tri_4[];
+extern Vtx mario_002_switch_option_head__no_cap__mesh_vtx_0[103];
+extern Gfx mario_002_switch_option_head__no_cap__mesh_tri_0[];
+extern Vtx mario_002_switch_option_head__no_cap__mesh_vtx_1[30];
+extern Gfx mario_002_switch_option_head__no_cap__mesh_tri_1[];
+extern Vtx mario_002_switch_option_head__no_cap__mesh_vtx_2[12];
+extern Gfx mario_002_switch_option_head__no_cap__mesh_tri_2[];
+extern Vtx mario_002_switch_option_head__no_cap__mesh_vtx_3[92];
+extern Gfx mario_002_switch_option_head__no_cap__mesh_tri_3[];
+extern Vtx mario_000_displaylist_001_mesh_vtx_0[4];
+extern Gfx mario_000_displaylist_001_mesh_tri_0[];
+extern Vtx mario_000_displaylist_001_mesh_vtx_1[4];
+extern Gfx mario_000_displaylist_001_mesh_tri_1[];
+extern Vtx mario_000_displaylist_002_mesh_vtx_0[4];
+extern Gfx mario_000_displaylist_002_mesh_tri_0[];
+extern Vtx mario_000_displaylist_002_mesh_vtx_1[4];
+extern Gfx mario_000_displaylist_002_mesh_tri_1[];
+extern Vtx mario_000_offset_003_mesh_vtx_0[31];
+extern Gfx mario_000_offset_003_mesh_tri_0[];
+extern Vtx mario_000_offset_004_mesh_vtx_0[16];
+extern Gfx mario_000_offset_004_mesh_tri_0[];
+extern Vtx mario_000_displaylist_003_mesh_vtx_0[46];
+extern Gfx mario_000_displaylist_003_mesh_tri_0[];
+extern Vtx mario_002_switch_option_right_hand_open_mesh_vtx_0[58];
+extern Gfx mario_002_switch_option_right_hand_open_mesh_tri_0[];
+extern Vtx mario_000_offset_006_mesh_vtx_0[28];
+extern Gfx mario_000_offset_006_mesh_tri_0[];
+extern Vtx mario_000_offset_007_mesh_vtx_0[16];
+extern Gfx mario_000_offset_007_mesh_tri_0[];
+extern Vtx mario_000_displaylist_004_mesh_vtx_0[36];
+extern Gfx mario_000_displaylist_004_mesh_tri_0[];
+extern Vtx mario_002_switch_option_left_hand_open_mesh_vtx_0[57];
+extern Gfx mario_002_switch_option_left_hand_open_mesh_tri_0[];
+extern Vtx mario_004_switch_option_left_hand_peace_mesh_vtx_0[73];
+extern Gfx mario_004_switch_option_left_hand_peace_mesh_tri_0[];
+extern Vtx mario_005_switch_option_left_hand_cap_mesh_vtx_0[59];
+extern Gfx mario_005_switch_option_left_hand_cap_mesh_tri_0[];
+extern Vtx mario_005_switch_option_left_hand_cap_mesh_vtx_1[36];
+extern Gfx mario_005_switch_option_left_hand_cap_mesh_tri_1[];
+extern Vtx mario_006_switch_option_left_hand_wing_cap_mesh_vtx_0[59];
+extern Gfx mario_006_switch_option_left_hand_wing_cap_mesh_tri_0[];
+extern Vtx mario_006_switch_option_left_hand_wing_cap_mesh_vtx_1[36];
+extern Gfx mario_006_switch_option_left_hand_wing_cap_mesh_tri_1[];
+extern Vtx mario_006_switch_option_left_hand_wing_cap_wings_mesh_vtx_0[8];
+extern Gfx mario_006_switch_option_left_hand_wing_cap_wings_mesh_tri_0[];
+extern Vtx mario_006_switch_option_left_hand_wing_cap_wings_mesh_vtx_1[8];
+extern Gfx mario_006_switch_option_left_hand_wing_cap_wings_mesh_tri_1[];
+extern Vtx mario_000_offset_009_mesh_vtx_0[22];
+extern Gfx mario_000_offset_009_mesh_tri_0[];
+extern Vtx mario_000_offset_010_mesh_vtx_0[12];
+extern Gfx mario_000_offset_010_mesh_tri_0[];
+extern Vtx mario_000_offset_011_mesh_vtx_0[29];
+extern Gfx mario_000_offset_011_mesh_tri_0[];
+extern Vtx mario_000_offset_012_mesh_vtx_0[22];
+extern Gfx mario_000_offset_012_mesh_tri_0[];
+extern Vtx mario_000_offset_013_mesh_vtx_0[12];
+extern Gfx mario_000_offset_013_mesh_tri_0[];
+extern Vtx mario_000_displaylist_005_mesh_vtx_0[28];
+extern Gfx mario_000_displaylist_005_mesh_tri_0[];
+
+extern Gfx mario_000_offset_mesh[];
+extern Gfx mario_000_offset_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_000_offset_001_mesh[];
+extern Gfx mario_000_offset_001_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_000_displaylist_mesh[];
+extern Gfx mario_000_displaylist_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_000_displaylist_mesh_mat_override_face_1___eye_half_v3_1[];
+extern Gfx mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2[];
+extern Gfx mario_000_displaylist_mesh_mat_override_face_7___eye_X_v3_3[];
+extern Gfx mario_002_switch_option_head__no_cap__mesh[];
+extern Gfx mario_002_switch_option_head__no_cap__mesh_mat_override_metal_v3_0[];
+extern Gfx mario_002_switch_option_head__no_cap__mesh_mat_override_face_1___eye_half_v3_1[];
+extern Gfx mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2[];
+extern Gfx mario_002_switch_option_head__no_cap__mesh_mat_override_face_7___eye_X_v3_3[];
+extern Gfx mario_000_displaylist_001_mesh[];
+extern Gfx mario_000_displaylist_001_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_000_displaylist_002_mesh[];
+extern Gfx mario_000_displaylist_002_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_000_offset_003_mesh[];
+extern Gfx mario_000_offset_003_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_000_offset_004_mesh[];
+extern Gfx mario_000_offset_004_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_000_displaylist_003_mesh[];
+extern Gfx mario_000_displaylist_003_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_002_switch_option_right_hand_open_mesh[];
+extern Gfx mario_002_switch_option_right_hand_open_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_000_offset_006_mesh[];
+extern Gfx mario_000_offset_006_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_000_offset_007_mesh[];
+extern Gfx mario_000_offset_007_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_000_displaylist_004_mesh[];
+extern Gfx mario_000_displaylist_004_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_002_switch_option_left_hand_open_mesh[];
+extern Gfx mario_002_switch_option_left_hand_open_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_004_switch_option_left_hand_peace_mesh[];
+extern Gfx mario_004_switch_option_left_hand_peace_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_005_switch_option_left_hand_cap_mesh[];
+extern Gfx mario_005_switch_option_left_hand_cap_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_006_switch_option_left_hand_wing_cap_mesh[];
+extern Gfx mario_006_switch_option_left_hand_wing_cap_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_006_switch_option_left_hand_wing_cap_wings_mesh[];
+extern Gfx mario_006_switch_option_left_hand_wing_cap_wings_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_000_offset_009_mesh[];
+extern Gfx mario_000_offset_009_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_000_offset_010_mesh[];
+extern Gfx mario_000_offset_010_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_000_offset_011_mesh[];
+extern Gfx mario_000_offset_011_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_000_offset_012_mesh[];
+extern Gfx mario_000_offset_012_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_000_offset_013_mesh[];
+extern Gfx mario_000_offset_013_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_000_displaylist_005_mesh[];
+extern Gfx mario_000_displaylist_005_mesh_mat_override_metal_v3_0[];
+extern Gfx mario_material_revert_render_settings[];
+
diff --git a/actors/mario/mario_button.rgba16.png b/actors/mario/mario_button.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..8f7e5e02e8989dde663bffa5da91bfbc96e595c2
GIT binary patch
literal 724
zcmV;_0xSKAP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XU
z000XU0RWnu7ytkQhDk(0R9Fecmc6o@Kn#T;b7xE{(}gl+%5=BPBjj202zi5)Nk<o_
z!=0(P=M$^F3tnu<;IU>F?Jknek+l4j!!Q)jln>7Y2m9#+Uba@CKbJ#snR&6UisJBT
zC}(%>F3UA%p#LXOL?AY7kz61UNI1E*WbP8^`;al<Ya}6aINq<wA^|J)TF@LZC!%||
zs*yc}2A&JLWzX9sBC&-T|15#UUS|T_+=4`X)8hIu+$H-IGgM+J?xX@%DtfoKKw_a4
z69WDS?Tv5oAd!*HFQQD0bz2JrVg>p?nK#_J(Ce+N4Id|8zeu3y6o>vl;tZq|FH?Yb
z0_;DM#6oiM3|s^bIeTpBSCi6y+&oqQa7dg^p%Rb4%v2!~h<Ffz1Y=L3!mR>IrxFQN
zq2yGeZH50!W;5f|anoGMbiXw$UH}RK;u$!88_G+kM^VO*IJKii^HqB46I@p)0g`n`
zOwFrWU&hzJlb@DIz{6G5_|Jhu8(24AbT~D#KO^oq*X@`D;8fD$D)w9^1YihojiKfo
zNGf4_(#>ZD(#U?{<j2{uY*j&gs3h+d2d`@doypY?N&mAPx^}dpXD0#$Ckvz)9?&WR
zm=A0*Rs!UJ9m${}e^8r4sHm<8aOeD^9LNCa6c8d2WZWLR0SbT!bCk4!LNu(|JAS_g
z$9~cRHcaH~Pk;q$5&{BrOtV#R0475>05_4bKViO=>TCrtII9(q@JhJT1YDZ{BT<h_
zs~BerCb`lFvtp5e8$g6J5i{b37P+<cKR9w&53l*M2NP3w319^Ydpok2mw-Kq5h7#e
z(zmi6t;Xvr0;z+O@sj(!Euij$-b^5M-eVrW1$zYhpBQfyVE`5uy`9GZ0000<MNUMn
GLSTZ_WHTxN

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_cap.rgba16.png b/actors/mario/mario_cap.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..8d2962b4e309d70f35a2c0aca62df4f4f56436ed
GIT binary patch
literal 568
zcmV-80>}M{P)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XT
z000XT0n*)m`~Uy}>PbXFR9Fe^RH1UhKoDIzoguO^5{X1sB9TaBB@!7KiL9(dRw64a
z`Gm^I$VgChm&-MKdz-tYz{IdKZMb)vx9{HWWpqBDVaRwIvN+X#2pHUf=e{#=I-P=3
zJ06cmeK<#5Z$YfEEZS8_Cjotnb1^X?(HXd=I0=cpA9TQbxhMdN5{_jF$!ggg^l$(u
zD_kD|mJDw)pv{R^0bX$;OOl2%%K`EXpu(c*OM@SAtwfuEXbb+h=#)IRxmjf!j=Cb*
zj(Q;6R|Tla3*TC51?=~%O#Sog+s6>mc-0nYiH`j$y#PD5!gD|^{<dz|=W~Ep{FCwi
z;UXE%hZ2(Cb3i6sIQa18IRKG!jFRZY8g?OY|M7wJ9B@-{C3~#Q0_=9?HF*VRGmlOJ
zaR<@~UNsyx8@9J}{q~>c<m<Xc^qrVaZKin=mZlEI9f%9yw!R=yiG-ox`8LmruGd^Z
zxCP6Vr7+KpxbyC=S<M$dns0rqM#2ur(}<I(tUm?7jJ08t0oadL{X%yKstSMzAW>_n
z;B;bOa)Ja0ic_NJ0D<aNM6NzMh(`;4dfHb7(1t34Hm(R+oTyp_(B`c~XoZQNA}GM5
z{9j0@u;uO~z$V}08U7C3qoUw^2=E-h$rmQwb}9J>AHrW#rPtlqXm{fP0000<MNUMn
GLSTaQ(EbDf

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_eyes_center.rgba16.png b/actors/mario/mario_eyes_center.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..4a612dc8dd7c01318c46f93812328265a3afcaf7
GIT binary patch
literal 1245
zcmV<31S0#1P)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F8000D}Nkl<ZcwS@t
z|NlS3KmsO)0S2QEU_p)nPDW0g5%T^2cakEDShL_!0Mj5KAn^YO!w*o(1mYk6IXD==
zsT7}q=q`h+1?z>F1u_$4Hb^b9S>RlNqTvUcaU4KCM2rz6LntH=h661Ix}M<&NHfe3
z4h9aO*pDAS;AX)?Kv7fiKTv|f($WxQ4@dzRYiepT0A0@@At6C@eiabl0IN0B1ewJF
zHH(80WcG(29~cY`4dG@XhX6>B5$1o8Ptk%MEKf`bNJt3$fAQi2PP0H!@!`V<Mvz%3
zQGm;Em_vw3h=kN4dkXFV9LXCw$Qj8juLzpKM1<uGzzq2R`*#MC%Ix=;>Y+Ic)kbU%
zK(T1weFg^SmhTMKt?wDuo+IptYtI=NoO-_h2dSUB53Bc3%tx<`P$bU*4U6f0&+z^`
zBr9<M%c-T=f{a#**uxFzYlh&d-~V5~56QQnT-B2-$&hS?p&lNkc<X}RZ43<W-~V9X
z-~{GhVD|a&`~ySlHr$~A^zr}m=U*@|{CLg)ax5s%Pu=#O;W=g@3il|o15kW_|2+f4
z`Rnf)I0QL><~?V4ur7z;0}!9vcZ>lP%;<gs*|F{TeTEPFS{Pm|3t{+h{TSF0&w(B|
zb{%&T#u)<pfSTSzUH;+NJO+jjz~K0?jp4<*6ozeB(!zOQS~<RSDg(m{pxPhTfevY9
z`0@S&&}I&XedIXc{&R?{f4qOr@Z-T;BrjZNIDh^chL_G?`~IKdK`%o5$8m-q_s@Yt
z;rer|6&X0hVIhE##hyd!gdg{TUSs$GF<1axOfy`+ejdXC*B;!5s<DL2{dfTs1KRxo
zs2x{biZcp6e1K~C0kK@cvY6rOxpNFz%|{uY1098K;EU%k7!19dfohI11QoA=IO6*Y
zFb&ELAKo)y1vni5ihoEQ1_=r)Cr1V?VD=04vSI)k$bja8_s`!mI5|3j)dYDtK`jQ^
z3eA!XBsxHllam3O`@uT*ZQI7M?;Hce+;v;QRVo8o+l5n5kYO8C&9b%IAhvM`LTLsD
z0S@dAV8P)q1_=SE3<pH#i}TYMoQ<b}1vP_~pxY0st{JxNZw0CW<^*V(;ot-r0xUxq
zIKYV!n_aLdz^H5lp)Tf-1QmM%D0)F{1a!kR6=B8W2e=f6gd)QaU`R;<wc~2+;Y<UX
zQ1dthBpDbaf>7);wA94#jFBcMBZEW|lDGf^ha@o90Mm-5B3A3cp2q0_C!hlaLHdBj
zuz*oC++YFAB@A9hoERZysl~vc8B`2Z2XP#SWe?B+l3;y~nhZDravA^`3NH^Nf$7K5
zP>^BWzUK@Az@`-k$60Xdw{kROFp|VH59HP$CoP8F2TOp7^aF!{1h6Rw^u3}a2LrCk
z3uFr3%BaMPfk6<M7(M{Ya|U313MgnYWO;GoY@B2}F))IoN5T-8gE+tr&i3MD5X6iD
zxEa{`hA5@tF<@Z^suh0#Gk%sMCxf>Z1K!pVunPYVQvU&1kVH9gGDI6;4SnJrfTkU<
z<w$DrwVqJSz*Y{x6#OUCa*#G`W?*$Z3-0vEK&)>WC@}*7QyQP+<aU`j00000NkvXX
Hu0mjfxMLwe

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_eyes_closed.rgba16.png b/actors/mario/mario_eyes_closed.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..94799490fc406d78d90655901ec6323371e92189
GIT binary patch
literal 476
zcmV<20VDp2P)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F80004_Nkl<ZcwS@t
z|NlS3KmsO)0R{u^02br`;AG^)86MyNe<vxdh&2ly0x%5%0s{YkF#G@|3?TmTpM!$|
zoJjB)i0(4DTCiS-Ss*h(W`oosn*~mUC>nmC8OH(SL&O+~2?d1VK#PH{XZQiq3^Rm-
zfdeS^<Hrw1kS!qd;31%>srVl#!C+}=2$BOS0Ao!}O$MOrL1O=j4Fv%K4sfU$YJ$w-
zfSLuS89w~@z+h--h{$@NYzTB0gM@^{e-I7AATeZ&ERQaSO|1fwS;*$W%$E>=*agxH
zF9%@0!xqf=<Z#A6Py(M>uqYTUh(=4o(GVC7fuS1$q*cxgIKgO1IGPIvJOmg)jRf>0
zN~j)(sfVe<)>0zY3~&g58jK*UX{ZTrfPxG~#vn^U@;?|j{(~^OqhaF2n85&QtU?>R
zh(;+;;KvV0>r+8N0VCf&c<=x&1`IWLqY@+t3jt_rngN@Bkh&KyULef<!2mV`vsH{_
z^^YGMXb$<n0J0ok@Ipf81Cl-gU`zN1hQ%07GE&<8xSHq0nt`l;v?LtxasUADKH0w3
Sl7D~z0000<MNUMnLSTaD$h;B&

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_eyes_closed_unused_0.rgba16.png b/actors/mario/mario_eyes_closed_unused_0.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..94799490fc406d78d90655901ec6323371e92189
GIT binary patch
literal 476
zcmV<20VDp2P)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F80004_Nkl<ZcwS@t
z|NlS3KmsO)0R{u^02br`;AG^)86MyNe<vxdh&2ly0x%5%0s{YkF#G@|3?TmTpM!$|
zoJjB)i0(4DTCiS-Ss*h(W`oosn*~mUC>nmC8OH(SL&O+~2?d1VK#PH{XZQiq3^Rm-
zfdeS^<Hrw1kS!qd;31%>srVl#!C+}=2$BOS0Ao!}O$MOrL1O=j4Fv%K4sfU$YJ$w-
zfSLuS89w~@z+h--h{$@NYzTB0gM@^{e-I7AATeZ&ERQaSO|1fwS;*$W%$E>=*agxH
zF9%@0!xqf=<Z#A6Py(M>uqYTUh(=4o(GVC7fuS1$q*cxgIKgO1IGPIvJOmg)jRf>0
zN~j)(sfVe<)>0zY3~&g58jK*UX{ZTrfPxG~#vn^U@;?|j{(~^OqhaF2n85&QtU?>R
zh(;+;;KvV0>r+8N0VCf&c<=x&1`IWLqY@+t3jt_rngN@Bkh&KyULef<!2mV`vsH{_
z^^YGMXb$<n0J0ok@Ipf81Cl-gU`zN1hQ%07GE&<8xSHq0nt`l;v?LtxasUADKH0w3
Sl7D~z0000<MNUMnLSTaD$h;B&

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_eyes_closed_unused_1.rgba16.png b/actors/mario/mario_eyes_closed_unused_1.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..94799490fc406d78d90655901ec6323371e92189
GIT binary patch
literal 476
zcmV<20VDp2P)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F80004_Nkl<ZcwS@t
z|NlS3KmsO)0R{u^02br`;AG^)86MyNe<vxdh&2ly0x%5%0s{YkF#G@|3?TmTpM!$|
zoJjB)i0(4DTCiS-Ss*h(W`oosn*~mUC>nmC8OH(SL&O+~2?d1VK#PH{XZQiq3^Rm-
zfdeS^<Hrw1kS!qd;31%>srVl#!C+}=2$BOS0Ao!}O$MOrL1O=j4Fv%K4sfU$YJ$w-
zfSLuS89w~@z+h--h{$@NYzTB0gM@^{e-I7AATeZ&ERQaSO|1fwS;*$W%$E>=*agxH
zF9%@0!xqf=<Z#A6Py(M>uqYTUh(=4o(GVC7fuS1$q*cxgIKgO1IGPIvJOmg)jRf>0
zN~j)(sfVe<)>0zY3~&g58jK*UX{ZTrfPxG~#vn^U@;?|j{(~^OqhaF2n85&QtU?>R
zh(;+;;KvV0>r+8N0VCf&c<=x&1`IWLqY@+t3jt_rngN@Bkh&KyULef<!2mV`vsH{_
z^^YGMXb$<n0J0ok@Ipf81Cl-gU`zN1hQ%07GE&<8xSHq0nt`l;v?LtxasUADKH0w3
Sl7D~z0000<MNUMnLSTaD$h;B&

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_eyes_dead.rgba16.png b/actors/mario/mario_eyes_dead.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..8eaa8b3c963f896b0dfe656a887f83f0d473425d
GIT binary patch
literal 631
zcmV--0*L*IP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F80006$Nkl<ZcwS@t
z|NlS3KmsO)0S2QE7!3gyLTQkZkrAc@m|^}i5~&`PwZLi#<uaVv5ZPj6OMwRBbp%u&
za^A-45DW+4vKZ<JqRI^{jsR)L>JStINzq75@qx=c<Y<AX0c=4>X(<WP&xjPHKu7<F
zVt6!SgaDGI=w&n`8HFZ6GqA-ep~`_6hY)QBN<sAg{rmqwjMbwcaa?l98t|C`Qiov%
zD9Azh-Me=TusAw<_UwOT0OG^sii?Z?!}OrjKr>)*{NK^h5ygyW&z^zBK<0qd!Spg9
z8S-C2K>=(4x@Hg`&2bDk9PuBETChWq#c?_yDk|zfdMF_K9?fCc9PuBUdK_ke^`nFU
zaxj4`18KzNBP<~R4{~HZTefV0hYCm>WCv2*Fu)uD7XvAPMFj^32hKRf=Kx%0pr<X6
z85j-#xdb^Xa3xH94!~vxdb)!8m;tK;KrSWV`~QR-fE@22Pk^H0KPJHL0OUBtry0!=
zD8{2Z089M;#~KC58eyS;OEWG9ASY(zkOW07S|Bjs%mpx?BbN>6DHxXnkVA0JoH_7>
z3^EH>E&w?Mr4WJn8aY9t`GBZ$068>3o<d5DsO121&?CDP*#M9@Gzdv53DMI7){+od
z#>49Z^tggKLO?*^KeA@DC}6->7a&IqvKc7VF{ma3xk6A-kO3P2)nq_9ywx#2Ghj6#
zvKh2!4-nJYgnNS2jtMc15khKE<gxV&U<xQ{l3_CgtHbbhOo;I<0|7wL3;^Yx<lB7>
RM4tcv002ovPDHLkV1nHe{a641

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_eyes_down_unused.rgba16.png b/actors/mario/mario_eyes_down_unused.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..850c293b88ede006840de34ee6d5a5897e08e306
GIT binary patch
literal 1030
zcmV+h1o``kP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F8000BcNkl<ZcwS@t
z|NlS3KmsO)0S2QEU;)JdCnG1pi1_~hJJFFv$UJ1TFrq*}K;Zumh997m3B*8}gW*51
zjzo7M2Ust}ERdNXv(e2$aR3Jg$Nvu>J}_`#`1J=ljsSWDWDvwO4xp(Zvl-Al1b2X;
zq2d1zKRz&6S{ed%aWDc2Am(5+)HDP;M?ipssQd~FehCQ)P$)8JYHBh-%wYhV2QvG|
zj~@(*nu-XsK;;0)brJ#+|3NeegT!DMCZ-?(kw=!p#s-@ufiMeZ9?TqMd60f^L4=%W
zuq8G^^2jkps#*9-LgXN4WFQX^Gy_{f1kC{`Hj-3cfB()vv>E6jK*%CuLV_eSNG*z~
zQFEb~f$RWc4acXBWCspZWdwI9H61`!^uQcIs%E0q6RN^sxquwkqvr^+%wWM)z6d5i
zXOI-+V9-?LV0aJo#=a6xl8Pe5lJ^Whz~2ACAjrwVaIHrWtA30$@EoYgsOCM`a*+OG
z=k7C{KmUTEWh?RadrxIx`0yN9s{$)G4xr`l-~V8Up36X-15#S=Ge|OgV7R}pm*K~@
z9EKm)&jV}F?+nM!KPSos*MQ2-?K{TsVO<Wx10eqK{5b;$FeJ}kf6s9LJr*ONHQIj|
zP>9<5pF<%D6rXS`V7cVKMAX&)Xn+B&HUvv|Zvi#4HQ{<W6pH^V6u<i~k@fEXoTL9S
z%s`2P?4=MF{&+AC;ZzPyh7ZSM7&s&)8TMTx90=#ngA`qdEBx_bF2j%akkGr28i?RT
z408aO^Wge@h7ZW91S}bVaR4_gc^*6ran=dffl&t5AYcg9_krQZ{rh0{^B<TVKna0!
z_Yt`^sCW&-)pN%f485Acx;`A+M#%e&Al=V_mSr^`1?oM=pkP@H4bl$~Gd^IJ3MdZv
zasNEr$3b3B3|fi|3{H+t3`7H<`Jg6Ou$L8Bua%P{SSzqW3T|h<N7xS!L1YIo3Mfhf
zH9#7X%hqmV*msVBVcRwgpX08QIT;v%4O@n}>$ZaR?t|(DHN!xmFUW~mmS7e{91sU=
zn-;^cZC(j5L|!m(aBvV62q5DHB^4Q#wfX=tk`}0b2?4MeiU&}lz{|@C7z#!Roj+cH
z*&K#*7zC`m7;3yY2sTK7Enze@0>B)k2sTF$i$72tFg2Qi!OF@KXn+8UAsmW^;AVBQ
z6XD|6&=TGhhj>IHh=D@@6txVDnu-h<9>6GyKRkcIAmFtGq#3AKf)Q8<F@nkfNsb>x
zMT3_SCj(FqR6hfwfKfCf11ATgAkghjikL<K02J(<I^9Fz6#xJL07*qoM6N<$f?xBj
AqW}N^

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_eyes_half_closed.rgba16.png b/actors/mario/mario_eyes_half_closed.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..911418d5435a0ca5d28ad20b38e95a9c1525cca8
GIT binary patch
literal 1016
zcmV<U0|)$xP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F8000BONkl<ZcwS@t
z|NlS3KmsO)0R{u^02br`;AG^)86MyNe<wMtu$hN$4m<>4iUkA&{{LY30ZJG^{Nq0d
z2Lm{f;By={mx0xT^}@^ooAV#t9B?9p3xYKKKr@a5$cKnAf@BDV1i}KK#X#3H`~Yc&
z8N$K90Tlc3;|C+m9C!#QYAXH*N-$Vj8iMQrSq8?Mnwkv25MhvzkRUp{2ncY1)f#Go
z%;JEW#lZ+N`@@e942Fh=@Q^?b0gxs}nEzoegh!2p!2b^~J}?p!0un&AFMw*1%|Z)$
zuw5XtP@@2-1D6Fb1BgkCgw%rMVdjh$M586)Xb23h%BZKOhvCJG7ys|yzt3>&*f9_r
zqnLMebY$4KZyzJJ^54nH>Hq%y`%$ETB`CP~H8L^+ma>-MQnsX|1g-{L4z#qi{FjuJ
zWVn9)I>Whh=NLc^02RwX$6&LE!7yqG!?~r=D2`xcWW-riD<~*{%~4cTWB@q?<S0Qw
zL5AeyWJU&1i|9WV5H#i6e~GMj{{<|UfNMqt%i{l6@BROu)qM27gk|&pZ@`w+e<U1K
zz4yPNS2I{mQ1KeD9u9@#{|Z1eG>hN;fA$WWE&myCrh)gs>K{^vL8?M4Cr1V?MFxgo
zFDnL6=rEu)58gk2&*0?f1XdH|<plQek00;hRp}1~>;R_&1UWewAQdSGSm(ZN+Zgtp
zV_=xOZYwxW8PM7;oWLO62350c?KX&Q9D-1qfkA)+y8~EoIE+C;04l=)(fQ*1GzMqm
zX<$Lkpe5+`gQ{zWZTnk+YNi6!d;qKC-~<^0Yy&U=F(>{Iz)01CP#1GZ0>hm_07W;b
zjeu^PrlKNL=mT7eLqd_^2hd_kpmt7Dqd*gC9*2M=1A{~migrUwO$_6VG&va=B$ANC
z1sFIafejL1TG3R*YCYJ~IMaX=&;f!VeViN&0!GnrgMqn%!OMsfBg8DV7#K8zih=4N
zj^nWG0Xjeutj|%C0VhCC10X};d07&eejE)28P@H4&L9A6T5)ik1*d*1M?(f9Nlf!V
zZVhtMV(5La1ei!aFbGHhn{q(kD@t-OSSjLm0N$dw#EXGJ5SSP~ya(n7V0;QFXfkAZ
zaWdjEF58KL5ga`dhQJ)e0d{b<7bk-tW(>g1z}6x{DbbGIXJF_B=BgjSjGyJm$>6QU
zz{r3HoO{mjAEf>Rupo(Y;$(<6!m5~f2cT)kYdMlyd@X1cGq9BdFa`g~v>c=jn;BRg
m&w?j3iS;c5C1wnGdjJ4ej$ktF39{w@0000<MNUMnLSTXvMYWay

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_eyes_left_unused.rgba16.png b/actors/mario/mario_eyes_left_unused.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..46152520639fb7e367bfeba8ea440ff350f4206b
GIT binary patch
literal 1191
zcmV;Y1X%ltP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F8000DTNkl<ZcwS@t
z|NlS3KmsO)0S2QEU;)JdCnG1pi1_~hJJFFv$UJ1TFrq*}K;Zumh997m3B*8}gW*51
zjzo7M2Ust}ERdNXv(e2$aR3Jg$Nvu>J}_`#`1J=ljsSWDWDvwO4xp(Zvl-Al1b2X;
zq2d1zKRz&6S{ed%aWDc2Am(5+)HDP;M?ipssQd~FehCQ)P$)8JYHBh-%wYhV2QvG|
zj~@(*nu-XsK;;0)brJ#+|3NeegT!DMCZ-?(kw=!p#s-@ufiMeZ9?TqMd60f^L4=%W
zuq8G^^2jkps#*9-LgXN4WFQX^Gy_{f1kC{`Hj-3cfB((^%CzWuu$qDHfd5nXF)(P=
zyk~Ig!N~VSIb!WOhX2;B?-`t1zBBB*j}dGbW}rA=?lA_2nx)Sf7=AD?2m;F{QXO#&
zXkp2+_YBY9GceqL{(&K9>U)NB&+$6~?ttgOV4J$_J%gkm2Ls6O$IjhnIDh^HL(5je
zzJRG{-Nx|$1JGg)V0Px<<Y0LJ{s%+vHvEYP?tqlm`wWr{9~kcM>t*<{Er;R9_45oM
zryM{3oT%h?4XEtgzGDm@*5xof0OB9dpEGa(J#+s0dxrb(@puB3mldM+{^w9gf+avO
zEnvCizeLp4|5yM6dKu8Y1=O(6gzM)}DE_Zd{O-R**1P|6j{e7K1~>$=mqN<>9}ngs
zoXVle@Zoq21Bav}!@g^Tqv8B{kfQ5wg+Ct5W%%(P5_<RX1R~f053b*5_<*cRz!I1c
z5r!qtdrvSLt^=bCtVqBRs`dlJkNc2p@cai>?cf{%cEGv&h%6UWyoTZGxnm55Ud>=#
zAC7G!XgNstbD(8e%}0TH&oL-i7DMy^6C;T6;REif9PEG}_s_$99OUK1pry#b;N<AU
zKr{fF52|E>y{y1`t(+XeT7gwCxMqEirzrt;fPkVTPy?jeT())_!@hG24BNJCBi;eP
zG6PtZGt6DL6|8q3R4=IF0foLGC+-Fh3)~hChy%7wi(%L{uLKw(FBmvDIEZot$aq0X
zMTTXqK0u751*%^{0JkyV5by#9yMUq*Le-BKU^a*090ma^FNPW~!VZDf{YW+m0CSKc
zm@kN3JGg=aJ78)w1EZA{Fy%9#I+a5alA@EHFoF=Hb~LoqMD?ab5CeyRBv?#Skw6H5
zq(3}=!64wZ1gcVk0ayru%K%A^9}L6*FC$JykRF&?0i$RJ24Havu2b+h0G<YxR4Xz#
zw+aA@O;Gj&CLf^hL6#dT5|<8)fS$Dq3Su}Wcodv=I209u1<?-%FDFT0{es~IcnHEB
z0CXv1aggBusSMdbNBm%r<ov-P2uws?mV)TIaW+n}yf_)J-PZ&+Mn3>6B2dLv;)Or_
z&|5_RK~?g(>)#n301LnFXif$#Nd}@F08+U18pHo-`@aM8KPN*m&~ht9{Q9vq$-qS<
zsO-R!dx>qD;cL90m_f@nA-W^5I-Uhj43XOqg&9edegHJ|;IA3DqDTM$002ovPDHLk
FV1lD`44D7`

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_eyes_right_unused.rgba16.png b/actors/mario/mario_eyes_right_unused.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..8e58001d92997333c723e34715941ed3a02e87f6
GIT binary patch
literal 1242
zcmV<01SR{4P)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F8000D`Nkl<ZcwS@t
z|NlS3KmsO)0S2QEU_p)nPDW0g5%T^2cakCtms#lMfTIAU7^Xo$K;Zumh997m3B*7C
zb8s+#Qz<^jp}P#O7OWRy7RXGH+34nga{-EmA85vL0QnFxMvx3KAptQDXfe?B3_n1c
zVTN!pZ~(=A{P+Pk3!VrSH5LB@B^WF%4MFyR6o9d&rX~Z>^$Zdc5=7-!kmUjb9ALGE
znjo_{pk{F}g3SK#;{$`Cp&`O7P&oi}7uW(24Z|>T7$4*S5E~?p4};Vw03C~N7P5H~
z0uujWW}!v_(C^rS7&+eFeS62i$%#9$BC9227DygnNr)WejAWKq1kJ!z5TV33Fa!So
z{+)r;G8<hzG-siD1)Bp<H1504z~J2Sox!^GJ;T~_L^}e-45yy&3|cks8K&+7TaF@!
z?f?|YbI%zVa;Cm#xc~eE!}IqH3?<9nGaS25FfuSK7vzLw<(j3>8Ri}%90G6^z1tWV
z-oO9Bz`+Sjv%u{00qBs{ZFoZg#qyS|3=HSbzhF3a?mh#k9F-L0V3@k?J;QUP=tK?y
z6wUX6K0bf_Jp%_&(~sxR86K?5VfX;V=k^_Axb_?~6tET4$Im}!-~d|v<NA4qAKP*m
z?(gemkYxD4kkX0>MiyKFy6-yB_druQfWi0S*gOV?58J>>U#z>&ur2A@e=TnYl$?Pr
zW1a(g;K%**3?Giiz^&Q${yBq$RWy*V2o}Rx9p8ug@&{1Ej|X#++<6@stk<x)8#VC)
zm2gN(LM-RdgscDYU>=yAy%Z9aFb7~{vFFe_;m3VYaD9LnAOJ3=8Lk6^lu%Mkp7$Q1
z<OeV~1uWtG4?y2NxPBjh2z>Yejny9z%M~n(8Lpl?$B@;0l;Qb(NTMR-h!4jg(Prq?
z4Ags!A*gr_T+6xp-|;)(Jt+QxN<bA6NTrpNBZC$&+Je2T7(kU40}0IoCr2l+-XJe0
zhy#Ej0!kYo4$d?n2rTa*6)6W;)4pxn81|iGV3@mZE4WH!;A9{gY=i1uwssp-4+n#Q
zq9mA&GZ#n*z|=w<@Z$V524~}GU_s5GB}Cf~s{gO=Z)I?{1}5YmFCd0;aKIf83jvJE
zMi8ooLlTr-1W<enY9kQxevKE<msVa39ENkC!TtiSML^Mr!3!E4IHN#Q5$ae0U{FZ}
zq1b0=sfo>g6i*~OLE?x*(GX3o0E3m4CBxKcNI8Pj0Zu>%fXi@TF)Uydjc~o?5(Y0L
zPNJ%3Ne*B!4lD}<fO;4hB*10}cr9W0@Ej2u$Y}s%D7-w76l7p<G!$f5x9>TF0I+Gr
z!EqLx`mG!d8H^+uhysR+z<9h5%tydb5MU?<>iNN-XlTW-q*@TJp9P;uC0+~+`_FR#
zYeJw;BorAyDIv=XukXR00Oe3n1bA5rGCTlQqdz1$8J-J7GbjQRR(6me12AOaA&9L-
zgi<Pks$Wp8_yd^nvm7}YytNnz1wV>@P{mcc^gDwB(9=emoD9iUU@sHz0JIPywrPgq
z2v~?f%|bDQ*ft?ZFR_**yBXObSoPye1LRo9Kx&8q0P7K}S62}@JOBUy07*qoM6N<$
Ef)45uUjP6A

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_eyes_up_unused.rgba16.png b/actors/mario/mario_eyes_up_unused.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..01d1bbdebd40bcae0d6d16112f51adeab4761952
GIT binary patch
literal 1128
zcmV-u1eg1XP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F8000CpNkl<ZcwS@t
z|NlS3KmsO)0S2QEU_p)nPDW0g5%T^2cakEDShL_!0Mj5KAn^YO!w*o(1mYk6IXD==
zsT7}q=q`h+1?z>F1u_$4Hb^b9S>RlNqTvUcaU4KCM2rz6LntH=h661Ix}M<&NHfe3
z4h9aO*pDAS;AX)?Kv7fiKTv|f($WxQ4@dzRYiepT0A0@@At6C@eiabl0IN0B1ewJF
zHH(80WcG(29~cY`4dG@XhX6>B5$1o8Ptk%MEKf`bNJt3$fAQi2PP0H!@!`V<Mvz%3
zQ2;YMdM*RQzGKfBI0S(~_x=OJ2Vf{#St&AX%_c4#wrpi!=v{Un7~J21W=Jyp0H$9_
zK?a7c)q)I4T!@4YvX2ElUhltWU^svMJ;?I^Kb}8lc(JXN0T>62=YCW(Tnn;d(2~UO
z2vA<xcKklWhkY#!3?GjF7jWuk5YV(@c>ewe<FV@u4Co<<Q4s9|DtiANlJY+sn+G&x
z8_)sU{=Zn4@_*Yo!Xa?}J_Ez?rBfLgUd;Q?@Z&nrA*~EQfT761!0{hwHby$aaKQcN
z5X*nOf6nmZ!CWL8uQQxKe~n;5Jbw)s1`m1>>V6z&_;LRn0|zkVuRjNuB`9W~JK+Cw
zXg2(DALtc^4-f|kfO7`J_3P&e2Enxl_aPPtSi;r*cmXsEX!i%8ap=VvMhJZP09En>
zV!484F~ik!=NPh@k1{+5ItnO@FBJa2c>aRH(5o4!=NLm!@fwIDzP|v|pltr(J(vkM
z1K9y!L16qdK#C1WP*^!RGH59>Fa&#9F@OwUAW$N|fBv4q$<Ya{C&<eQYB9)Gh<WJc
z97YHTa&j_2$}SGD=6&0?G3)~-zPanRf=e+5PE;SD#|fvPAj3AOo@HydL8LhZp)>=7
z00*iL7IXt71fU`u5S1^^Ph)U4o(2}w3|hi~ySjoTUSNsIux)=UP!BLCK+_NhC&*A>
zF$@e_4uk>Vf(;e|@Hi2Kx{yN>814)LDDDFl%M1j7rlKNL#Rs@b4hcnuA3%#GfySYG
z03!-Cq53%lfF+JZ5Q=q%mYRg@XE4$PS|O2yq)vc=LlT&afN4il5i|TS9N+|WfFMX6
zCkKOoQ8e5j0m~%}UPhb*9bl=&z@Qma3{(ekEQe(e&;gL*(-DjNG1362%yu*sWLUTF
zIj{&d1SY(*;M8yBXvknBNzi_98VPdJV(5La1gQ4|gMfr4xGqqX<Y2H;#MBRK6=URW
zt&;bk@*AA;LCNC&R6%szjA#NVW>~d+XSfb5)xcRA*d};C7pv<Tk(=fJ8At<o9YCZ}
zjMQuuGm_&0aveabWjNi2>;S46N=itO69V`gN~|Z~>d+lP_fTM>Fy&*@PRJ7|@+??P
ufGI%FmZXFZHZ!p5XTcK!)QAp(W&i-@=w#>4Q%G9?0000<MNUMnLSTaWmD2(M

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_face_1.rgba16.png b/actors/mario/mario_face_1.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..fd5ee1f398f4c453702c08529ab13e6d78ebc5c4
GIT binary patch
literal 1055
zcmV+)1mOFLP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XU
z000XU0RWnu7ytkR(Md!>R9Fe^RxMQAKoFkv^*wTmpc-6cTq9GLI;uEVBoc|MEVx7U
zP(68)I&hJZ!9~WAx>OMqdn)~AH_2`GE-Cc2kBZK{+n?E)Z@!)Vi&fV(y`;Q)$>1FO
zKY@QQ1N(dXwPjiL#G2r5)q9i4Z|~9xd>MnW7?ZKhJ!k2sfE`E}CN}!eJ=TwwF*4fa
zz+}T&Fkl0M+J^4_@qUfP1o-d!KC`Q%Fhp1BxDJ9q>OI%%>2({k?K)14kaZaJu^5|U
z=z1BP0l;lEz^}%25}xahV!6(Gytf3SIsHq6uZM6~t5vsQc6N5wYc}MtMgJ6xtr^fA
z8CUL06uY}mC-UQARXe=*3^6COaSxcmlY;1ACMcR!^zC+?6$7`|eSh&#v;89Jsb$B+
z?`6Oo%u1r;c|}!ol=xKLeR(sw92`6^WX^B`1<j6KIu83p^ek*-KsTMoL{%l^*|i0T
zlofrr9L~b|&8p6rwJ7Bkz-N9DS5zuK9kf2tj)1OY%c3I6@``LMq$o=&u1~4LKTFaM
z$ZW)EK~*xN^6H4HJe4F$Od!oo%XPmauvV#70w?%NsnR7nF=iH1d3{0`n5i1+m+94l
zsD!P^B@t0!7Pw&;Ye)tO6v!lts7eyWQnpo*Q<iNaUfw*^RLs|QB86Wjvyhu>0IN3R
zl0e&8dt)L(^+Zvi!83t4fvoa8leJ#t(vEGyPA$p;Gk`bT8@O()Z473BH=h)2J{B*;
z`ll(KoF!DY!Q_Z4O6-&1;0!hiO;4|s5}T2QPlH?yrR|l&1Q6e5=Z1S2MdW)#(}Pd~
z_E6B_6B2bcksKD1yqd_fGvMF|u@fF436{h$CCL2pI+n*$Dz(CP9Euy8E7(Y}ou<ah
zC>YH{H3#1UxAB#`2)1Rmpo4HBz5MA?d26NXx)kFGDjT(Iwj{t)z;A$nTmt=OYB5{J
zw(CLFvQeY>c4*DI+V{Mst%7rheFXyZWCr37e--n3v)GOcgsJK@We{!>`1EntBKKIc
zb3h=F+u!##!?%+j+=P+WtQ&IY1V<gP6E5lVA%blYe|ie7B4>v)5CC~dw8>ZMx#;!)
zGt%z^PFoZ>be)vs_yN`s7YmM47-3ceGDW00E-l-x$Z>tx<M_HZh2DSz)T6H<zXwx1
zt9+mH!@`NY`#Sy_zB|Wjh+B+pnehC?r6YrLn|`L%Bftth3*5*1Li{T7eQ*-lboh4s
zqvZDcs%Cq>$c|ud24~D?5nzW_bjMb=tu`m2+n5*|8EB175Yw@>8>@AUA^$-FW59oM
Z>?e4eIfZeZiIM;S002ovPDHLkV1n`!^eg}X

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_face_2.rgba16.png b/actors/mario/mario_face_2.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..1d08854c85ce179d31c4f690a2742ced28935fd6
GIT binary patch
literal 843
zcmV-R1GM~!P)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XU
z000XU0RWnu7ytkQ{YgYYR9Fe^Rx6O(Fc4jLI&%)Hf~qn>vl^<*@YtC(tYsHy*0Nq$
zU|0`^_25Cnz$<ECSY2l5G6$*qWIH2UaXRhXOh`6kOWyC>)k;cWjG=SVi*p7?><a*|
z0&k{oOb`TS5={6B%ycsO?<SeBEqpY-F!z1+0KlNCDhm16P)IdTjv2NJqXPo>h44f)
zolN_D>;gPd6hUATt@*RzVT|M0@|9FQzN<5wOCb!WV07H~1>cC_@@;T9;H*yukW!wM
zyCBqGblq4149`iu9ykY(3xG=nE)_T&MBPD>WtmCS)ZpO3sWp6(BpE%BARFq#k5bC|
zTrQWMtv!eqiv<GGZnvZDc1uN3P+iwlmgUi-A)c-2$F~oGE5rrne!Fu9U_UYP(N2gZ
zgrM8o+rU<UgPGxzt|}wvr4f2<vr;-U+g)wucN-)1otH`aIXCh3oz+RR2Wu0m%qaE|
zWu+-fKL)Bk+JqHfUbqu$dmj?%B%z2CNw2l7j!nsVRb@rI1g%bDC3Ri#*xZ86+c9XT
zqX0zMT*ckhyvcLgY>C#7IfX16QphFETb&2iu@s7SBoe-fmAz~<{I_gvIhqxg+k3j!
z_jVqoYtI1dns1h^4l?HoS^!9ae<J{F1+K2HdJP5R4sj?IzQ8&V|93ddyGhhG8c`D*
zeAw0;7|D#pAMXLIHz*X6J*3S?`;N5_;M4n80m+Y!o?rm6ZGlMn;k%?qdmvG56}WaH
zo*f+XuAnbB9P9{1X~x_JT&R}}fWb2*K3>bm>(B#0wBPR!dl_X*VnL6al0+2q8a~<X
z*9m7eLMcaD6>HY5NXUrwiIfaUs}Tcc_x=&N0ANy7yzQ11mAog>`6%Siudk104}H+P
z#c#7KS)b=P%vN(rvjOI={Lt?K0AmQ^sUTYASjw8_Nk}(u{f32IN8f+#4fHDpJ!Ac0
zaOnLLfX?yI(B%*3!z5g}8ytME0-f^E$<VOVJ2kpK#_UG{oO1k}ve9k$oIy_c`U6XS
V2?xS~g3|y1002ovPDHLkV1k^MfN1~#

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_face_3.rgba16.png b/actors/mario/mario_face_3.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..9e159b899c1856840b420b4294a6d80088e1ba9e
GIT binary patch
literal 397
zcmV;80doF{P)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XU
z000XU0RWnu7ytkPKS@MER9Fe^R<RC)AQa?vl1(?eIXdd**#G|uN4Iu^?e!fNMYOhQ
z(%JzMiX3qFdXjj=%<9N?I#L|kseqLO=i<yn#G15p;zH|>FNv13-~bmm!5zPH3NIlJ
zC>w3bWG<LtL($6a6v8T#!xn@O5*ahWuI4&(p#b!{u2CIdx=yAehOucHhs)6g9`1>s
z%RFb1<gQtAfdd*L?!-Y*mgTO%tM#ym>J?W$Yb{>EuBTsGTwTI1={%)P1tbTO1IdBp
zKyn~C@E;B!Frv3@y9$lrhaBrfh3g@XXOF+b;lk=8>`sXYpmhOKsj8}Ce%1H=gh~9G
zL*;~`2nnLnw$1||h5>_X#*86%DgdZU#pAmBwH9eMY&T@cO>w^qPAGNrQyFtf!gJL2
r!hXY|01y6h{Etic%YPhe9qzy#vJU#eA}rh%00000NkvXXu0mjfcP^^E

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_face_4.rgba16.png b/actors/mario/mario_face_4.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..83411bbedfd8197f61edaa641de8887e4a405717
GIT binary patch
literal 661
zcmV;G0&4w<P)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XU
z000XU0RWnu7ytkQM@d9MR9Fe^Ry&TuFceHyD?v#IB}bs7<QN=-k|R)3atw~aF({#<
zgv#rQG~V&^FGwrVEK+!mJu`3Ki%saAbKNIDU!P2l-2VptJ21Kfecz8hE^lF5$Iyy-
zeBU}b%4y;Ik^vQA!j>3uh?ZaCCI-e5HCb)k(u)izxa7E&thGjc)&5qJF1%i^Xwyw5
zljgHmEsU*(>JuAvAV(sQaf}h0m|RBHh>qd?es_<@gSaSSzO<&mng(!*hHp#9%deyD
z?sB=f=kpmZ+;eTW+j;meN5{9@E#NkrP2fZ8dc8W#K?gYULUMqX%jE#DWD;qPWE-Jj
zu`ERAiw3saZK!}<(CXEgO^$mc%i(i#<VPLQHX#{^>Kym1hysk9M^w)Fd=B@RM-F1a
z9Sm>+5dc1l>2w-80<z+mm{HeC8d?DG;6|swKjUt(Saj?48bh>ni1<1j4q@CH<TQK%
z-D<T;sc@n0F^1Dx^>okbOBy~~=pY`2&6Di_EbjOFsCs|&Qs-~Z9FND&@BWl!-J^Ps
z8ZLIhZk|>LbTd-}nmA?J1>`QC0uazPZb)kaWW7`vSQc?Qox&Je*;BwSD3J;Ew?Qk=
z<Q&6<c90rYS34N0P@+23c4A)1Ow5QiO$JSC3Z2RR5<-M+(@G&g6SLVYA~P`~gsA}|
z;PO&qY9M+Y<4pz^J`qCl!JBM8pI84E)HL`eRE@|0GQRUJPaKZmgH!xJkQ3B7CF;D6
vTNt~Zbbw;E6P8F^EviO|Uo=n?{>!x=<qb<g<fY|~00000NkvXXu0mjfq#z|<

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_logo.rgba16.png b/actors/mario/mario_logo.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..af5a5e0ecb5bae32554f16b8699acfa24a5a9cfa
GIT binary patch
literal 515
zcmV+e0{s1nP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F80005XNkl<ZcwS@t
z|NlS3KmsO)0S2QE81N8aAtMP8O0|rnm`REQh|MlAbwoLY*eLi<W=Ij#M~nj~EhzBn
zClm#!n(yCdV7ULB;rsLF44l!yh(I}ZjDg|#dm#S@14D2yw!i|JgFQ+>B_R&{9|JHj
zfXYn>u5N}%zx##|1Iho#2^g^1!$7nHjvhs|2xeJQ5_WOy?!d5*foR`z2w+(B?b);c
z{{=9`|8Lp*|38r-fvYmYOgM~;q-6x$l^lve*m41;<<ZFq%N-pV7%Uwz9W!MPs#r-0
zE(fEUk0lE5C%$HA;zLf5u=IdUj6hl-Tn?;Vi|P}vAWWYvSppFYLX*?dA{=c5LqI?R
zdo}}Qzd3XM|DQ4i;m3RTFmnVbp<)SBn7!B%A!-~UCq4lQ28Q>~@%su}V#Q35@Pvpz
z3cS%uwc=vJLF(v*sivj{w?4d4KzyP?1oBn1Xeh46mJH$L4+CBYd;=D<AOjdUAaVPj
zNC0xUqZcm4D0UKG5Pb)RA}0ei07^lGuUSru_Buv!iZ2l|GEfhI%))9Oq4oew6S<*5
z&=bVA38@(xDB(KVF&UI0K<n-@iuu?=fMy8}n)*=82LPuS3|34>6>tCm002ovPDHLk
FV1g@;(24*6

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_metal.rgba16.png b/actors/mario/mario_metal.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..03fa9c6bf848383d149bb13f8784ee91439b78f4
GIT binary patch
literal 14026
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

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_metal_wing_tip_unused.rgba16.png b/actors/mario/mario_metal_wing_tip_unused.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..8e70c22725f9eee79f5c8429c0ff8bbcac315562
GIT binary patch
literal 2860
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
Sc6I6t1}m2-!>=vHwf_fXfy>$e

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_metal_wing_unused.rgba16.png b/actors/mario/mario_metal_wing_unused.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..cfdd06a87ae8f8f93c38e8832a231d30ddc4d7b5
GIT binary patch
literal 3399
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
Iiq`1=2i?hHiU0rr

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_mustache.rgba16.png b/actors/mario/mario_mustache.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..d089499a47e2141d0ea71a151405620e51123098
GIT binary patch
literal 305
zcmeAS@N?(olHy`uVBq!ia0vp^3LwnE1|*BCs=fdz&H|6fVg?3oVGw3ym^DWNDEQdZ
z#W5s;^X>H4e9Z<NZpSx$uYbBr-&^0=E4b0D@N@gOMRS<LdZz?cy}2{b`e8ylx4^`x
zM+J;2D?N1tFQ_=NZaJgasvGj4c}2CShL1y2=+s+Wf)^gtoQrK>&RSP=Iy6CyZ|U?m
zrsh?wb2!x)xo@aEV4NrPfo0$ReN!G<bZtK%eB;oPGQkMOr#H*B6=p^qQz__s{!8wJ
z<Ilj=?}Qlju6+B?v_G(Mt$!oi@gyDnMP;c`x0Dt7YuB3^%(h(>sAaHA;`1%bTQd69
zx7{yn)BkrghWDT7j?0#uCFi)M^|mYY7;w}u>`}81T*=Dn1@tb1r>mdKI;Vst00n+@
A@&Et;

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_overalls_button.rgba16.png b/actors/mario/mario_overalls_button.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..c449d6f2d9c9eef4b46494a4e0c841ba1ae51f33
GIT binary patch
literal 897
zcmV-{1AhF8P)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F80009>Nkl<ZcwS@t
z|NlS3KmsO)0R}9j+y5Pp7EY3lBhmpdOV2Yfe7FA3@B_^r5T64mCU}&Qfx!?eNt|Pd
zNCU?h7~We$5(>x?Z03U82Xh3>abU+-5e^YhBE*irG5r636o`Qc#Qe{ITPd;}NbNhA
zo}&ac<1iJdkrYd@IS%F!kYm6e!R`YrQ2-3j?_7`|=cF);fTHFD&<t?;_y$ZLm<D3W
zhQNddQpZV!{0TBc0A|j4>;|GnEER$tS9E}*^e9G@BSir)yxv2DUXTW*(|f3yf~Zk}
z8U;TXXa_j38;#_E^9(cvoY2I`fNBpk3V^|X9~%6iL?cKer+}jY7!-o<;5h<O6u*bM
zkb|}X!SDk$o}p0y6a<Nb@+^q{P6J24ifgdZh&&Dtf$zW&067jE`nbw`s<{i~8i*s{
zi4bJ@4`2v9e-5<eJ&mFP6uM|R4e9`-hzBb8{sQQL=TvqC&~xAKV|orA0vwVM3qc`q
zAE@y8IVy$(&@=C^GcbGrhpYsO&!7(AWZ<+q%E$qf1BV4L6rMj|V0eCv!jJ%3_#NmG
zkY_$ThvqV)9+XN6sYL{7$#4K&07@P|fST_EUHu*ybds7341z$+KuQG#3Pm7(53(3&
z1}D&54zPYFln_8^l5qgD04N~}fU8en2mm#|02%@k`v9aR6d4#eftUeXK?U+HQ2hsB
z`uPE>(Ser!fF?SSr$AUx0948epf~`nJpc^zW7hxQ--oFA0Lm4h><QHZHV9}rIFvY`
zK?+K=pkf4sp;?&$<Xez5(8q!xHV{jK9Bu__Gg{$u07&i_!}qP$|3SV6@jd_zeh)Pm
z<Re%a1rAM+BVgHz17a@7aRNX|PM}A@ZiG63(;L%rkPa-ZVqjVT1@Q-nfuQIB<&YmR
zp8{Qgl9i!x3kwwvnD1f!1S;kP=P*MCYyd~A7#Iq`s9*s3`~#{sv~q-j1Igzgm9TXB
z9b_@cBOrMz?7j!7$I~na1@?J{??8uu5+Db%JD|RV3jz5ci@zhe4xCtxVEqK#*@vip
z0mu<QU?t-ZtRcw&b|5r?bAo)1$JfXv5ZO6J^o(GR;ov}Z2*OgT_l(eeOx?cWfOpRU
Xh?^Cn>iiUg00000NkvXXu0mjfT>@=S

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_sideburn.rgba16.png b/actors/mario/mario_sideburn.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..251c94345c5f32d9ff60052fd918a3212e207c6a
GIT binary patch
literal 683
zcmV;c0#yBpP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XU
z000XU0RWnu7ytkQT}ebiR9Fe^l`m5qK@i2WsfgfCu3TJXB$3E`geVFb$w!EaMxv0B
zsmLf~kmqs|c@i17dB44ROViA9aJN+$x~jK(`rmsqvwPR{egEbq<?Ty?gZ*w!0%uLr
zzt_N9>Azx`kKal!`@UfvrJ3srejhabHAoW7T52M!qe2q>BSN!X!BPkeof3mCN`Y%<
zBft(3tam;HDi3O|%5}^_;G*1pBmu71nS*yveD9a=m%!HrA@1JbwkE;)gBP-Uy@Y@-
z%P@oc_zj#b`M=?7*m?rr%JG8JN>9`b@JfCh9)TUFC(9xQCQsnJ94+@1?<@~zZE#y-
zxHj5O$)DR!0PvLxGg}YFMqqraYglI?7Qx9^uV7g^*%2h-Fat$Pd9ERb#CUB(RRSK)
z(Z>P9#1eDdHs<U{%Vs{tK=G>tIwh~AdH1DfFd3L&j>R>b`4R4Z7@|k@hv>TsyHdfB
znwIovA{fEAp4vTi_r8KJdigp9TPXu>r0e3#R3!qrAja_7J%2pTM?0RtCxJTw<2c0e
zY-=?+#(D~zdBZz!T)+Xok-`|Exi)Y}Rvx*Qd2OXGh6Vx#iaU=aVnfZ(z@7)V|MhBp
z#2$PF9)>lEsb<%bk3Q>#bQ?Hz<4bs`YoH0)2E3`ddq!}4<~(-qcb(xgY!&q&tTh&A
zKi9B6l0FrjdE*JN_^eY{$@&Cr$z>r2AcAeBPdRexque7v;;Tq3W!F*@uqBTe7=Kq_
zdXWbNHsQ_lRAg@Dnhd~@>7<tvKP*Z;OCBZgtVuf-kH3UF_V3;HO5pVb{sVRf_MvIl
Rg$e)w002ovPDHLkV1mPFG2Z|H

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_wing.rgba16.png b/actors/mario/mario_wing.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..ff7d11bf142485b35a024ca8c64a141f9a1a3850
GIT binary patch
literal 1673
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
Tsq{Jj00000NkvXXu0mjf(jK}u

literal 0
HcmV?d00001

diff --git a/actors/mario/mario_wing_tip.rgba16.png b/actors/mario/mario_wing_tip.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..7da437f9512e1c8e69db004a9c0a63505c822a24
GIT binary patch
literal 1132
zcmV-y1e5!TP)<h;3K|Lk000e1NJLTq001BW002M;1^@s6dyaLk000CtNkl<ZcwS>P
zG&E!wNWjD}z+iYeAUQetKdAvqwGfDkiuzAZdSan82{bo1|Nrsh2ZNxXAcLZ!BFV<F
z^z`(AgN=iOgDB0|)Pcl6mfydBpL7QZ2naBM4B+JCgli_&F)$61l9CMHzkg@=@ZkgL
z4gdumNEgUbn8n060NKGH{V!g;V0i!jJ?RdBSq!rj-C$x&1X&EiWQ73C0pwT=avUh=
zpFe*N4*uTWUPe-bfCWANNihKCYmm=Dj$j}Iu)uslN(g`~24y|uU<dKZaRB49XU|9~
zy+9U$f*nM|;v5u;IXO9uWI5pM*|S7B0NIBiHYodoau6&HfgA&JSWHX|UWZJXGUY$A
zV_A?>F3136U%)H?<#Xh$iJopi`XnSIz*_h2-3#{+x}!n*(4&e4Iq$+O0?{BJ5}PiN
z)#1|va_GK&`%q$v1>{SRWiZPrDG%_a0g&a_uU}`Vt*u3gA{OKd1Y1fbw|qc$49Id&
zJppn6x+7UYk|0Z9mSb}SEL30#4rB<i4g*Co$Z}9Qfvv1y0a=L6Qji!d(V!<lWCtKS
z3OSJ>mlGgIJb3VcVcD`}7&!#P0q8jaTfD-2kIi8q^)OE%mlwE7N_Z~776sTs2Ie4K
zmc!&>jsVdh%eQUYhP8ZPK~@NJJ%~mR31r7`pfz5wr3Yl+<7=qE3nGvOFipq~!50eH
zLIXJjKyeRhCjdhLXX(g-Y%we}U?G4WE$EKnz|)Ka1v}I{yhSq$tY$-Z2&jk#6;L2?
z<ZQ@*1Hj@MDfEb{oLFF$2#7|`b_xm#49HP|&0gdXfqI1W1_?+ba$W{mgj_5mS47x?
z9OMX)8gi>+7MO*anwktCgFrMfsT@5-&Ye5=-^j>_<Pcy4wFh9;F1n$(@;bg^m{dnF
zUcGu1UVmdV7(FzwISN@HC`z53orw+!7DD+PRv^JFK~@iQ3@ibILXgzPDT)JNhT}?X
z$Wa7RgRQhAwR;9G2hf8apF@yKI^=8$atx@{n>uwWNeL07HbnM4zM2s^Dq#JBb?erV
zUJig<O{iu=4tnI`8RlzHumdq!&2koyW{?B$IRe?YAU3Q+0%DVEG0amepz<CTgt&49
zNF3xqkUDaUTm~F~@!h+3DD8My<pk?+g7kqx3Fh<T$B&a0)Hoe*@7_I(5fWH*z-Z)L
za_rbK26D@NY>t38$%rlg2^CxnBmx%X4kof*^uY#LeNWC906sUNbj`3S1X&EToSb}4
zC_q?1<p8=OSOEmG7?wkTy&9?}K6o~SmEFje!Yuv{8Tq1##c&6J`fJ#VT%gZsYBAga
zu(lsa0J+Bl>_{-s1F!%Gm@({u_GIYe0OSS)Ebg&&qiN+Da4rB@46E6IBN%jvdw3cE
y6|JyJhF%E|IW$M-j7BG|MnhmU1V%$(Gz0*=6WM}={=n4$0000<MNUMnLSTYJtkg3A

literal 0
HcmV?d00001

diff --git a/actors/mario/model.inc.c b/actors/mario/model.inc.c
index 191d533..d3a9b17 100644
--- a/actors/mario/model.inc.c
+++ b/actors/mario/model.inc.c
@@ -1,6825 +1,3935 @@
-// Mario
+Lights1 mario_body_v3_lights = gdSPDefLights1(
+	0x0, 0x0, 0x7F,
+	0x0, 0x0, 0xFE, 0x28, 0x28, 0x28);
 
-// 0x04000000 # solid color blue - butt, left thigh, right thigh - all poly types
-static const Lights1 mario_blue_lights_group = gdSPDefLights1(
-    0x00, 0x00, 0x7f,
-    0x00, 0x00, 0xff, 0x28, 0x28, 0x28
-);
+Lights1 mario_cap_v3_lights = gdSPDefLights1(
+	0x7F, 0x0, 0x0,
+	0xFE, 0x0, 0x0, 0x28, 0x28, 0x28);
 
-// 0x04000018 # solid color red - left & right arm, torso (tshirt part), caps - all poly types
-static const Lights1 mario_red_lights_group = gdSPDefLights1(
-    0x7f, 0x00, 0x00,
-    0xff, 0x00, 0x00, 0x28, 0x28, 0x28
-);
+Lights1 mario_face_0___eye_open_v3_lights = gdSPDefLights1(
+	0x7E, 0x60, 0x3C,
+	0xFD, 0xC0, 0x79, 0x28, 0x28, 0x28);
 
-// 0x04000030 # solid color white - metal butt & left thigh - normal left & right hand closed & open (with cap too) and all wings - all poly types
-static const Lights1 mario_white_lights_group = gdSPDefLights1(
-    0x7f, 0x7f, 0x7f,
-    0xff, 0xff, 0xff, 0x28, 0x28, 0x28
-);
+Lights1 mario_mustache_v3_lights = gdSPDefLights1(
+	0x7E, 0x60, 0x3C,
+	0xFD, 0xC0, 0x79, 0x28, 0x28, 0x28);
 
-// 0x04000048 # solid color brown 1 - foot - all poly types
-static const Lights1 mario_brown1_lights_group = gdSPDefLights1(
-    0x39, 0x0e, 0x07,
-    0x72, 0x1c, 0x0e, 0x28, 0x28, 0x28
-);
+Lights1 mario_hair_v3_lights = gdSPDefLights1(
+	0x39, 0x2, 0x0,
+	0x73, 0x5, 0x0, 0x28, 0x28, 0x28);
 
-// 0x04000060 # solid color beige skin - face (cap on and off dls) - all poly types
-static const Lights1 mario_beige_lights_group = gdSPDefLights1(
-    0x7f, 0x60, 0x3c,
-    0xfe, 0xc1, 0x79, 0x28, 0x28, 0x28
-);
+Lights1 mario_sideburns_v3_lights = gdSPDefLights1(
+	0x7E, 0x60, 0x3C,
+	0xFD, 0xC0, 0x79, 0x28, 0x28, 0x28);
 
-// 0x04000078  # solid color brown 2 - hair - all poly types
-static const Lights1 mario_brown2_lights_group = gdSPDefLights1(
-    0x39, 0x03, 0x00,
-    0x73, 0x06, 0x00, 0x28, 0x28, 0x28
-);
+Lights1 mario_face_1___eye_half_v3_lights = gdSPDefLights1(
+	0x7E, 0x60, 0x3C,
+	0xFD, 0xC0, 0x79, 0x28, 0x28, 0x28);
 
-// 0x04000090
-ALIGNED8 static const Texture mario_texture_metal[] = {
-#include "actors/mario/mario_metal.rgba16.inc.c"
+Lights1 mario_face_2___eye_closed_v3_lights = gdSPDefLights1(
+	0x7E, 0x60, 0x3C,
+	0xFD, 0xC0, 0x79, 0x28, 0x28, 0x28);
+
+Lights1 mario_face_7___eye_X_v3_lights = gdSPDefLights1(
+	0x7E, 0x60, 0x3C,
+	0xFD, 0xC0, 0x79, 0x28, 0x28, 0x28);
+
+Lights1 mario_gloves_v3_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 mario_shoes_v3_lights = gdSPDefLights1(
+	0x39, 0xD, 0x7,
+	0x72, 0x1B, 0xE, 0x28, 0x28, 0x28);
+
+Gfx mario_mario_button_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 mario_mario_button_rgba16[] = {
+	#include "actors/mario/mario_button.rgba16.inc.c"
+};
+
+Gfx mario_metal_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 mario_metal_rgba16[] = {
+	#include "actors/mario/mario_metal.rgba16.inc.c"
+};
+
+Gfx mario_mario_cap_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 mario_mario_cap_rgba16[] = {
+	#include "actors/mario/mario_cap.rgba16.inc.c"
+};
+
+Gfx mario_mario_face_1_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 mario_mario_face_1_rgba16[] = {
+	#include "actors/mario/mario_face_1.rgba16.inc.c"
+};
+
+Gfx mario_mario_mustache_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 mario_mario_mustache_rgba16[] = {
+	#include "actors/mario/mario_mustache.rgba16.inc.c"
+};
+
+Gfx mario_mario_sideburn_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 mario_mario_sideburn_rgba16[] = {
+	#include "actors/mario/mario_sideburn.rgba16.inc.c"
+};
+
+Gfx mario_mario_face_2_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 mario_mario_face_2_rgba16[] = {
+	#include "actors/mario/mario_face_2.rgba16.inc.c"
+};
+
+Gfx mario_mario_face_3_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 mario_mario_face_3_rgba16[] = {
+	#include "actors/mario/mario_face_3.rgba16.inc.c"
+};
+
+Gfx mario_mario_face_4_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 mario_mario_face_4_rgba16[] = {
+	#include "actors/mario/mario_face_4.rgba16.inc.c"
+};
+
+Gfx mario_wing_2_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 mario_wing_2_rgba16[] = {
+	#include "actors/mario/wing_2.rgba16.inc.c"
+};
+
+Gfx mario_wing1_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 mario_wing1_rgba16[] = {
+	#include "actors/mario/wing1.rgba16.inc.c"
+};
+
+Vtx mario_000_offset_mesh_vtx_0[76] = {
+	{{{73, 11, 0},0, {-16, -16},{0x7F, 0x5, 0x0, 0xFF}}},
+	{{{55, -61, -36},0, {-16, -16},{0x64, 0xB5, 0xE7, 0xFF}}},
+	{{{44, -10, -92},0, {-16, -16},{0x50, 0xF0, 0x9F, 0xFF}}},
+	{{{55, -61, 36},0, {-16, -16},{0x64, 0xB5, 0x19, 0xFF}}},
+	{{{44, -9, 92},0, {-16, -16},{0x51, 0xF1, 0x60, 0xFF}}},
+	{{{43, 40, 91},0, {-16, -16},{0x45, 0x2C, 0x61, 0xFF}}},
+	{{{52, 70, 38},0, {-16, -16},{0x5C, 0x53, 0x1A, 0xFF}}},
+	{{{52, 70, -39},0, {-16, -16},{0x5C, 0x53, 0xE5, 0xFF}}},
+	{{{43, 40, -91},0, {-16, -16},{0x45, 0x2C, 0x9F, 0xFF}}},
+	{{{6, 33, -95},0, {-16, -16},{0xE3, 0x28, 0x8B, 0xFF}}},
+	{{{8, -8, -99},0, {-16, -16},{0xEB, 0xF4, 0x83, 0xFF}}},
+	{{{36, -51, -79},0, {-16, -16},{0x3A, 0xB7, 0xAA, 0xFF}}},
+	{{{26, -74, -46},0, {-16, -16},{0x19, 0x88, 0xDE, 0xFF}}},
+	{{{26, -74, 45},0, {-16, -16},{0x19, 0x88, 0x20, 0xFF}}},
+	{{{36, -52, 79},0, {-16, -16},{0x3B, 0xB7, 0x55, 0xFF}}},
+	{{{8, -8, 99},0, {-16, -16},{0xEA, 0xF4, 0x7D, 0xFF}}},
+	{{{7, 33, 95},0, {-16, -16},{0xE5, 0x28, 0x76, 0xFF}}},
+	{{{8, -8, 99},0, {-16, -16},{0xEA, 0xF4, 0x7D, 0xFF}}},
+	{{{44, -9, 92},0, {-16, -16},{0x51, 0xF1, 0x60, 0xFF}}},
+	{{{43, 40, 91},0, {-16, -16},{0x45, 0x2C, 0x61, 0xFF}}},
+	{{{27, 72, 63},0, {-16, -16},{0x11, 0x6D, 0x3F, 0xFF}}},
+	{{{52, 70, 38},0, {-16, -16},{0x5C, 0x53, 0x1A, 0xFF}}},
+	{{{22, 82, 26},0, {-16, -16},{0x5, 0x7E, 0xD, 0xFF}}},
+	{{{22, 82, -26},0, {-16, -16},{0x5, 0x7E, 0xF3, 0xFF}}},
+	{{{52, 70, -39},0, {-16, -16},{0x5C, 0x53, 0xE5, 0xFF}}},
+	{{{27, 72, -63},0, {-16, -16},{0x10, 0x6D, 0xC1, 0xFF}}},
+	{{{43, 40, -91},0, {-16, -16},{0x45, 0x2C, 0x9F, 0xFF}}},
+	{{{6, 33, -95},0, {-16, -16},{0xE3, 0x28, 0x8B, 0xFF}}},
+	{{{-5, 59, -72},0, {-16, -16},{0xC5, 0x56, 0xB8, 0xFF}}},
+	{{{-17, 32, -79},0, {-16, -16},{0xA0, 0x21, 0xB4, 0xFF}}},
+	{{{-20, -8, -81},0, {-16, -16},{0x9D, 0xF6, 0xB2, 0xFF}}},
+	{{{8, -8, -99},0, {-16, -16},{0xEB, 0xF4, 0x83, 0xFF}}},
+	{{{-20, -8, -81},0, {-16, -16},{0x9D, 0xF6, 0xB2, 0xFF}}},
+	{{{8, -8, -99},0, {-16, -16},{0xEB, 0xF4, 0x83, 0xFF}}},
+	{{{4, -48, -86},0, {-16, -16},{0xDF, 0xBC, 0x9A, 0xFF}}},
+	{{{36, -51, -79},0, {-16, -16},{0x3A, 0xB7, 0xAA, 0xFF}}},
+	{{{26, -74, -46},0, {-16, -16},{0x19, 0x88, 0xDE, 0xFF}}},
+	{{{-9, -69, -55},0, {-16, -16},{0xCC, 0x99, 0xCB, 0xFF}}},
+	{{{-14, -74, 0},0, {-16, -16},{0xC6, 0x8F, 0x0, 0xFF}}},
+	{{{26, -74, 45},0, {-16, -16},{0x19, 0x88, 0x20, 0xFF}}},
+	{{{-9, -69, 55},0, {-16, -16},{0xCC, 0x98, 0x34, 0xFF}}},
+	{{{4, -49, 86},0, {-16, -16},{0xDF, 0xBB, 0x66, 0xFF}}},
+	{{{36, -52, 79},0, {-16, -16},{0x3B, 0xB7, 0x55, 0xFF}}},
+	{{{8, -8, 99},0, {-16, -16},{0xEA, 0xF4, 0x7D, 0xFF}}},
+	{{{-20, -7, 81},0, {-16, -16},{0x9D, 0xF6, 0x4E, 0xFF}}},
+	{{{7, 33, 95},0, {-16, -16},{0xE5, 0x28, 0x76, 0xFF}}},
+	{{{-18, 32, 79},0, {-16, -16},{0xA1, 0x20, 0x4E, 0xFF}}},
+	{{{-5, 59, 72},0, {-16, -16},{0xC6, 0x57, 0x49, 0xFF}}},
+	{{{27, 72, 63},0, {-16, -16},{0x11, 0x6D, 0x3F, 0xFF}}},
+	{{{-5, 59, 72},0, {-16, -16},{0xC6, 0x57, 0x49, 0xFF}}},
+	{{{7, 33, 95},0, {-16, -16},{0xE5, 0x28, 0x76, 0xFF}}},
+	{{{-9, 73, 34},0, {-16, -16},{0xBA, 0x68, 0x15, 0xFF}}},
+	{{{22, 82, 26},0, {-16, -16},{0x5, 0x7E, 0xD, 0xFF}}},
+	{{{22, 82, -26},0, {-16, -16},{0x5, 0x7E, 0xF3, 0xFF}}},
+	{{{-9, 73, -34},0, {-16, -16},{0xBA, 0x68, 0xEB, 0xFF}}},
+	{{{27, 72, -63},0, {-16, -16},{0x10, 0x6D, 0xC1, 0xFF}}},
+	{{{-5, 59, -72},0, {-16, -16},{0xC5, 0x56, 0xB8, 0xFF}}},
+	{{{-32, 40, -39},0, {-16, -16},{0x89, 0x27, 0xEA, 0xFF}}},
+	{{{-17, 32, -79},0, {-16, -16},{0xA0, 0x21, 0xB4, 0xFF}}},
+	{{{-20, -8, -81},0, {-16, -16},{0x9D, 0xF6, 0xB2, 0xFF}}},
+	{{{-31, -51, -42},0, {-16, -16},{0x8E, 0xD1, 0xE1, 0xFF}}},
+	{{{4, -48, -86},0, {-16, -16},{0xDF, 0xBC, 0x9A, 0xFF}}},
+	{{{-9, -69, -55},0, {-16, -16},{0xCC, 0x99, 0xCB, 0xFF}}},
+	{{{-14, -74, 0},0, {-16, -16},{0xC6, 0x8F, 0x0, 0xFF}}},
+	{{{-31, -51, 42},0, {-16, -16},{0x8E, 0xD1, 0x1F, 0xFF}}},
+	{{{-31, -51, -42},0, {-16, -16},{0x8E, 0xD1, 0xE1, 0xFF}}},
+	{{{-14, -74, 0},0, {-16, -16},{0xC6, 0x8F, 0x0, 0xFF}}},
+	{{{-9, -69, 55},0, {-16, -16},{0xCC, 0x98, 0x34, 0xFF}}},
+	{{{4, -49, 86},0, {-16, -16},{0xDF, 0xBB, 0x66, 0xFF}}},
+	{{{-20, -7, 81},0, {-16, -16},{0x9D, 0xF6, 0x4E, 0xFF}}},
+	{{{-32, 40, 39},0, {-16, -16},{0x89, 0x27, 0x15, 0xFF}}},
+	{{{-18, 32, 79},0, {-16, -16},{0xA1, 0x20, 0x4E, 0xFF}}},
+	{{{-5, 59, 72},0, {-16, -16},{0xC6, 0x57, 0x49, 0xFF}}},
+	{{{-9, 73, 34},0, {-16, -16},{0xBA, 0x68, 0x15, 0xFF}}},
+	{{{-32, 40, -39},0, {-16, -16},{0x89, 0x27, 0xEA, 0xFF}}},
+	{{{-9, 73, -34},0, {-16, -16},{0xBA, 0x68, 0xEB, 0xFF}}},
+};
+
+Gfx mario_000_offset_mesh_tri_0[] = {
+	gsSPVertex(mario_000_offset_mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(3, 0, 4, 0),
+	gsSP1Triangle(5, 4, 0, 0),
+	gsSP1Triangle(0, 6, 5, 0),
+	gsSP1Triangle(6, 0, 7, 0),
+	gsSP1Triangle(8, 7, 0, 0),
+	gsSP1Triangle(0, 2, 8, 0),
+	gsSP1Triangle(9, 8, 2, 0),
+	gsSP1Triangle(2, 10, 9, 0),
+	gsSP1Triangle(10, 2, 11, 0),
+	gsSP1Triangle(1, 11, 2, 0),
+	gsSP1Triangle(1, 12, 11, 0),
+	gsSP1Triangle(12, 1, 3, 0),
+	gsSP1Triangle(3, 13, 12, 0),
+	gsSP1Triangle(14, 13, 3, 0),
+	gsSP1Triangle(4, 14, 3, 0),
+	gsSP1Triangle(15, 14, 4, 0),
+	gsSPVertex(mario_000_offset_mesh_vtx_0 + 16, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(0, 3, 4, 0),
+	gsSP1Triangle(4, 3, 5, 0),
+	gsSP1Triangle(5, 6, 4, 0),
+	gsSP1Triangle(7, 6, 5, 0),
+	gsSP1Triangle(8, 7, 5, 0),
+	gsSP1Triangle(9, 7, 8, 0),
+	gsSP1Triangle(10, 9, 8, 0),
+	gsSP1Triangle(11, 9, 10, 0),
+	gsSP1Triangle(11, 12, 9, 0),
+	gsSP1Triangle(12, 11, 13, 0),
+	gsSP1Triangle(14, 13, 11, 0),
+	gsSP1Triangle(11, 15, 14, 0),
+	gsSPVertex(mario_000_offset_mesh_vtx_0 + 32, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 2, 1, 0),
+	gsSP1Triangle(2, 3, 4, 0),
+	gsSP1Triangle(4, 5, 2, 0),
+	gsSP1Triangle(6, 5, 4, 0),
+	gsSP1Triangle(7, 6, 4, 0),
+	gsSP1Triangle(7, 8, 6, 0),
+	gsSP1Triangle(9, 8, 7, 0),
+	gsSP1Triangle(7, 10, 9, 0),
+	gsSP1Triangle(11, 9, 10, 0),
+	gsSP1Triangle(9, 11, 12, 0),
+	gsSP1Triangle(12, 11, 13, 0),
+	gsSP1Triangle(13, 14, 12, 0),
+	gsSP1Triangle(14, 13, 15, 0),
+	gsSPVertex(mario_000_offset_mesh_vtx_0 + 48, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(0, 4, 3, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(6, 3, 5, 0),
+	gsSP1Triangle(6, 5, 7, 0),
+	gsSP1Triangle(8, 6, 7, 0),
+	gsSP1Triangle(9, 6, 8, 0),
+	gsSP1Triangle(8, 10, 9, 0),
+	gsSP1Triangle(9, 10, 11, 0),
+	gsSP1Triangle(9, 11, 12, 0),
+	gsSP1Triangle(11, 13, 12, 0),
+	gsSP1Triangle(13, 14, 12, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(mario_000_offset_mesh_vtx_0 + 64, 12, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(0, 3, 4, 0),
+	gsSP1Triangle(4, 5, 0, 0),
+	gsSP1Triangle(5, 6, 0, 0),
+	gsSP1Triangle(5, 7, 6, 0),
+	gsSP1Triangle(6, 7, 8, 0),
+	gsSP1Triangle(8, 9, 6, 0),
+	gsSP1Triangle(6, 9, 10, 0),
+	gsSP1Triangle(9, 11, 10, 0),
+	gsSP1Triangle(0, 6, 10, 0),
+	gsSP1Triangle(10, 1, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_000_offset_001_mesh_vtx_0[108] = {
+	{{{9, 89, -40},0, {760, 904},{0xF, 0x78, 0xD8, 0xFF}}},
+	{{{28, 85, -29},0, {974, 496},{0x2D, 0x76, 0xF0, 0xFF}}},
+	{{{47, 75, -34},0, {834, 56},{0x48, 0x66, 0xE6, 0xFF}}},
+	{{{3, 77, -61},0, {248, 956},{0x4, 0x6C, 0xBD, 0xFF}}},
+	{{{17, 66, -75},0, {-74, 626},{0x17, 0x57, 0xA7, 0xFF}}},
+	{{{32, 62, -73},0, {-40, 294},{0x2A, 0x51, 0xA8, 0xFF}}},
+	{{{48, 64, -58},0, {296, -16},{0x46, 0x59, 0xC7, 0xFF}}},
+	{{{47, 75, 35},0, {18, 90},{0x48, 0x66, 0x1A, 0xFF}}},
+	{{{28, 85, 30},0, {-76, 556},{0x2D, 0x76, 0x10, 0xFF}}},
+	{{{9, 89, 41},0, {164, 946},{0x10, 0x78, 0x28, 0xFF}}},
+	{{{3, 77, 62},0, {666, 950},{0x4, 0x6C, 0x42, 0xFF}}},
+	{{{17, 66, 76},0, {950, 574},{0x19, 0x58, 0x59, 0xFF}}},
+	{{{32, 62, 74},0, {886, 236},{0x29, 0x53, 0x57, 0xFF}}},
+	{{{48, 64, 59},0, {532, -16},{0x46, 0x5A, 0x37, 0xFF}}},
+	{{{47, 75, -34},0, {-16, -16},{0x48, 0x66, 0xE6, 0xFF}}},
+	{{{28, 85, 30},0, {-16, -16},{0x2D, 0x76, 0x10, 0xFF}}},
+	{{{47, 75, 35},0, {-16, -16},{0x48, 0x66, 0x1A, 0xFF}}},
+	{{{28, 85, -29},0, {-16, -16},{0x2D, 0x76, 0xF0, 0xFF}}},
+	{{{9, 89, -40},0, {-16, -16},{0xF, 0x78, 0xD8, 0xFF}}},
+	{{{9, 89, 41},0, {-16, -16},{0x10, 0x78, 0x28, 0xFF}}},
+	{{{-15, 88, 35},0, {-16, -16},{0xEC, 0x7A, 0x1D, 0xFF}}},
+	{{{-15, 87, -35},0, {-16, -16},{0xEB, 0x7A, 0xE2, 0xFF}}},
+	{{{3, 77, -61},0, {-16, -16},{0x4, 0x6C, 0xBD, 0xFF}}},
+	{{{-28, 63, -74},0, {-16, -16},{0xCB, 0x48, 0xA6, 0xFF}}},
+	{{{-4, 58, -82},0, {-16, -16},{0xFA, 0x41, 0x93, 0xFF}}},
+	{{{17, 66, -75},0, {-16, -16},{0x17, 0x57, 0xA7, 0xFF}}},
+	{{{12, 33, -90},0, {-16, -16},{0xD, 0x1C, 0x85, 0xFF}}},
+	{{{32, 62, -73},0, {-16, -16},{0x2A, 0x51, 0xA8, 0xFF}}},
+	{{{43, 51, -74},0, {-16, -16},{0x3D, 0x34, 0x9E, 0xFF}}},
+	{{{48, 64, -58},0, {-16, -16},{0x46, 0x59, 0xC7, 0xFF}}},
+	{{{80, 14, -61},0, {-16, -16},{0x61, 0x24, 0xB7, 0xFF}}},
+	{{{43, 51, -74},0, {-16, -16},{0x3D, 0x34, 0x9E, 0xFF}}},
+	{{{48, 64, -58},0, {-16, -16},{0x46, 0x59, 0xC7, 0xFF}}},
+	{{{82, 37, -26},0, {-16, -16},{0x68, 0x45, 0xEB, 0xFF}}},
+	{{{47, 75, -34},0, {-16, -16},{0x48, 0x66, 0xE6, 0xFF}}},
+	{{{100, 1, -23},0, {-16, -16},{0x7C, 0x12, 0xEB, 0xFF}}},
+	{{{84, -29, -62},0, {-16, -16},{0x5E, 0xD7, 0xB5, 0xFF}}},
+	{{{93, -36, -25},0, {-16, -16},{0x6B, 0xBE, 0xF0, 0xFF}}},
+	{{{66, -52, -50},0, {-16, -16},{0x3B, 0x98, 0xD5, 0xFF}}},
+	{{{54, -63, 0},0, {-16, -16},{0x30, 0x8A, 0x0, 0xFF}}},
+	{{{20, -61, -67},0, {-16, -16},{0xA, 0x97, 0xB9, 0xFF}}},
+	{{{8, -74, 0},0, {-16, -16},{0x2, 0x81, 0x0, 0xFF}}},
+	{{{20, -61, 68},0, {-16, -16},{0x9, 0x97, 0x47, 0xFF}}},
+	{{{66, -52, 51},0, {-16, -16},{0x3B, 0x98, 0x2B, 0xFF}}},
+	{{{93, -36, 26},0, {-16, -16},{0x6B, 0xBE, 0x10, 0xFF}}},
+	{{{84, -29, 63},0, {-16, -16},{0x5E, 0xD7, 0x4B, 0xFF}}},
+	{{{84, -29, 63},0, {-16, -16},{0x5E, 0xD7, 0x4B, 0xFF}}},
+	{{{93, -36, 26},0, {-16, -16},{0x6B, 0xBE, 0x10, 0xFF}}},
+	{{{100, 1, 24},0, {-16, -16},{0x7C, 0x12, 0x15, 0xFF}}},
+	{{{80, 14, 62},0, {-16, -16},{0x61, 0x23, 0x4A, 0xFF}}},
+	{{{82, 37, 27},0, {-16, -16},{0x68, 0x45, 0x15, 0xFF}}},
+	{{{48, 64, 59},0, {-16, -16},{0x46, 0x5A, 0x37, 0xFF}}},
+	{{{47, 75, 35},0, {-16, -16},{0x48, 0x66, 0x1A, 0xFF}}},
+	{{{44, 51, 75},0, {-16, -16},{0x3E, 0x37, 0x60, 0xFF}}},
+	{{{32, 62, 74},0, {-16, -16},{0x29, 0x53, 0x57, 0xFF}}},
+	{{{13, 33, 91},0, {-16, -16},{0x10, 0x1C, 0x7B, 0xFF}}},
+	{{{17, 66, 76},0, {-16, -16},{0x19, 0x58, 0x59, 0xFF}}},
+	{{{-4, 58, 84},0, {-16, -16},{0xFB, 0x42, 0x6D, 0xFF}}},
+	{{{3, 77, 62},0, {-16, -16},{0x4, 0x6C, 0x42, 0xFF}}},
+	{{{-28, 63, 75},0, {-16, -16},{0xCB, 0x49, 0x59, 0xFF}}},
+	{{{-15, 88, 35},0, {-16, -16},{0xEC, 0x7A, 0x1D, 0xFF}}},
+	{{{9, 89, 41},0, {-16, -16},{0x10, 0x78, 0x28, 0xFF}}},
+	{{{-15, 88, 35},0, {-16, -16},{0xEC, 0x7A, 0x1D, 0xFF}}},
+	{{{-40, 72, 55},0, {-16, -16},{0xC1, 0x59, 0x40, 0xFF}}},
+	{{{-28, 63, 75},0, {-16, -16},{0xCB, 0x49, 0x59, 0xFF}}},
+	{{{-43, 83, 25},0, {-16, -16},{0xC4, 0x6E, 0x13, 0xFF}}},
+	{{{-43, 83, -24},0, {-16, -16},{0xC5, 0x6F, 0xED, 0xFF}}},
+	{{{-15, 87, -35},0, {-16, -16},{0xEB, 0x7A, 0xE2, 0xFF}}},
+	{{{-40, 72, -54},0, {-16, -16},{0xC1, 0x59, 0xC0, 0xFF}}},
+	{{{-28, 63, -74},0, {-16, -16},{0xCB, 0x48, 0xA6, 0xFF}}},
+	{{{-71, 54, -29},0, {-16, -16},{0x8B, 0x25, 0xDE, 0xFF}}},
+	{{{-27, 26, -89},0, {-16, -16},{0xC4, 0xE, 0x91, 0xFF}}},
+	{{{-4, 58, -82},0, {-16, -16},{0xFA, 0x41, 0x93, 0xFF}}},
+	{{{12, 33, -90},0, {-16, -16},{0xD, 0x1C, 0x85, 0xFF}}},
+	{{{6, -10, -92},0, {-16, -16},{0x0, 0xEA, 0x83, 0xFF}}},
+	{{{-27, -25, -86},0, {-16, -16},{0xC5, 0xDA, 0x96, 0xFF}}},
+	{{{20, -61, -67},0, {-16, -16},{0xA, 0x97, 0xB9, 0xFF}}},
+	{{{-29, -58, -59},0, {-16, -16},{0xC5, 0x9F, 0xC8, 0xFF}}},
+	{{{-29, -58, -59},0, {-16, -16},{0xC5, 0x9F, 0xC8, 0xFF}}},
+	{{{20, -61, -67},0, {-16, -16},{0xA, 0x97, 0xB9, 0xFF}}},
+	{{{8, -74, 0},0, {-16, -16},{0x2, 0x81, 0x0, 0xFF}}},
+	{{{-30, -66, 0},0, {-16, -16},{0xBF, 0x93, 0x0, 0xFF}}},
+	{{{-29, -58, 59},0, {-16, -16},{0xC4, 0x9F, 0x38, 0xFF}}},
+	{{{20, -61, 68},0, {-16, -16},{0x9, 0x97, 0x47, 0xFF}}},
+	{{{-27, -25, 87},0, {-16, -16},{0xC5, 0xD8, 0x69, 0xFF}}},
+	{{{6, -11, 93},0, {-16, -16},{0x0, 0xE9, 0x7D, 0xFF}}},
+	{{{-27, 26, 91},0, {-16, -16},{0xC4, 0xD, 0x6F, 0xFF}}},
+	{{{13, 33, 91},0, {-16, -16},{0x10, 0x1C, 0x7B, 0xFF}}},
+	{{{-4, 58, 84},0, {-16, -16},{0xFB, 0x42, 0x6D, 0xFF}}},
+	{{{-28, 63, 75},0, {-16, -16},{0xCB, 0x49, 0x59, 0xFF}}},
+	{{{-71, 54, 30},0, {-16, -16},{0x8B, 0x25, 0x22, 0xFF}}},
+	{{{-40, 72, 55},0, {-16, -16},{0xC1, 0x59, 0x40, 0xFF}}},
+	{{{-43, 83, 25},0, {-16, -16},{0xC4, 0x6E, 0x13, 0xFF}}},
+	{{{-71, 54, -29},0, {-16, -16},{0x8B, 0x25, 0xDE, 0xFF}}},
+	{{{-43, 83, 25},0, {-16, -16},{0xC4, 0x6E, 0x13, 0xFF}}},
+	{{{-43, 83, -24},0, {-16, -16},{0xC5, 0x6F, 0xED, 0xFF}}},
+	{{{-71, 54, -29},0, {-16, -16},{0x8B, 0x25, 0xDE, 0xFF}}},
+	{{{-40, 72, -54},0, {-16, -16},{0xC1, 0x59, 0xC0, 0xFF}}},
+	{{{-59, -28, 38},0, {-16, -16},{0x8E, 0xD4, 0x22, 0xFF}}},
+	{{{-71, 54, 30},0, {-16, -16},{0x8B, 0x25, 0x22, 0xFF}}},
+	{{{-59, -28, -37},0, {-16, -16},{0x8E, 0xD4, 0xDE, 0xFF}}},
+	{{{-27, 26, -89},0, {-16, -16},{0xC4, 0xE, 0x91, 0xFF}}},
+	{{{-27, -25, -86},0, {-16, -16},{0xC5, 0xDA, 0x96, 0xFF}}},
+	{{{-29, -58, -59},0, {-16, -16},{0xC5, 0x9F, 0xC8, 0xFF}}},
+	{{{-30, -66, 0},0, {-16, -16},{0xBF, 0x93, 0x0, 0xFF}}},
+	{{{-29, -58, 59},0, {-16, -16},{0xC4, 0x9F, 0x38, 0xFF}}},
+	{{{-27, -25, 87},0, {-16, -16},{0xC5, 0xD8, 0x69, 0xFF}}},
+	{{{-27, 26, 91},0, {-16, -16},{0xC4, 0xD, 0x6F, 0xFF}}},
+};
+
+Gfx mario_000_offset_001_mesh_tri_0[] = {
+	gsSPVertex(mario_000_offset_001_mesh_vtx_0 + 0, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 0, 2, 0),
+	gsSP1Triangle(4, 3, 2, 0),
+	gsSP1Triangle(5, 4, 2, 0),
+	gsSP1Triangle(2, 6, 5, 0),
+	gsSP1Triangle(7, 8, 9, 0),
+	gsSP1Triangle(9, 10, 7, 0),
+	gsSP1Triangle(10, 11, 7, 0),
+	gsSP1Triangle(11, 12, 7, 0),
+	gsSP1Triangle(12, 13, 7, 0),
+	gsSPVertex(mario_000_offset_001_mesh_vtx_0 + 14, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(1, 3, 4, 0),
+	gsSP1Triangle(5, 1, 4, 0),
+	gsSP1Triangle(5, 4, 6, 0),
+	gsSP1Triangle(4, 7, 6, 0),
+	gsSP1Triangle(7, 4, 8, 0),
+	gsSP1Triangle(7, 8, 9, 0),
+	gsSP1Triangle(9, 8, 10, 0),
+	gsSP1Triangle(11, 10, 8, 0),
+	gsSP1Triangle(12, 10, 11, 0),
+	gsSP1Triangle(12, 11, 13, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(15, 14, 13, 0),
+	gsSPVertex(mario_000_offset_001_mesh_vtx_0 + 30, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 0, 2, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSP1Triangle(0, 3, 5, 0),
+	gsSP1Triangle(0, 5, 6, 0),
+	gsSP1Triangle(5, 7, 6, 0),
+	gsSP1Triangle(6, 7, 8, 0),
+	gsSP1Triangle(9, 8, 7, 0),
+	gsSP1Triangle(10, 8, 9, 0),
+	gsSP1Triangle(9, 11, 10, 0),
+	gsSP1Triangle(12, 11, 9, 0),
+	gsSP1Triangle(12, 9, 13, 0),
+	gsSP1Triangle(14, 13, 9, 0),
+	gsSP1Triangle(13, 14, 15, 0),
+	gsSPVertex(mario_000_offset_001_mesh_vtx_0 + 46, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 0, 2, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(6, 5, 4, 0),
+	gsSP1Triangle(5, 7, 3, 0),
+	gsSP1Triangle(8, 7, 5, 0),
+	gsSP1Triangle(9, 7, 8, 0),
+	gsSP1Triangle(8, 10, 9, 0),
+	gsSP1Triangle(10, 11, 9, 0),
+	gsSP1Triangle(12, 11, 10, 0),
+	gsSP1Triangle(13, 11, 12, 0),
+	gsSP1Triangle(14, 13, 12, 0),
+	gsSP1Triangle(12, 15, 14, 0),
+	gsSPVertex(mario_000_offset_001_mesh_vtx_0 + 62, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 0, 3, 0),
+	gsSP1Triangle(4, 3, 0, 0),
+	gsSP1Triangle(4, 0, 5, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(7, 6, 5, 0),
+	gsSP1Triangle(6, 7, 8, 0),
+	gsSP1Triangle(7, 9, 8, 0),
+	gsSP1Triangle(9, 7, 10, 0),
+	gsSP1Triangle(9, 10, 11, 0),
+	gsSP1Triangle(12, 9, 11, 0),
+	gsSP1Triangle(13, 9, 12, 0),
+	gsSP1Triangle(14, 13, 12, 0),
+	gsSP1Triangle(14, 15, 13, 0),
+	gsSPVertex(mario_000_offset_001_mesh_vtx_0 + 78, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(4, 3, 2, 0),
+	gsSP1Triangle(2, 5, 4, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(5, 7, 6, 0),
+	gsSP1Triangle(7, 8, 6, 0),
+	gsSP1Triangle(8, 7, 9, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(11, 8, 10, 0),
+	gsSP1Triangle(12, 8, 11, 0),
+	gsSP1Triangle(12, 11, 13, 0),
+	gsSP1Triangle(13, 14, 12, 0),
+	gsSP1Triangle(14, 15, 12, 0),
+	gsSPVertex(mario_000_offset_001_mesh_vtx_0 + 94, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 1, 3, 0),
+	gsSP1Triangle(2, 4, 5, 0),
+	gsSP1Triangle(2, 6, 4, 0),
+	gsSP1Triangle(6, 2, 7, 0),
+	gsSP1Triangle(7, 8, 6, 0),
+	gsSP1Triangle(8, 9, 6, 0),
+	gsSP1Triangle(10, 6, 9, 0),
+	gsSP1Triangle(4, 6, 10, 0),
+	gsSP1Triangle(10, 11, 4, 0),
+	gsSP1Triangle(11, 12, 4, 0),
+	gsSP1Triangle(4, 12, 13, 0),
+	gsSP1Triangle(13, 5, 4, 0),
+	gsSPEndDisplayList(),
+};Vtx mario_000_offset_001_mesh_vtx_1[31] = {
+	{{{47, 75, -34},0, {-16, -16},{0x48, 0x66, 0xE6, 0xFF}}},
+	{{{47, 75, 35},0, {-16, -16},{0x48, 0x66, 0x1A, 0xFF}}},
+	{{{82, 37, 27},0, {-16, -16},{0x68, 0x45, 0x15, 0xFF}}},
+	{{{82, 37, -26},0, {-16, -16},{0x68, 0x45, 0xEB, 0xFF}}},
+	{{{100, 1, 24},0, {-16, -16},{0x7C, 0x12, 0x15, 0xFF}}},
+	{{{100, 1, -23},0, {-16, -16},{0x7C, 0x12, 0xEB, 0xFF}}},
+	{{{93, -36, 26},0, {-16, -16},{0x6B, 0xBE, 0x10, 0xFF}}},
+	{{{93, -36, -25},0, {-16, -16},{0x6B, 0xBE, 0xF0, 0xFF}}},
+	{{{54, -63, 0},0, {-16, -16},{0x30, 0x8A, 0x0, 0xFF}}},
+	{{{20, -61, 68},0, {-16, -16},{0x9, 0x97, 0x47, 0xFF}}},
+	{{{46, -34, 84},0, {-16, -16},{0x24, 0xC9, 0x6D, 0xFF}}},
+	{{{6, -11, 93},0, {-16, -16},{0x0, 0xE9, 0x7D, 0xFF}}},
+	{{{66, -52, 51},0, {-16, -16},{0x3B, 0x98, 0x2B, 0xFF}}},
+	{{{84, -29, 63},0, {-16, -16},{0x5E, 0xD7, 0x4B, 0xFF}}},
+	{{{47, 3, 89},0, {-16, -16},{0x2F, 0x8, 0x76, 0xFF}}},
+	{{{80, 14, 62},0, {-16, -16},{0x61, 0x23, 0x4A, 0xFF}}},
+	{{{44, 51, 75},0, {-16, -16},{0x3E, 0x37, 0x60, 0xFF}}},
+	{{{47, 3, 89},0, {-16, -16},{0x2F, 0x8, 0x76, 0xFF}}},
+	{{{80, 14, 62},0, {-16, -16},{0x61, 0x23, 0x4A, 0xFF}}},
+	{{{13, 33, 91},0, {-16, -16},{0x10, 0x1C, 0x7B, 0xFF}}},
+	{{{6, -11, 93},0, {-16, -16},{0x0, 0xE9, 0x7D, 0xFF}}},
+	{{{46, -34, 84},0, {-16, -16},{0x24, 0xC9, 0x6D, 0xFF}}},
+	{{{6, -10, -92},0, {-16, -16},{0x0, 0xEA, 0x83, 0xFF}}},
+	{{{12, 33, -90},0, {-16, -16},{0xD, 0x1C, 0x85, 0xFF}}},
+	{{{47, 3, -88},0, {-16, -16},{0x2F, 0x9, 0x8A, 0xFF}}},
+	{{{43, 51, -74},0, {-16, -16},{0x3D, 0x34, 0x9E, 0xFF}}},
+	{{{80, 14, -61},0, {-16, -16},{0x61, 0x24, 0xB7, 0xFF}}},
+	{{{84, -29, -62},0, {-16, -16},{0x5E, 0xD7, 0xB5, 0xFF}}},
+	{{{46, -34, -83},0, {-16, -16},{0x24, 0xC9, 0x93, 0xFF}}},
+	{{{66, -52, -50},0, {-16, -16},{0x3B, 0x98, 0xD5, 0xFF}}},
+	{{{20, -61, -67},0, {-16, -16},{0xA, 0x97, 0xB9, 0xFF}}},
+};
+
+Gfx mario_000_offset_001_mesh_tri_1[] = {
+	gsSPVertex(mario_000_offset_001_mesh_vtx_1 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 3, 2, 0),
+	gsSP1Triangle(4, 5, 3, 0),
+	gsSP1Triangle(5, 4, 6, 0),
+	gsSP1Triangle(5, 6, 7, 0),
+	gsSP1Triangle(8, 7, 6, 0),
+	gsSP1Triangle(9, 10, 11, 0),
+	gsSP1Triangle(9, 12, 10, 0),
+	gsSP1Triangle(13, 10, 12, 0),
+	gsSP1Triangle(14, 10, 13, 0),
+	gsSP1Triangle(15, 14, 13, 0),
+	gsSPVertex(mario_000_offset_001_mesh_vtx_1 + 16, 15, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(3, 4, 1, 0),
+	gsSP1Triangle(5, 1, 4, 0),
+	gsSP1Triangle(6, 7, 8, 0),
+	gsSP1Triangle(8, 7, 9, 0),
+	gsSP1Triangle(10, 8, 9, 0),
+	gsSP1Triangle(11, 8, 10, 0),
+	gsSP1Triangle(11, 12, 8, 0),
+	gsSP1Triangle(13, 12, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(6, 12, 14, 0),
+	gsSP1Triangle(6, 8, 12, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_000_displaylist_mesh_vtx_0[99] = {
+	{{{97, 103, 25},0, {708, 942},{0x4E, 0x42, 0x4C, 0xFF}}},
+	{{{104, 87, 70},0, {1122, 848},{0x2B, 0x63, 0x44, 0xFF}}},
+	{{{144, 83, 67},0, {1092, 412},{0x20, 0x5B, 0x52, 0xFF}}},
+	{{{175, 91, 39},0, {826, 96},{0xA5, 0x57, 0xB, 0xFF}}},
+	{{{153, 33, 95},0, {1346, 280},{0x1, 0x46, 0x6A, 0xFF}}},
+	{{{145, 101, 0},0, {464, 430},{0x17, 0x7D, 0x0, 0xFF}}},
+	{{{175, 91, -38},0, {90, 114},{0xA5, 0x57, 0xF5, 0xFF}}},
+	{{{97, 103, -24},0, {240, 954},{0x4D, 0x42, 0xB4, 0xFF}}},
+	{{{144, 83, -66},0, {-162, 444},{0x20, 0x5B, 0xAE, 0xFF}}},
+	{{{153, 33, -94},0, {-420, 326},{0x0, 0x46, 0x96, 0xFF}}},
+	{{{104, 87, -69},0, {-176, 882},{0x2B, 0x63, 0xBC, 0xFF}}},
+	{{{92, 88, 84},0, {-16, -16},{0x2B, 0x4E, 0x5A, 0xFF}}},
+	{{{104, 87, 70},0, {-16, -16},{0x2B, 0x63, 0x44, 0xFF}}},
+	{{{97, 103, 25},0, {-16, -16},{0x4E, 0x42, 0x4C, 0xFF}}},
+	{{{96, 49, 94},0, {-16, -16},{0xC, 0x29, 0x78, 0xFF}}},
+	{{{44, 44, 97},0, {-16, -16},{0xD1, 0x1E, 0x72, 0xFF}}},
+	{{{144, 83, 67},0, {-16, -16},{0x20, 0x5B, 0x52, 0xFF}}},
+	{{{104, 87, 70},0, {-16, -16},{0x2B, 0x63, 0x44, 0xFF}}},
+	{{{96, 49, 94},0, {-16, -16},{0xC, 0x29, 0x78, 0xFF}}},
+	{{{153, 33, 95},0, {-16, -16},{0x1, 0x46, 0x6A, 0xFF}}},
+	{{{97, 103, -24},0, {240, 954},{0x4D, 0x42, 0xB4, 0xFF}}},
+	{{{108, 105, 0},0, {472, 838},{0x65, 0x4D, 0xFF, 0xFF}}},
+	{{{145, 101, 0},0, {464, 430},{0x17, 0x7D, 0x0, 0xFF}}},
+	{{{97, 103, 25},0, {708, 942},{0x4E, 0x42, 0x4C, 0xFF}}},
+	{{{92, 88, -83},0, {-16, -16},{0x2B, 0x4E, 0xA6, 0xFF}}},
+	{{{97, 103, -24},0, {-16, -16},{0x4D, 0x42, 0xB4, 0xFF}}},
+	{{{104, 87, -69},0, {-16, -16},{0x2B, 0x63, 0xBC, 0xFF}}},
+	{{{96, 49, -93},0, {-16, -16},{0xC, 0x28, 0x88, 0xFF}}},
+	{{{144, 83, -66},0, {-16, -16},{0x20, 0x5B, 0xAE, 0xFF}}},
+	{{{153, 33, -94},0, {-16, -16},{0x0, 0x46, 0x96, 0xFF}}},
+	{{{44, 44, -96},0, {-16, -16},{0xD1, 0x1E, 0x8E, 0xFF}}},
+	{{{44, 44, 97},0, {-16, -16},{0xD1, 0x1E, 0x72, 0xFF}}},
+	{{{3, 54, 52},0, {-16, -16},{0x8F, 0x1A, 0x35, 0xFF}}},
+	{{{42, 0, 103},0, {-16, -16},{0xB8, 0xFF, 0x68, 0xFF}}},
+	{{{17, -52, 47},0, {-16, -16},{0x86, 0xFC, 0x22, 0xFF}}},
+	{{{-7, 62, 0},0, {-16, -16},{0x85, 0x21, 0x0, 0xFF}}},
+	{{{17, -52, -46},0, {-16, -16},{0x86, 0xFC, 0xDE, 0xFF}}},
+	{{{3, 54, -51},0, {-16, -16},{0x8F, 0x1A, 0xCB, 0xFF}}},
+	{{{42, 0, -102},0, {-16, -16},{0xB8, 0xFF, 0x98, 0xFF}}},
+	{{{44, 44, -96},0, {-16, -16},{0xD1, 0x1E, 0x8E, 0xFF}}},
+	{{{56, -45, -76},0, {-16, -16},{0xCB, 0xC7, 0x9C, 0xFF}}},
+	{{{64, -25, -134},0, {-16, -16},{0xD6, 0x6, 0x88, 0xFF}}},
+	{{{85, -23, -110},0, {-16, -16},{0x7, 0x5A, 0xA7, 0xFF}}},
+	{{{102, -33, -134},0, {-16, -16},{0x33, 0xED, 0x8D, 0xFF}}},
+	{{{120, -12, -109},0, {-16, -16},{0xEE, 0x20, 0x86, 0xFF}}},
+	{{{91, -54, -85},0, {-16, -16},{0xC7, 0xC0, 0xA3, 0xFF}}},
+	{{{97, 103, 25},0, {-16, -16},{0x4E, 0x42, 0x4C, 0xFF}}},
+	{{{108, 105, 0},0, {-16, -16},{0x65, 0x4D, 0xFF, 0xFF}}},
+	{{{117, 128, 0},0, {-16, -16},{0x7C, 0xE4, 0xFF, 0xFF}}},
+	{{{97, 103, -24},0, {-16, -16},{0x4D, 0x42, 0xB4, 0xFF}}},
+	{{{102, 129, -40},0, {-16, -16},{0x4C, 0xDF, 0xA0, 0xFF}}},
+	{{{77, 108, -33},0, {-16, -16},{0x18, 0x2D, 0x8C, 0xFF}}},
+	{{{75, 130, -45},0, {-16, -16},{0xFE, 0xE1, 0x85, 0xFF}}},
+	{{{47, 131, -40},0, {-16, -16},{0xAF, 0xE9, 0xA1, 0xFF}}},
+	{{{52, 111, -30},0, {-16, -16},{0xB4, 0x37, 0xAB, 0xFF}}},
+	{{{32, 132, 0},0, {-16, -16},{0x83, 0xEC, 0xFE, 0xFF}}},
+	{{{41, 109, 0},0, {-16, -16},{0x8D, 0x36, 0xFF, 0xFF}}},
+	{{{52, 111, 31},0, {-16, -16},{0xB4, 0x37, 0x55, 0xFF}}},
+	{{{47, 131, 41},0, {-16, -16},{0xB0, 0xE7, 0x60, 0xFF}}},
+	{{{77, 108, 34},0, {-16, -16},{0x18, 0x2D, 0x74, 0xFF}}},
+	{{{75, 130, 46},0, {-16, -16},{0xFE, 0xE1, 0x7B, 0xFF}}},
+	{{{102, 129, 41},0, {-16, -16},{0x4C, 0xDF, 0x60, 0xFF}}},
+	{{{104, 162, 41},0, {-16, -16},{0x49, 0x39, 0x57, 0xFF}}},
+	{{{102, 129, 41},0, {-16, -16},{0x4C, 0xDF, 0x60, 0xFF}}},
+	{{{117, 128, 0},0, {-16, -16},{0x7C, 0xE4, 0xFF, 0xFF}}},
+	{{{119, 161, 0},0, {-16, -16},{0x78, 0x29, 0x0, 0xFF}}},
+	{{{102, 129, -40},0, {-16, -16},{0x4C, 0xDF, 0xA0, 0xFF}}},
+	{{{104, 162, -40},0, {-16, -16},{0x48, 0x38, 0xA8, 0xFF}}},
+	{{{75, 130, -45},0, {-16, -16},{0xFE, 0xE1, 0x85, 0xFF}}},
+	{{{78, 163, -45},0, {-16, -16},{0x3, 0x43, 0x94, 0xFF}}},
+	{{{52, 164, -40},0, {-16, -16},{0xC2, 0x41, 0xA7, 0xFF}}},
+	{{{47, 131, -40},0, {-16, -16},{0xAF, 0xE9, 0xA1, 0xFF}}},
+	{{{32, 132, 0},0, {-16, -16},{0x83, 0xEC, 0xFE, 0xFF}}},
+	{{{33, 165, 0},0, {-16, -16},{0x90, 0x3C, 0xFE, 0xFF}}},
+	{{{47, 131, 41},0, {-16, -16},{0xB0, 0xE7, 0x60, 0xFF}}},
+	{{{52, 164, 41},0, {-16, -16},{0xC3, 0x43, 0x59, 0xFF}}},
+	{{{75, 130, 46},0, {-16, -16},{0xFE, 0xE1, 0x7B, 0xFF}}},
+	{{{78, 163, 46},0, {-16, -16},{0x3, 0x44, 0x6B, 0xFF}}},
+	{{{104, 162, 41},0, {-16, -16},{0x49, 0x39, 0x57, 0xFF}}},
+	{{{101, 179, 0},0, {-16, -16},{0x30, 0x76, 0x0, 0xFF}}},
+	{{{78, 163, 46},0, {-16, -16},{0x3, 0x44, 0x6B, 0xFF}}},
+	{{{119, 161, 0},0, {-16, -16},{0x78, 0x29, 0x0, 0xFF}}},
+	{{{104, 162, -40},0, {-16, -16},{0x48, 0x38, 0xA8, 0xFF}}},
+	{{{78, 163, -45},0, {-16, -16},{0x3, 0x43, 0x94, 0xFF}}},
+	{{{60, 181, 0},0, {-16, -16},{0xE5, 0x7C, 0x0, 0xFF}}},
+	{{{52, 164, -40},0, {-16, -16},{0xC2, 0x41, 0xA7, 0xFF}}},
+	{{{33, 165, 0},0, {-16, -16},{0x90, 0x3C, 0xFE, 0xFF}}},
+	{{{52, 164, 41},0, {-16, -16},{0xC3, 0x43, 0x59, 0xFF}}},
+	{{{42, 0, 103},0, {-16, -16},{0xB8, 0xFF, 0x68, 0xFF}}},
+	{{{64, -25, 135},0, {-16, -16},{0xD6, 0x6, 0x78, 0xFF}}},
+	{{{85, -23, 111},0, {-16, -16},{0x5, 0x5A, 0x59, 0xFF}}},
+	{{{56, -45, 77},0, {-16, -16},{0xCB, 0xC7, 0x64, 0xFF}}},
+	{{{17, -52, 47},0, {-16, -16},{0x86, 0xFC, 0x22, 0xFF}}},
+	{{{91, -54, 86},0, {-16, -16},{0xC7, 0xC0, 0x5D, 0xFF}}},
+	{{{64, -25, 135},0, {-16, -16},{0xD6, 0x6, 0x78, 0xFF}}},
+	{{{91, -54, 86},0, {-16, -16},{0xC7, 0xC0, 0x5D, 0xFF}}},
+	{{{102, -33, 135},0, {-16, -16},{0x32, 0xEB, 0x73, 0xFF}}},
+	{{{120, -11, 111},0, {-16, -16},{0xED, 0x20, 0x7A, 0xFF}}},
+	{{{85, -23, 111},0, {-16, -16},{0x5, 0x5A, 0x59, 0xFF}}},
+};
+
+Gfx mario_000_displaylist_mesh_tri_0[] = {
+	gsSPVertex(mario_000_displaylist_mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(4, 3, 2, 0),
+	gsSP1Triangle(3, 5, 0, 0),
+	gsSP1Triangle(6, 5, 3, 0),
+	gsSP1Triangle(7, 5, 6, 0),
+	gsSP1Triangle(7, 6, 8, 0),
+	gsSP1Triangle(8, 6, 9, 0),
+	gsSP1Triangle(10, 7, 8, 0),
+	gsSP1Triangle(11, 12, 13, 0),
+	gsSP1Triangle(12, 11, 14, 0),
+	gsSP1Triangle(15, 14, 11, 0),
+	gsSPVertex(mario_000_displaylist_mesh_vtx_0 + 16, 15, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(6, 5, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(11, 8, 10, 0),
+	gsSP1Triangle(11, 10, 12, 0),
+	gsSP1Triangle(12, 13, 11, 0),
+	gsSP1Triangle(8, 11, 14, 0),
+	gsSPVertex(mario_000_displaylist_mesh_vtx_0 + 31, 15, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 3, 2, 0),
+	gsSP1Triangle(3, 1, 4, 0),
+	gsSP1Triangle(5, 3, 4, 0),
+	gsSP1Triangle(5, 4, 6, 0),
+	gsSP1Triangle(7, 5, 6, 0),
+	gsSP1Triangle(7, 6, 8, 0),
+	gsSP1Triangle(7, 9, 5, 0),
+	gsSP1Triangle(7, 10, 9, 0),
+	gsSP1Triangle(11, 10, 7, 0),
+	gsSP1Triangle(11, 12, 10, 0),
+	gsSP1Triangle(12, 11, 13, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(10, 12, 14, 0),
+	gsSP1Triangle(9, 10, 14, 0),
+	gsSPVertex(mario_000_displaylist_mesh_vtx_0 + 46, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 1, 3, 0),
+	gsSP1Triangle(3, 4, 2, 0),
+	gsSP1Triangle(4, 3, 5, 0),
+	gsSP1Triangle(6, 4, 5, 0),
+	gsSP1Triangle(7, 6, 5, 0),
+	gsSP1Triangle(5, 8, 7, 0),
+	gsSP1Triangle(9, 7, 8, 0),
+	gsSP1Triangle(8, 10, 9, 0),
+	gsSP1Triangle(9, 10, 11, 0),
+	gsSP1Triangle(11, 12, 9, 0),
+	gsSP1Triangle(12, 11, 13, 0),
+	gsSP1Triangle(14, 12, 13, 0),
+	gsSP1Triangle(15, 14, 13, 0),
+	gsSP1Triangle(13, 0, 15, 0),
+	gsSP1Triangle(2, 15, 0, 0),
+	gsSPVertex(mario_000_displaylist_mesh_vtx_0 + 62, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 0, 2, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSP1Triangle(4, 5, 3, 0),
+	gsSP1Triangle(6, 5, 4, 0),
+	gsSP1Triangle(6, 7, 5, 0),
+	gsSP1Triangle(8, 7, 6, 0),
+	gsSP1Triangle(9, 8, 6, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(11, 8, 10, 0),
+	gsSP1Triangle(10, 12, 11, 0),
+	gsSP1Triangle(12, 13, 11, 0),
+	gsSP1Triangle(13, 12, 14, 0),
+	gsSP1Triangle(13, 14, 15, 0),
+	gsSP1Triangle(15, 14, 0, 0),
+	gsSP1Triangle(14, 1, 0, 0),
+	gsSPVertex(mario_000_displaylist_mesh_vtx_0 + 78, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 0, 3, 0),
+	gsSP1Triangle(1, 3, 4, 0),
+	gsSP1Triangle(1, 4, 5, 0),
+	gsSP1Triangle(5, 6, 1, 0),
+	gsSP1Triangle(6, 5, 7, 0),
+	gsSP1Triangle(8, 6, 7, 0),
+	gsSP1Triangle(8, 9, 6, 0),
+	gsSP1Triangle(9, 2, 6, 0),
+	gsSP1Triangle(6, 2, 1, 0),
+	gsSP1Triangle(10, 11, 12, 0),
+	gsSP1Triangle(11, 10, 13, 0),
+	gsSP1Triangle(14, 13, 10, 0),
+	gsSP1Triangle(11, 13, 15, 0),
+	gsSPVertex(mario_000_displaylist_mesh_vtx_0 + 94, 5, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 3, 2, 0),
+	gsSP1Triangle(3, 4, 2, 0),
+	gsSP1Triangle(0, 2, 4, 0),
+	gsSPEndDisplayList(),
+};Vtx mario_000_displaylist_mesh_vtx_1[27] = {
+	{{{92, 88, -83},0, {906, -20},{0x2B, 0x4E, 0xA6, 0xFF}}},
+	{{{77, 108, -33},0, {346, 328},{0x18, 0x2D, 0x8C, 0xFF}}},
+	{{{97, 103, -24},0, {258, 84},{0x4D, 0x42, 0xB4, 0xFF}}},
+	{{{48, 94, -75},0, {840, 592},{0xD5, 0x59, 0xB0, 0xFF}}},
+	{{{44, 44, -96},0, {1234, 502},{0xD1, 0x1E, 0x8E, 0xFF}}},
+	{{{3, 54, -51},0, {790, 1146},{0x8F, 0x1A, 0xCB, 0xFF}}},
+	{{{27, 100, -29},0, {378, 982},{0xB0, 0x60, 0xE6, 0xFF}}},
+	{{{52, 111, -30},0, {324, 668},{0xB4, 0x37, 0xAB, 0xFF}}},
+	{{{41, 109, 0},0, {34, 884},{0x8D, 0x36, 0xFF, 0xFF}}},
+	{{{27, 100, 30},0, {426, 966},{0xB0, 0x60, 0x1A, 0xFF}}},
+	{{{52, 111, 31},0, {338, 674},{0xB4, 0x37, 0x55, 0xFF}}},
+	{{{41, 109, 0},0, {54, 908},{0x8D, 0x36, 0xFF, 0xFF}}},
+	{{{48, 94, 76},0, {872, 548},{0xD5, 0x59, 0x50, 0xFF}}},
+	{{{3, 54, 52},0, {876, 1074},{0x8F, 0x1A, 0x35, 0xFF}}},
+	{{{44, 44, 97},0, {1280, 422},{0xD1, 0x1E, 0x72, 0xFF}}},
+	{{{92, 88, 84},0, {882, -34},{0x2B, 0x4E, 0x5A, 0xFF}}},
+	{{{92, 88, 84},0, {882, -34},{0x2B, 0x4E, 0x5A, 0xFF}}},
+	{{{77, 108, 34},0, {326, 352},{0x18, 0x2D, 0x74, 0xFF}}},
+	{{{48, 94, 76},0, {872, 548},{0xD5, 0x59, 0x50, 0xFF}}},
+	{{{97, 103, 25},0, {208, 130},{0x4E, 0x42, 0x4C, 0xFF}}},
+	{{{52, 111, 31},0, {338, 674},{0xB4, 0x37, 0x55, 0xFF}}},
+	{{{27, 100, -29},0, {-16, -16},{0xB0, 0x60, 0xE6, 0xFF}}},
+	{{{3, 54, -51},0, {-16, -16},{0x8F, 0x1A, 0xCB, 0xFF}}},
+	{{{-7, 62, 0},0, {-16, -16},{0x85, 0x21, 0x0, 0xFF}}},
+	{{{27, 100, 30},0, {-16, -16},{0xB0, 0x60, 0x1A, 0xFF}}},
+	{{{3, 54, 52},0, {-16, -16},{0x8F, 0x1A, 0x35, 0xFF}}},
+	{{{41, 109, 0},0, {-16, -16},{0x8D, 0x36, 0xFF, 0xFF}}},
+};
+
+Gfx mario_000_displaylist_mesh_tri_1[] = {
+	gsSPVertex(mario_000_displaylist_mesh_vtx_1 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(0, 4, 3, 0),
+	gsSP1Triangle(5, 3, 4, 0),
+	gsSP1Triangle(6, 3, 5, 0),
+	gsSP1Triangle(7, 3, 6, 0),
+	gsSP1Triangle(8, 7, 6, 0),
+	gsSP1Triangle(3, 7, 1, 0),
+	gsSP1Triangle(9, 10, 11, 0),
+	gsSP1Triangle(9, 12, 10, 0),
+	gsSP1Triangle(13, 12, 9, 0),
+	gsSP1Triangle(14, 12, 13, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(mario_000_displaylist_mesh_vtx_1 + 16, 11, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 0, 3, 0),
+	gsSP1Triangle(1, 4, 2, 0),
+	gsSP1Triangle(5, 6, 7, 0),
+	gsSP1Triangle(8, 5, 7, 0),
+	gsSP1Triangle(7, 9, 8, 0),
+	gsSP1Triangle(10, 5, 8, 0),
+	gsSPEndDisplayList(),
+};Vtx mario_000_displaylist_mesh_vtx_2[28] = {
+	{{{17, -52, -46},0, {-16, -16},{0x86, 0xFC, 0xDE, 0xFF}}},
+	{{{31, -84, 0},0, {-16, -16},{0x9E, 0xB0, 0x1, 0xFF}}},
+	{{{17, -52, 47},0, {-16, -16},{0x86, 0xFC, 0x22, 0xFF}}},
+	{{{9, -88, -58},0, {-16, -16},{0x84, 0xEC, 0xEA, 0xFF}}},
+	{{{31, -85, -86},0, {-16, -16},{0xE4, 0xFA, 0x84, 0xFF}}},
+	{{{56, -45, -76},0, {-16, -16},{0xCB, 0xC7, 0x9C, 0xFF}}},
+	{{{58, -114, -59},0, {-16, -16},{0x57, 0xAA, 0xDF, 0xFF}}},
+	{{{64, -103, -51},0, {-16, -16},{0xF2, 0x95, 0xBD, 0xFF}}},
+	{{{91, -54, -85},0, {-16, -16},{0xC7, 0xC0, 0xA3, 0xFF}}},
+	{{{36, -116, -35},0, {-16, -16},{0xEE, 0x92, 0x3D, 0xFF}}},
+	{{{35, -120, -67},0, {-16, -16},{0xE6, 0x92, 0xC6, 0xFF}}},
+	{{{64, -103, 52},0, {-16, -16},{0xF2, 0x95, 0x43, 0xFF}}},
+	{{{36, -116, 36},0, {-16, -16},{0xEE, 0x92, 0xC3, 0xFF}}},
+	{{{58, -114, 60},0, {-16, -16},{0x57, 0xAA, 0x21, 0xFF}}},
+	{{{56, -45, 77},0, {-16, -16},{0xCB, 0xC7, 0x64, 0xFF}}},
+	{{{91, -54, 86},0, {-16, -16},{0xC7, 0xC0, 0x5D, 0xFF}}},
+	{{{56, -45, 77},0, {-16, -16},{0xCB, 0xC7, 0x64, 0xFF}}},
+	{{{31, -85, 87},0, {-16, -16},{0xE4, 0xFA, 0x7C, 0xFF}}},
+	{{{58, -114, 60},0, {-16, -16},{0x57, 0xAA, 0x21, 0xFF}}},
+	{{{17, -52, 47},0, {-16, -16},{0x86, 0xFC, 0x22, 0xFF}}},
+	{{{9, -88, 59},0, {-16, -16},{0x84, 0xEC, 0x16, 0xFF}}},
+	{{{31, -84, 0},0, {-16, -16},{0x9E, 0xB0, 0x1, 0xFF}}},
+	{{{36, -116, 36},0, {-16, -16},{0xEE, 0x92, 0xC3, 0xFF}}},
+	{{{35, -120, 68},0, {-16, -16},{0xE6, 0x92, 0x3A, 0xFF}}},
+	{{{35, -120, -67},0, {-16, -16},{0xE6, 0x92, 0xC6, 0xFF}}},
+	{{{31, -85, -86},0, {-16, -16},{0xE4, 0xFA, 0x84, 0xFF}}},
+	{{{58, -114, -59},0, {-16, -16},{0x57, 0xAA, 0xDF, 0xFF}}},
+	{{{9, -88, -58},0, {-16, -16},{0x84, 0xEC, 0xEA, 0xFF}}},
+};
+
+Gfx mario_000_displaylist_mesh_tri_2[] = {
+	gsSPVertex(mario_000_displaylist_mesh_vtx_2 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 0, 3, 0),
+	gsSP1Triangle(4, 3, 0, 0),
+	gsSP1Triangle(0, 5, 4, 0),
+	gsSP1Triangle(6, 4, 5, 0),
+	gsSP1Triangle(5, 7, 6, 0),
+	gsSP1Triangle(5, 8, 7, 0),
+	gsSP1Triangle(9, 6, 7, 0),
+	gsSP1Triangle(9, 10, 6, 0),
+	gsSP1Triangle(3, 10, 9, 0),
+	gsSP1Triangle(3, 9, 1, 0),
+	gsSP1Triangle(1, 9, 7, 0),
+	gsSP1Triangle(1, 7, 11, 0),
+	gsSP1Triangle(1, 11, 12, 0),
+	gsSP1Triangle(13, 12, 11, 0),
+	gsSP1Triangle(13, 11, 14, 0),
+	gsSP1Triangle(11, 15, 14, 0),
+	gsSPVertex(mario_000_displaylist_mesh_vtx_2 + 16, 12, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 0, 3, 0),
+	gsSP1Triangle(3, 4, 1, 0),
+	gsSP1Triangle(4, 3, 5, 0),
+	gsSP1Triangle(5, 6, 4, 0),
+	gsSP1Triangle(6, 7, 4, 0),
+	gsSP1Triangle(2, 7, 6, 0),
+	gsSP1Triangle(1, 7, 2, 0),
+	gsSP1Triangle(4, 7, 1, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(9, 8, 11, 0),
+	gsSPEndDisplayList(),
+};Vtx mario_000_displaylist_mesh_vtx_3[12] = {
+	{{{96, 49, 94},0, {-90, 710},{0xC, 0x29, 0x78, 0xFF}}},
+	{{{44, 44, 97},0, {180, 1350},{0xD1, 0x1E, 0x72, 0xFF}}},
+	{{{42, 0, 103},0, {952, 1176},{0xB8, 0xFF, 0x68, 0xFF}}},
+	{{{85, -23, 111},0, {1222, 502},{0x5, 0x5A, 0x59, 0xFF}}},
+	{{{120, -11, 111},0, {906, 106},{0xED, 0x20, 0x7A, 0xFF}}},
+	{{{153, 33, 95},0, {6, -84},{0x1, 0x46, 0x6A, 0xFF}}},
+	{{{120, -12, -109},0, {900, 168},{0xEE, 0x20, 0x86, 0xFF}}},
+	{{{96, 49, -93},0, {-86, 684},{0xC, 0x28, 0x88, 0xFF}}},
+	{{{153, 33, -94},0, {74, -74},{0x0, 0x46, 0x96, 0xFF}}},
+	{{{85, -23, -110},0, {1134, 566},{0x7, 0x5A, 0xA7, 0xFF}}},
+	{{{42, 0, -102},0, {826, 1194},{0xB8, 0xFF, 0x98, 0xFF}}},
+	{{{44, 44, -96},0, {102, 1318},{0xD1, 0x1E, 0x8E, 0xFF}}},
+};
+
+Gfx mario_000_displaylist_mesh_tri_3[] = {
+	gsSPVertex(mario_000_displaylist_mesh_vtx_3 + 0, 12, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(3, 4, 0, 0),
+	gsSP1Triangle(5, 0, 4, 0),
+	gsSP1Triangle(6, 7, 8, 0),
+	gsSP1Triangle(9, 7, 6, 0),
+	gsSP1Triangle(7, 9, 10, 0),
+	gsSP1Triangle(10, 11, 7, 0),
+	gsSPEndDisplayList(),
+};Vtx mario_000_displaylist_mesh_vtx_4[57] = {
+	{{{195, 93, 32},0, {728, 716},{0x53, 0x52, 0x34, 0xFF}}},
+	{{{153, 33, 95},0, {1234, 1050},{0x1, 0x46, 0x6A, 0xFF}}},
+	{{{252, 62, 70},0, {1016, 136},{0x47, 0x41, 0x52, 0xFF}}},
+	{{{272, 85, 0},0, {456, -32},{0x5E, 0x55, 0x0, 0xFF}}},
+	{{{195, 93, -31},0, {216, 720},{0x52, 0x51, 0xCB, 0xFF}}},
+	{{{252, 62, -69},0, {-94, 142},{0x47, 0x41, 0xAE, 0xFF}}},
+	{{{153, 33, -94},0, {-274, 1060},{0x0, 0x46, 0x96, 0xFF}}},
+	{{{120, -12, -109},0, {-16, -16},{0xEE, 0x20, 0x86, 0xFF}}},
+	{{{131, -56, -123},0, {-16, -16},{0xEA, 0xD7, 0x8A, 0xFF}}},
+	{{{91, -54, -85},0, {-16, -16},{0xC7, 0xC0, 0xA3, 0xFF}}},
+	{{{187, -6, -133},0, {-16, -16},{0x22, 0x6, 0x86, 0xFF}}},
+	{{{153, 33, -94},0, {-16, -16},{0x0, 0x46, 0x96, 0xFF}}},
+	{{{252, 62, -69},0, {-16, -16},{0x47, 0x41, 0xAE, 0xFF}}},
+	{{{271, 0, -41},0, {-16, -16},{0x71, 0xD2, 0xDB, 0xFF}}},
+	{{{272, 85, 0},0, {-16, -16},{0x5E, 0x55, 0x0, 0xFF}}},
+	{{{271, 0, 42},0, {-16, -16},{0x71, 0xD2, 0x25, 0xFF}}},
+	{{{271, 0, 42},0, {-16, -16},{0x71, 0xD2, 0x25, 0xFF}}},
+	{{{272, 85, 0},0, {-16, -16},{0x5E, 0x55, 0x0, 0xFF}}},
+	{{{252, 62, 70},0, {-16, -16},{0x47, 0x41, 0x52, 0xFF}}},
+	{{{187, -6, 134},0, {-16, -16},{0x23, 0x6, 0x7A, 0xFF}}},
+	{{{153, 33, 95},0, {-16, -16},{0x1, 0x46, 0x6A, 0xFF}}},
+	{{{120, -11, 111},0, {-16, -16},{0xED, 0x20, 0x7A, 0xFF}}},
+	{{{131, -56, 124},0, {-16, -16},{0xEA, 0xD6, 0x76, 0xFF}}},
+	{{{91, -54, 86},0, {-16, -16},{0xC7, 0xC0, 0x5D, 0xFF}}},
+	{{{64, -103, 52},0, {-16, -16},{0xF2, 0x95, 0x43, 0xFF}}},
+	{{{77, -138, 51},0, {-16, -16},{0xBE, 0xA0, 0x32, 0xFF}}},
+	{{{77, -138, -50},0, {-16, -16},{0xBE, 0xA0, 0xCE, 0xFF}}},
+	{{{64, -103, -51},0, {-16, -16},{0xF2, 0x95, 0xBD, 0xFF}}},
+	{{{131, -56, -123},0, {-16, -16},{0xEA, 0xD7, 0x8A, 0xFF}}},
+	{{{91, -54, -85},0, {-16, -16},{0xC7, 0xC0, 0xA3, 0xFF}}},
+	{{{122, -139, -48},0, {-16, -16},{0x2C, 0x90, 0xD6, 0xFF}}},
+	{{{164, -89, -74},0, {-16, -16},{0x4A, 0xA7, 0xCC, 0xFF}}},
+	{{{187, -6, -133},0, {-16, -16},{0x22, 0x6, 0x86, 0xFF}}},
+	{{{164, -89, -74},0, {-16, -16},{0x4A, 0xA7, 0xCC, 0xFF}}},
+	{{{131, -56, -123},0, {-16, -16},{0xEA, 0xD7, 0x8A, 0xFF}}},
+	{{{271, 0, -41},0, {-16, -16},{0x71, 0xD2, 0xDB, 0xFF}}},
+	{{{164, -89, 75},0, {-16, -16},{0x4A, 0xA7, 0x34, 0xFF}}},
+	{{{271, 0, 42},0, {-16, -16},{0x71, 0xD2, 0x25, 0xFF}}},
+	{{{187, -6, 134},0, {-16, -16},{0x23, 0x6, 0x7A, 0xFF}}},
+	{{{131, -56, 124},0, {-16, -16},{0xEA, 0xD6, 0x76, 0xFF}}},
+	{{{122, -139, 49},0, {-16, -16},{0x2C, 0x90, 0x2A, 0xFF}}},
+	{{{77, -138, 51},0, {-16, -16},{0xBE, 0xA0, 0x32, 0xFF}}},
+	{{{77, -138, -50},0, {-16, -16},{0xBE, 0xA0, 0xCE, 0xFF}}},
+	{{{122, -139, -48},0, {-16, -16},{0x2C, 0x90, 0xD6, 0xFF}}},
+	{{{195, 93, 32},0, {-16, -16},{0x53, 0x52, 0x34, 0xFF}}},
+	{{{173, 132, 66},0, {-16, -16},{0xE9, 0x58, 0x59, 0xFF}}},
+	{{{153, 33, 95},0, {-16, -16},{0x1, 0x46, 0x6A, 0xFF}}},
+	{{{182, 155, 0},0, {-16, -16},{0xFD, 0x7F, 0x0, 0xFF}}},
+	{{{195, 93, -31},0, {-16, -16},{0x52, 0x51, 0xCB, 0xFF}}},
+	{{{182, 155, 0},0, {-16, -16},{0xFD, 0x7F, 0x0, 0xFF}}},
+	{{{195, 93, 32},0, {-16, -16},{0x53, 0x52, 0x34, 0xFF}}},
+	{{{173, 132, -65},0, {-16, -16},{0xE9, 0x57, 0xA7, 0xFF}}},
+	{{{153, 33, -94},0, {-16, -16},{0x0, 0x46, 0x96, 0xFF}}},
+	{{{175, 91, -38},0, {-16, -16},{0xA5, 0x57, 0xF5, 0xFF}}},
+	{{{175, 91, 39},0, {-16, -16},{0xA5, 0x57, 0xB, 0xFF}}},
+	{{{173, 132, 66},0, {-16, -16},{0xE9, 0x58, 0x59, 0xFF}}},
+	{{{153, 33, 95},0, {-16, -16},{0x1, 0x46, 0x6A, 0xFF}}},
+};
+
+Gfx mario_000_displaylist_mesh_tri_4[] = {
+	gsSPVertex(mario_000_displaylist_mesh_vtx_4 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(3, 4, 0, 0),
+	gsSP1Triangle(3, 5, 4, 0),
+	gsSP1Triangle(5, 6, 4, 0),
+	gsSP1Triangle(7, 8, 9, 0),
+	gsSP1Triangle(10, 8, 7, 0),
+	gsSP1Triangle(11, 10, 7, 0),
+	gsSP1Triangle(11, 12, 10, 0),
+	gsSP1Triangle(13, 10, 12, 0),
+	gsSP1Triangle(12, 14, 13, 0),
+	gsSP1Triangle(13, 14, 15, 0),
+	gsSPVertex(mario_000_displaylist_mesh_vtx_4 + 16, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(3, 2, 4, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(5, 6, 3, 0),
+	gsSP1Triangle(7, 6, 5, 0),
+	gsSP1Triangle(7, 8, 6, 0),
+	gsSP1Triangle(6, 8, 9, 0),
+	gsSP1Triangle(9, 8, 10, 0),
+	gsSP1Triangle(8, 11, 10, 0),
+	gsSP1Triangle(10, 11, 12, 0),
+	gsSP1Triangle(13, 12, 11, 0),
+	gsSP1Triangle(12, 14, 10, 0),
+	gsSP1Triangle(15, 14, 12, 0),
+	gsSPVertex(mario_000_displaylist_mesh_vtx_4 + 32, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 0, 3, 0),
+	gsSP1Triangle(1, 3, 4, 0),
+	gsSP1Triangle(3, 5, 4, 0),
+	gsSP1Triangle(5, 6, 4, 0),
+	gsSP1Triangle(7, 4, 6, 0),
+	gsSP1Triangle(7, 8, 4, 0),
+	gsSP1Triangle(9, 8, 7, 0),
+	gsSP1Triangle(10, 8, 9, 0),
+	gsSP1Triangle(10, 11, 8, 0),
+	gsSP1Triangle(8, 11, 1, 0),
+	gsSP1Triangle(1, 4, 8, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 15, 13, 0),
+	gsSPVertex(mario_000_displaylist_mesh_vtx_4 + 48, 9, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(3, 0, 4, 0),
+	gsSP1Triangle(5, 3, 4, 0),
+	gsSP1Triangle(5, 1, 3, 0),
+	gsSP1Triangle(5, 6, 1, 0),
+	gsSP1Triangle(7, 1, 6, 0),
+	gsSP1Triangle(8, 7, 6, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_002_switch_option_head__no_cap__mesh_vtx_0[103] = {
+	{{{104, 87, -69},0, {-176, 882},{0x2B, 0x63, 0xBC, 0xFF}}},
+	{{{97, 103, -24},0, {240, 954},{0x4D, 0x42, 0xB4, 0xFF}}},
+	{{{144, 83, -66},0, {-162, 444},{0x20, 0x5B, 0xAE, 0xFF}}},
+	{{{175, 91, -38},0, {90, 114},{0x21, 0x73, 0xD5, 0xFF}}},
+	{{{145, 101, 0},0, {464, 430},{0x17, 0x7D, 0x0, 0xFF}}},
+	{{{108, 105, 0},0, {472, 838},{0x65, 0x4D, 0xFF, 0xFF}}},
+	{{{97, 103, 25},0, {708, 942},{0x4E, 0x42, 0x4C, 0xFF}}},
+	{{{175, 91, 39},0, {826, 96},{0x21, 0x73, 0x2B, 0xFF}}},
+	{{{144, 83, 67},0, {1092, 412},{0x20, 0x5B, 0x52, 0xFF}}},
+	{{{104, 87, 70},0, {1122, 848},{0x2B, 0x63, 0x44, 0xFF}}},
+	{{{153, 33, 95},0, {1346, 280},{0xFE, 0x36, 0x73, 0xFF}}},
+	{{{153, 33, -94},0, {-420, 326},{0xF5, 0x33, 0x8C, 0xFF}}},
+	{{{144, 83, -66},0, {-16, -16},{0x20, 0x5B, 0xAE, 0xFF}}},
+	{{{153, 33, -94},0, {-16, -16},{0xF5, 0x33, 0x8C, 0xFF}}},
+	{{{96, 49, -93},0, {-16, -16},{0xC, 0x28, 0x88, 0xFF}}},
+	{{{104, 87, -69},0, {-16, -16},{0x2B, 0x63, 0xBC, 0xFF}}},
+	{{{96, 49, -93},0, {-16, -16},{0xC, 0x28, 0x88, 0xFF}}},
+	{{{92, 88, -83},0, {-16, -16},{0x2B, 0x4E, 0xA6, 0xFF}}},
+	{{{104, 87, -69},0, {-16, -16},{0x2B, 0x63, 0xBC, 0xFF}}},
+	{{{44, 44, -96},0, {-16, -16},{0xD1, 0x1E, 0x8E, 0xFF}}},
+	{{{97, 103, -24},0, {-16, -16},{0x4D, 0x42, 0xB4, 0xFF}}},
+	{{{92, 88, 84},0, {-16, -16},{0x2B, 0x4E, 0x5A, 0xFF}}},
+	{{{104, 87, 70},0, {-16, -16},{0x2B, 0x63, 0x44, 0xFF}}},
+	{{{97, 103, 25},0, {-16, -16},{0x4E, 0x42, 0x4C, 0xFF}}},
+	{{{96, 49, 94},0, {-16, -16},{0xC, 0x29, 0x78, 0xFF}}},
+	{{{44, 44, 97},0, {-16, -16},{0xD1, 0x1E, 0x72, 0xFF}}},
+	{{{144, 83, 67},0, {-16, -16},{0x20, 0x5B, 0x52, 0xFF}}},
+	{{{153, 33, 95},0, {-16, -16},{0xFE, 0x36, 0x73, 0xFF}}},
+	{{{42, 0, -102},0, {-16, -16},{0xB8, 0xFF, 0x98, 0xFF}}},
+	{{{3, 54, -51},0, {-16, -16},{0x8F, 0x1A, 0xCB, 0xFF}}},
+	{{{17, -52, -46},0, {-16, -16},{0x86, 0xFC, 0xDE, 0xFF}}},
+	{{{56, -45, -76},0, {-16, -16},{0xCB, 0xC7, 0x9C, 0xFF}}},
+	{{{42, 0, -102},0, {-16, -16},{0xB8, 0xFF, 0x98, 0xFF}}},
+	{{{64, -25, -134},0, {-16, -16},{0xD6, 0x6, 0x88, 0xFF}}},
+	{{{56, -45, -76},0, {-16, -16},{0xCB, 0xC7, 0x9C, 0xFF}}},
+	{{{85, -23, -110},0, {-16, -16},{0x7, 0x5A, 0xA7, 0xFF}}},
+	{{{102, -33, -134},0, {-16, -16},{0x33, 0xED, 0x8D, 0xFF}}},
+	{{{120, -12, -109},0, {-16, -16},{0x2, 0xE, 0x82, 0xFF}}},
+	{{{91, -54, -85},0, {-16, -16},{0xDA, 0xB6, 0xA0, 0xFF}}},
+	{{{17, -52, -46},0, {-16, -16},{0x86, 0xFC, 0xDE, 0xFF}}},
+	{{{-7, 62, 0},0, {-16, -16},{0x85, 0x21, 0x0, 0xFF}}},
+	{{{3, 54, -51},0, {-16, -16},{0x8F, 0x1A, 0xCB, 0xFF}}},
+	{{{17, -52, 47},0, {-16, -16},{0x86, 0xFC, 0x22, 0xFF}}},
+	{{{31, -84, 0},0, {-16, -16},{0x9E, 0xB0, 0x1, 0xFF}}},
+	{{{3, 54, 52},0, {-16, -16},{0x8F, 0x1A, 0x35, 0xFF}}},
+	{{{42, 0, 103},0, {-16, -16},{0xB8, 0xFF, 0x68, 0xFF}}},
+	{{{56, -45, 77},0, {-16, -16},{0xCB, 0xC7, 0x64, 0xFF}}},
+	{{{64, -25, 135},0, {-16, -16},{0xD6, 0x6, 0x78, 0xFF}}},
+	{{{64, -25, 135},0, {-16, -16},{0xD6, 0x6, 0x78, 0xFF}}},
+	{{{56, -45, 77},0, {-16, -16},{0xCB, 0xC7, 0x64, 0xFF}}},
+	{{{91, -54, 86},0, {-16, -16},{0xDA, 0xB6, 0x60, 0xFF}}},
+	{{{102, -33, 135},0, {-16, -16},{0x32, 0xEB, 0x73, 0xFF}}},
+	{{{120, -11, 111},0, {-16, -16},{0x1, 0xF, 0x7E, 0xFF}}},
+	{{{85, -23, 111},0, {-16, -16},{0x5, 0x5A, 0x59, 0xFF}}},
+	{{{42, 0, 103},0, {-16, -16},{0xB8, 0xFF, 0x68, 0xFF}}},
+	{{{44, 44, 97},0, {-16, -16},{0xD1, 0x1E, 0x72, 0xFF}}},
+	{{{3, 54, 52},0, {-16, -16},{0x8F, 0x1A, 0x35, 0xFF}}},
+	{{{97, 103, 25},0, {-16, -16},{0x4E, 0x42, 0x4C, 0xFF}}},
+	{{{108, 105, 0},0, {-16, -16},{0x65, 0x4D, 0xFF, 0xFF}}},
+	{{{117, 128, 0},0, {-16, -16},{0x7C, 0xE4, 0xFF, 0xFF}}},
+	{{{97, 103, -24},0, {-16, -16},{0x4D, 0x42, 0xB4, 0xFF}}},
+	{{{102, 129, -40},0, {-16, -16},{0x4C, 0xDF, 0xA0, 0xFF}}},
+	{{{77, 108, -33},0, {-16, -16},{0x18, 0x2D, 0x8C, 0xFF}}},
+	{{{75, 130, -45},0, {-16, -16},{0xFE, 0xE1, 0x85, 0xFF}}},
+	{{{47, 131, -40},0, {-16, -16},{0xAF, 0xE9, 0xA1, 0xFF}}},
+	{{{75, 130, -45},0, {-16, -16},{0xFE, 0xE1, 0x85, 0xFF}}},
+	{{{77, 108, -33},0, {-16, -16},{0x18, 0x2D, 0x8C, 0xFF}}},
+	{{{52, 111, -30},0, {-16, -16},{0xB4, 0x37, 0xAB, 0xFF}}},
+	{{{32, 132, 0},0, {-16, -16},{0x83, 0xEC, 0xFE, 0xFF}}},
+	{{{41, 109, 0},0, {-16, -16},{0x8D, 0x36, 0xFF, 0xFF}}},
+	{{{52, 111, 31},0, {-16, -16},{0xB4, 0x37, 0x55, 0xFF}}},
+	{{{47, 131, 41},0, {-16, -16},{0xB0, 0xE7, 0x60, 0xFF}}},
+	{{{77, 108, 34},0, {-16, -16},{0x18, 0x2D, 0x74, 0xFF}}},
+	{{{75, 130, 46},0, {-16, -16},{0xFE, 0xE1, 0x7B, 0xFF}}},
+	{{{102, 129, 41},0, {-16, -16},{0x4C, 0xDF, 0x60, 0xFF}}},
+	{{{97, 103, 25},0, {-16, -16},{0x4E, 0x42, 0x4C, 0xFF}}},
+	{{{117, 128, 0},0, {-16, -16},{0x7C, 0xE4, 0xFF, 0xFF}}},
+	{{{104, 162, 41},0, {-16, -16},{0x49, 0x39, 0x57, 0xFF}}},
+	{{{119, 161, 0},0, {-16, -16},{0x78, 0x29, 0x0, 0xFF}}},
+	{{{102, 129, -40},0, {-16, -16},{0x4C, 0xDF, 0xA0, 0xFF}}},
+	{{{102, 129, -40},0, {-16, -16},{0x4C, 0xDF, 0xA0, 0xFF}}},
+	{{{104, 162, -40},0, {-16, -16},{0x48, 0x38, 0xA8, 0xFF}}},
+	{{{119, 161, 0},0, {-16, -16},{0x78, 0x29, 0x0, 0xFF}}},
+	{{{75, 130, -45},0, {-16, -16},{0xFE, 0xE1, 0x85, 0xFF}}},
+	{{{78, 163, -45},0, {-16, -16},{0x3, 0x43, 0x94, 0xFF}}},
+	{{{52, 164, -40},0, {-16, -16},{0xC2, 0x41, 0xA7, 0xFF}}},
+	{{{47, 131, -40},0, {-16, -16},{0xAF, 0xE9, 0xA1, 0xFF}}},
+	{{{32, 132, 0},0, {-16, -16},{0x83, 0xEC, 0xFE, 0xFF}}},
+	{{{33, 165, 0},0, {-16, -16},{0x90, 0x3C, 0xFE, 0xFF}}},
+	{{{47, 131, 41},0, {-16, -16},{0xB0, 0xE7, 0x60, 0xFF}}},
+	{{{52, 164, 41},0, {-16, -16},{0xC3, 0x43, 0x59, 0xFF}}},
+	{{{75, 130, 46},0, {-16, -16},{0xFE, 0xE1, 0x7B, 0xFF}}},
+	{{{78, 163, 46},0, {-16, -16},{0x3, 0x44, 0x6B, 0xFF}}},
+	{{{104, 162, 41},0, {-16, -16},{0x49, 0x39, 0x57, 0xFF}}},
+	{{{102, 129, 41},0, {-16, -16},{0x4C, 0xDF, 0x60, 0xFF}}},
+	{{{101, 179, 0},0, {-16, -16},{0x30, 0x76, 0x0, 0xFF}}},
+	{{{78, 163, -45},0, {-16, -16},{0x3, 0x43, 0x94, 0xFF}}},
+	{{{60, 181, 0},0, {-16, -16},{0xE5, 0x7C, 0x0, 0xFF}}},
+	{{{101, 179, 0},0, {-16, -16},{0x30, 0x76, 0x0, 0xFF}}},
+	{{{52, 164, -40},0, {-16, -16},{0xC2, 0x41, 0xA7, 0xFF}}},
+	{{{33, 165, 0},0, {-16, -16},{0x90, 0x3C, 0xFE, 0xFF}}},
+	{{{52, 164, 41},0, {-16, -16},{0xC3, 0x43, 0x59, 0xFF}}},
+	{{{78, 163, 46},0, {-16, -16},{0x3, 0x44, 0x6B, 0xFF}}},
+};
+
+Gfx mario_002_switch_option_head__no_cap__mesh_tri_0[] = {
+	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 3, 2, 0),
+	gsSP1Triangle(1, 4, 3, 0),
+	gsSP1Triangle(1, 5, 4, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(7, 4, 6, 0),
+	gsSP1Triangle(8, 7, 6, 0),
+	gsSP1Triangle(6, 9, 8, 0),
+	gsSP1Triangle(10, 7, 8, 0),
+	gsSP1Triangle(3, 4, 7, 0),
+	gsSP1Triangle(2, 3, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(14, 15, 12, 0),
+	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_0 + 16, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 0, 3, 0),
+	gsSP1Triangle(1, 4, 2, 0),
+	gsSP1Triangle(5, 6, 7, 0),
+	gsSP1Triangle(6, 5, 8, 0),
+	gsSP1Triangle(9, 8, 5, 0),
+	gsSP1Triangle(10, 6, 8, 0),
+	gsSP1Triangle(8, 11, 10, 0),
+	gsSP1Triangle(12, 13, 3, 0),
+	gsSP1Triangle(12, 14, 13, 0),
+	gsSP1Triangle(12, 15, 14, 0),
+	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_0 + 32, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(3, 4, 1, 0),
+	gsSP1Triangle(4, 3, 5, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(1, 4, 6, 0),
+	gsSP1Triangle(2, 1, 6, 0),
+	gsSP1Triangle(7, 8, 9, 0),
+	gsSP1Triangle(7, 10, 8, 0),
+	gsSP1Triangle(7, 11, 10, 0),
+	gsSP1Triangle(10, 12, 8, 0),
+	gsSP1Triangle(12, 10, 13, 0),
+	gsSP1Triangle(10, 14, 13, 0),
+	gsSP1Triangle(15, 13, 14, 0),
+	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_0 + 48, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSP1Triangle(4, 5, 3, 0),
+	gsSP1Triangle(0, 3, 5, 0),
+	gsSP1Triangle(6, 0, 5, 0),
+	gsSP1Triangle(7, 8, 6, 0),
+	gsSP1Triangle(9, 10, 11, 0),
+	gsSP1Triangle(11, 10, 12, 0),
+	gsSP1Triangle(12, 13, 11, 0),
+	gsSP1Triangle(13, 12, 14, 0),
+	gsSP1Triangle(15, 13, 14, 0),
+	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_0 + 64, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(4, 0, 3, 0),
+	gsSP1Triangle(3, 5, 4, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(6, 7, 4, 0),
+	gsSP1Triangle(7, 6, 8, 0),
+	gsSP1Triangle(9, 7, 8, 0),
+	gsSP1Triangle(10, 9, 8, 0),
+	gsSP1Triangle(8, 11, 10, 0),
+	gsSP1Triangle(12, 10, 11, 0),
+	gsSP1Triangle(13, 10, 12, 0),
+	gsSP1Triangle(14, 13, 12, 0),
+	gsSP1Triangle(12, 15, 14, 0),
+	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_0 + 80, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(3, 4, 1, 0),
+	gsSP1Triangle(5, 4, 3, 0),
+	gsSP1Triangle(6, 5, 3, 0),
+	gsSP1Triangle(5, 6, 7, 0),
+	gsSP1Triangle(8, 5, 7, 0),
+	gsSP1Triangle(7, 9, 8, 0),
+	gsSP1Triangle(9, 10, 8, 0),
+	gsSP1Triangle(10, 9, 11, 0),
+	gsSP1Triangle(10, 11, 12, 0),
+	gsSP1Triangle(12, 11, 13, 0),
+	gsSP1Triangle(11, 14, 13, 0),
+	gsSP1Triangle(13, 15, 12, 0),
+	gsSP1Triangle(15, 13, 2, 0),
+	gsSP1Triangle(15, 2, 1, 0),
+	gsSP1Triangle(15, 1, 4, 0),
+	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_0 + 96, 7, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 0, 3, 0),
+	gsSP1Triangle(4, 1, 3, 0),
+	gsSP1Triangle(4, 5, 1, 0),
+	gsSP1Triangle(5, 6, 1, 0),
+	gsSP1Triangle(1, 6, 2, 0),
+	gsSPEndDisplayList(),
+};Vtx mario_002_switch_option_head__no_cap__mesh_vtx_1[30] = {
+	{{{44, 44, 97},0, {-16, -16},{0xD1, 0x1E, 0x72, 0xFF}}},
+	{{{48, 94, 76},0, {-16, -16},{0xD5, 0x59, 0x50, 0xFF}}},
+	{{{3, 54, 52},0, {-16, -16},{0x8F, 0x1A, 0x35, 0xFF}}},
+	{{{77, 108, 34},0, {314, 300},{0x18, 0x2D, 0x74, 0xFF}}},
+	{{{92, 88, 84},0, {932, -24},{0x2B, 0x4E, 0x5A, 0xFF}}},
+	{{{97, 103, 25},0, {232, 34},{0x4E, 0x42, 0x4C, 0xFF}}},
+	{{{48, 94, 76},0, {832, 614},{0xD5, 0x59, 0x50, 0xFF}}},
+	{{{52, 111, 31},0, {276, 654},{0xB4, 0x37, 0x55, 0xFF}}},
+	{{{27, 100, 30},0, {320, 990},{0xB0, 0x60, 0x1A, 0xFF}}},
+	{{{41, 109, 0},0, {-46, 860},{0x8D, 0x36, 0xFF, 0xFF}}},
+	{{{3, 54, 52},0, {752, 1194},{0x8F, 0x1A, 0x35, 0xFF}}},
+	{{{44, 44, 97},0, {1260, 550},{0xD1, 0x1E, 0x72, 0xFF}}},
+	{{{92, 88, -83},0, {976, -26},{0x2B, 0x4E, 0xA6, 0xFF}}},
+	{{{77, 108, -33},0, {344, 280},{0x18, 0x2D, 0x8C, 0xFF}}},
+	{{{97, 103, -24},0, {282, 4},{0x4D, 0x42, 0xB4, 0xFF}}},
+	{{{48, 94, -75},0, {828, 624},{0xD5, 0x59, 0xB0, 0xFF}}},
+	{{{92, 88, -83},0, {976, -26},{0x2B, 0x4E, 0xA6, 0xFF}}},
+	{{{44, 44, -96},0, {1256, 576},{0xD1, 0x1E, 0x8E, 0xFF}}},
+	{{{48, 94, -75},0, {828, 624},{0xD5, 0x59, 0xB0, 0xFF}}},
+	{{{3, 54, -51},0, {704, 1212},{0x8F, 0x1A, 0xCB, 0xFF}}},
+	{{{27, 100, -29},0, {294, 986},{0xB0, 0x60, 0xE6, 0xFF}}},
+	{{{52, 111, -30},0, {278, 640},{0xB4, 0x37, 0xAB, 0xFF}}},
+	{{{41, 109, 0},0, {-54, 836},{0x8D, 0x36, 0xFF, 0xFF}}},
+	{{{77, 108, -33},0, {344, 280},{0x18, 0x2D, 0x8C, 0xFF}}},
+	{{{-7, 62, 0},0, {-16, -16},{0x85, 0x21, 0x0, 0xFF}}},
+	{{{3, 54, 52},0, {-16, -16},{0x8F, 0x1A, 0x35, 0xFF}}},
+	{{{27, 100, 30},0, {-16, -16},{0xB0, 0x60, 0x1A, 0xFF}}},
+	{{{27, 100, -29},0, {-16, -16},{0xB0, 0x60, 0xE6, 0xFF}}},
+	{{{41, 109, 0},0, {-16, -16},{0x8D, 0x36, 0xFF, 0xFF}}},
+	{{{3, 54, -51},0, {-16, -16},{0x8F, 0x1A, 0xCB, 0xFF}}},
+};
+
+Gfx mario_002_switch_option_head__no_cap__mesh_tri_1[] = {
+	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_1 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(4, 3, 6, 0),
+	gsSP1Triangle(3, 7, 6, 0),
+	gsSP1Triangle(8, 6, 7, 0),
+	gsSP1Triangle(8, 7, 9, 0),
+	gsSP1Triangle(10, 6, 8, 0),
+	gsSP1Triangle(6, 11, 4, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(15, 13, 12, 0),
+	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_1 + 16, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 2, 1, 0),
+	gsSP1Triangle(4, 2, 3, 0),
+	gsSP1Triangle(5, 2, 4, 0),
+	gsSP1Triangle(6, 5, 4, 0),
+	gsSP1Triangle(2, 5, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(10, 11, 8, 0),
+	gsSP1Triangle(12, 11, 10, 0),
+	gsSP1Triangle(11, 13, 8, 0),
+	gsSPEndDisplayList(),
+};Vtx mario_002_switch_option_head__no_cap__mesh_vtx_2[12] = {
+	{{{96, 49, 94},0, {-90, 710},{0xC, 0x29, 0x78, 0xFF}}},
+	{{{44, 44, 97},0, {180, 1350},{0xD1, 0x1E, 0x72, 0xFF}}},
+	{{{42, 0, 103},0, {952, 1176},{0xB8, 0xFF, 0x68, 0xFF}}},
+	{{{85, -23, 111},0, {1222, 502},{0x5, 0x5A, 0x59, 0xFF}}},
+	{{{120, -11, 111},0, {906, 106},{0x1, 0xF, 0x7E, 0xFF}}},
+	{{{153, 33, 95},0, {6, -84},{0xFE, 0x36, 0x73, 0xFF}}},
+	{{{42, 0, -102},0, {826, 1194},{0xB8, 0xFF, 0x98, 0xFF}}},
+	{{{44, 44, -96},0, {102, 1318},{0xD1, 0x1E, 0x8E, 0xFF}}},
+	{{{96, 49, -93},0, {-86, 684},{0xC, 0x28, 0x88, 0xFF}}},
+	{{{85, -23, -110},0, {1134, 566},{0x7, 0x5A, 0xA7, 0xFF}}},
+	{{{120, -12, -109},0, {900, 168},{0x2, 0xE, 0x82, 0xFF}}},
+	{{{153, 33, -94},0, {74, -74},{0xF5, 0x33, 0x8C, 0xFF}}},
+};
+
+Gfx mario_002_switch_option_head__no_cap__mesh_tri_2[] = {
+	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_2 + 0, 12, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(3, 4, 0, 0),
+	gsSP1Triangle(5, 0, 4, 0),
+	gsSP1Triangle(6, 7, 8, 0),
+	gsSP1Triangle(8, 9, 6, 0),
+	gsSP1Triangle(9, 8, 10, 0),
+	gsSP1Triangle(10, 8, 11, 0),
+	gsSPEndDisplayList(),
+};Vtx mario_002_switch_option_head__no_cap__mesh_vtx_3[92] = {
+	{{{153, 33, 95},0, {-16, -16},{0xFE, 0x36, 0x73, 0xFF}}},
+	{{{200, 75, 84},0, {-16, -16},{0x21, 0x51, 0x5D, 0xFF}}},
+	{{{151, 72, 70},0, {-16, -16},{0xE2, 0x5B, 0x54, 0xFF}}},
+	{{{181, -9, 116},0, {-16, -16},{0x2A, 0x2, 0x78, 0xFF}}},
+	{{{120, -11, 111},0, {-16, -16},{0x1, 0xF, 0x7E, 0xFF}}},
+	{{{145, -83, 105},0, {-16, -16},{0xFF, 0xCA, 0x73, 0xFF}}},
+	{{{91, -54, 86},0, {-16, -16},{0xDA, 0xB6, 0x60, 0xFF}}},
+	{{{64, -103, 52},0, {-16, -16},{0x19, 0x8B, 0x2C, 0xFF}}},
+	{{{56, -45, 77},0, {-16, -16},{0xCB, 0xC7, 0x64, 0xFF}}},
+	{{{58, -114, 60},0, {-16, -16},{0x57, 0xAA, 0x21, 0xFF}}},
+	{{{31, -85, 87},0, {-16, -16},{0xE4, 0xFA, 0x7C, 0xFF}}},
+	{{{17, -52, 47},0, {-16, -16},{0x86, 0xFC, 0x22, 0xFF}}},
+	{{{9, -88, 59},0, {-16, -16},{0x84, 0xEC, 0x16, 0xFF}}},
+	{{{31, -84, 0},0, {-16, -16},{0x9E, 0xB0, 0x1, 0xFF}}},
+	{{{36, -116, 36},0, {-16, -16},{0xEE, 0x92, 0xC3, 0xFF}}},
+	{{{64, -103, -51},0, {-16, -16},{0x1A, 0x8C, 0xD4, 0xFF}}},
+	{{{31, -84, 0},0, {-16, -16},{0x9E, 0xB0, 0x1, 0xFF}}},
+	{{{36, -116, -35},0, {-16, -16},{0xEE, 0x92, 0x3D, 0xFF}}},
+	{{{64, -103, -51},0, {-16, -16},{0x1A, 0x8C, 0xD4, 0xFF}}},
+	{{{9, -88, -58},0, {-16, -16},{0x84, 0xEC, 0xEA, 0xFF}}},
+	{{{17, -52, -46},0, {-16, -16},{0x86, 0xFC, 0xDE, 0xFF}}},
+	{{{31, -85, -86},0, {-16, -16},{0xE4, 0xFA, 0x84, 0xFF}}},
+	{{{56, -45, -76},0, {-16, -16},{0xCB, 0xC7, 0x9C, 0xFF}}},
+	{{{58, -114, -59},0, {-16, -16},{0x57, 0xAA, 0xDF, 0xFF}}},
+	{{{91, -54, -85},0, {-16, -16},{0xDA, 0xB6, 0xA0, 0xFF}}},
+	{{{145, -84, -104},0, {-16, -16},{0x0, 0xC8, 0x8E, 0xFF}}},
+	{{{120, -12, -109},0, {-16, -16},{0x2, 0xE, 0x82, 0xFF}}},
+	{{{182, -9, -115},0, {-16, -16},{0x2B, 0xFF, 0x88, 0xFF}}},
+	{{{153, 33, -94},0, {-16, -16},{0xF5, 0x33, 0x8C, 0xFF}}},
+	{{{200, 70, -97},0, {-16, -16},{0x21, 0x3F, 0x97, 0xFF}}},
+	{{{151, 72, -68},0, {-16, -16},{0xD7, 0x5E, 0xB5, 0xFF}}},
+	{{{175, 91, -38},0, {-16, -16},{0xC7, 0x63, 0xC8, 0xFF}}},
+	{{{200, 70, -97},0, {-16, -16},{0x21, 0x3F, 0x97, 0xFF}}},
+	{{{175, 91, -38},0, {-16, -16},{0xC7, 0x63, 0xC8, 0xFF}}},
+	{{{211, 91, -71},0, {-16, -16},{0x23, 0x52, 0xA5, 0xFF}}},
+	{{{201, 125, -13},0, {-16, -16},{0xF8, 0x7F, 0xFF, 0xFF}}},
+	{{{160, 96, 0},0, {-16, -16},{0xB8, 0x68, 0x5, 0xFF}}},
+	{{{175, 91, 39},0, {-16, -16},{0xE2, 0x70, 0x34, 0xFF}}},
+	{{{209, 86, 60},0, {-16, -16},{0x32, 0x62, 0x3F, 0xFF}}},
+	{{{200, 75, 84},0, {-16, -16},{0x21, 0x51, 0x5D, 0xFF}}},
+	{{{151, 72, 70},0, {-16, -16},{0xE2, 0x5B, 0x54, 0xFF}}},
+	{{{227, 35, 75},0, {-16, -16},{0x6C, 0xB, 0x42, 0xFF}}},
+	{{{181, -9, 116},0, {-16, -16},{0x2A, 0x2, 0x78, 0xFF}}},
+	{{{227, -14, 59},0, {-16, -16},{0x72, 0xEA, 0x34, 0xFF}}},
+	{{{189, -102, 73},0, {-16, -16},{0x49, 0xB0, 0x41, 0xFF}}},
+	{{{145, -83, 105},0, {-16, -16},{0xFF, 0xCA, 0x73, 0xFF}}},
+	{{{116, -126, 68},0, {-16, -16},{0xEA, 0x95, 0x41, 0xFF}}},
+	{{{64, -103, 52},0, {-16, -16},{0x19, 0x8B, 0x2C, 0xFF}}},
+	{{{64, -103, 52},0, {-16, -16},{0x19, 0x8B, 0x2C, 0xFF}}},
+	{{{119, -134, 0},0, {-16, -16},{0xF1, 0x82, 0xFE, 0xFF}}},
+	{{{116, -126, 68},0, {-16, -16},{0xEA, 0x95, 0x41, 0xFF}}},
+	{{{64, -103, -51},0, {-16, -16},{0x1A, 0x8C, 0xD4, 0xFF}}},
+	{{{116, -124, -67},0, {-16, -16},{0xEB, 0x95, 0xBF, 0xFF}}},
+	{{{145, -84, -104},0, {-16, -16},{0x0, 0xC8, 0x8E, 0xFF}}},
+	{{{189, -102, -71},0, {-16, -16},{0x49, 0xAF, 0xC0, 0xFF}}},
+	{{{182, -9, -115},0, {-16, -16},{0x2B, 0xFF, 0x88, 0xFF}}},
+	{{{227, -14, -58},0, {-16, -16},{0x72, 0xEF, 0xCA, 0xFF}}},
+	{{{221, 35, -73},0, {-16, -16},{0x70, 0x3, 0xC4, 0xFF}}},
+	{{{200, 70, -97},0, {-16, -16},{0x21, 0x3F, 0x97, 0xFF}}},
+	{{{211, 91, -71},0, {-16, -16},{0x23, 0x52, 0xA5, 0xFF}}},
+	{{{232, 69, -34},0, {-16, -16},{0x75, 0xE2, 0xD8, 0xFF}}},
+	{{{248, 104, -43},0, {-16, -16},{0x6A, 0x32, 0xCF, 0xFF}}},
+	{{{201, 125, -13},0, {-16, -16},{0xF8, 0x7F, 0xFF, 0xFF}}},
+	{{{209, 86, 60},0, {-16, -16},{0x32, 0x62, 0x3F, 0xFF}}},
+	{{{209, 86, 60},0, {-16, -16},{0x32, 0x62, 0x3F, 0xFF}}},
+	{{{231, 81, 33},0, {-16, -16},{0x6C, 0x34, 0x2A, 0xFF}}},
+	{{{248, 104, -43},0, {-16, -16},{0x6A, 0x32, 0xCF, 0xFF}}},
+	{{{227, 35, 75},0, {-16, -16},{0x6C, 0xB, 0x42, 0xFF}}},
+	{{{237, 64, 0},0, {-16, -16},{0x7F, 0xF8, 0x5, 0xFF}}},
+	{{{227, -14, 59},0, {-16, -16},{0x72, 0xEA, 0x34, 0xFF}}},
+	{{{241, -34, 0},0, {-16, -16},{0x7C, 0xE4, 0x0, 0xFF}}},
+	{{{189, -102, 73},0, {-16, -16},{0x49, 0xB0, 0x41, 0xFF}}},
+	{{{200, -117, 0},0, {-16, -16},{0x4F, 0x9D, 0xFF, 0xFF}}},
+	{{{116, -126, 68},0, {-16, -16},{0xEA, 0x95, 0x41, 0xFF}}},
+	{{{119, -134, 0},0, {-16, -16},{0xF1, 0x82, 0xFE, 0xFF}}},
+	{{{116, -124, -67},0, {-16, -16},{0xEB, 0x95, 0xBF, 0xFF}}},
+	{{{189, -102, -71},0, {-16, -16},{0x49, 0xAF, 0xC0, 0xFF}}},
+	{{{227, -14, -58},0, {-16, -16},{0x72, 0xEF, 0xCA, 0xFF}}},
+	{{{221, 35, -73},0, {-16, -16},{0x70, 0x3, 0xC4, 0xFF}}},
+	{{{232, 69, -34},0, {-16, -16},{0x75, 0xE2, 0xD8, 0xFF}}},
+	{{{36, -116, -35},0, {-16, -16},{0xEE, 0x92, 0x3D, 0xFF}}},
+	{{{58, -114, -59},0, {-16, -16},{0x57, 0xAA, 0xDF, 0xFF}}},
+	{{{64, -103, -51},0, {-16, -16},{0x1A, 0x8C, 0xD4, 0xFF}}},
+	{{{35, -120, -67},0, {-16, -16},{0xE6, 0x92, 0xC6, 0xFF}}},
+	{{{9, -88, -58},0, {-16, -16},{0x84, 0xEC, 0xEA, 0xFF}}},
+	{{{31, -85, -86},0, {-16, -16},{0xE4, 0xFA, 0x84, 0xFF}}},
+	{{{58, -114, 60},0, {-16, -16},{0x57, 0xAA, 0x21, 0xFF}}},
+	{{{36, -116, 36},0, {-16, -16},{0xEE, 0x92, 0xC3, 0xFF}}},
+	{{{64, -103, 52},0, {-16, -16},{0x19, 0x8B, 0x2C, 0xFF}}},
+	{{{35, -120, 68},0, {-16, -16},{0xE6, 0x92, 0x3A, 0xFF}}},
+	{{{31, -85, 87},0, {-16, -16},{0xE4, 0xFA, 0x7C, 0xFF}}},
+	{{{9, -88, 59},0, {-16, -16},{0x84, 0xEC, 0x16, 0xFF}}},
+};
+
+Gfx mario_002_switch_option_head__no_cap__mesh_tri_3[] = {
+	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_3 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(0, 4, 3, 0),
+	gsSP1Triangle(5, 3, 4, 0),
+	gsSP1Triangle(6, 5, 4, 0),
+	gsSP1Triangle(7, 5, 6, 0),
+	gsSP1Triangle(7, 6, 8, 0),
+	gsSP1Triangle(9, 7, 8, 0),
+	gsSP1Triangle(8, 10, 9, 0),
+	gsSP1Triangle(10, 8, 11, 0),
+	gsSP1Triangle(11, 12, 10, 0),
+	gsSP1Triangle(12, 11, 13, 0),
+	gsSP1Triangle(13, 14, 12, 0),
+	gsSP1Triangle(13, 7, 14, 0),
+	gsSP1Triangle(13, 15, 7, 0),
+	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_3 + 16, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(0, 4, 3, 0),
+	gsSP1Triangle(5, 3, 4, 0),
+	gsSP1Triangle(4, 6, 5, 0),
+	gsSP1Triangle(7, 5, 6, 0),
+	gsSP1Triangle(6, 2, 7, 0),
+	gsSP1Triangle(6, 8, 2, 0),
+	gsSP1Triangle(8, 9, 2, 0),
+	gsSP1Triangle(9, 8, 10, 0),
+	gsSP1Triangle(11, 9, 10, 0),
+	gsSP1Triangle(10, 12, 11, 0),
+	gsSP1Triangle(12, 13, 11, 0),
+	gsSP1Triangle(13, 12, 14, 0),
+	gsSP1Triangle(15, 13, 14, 0),
+	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_3 + 32, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 1, 3, 0),
+	gsSP1Triangle(1, 4, 3, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(6, 3, 5, 0),
+	gsSP1Triangle(5, 7, 6, 0),
+	gsSP1Triangle(5, 8, 7, 0),
+	gsSP1Triangle(7, 9, 6, 0),
+	gsSP1Triangle(10, 9, 7, 0),
+	gsSP1Triangle(9, 10, 11, 0),
+	gsSP1Triangle(11, 10, 12, 0),
+	gsSP1Triangle(13, 12, 10, 0),
+	gsSP1Triangle(13, 14, 12, 0),
+	gsSP1Triangle(15, 14, 13, 0),
+	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_3 + 48, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(3, 4, 1, 0),
+	gsSP1Triangle(5, 4, 3, 0),
+	gsSP1Triangle(6, 4, 5, 0),
+	gsSP1Triangle(7, 6, 5, 0),
+	gsSP1Triangle(6, 7, 8, 0),
+	gsSP1Triangle(8, 7, 9, 0),
+	gsSP1Triangle(10, 9, 7, 0),
+	gsSP1Triangle(9, 10, 11, 0),
+	gsSP1Triangle(9, 11, 12, 0),
+	gsSP1Triangle(12, 11, 13, 0),
+	gsSP1Triangle(11, 14, 13, 0),
+	gsSP1Triangle(14, 15, 13, 0),
+	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_3 + 64, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(3, 4, 1, 0),
+	gsSP1Triangle(4, 3, 5, 0),
+	gsSP1Triangle(5, 6, 4, 0),
+	gsSP1Triangle(6, 5, 7, 0),
+	gsSP1Triangle(8, 6, 7, 0),
+	gsSP1Triangle(8, 7, 9, 0),
+	gsSP1Triangle(10, 8, 9, 0),
+	gsSP1Triangle(10, 11, 8, 0),
+	gsSP1Triangle(11, 12, 8, 0),
+	gsSP1Triangle(8, 12, 6, 0),
+	gsSP1Triangle(12, 13, 6, 0),
+	gsSP1Triangle(13, 4, 6, 0),
+	gsSP1Triangle(13, 14, 4, 0),
+	gsSP1Triangle(14, 15, 4, 0),
+	gsSP1Triangle(4, 15, 2, 0),
+	gsSP1Triangle(4, 2, 1, 0),
+	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_3 + 80, 12, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(4, 3, 0, 0),
+	gsSP1Triangle(5, 3, 4, 0),
+	gsSP1Triangle(3, 5, 1, 0),
+	gsSP1Triangle(6, 7, 8, 0),
+	gsSP1Triangle(6, 9, 7, 0),
+	gsSP1Triangle(10, 9, 6, 0),
+	gsSP1Triangle(11, 9, 10, 0),
+	gsSP1Triangle(7, 9, 11, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_000_displaylist_001_mesh_vtx_0[4] = {
+	{{{0, 0, 0},0, {-16, 1978},{0x17, 0x0, 0x7D, 0xFF}}},
+	{{{104, 0, -19},0, {974, 1978},{0x18, 0xFF, 0x7D, 0xFF}}},
+	{{{104, 212, -19},0, {974, -34},{0x17, 0x0, 0x7D, 0xFF}}},
+	{{{0, 212, 0},0, {-16, -34},{0x17, 0x0, 0x7D, 0xFF}}},
+};
+
+Gfx mario_000_displaylist_001_mesh_tri_0[] = {
+	gsSPVertex(mario_000_displaylist_001_mesh_vtx_0 + 0, 4, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx mario_000_displaylist_001_mesh_vtx_1[4] = {
+	{{{-103, 212, 18},0, {-16, -34},{0x17, 0x0, 0x7D, 0xFF}}},
+	{{{0, 0, 0},0, {974, 1978},{0x17, 0x0, 0x7D, 0xFF}}},
+	{{{0, 212, 0},0, {974, -34},{0x17, 0x0, 0x7D, 0xFF}}},
+	{{{-103, 0, 19},0, {-16, 1978},{0x17, 0x0, 0x7D, 0xFF}}},
+};
+
+Gfx mario_000_displaylist_001_mesh_tri_1[] = {
+	gsSPVertex(mario_000_displaylist_001_mesh_vtx_1 + 0, 4, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_000_displaylist_002_mesh_vtx_0[4] = {
+	{{{0, 0, 0},0, {-16, 1978},{0xE9, 0x0, 0x7D, 0xFF}}},
+	{{{104, 0, 19},0, {974, 1978},{0xE8, 0x1, 0x7D, 0xFF}}},
+	{{{104, 212, 19},0, {974, -34},{0xE9, 0x0, 0x7D, 0xFF}}},
+	{{{0, 212, 0},0, {-16, -34},{0xE9, 0x0, 0x7D, 0xFF}}},
+};
+
+Gfx mario_000_displaylist_002_mesh_tri_0[] = {
+	gsSPVertex(mario_000_displaylist_002_mesh_vtx_0 + 0, 4, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};Vtx mario_000_displaylist_002_mesh_vtx_1[4] = {
+	{{{-103, 212, -18},0, {-16, -34},{0xE9, 0x0, 0x7D, 0xFF}}},
+	{{{-103, 0, -19},0, {-16, 1978},{0xE9, 0x0, 0x7D, 0xFF}}},
+	{{{0, 0, 0},0, {974, 1978},{0xE9, 0x0, 0x7D, 0xFF}}},
+	{{{0, 212, 0},0, {974, -34},{0xE9, 0x0, 0x7D, 0xFF}}},
+};
+
+Gfx mario_000_displaylist_002_mesh_tri_1[] = {
+	gsSPVertex(mario_000_displaylist_002_mesh_vtx_1 + 0, 4, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_000_offset_003_mesh_vtx_0[31] = {
+	{{{6, -13, -42},0, {-16, -16},{0xDB, 0xE1, 0x8A, 0xFF}}},
+	{{{-8, -9, -27},0, {-16, -16},{0x90, 0xF1, 0xC6, 0xFF}}},
+	{{{-8, 17, -17},0, {-16, -16},{0x92, 0x36, 0xDF, 0xFF}}},
+	{{{5, -42, -5},0, {-16, -16},{0xD7, 0x88, 0xFD, 0xFF}}},
+	{{{57, -36, -5},0, {-16, -16},{0x32, 0x8B, 0xFD, 0xFF}}},
+	{{{58, -13, -34},0, {-16, -16},{0x33, 0xDF, 0x90, 0xFF}}},
+	{{{7, 29, -26},0, {-16, -16},{0xDF, 0x66, 0xBC, 0xFF}}},
+	{{{-8, 16, 10},0, {-16, -16},{0x92, 0x33, 0x26, 0xFF}}},
+	{{{-8, -11, 18},0, {-16, -16},{0x91, 0xEC, 0x3A, 0xFF}}},
+	{{{-9, -26, -5},0, {-16, -16},{0x8E, 0xC8, 0xFD, 0xFF}}},
+	{{{6, -16, 32},0, {-16, -16},{0xDB, 0xD8, 0x73, 0xFF}}},
+	{{{58, -15, 25},0, {-16, -16},{0x35, 0xD7, 0x6C, 0xFF}}},
+	{{{67, -12, 16},0, {-16, -16},{0x6E, 0xE8, 0x3B, 0xFF}}},
+	{{{67, -26, -5},0, {-16, -16},{0x6D, 0xBF, 0xFE, 0xFF}}},
+	{{{68, -10, -25},0, {-16, -16},{0x6D, 0xEF, 0xC1, 0xFF}}},
+	{{{68, 13, -16},0, {-16, -16},{0x6F, 0x33, 0xDC, 0xFF}}},
+	{{{59, 21, -21},0, {-16, -16},{0x37, 0x5F, 0xC0, 0xFF}}},
+	{{{68, 13, -16},0, {-16, -16},{0x6F, 0x33, 0xDC, 0xFF}}},
+	{{{58, -13, -34},0, {-16, -16},{0x33, 0xDF, 0x90, 0xFF}}},
+	{{{7, 29, -26},0, {-16, -16},{0xDF, 0x66, 0xBC, 0xFF}}},
+	{{{7, 27, 20},0, {-16, -16},{0xDF, 0x60, 0x4C, 0xFF}}},
+	{{{-8, 16, 10},0, {-16, -16},{0x92, 0x33, 0x26, 0xFF}}},
+	{{{-8, -11, 18},0, {-16, -16},{0x91, 0xEC, 0x3A, 0xFF}}},
+	{{{6, -16, 32},0, {-16, -16},{0xDB, 0xD8, 0x73, 0xFF}}},
+	{{{-9, -26, -5},0, {-16, -16},{0x8E, 0xC8, 0xFD, 0xFF}}},
+	{{{59, 20, 15},0, {-16, -16},{0x37, 0x5A, 0x46, 0xFF}}},
+	{{{58, -15, 25},0, {-16, -16},{0x35, 0xD7, 0x6C, 0xFF}}},
+	{{{67, -12, 16},0, {-16, -16},{0x6E, 0xE8, 0x3B, 0xFF}}},
+	{{{68, 12, 9},0, {-16, -16},{0x70, 0x2D, 0x27, 0xFF}}},
+	{{{68, -10, -25},0, {-16, -16},{0x6D, 0xEF, 0xC1, 0xFF}}},
+	{{{67, -26, -5},0, {-16, -16},{0x6D, 0xBF, 0xFE, 0xFF}}},
+};
+
+Gfx mario_000_offset_003_mesh_tri_0[] = {
+	gsSPVertex(mario_000_offset_003_mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(3, 0, 4, 0),
+	gsSP1Triangle(0, 5, 4, 0),
+	gsSP1Triangle(0, 6, 5, 0),
+	gsSP1Triangle(0, 2, 6, 0),
+	gsSP1Triangle(6, 2, 7, 0),
+	gsSP1Triangle(8, 7, 2, 0),
+	gsSP1Triangle(2, 1, 8, 0),
+	gsSP1Triangle(1, 9, 8, 0),
+	gsSP1Triangle(3, 9, 1, 0),
+	gsSP1Triangle(10, 9, 3, 0),
+	gsSP1Triangle(10, 3, 11, 0),
+	gsSP1Triangle(3, 4, 11, 0),
+	gsSP1Triangle(4, 12, 11, 0),
+	gsSP1Triangle(4, 13, 12, 0),
+	gsSP1Triangle(14, 13, 4, 0),
+	gsSP1Triangle(5, 14, 4, 0),
+	gsSP1Triangle(15, 14, 5, 0),
+	gsSPVertex(mario_000_offset_003_mesh_vtx_0 + 16, 15, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 0, 2, 0),
+	gsSP1Triangle(3, 4, 0, 0),
+	gsSP1Triangle(3, 5, 4, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(7, 6, 8, 0),
+	gsSP1Triangle(4, 7, 9, 0),
+	gsSP1Triangle(7, 10, 9, 0),
+	gsSP1Triangle(10, 11, 9, 0),
+	gsSP1Triangle(11, 12, 9, 0),
+	gsSP1Triangle(12, 11, 13, 0),
+	gsSP1Triangle(11, 14, 13, 0),
+	gsSP1Triangle(12, 13, 1, 0),
+	gsSP1Triangle(9, 12, 1, 0),
+	gsSP1Triangle(9, 1, 0, 0),
+	gsSP1Triangle(4, 9, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_000_offset_004_mesh_vtx_0[16] = {
+	{{{-2, 21, -21},0, {-16, -16},{0xDF, 0x67, 0xBE, 0xFF}}},
+	{{{-14, 13, -15},0, {-16, -16},{0x97, 0x3E, 0xDD, 0xFF}}},
+	{{{-14, 11, 10},0, {-16, -16},{0x96, 0x37, 0x2B, 0xFF}}},
+	{{{-3, -14, -34},0, {-16, -16},{0xDC, 0xE0, 0x8A, 0xFF}}},
+	{{{46, -14, -30},0, {-16, -16},{0x40, 0xE0, 0x97, 0xFF}}},
+	{{{47, 16, -19},0, {-16, -16},{0x43, 0x59, 0xC4, 0xFF}}},
+	{{{-2, 19, 16},0, {-16, -16},{0xE0, 0x60, 0x4C, 0xFF}}},
+	{{{-15, -13, 17},0, {-16, -16},{0x95, 0xEB, 0x41, 0xFF}}},
+	{{{-15, -27, -4},0, {-16, -16},{0x93, 0xBF, 0xFD, 0xFF}}},
+	{{{-15, -11, -24},0, {-16, -16},{0x94, 0xF1, 0xBF, 0xFF}}},
+	{{{-3, -38, -4},0, {-16, -16},{0xDB, 0x86, 0xFC, 0xFF}}},
+	{{{45, -34, -4},0, {-16, -16},{0x3D, 0x91, 0xFB, 0xFF}}},
+	{{{58, -7, -3},0, {-16, -16},{0x7F, 0xFC, 0x1, 0xFF}}},
+	{{{47, 14, 13},0, {-16, -16},{0x43, 0x53, 0x44, 0xFF}}},
+	{{{-3, -17, 26},0, {-16, -16},{0xDD, 0xD7, 0x73, 0xFF}}},
+	{{{46, -17, 22},0, {-16, -16},{0x40, 0xD8, 0x66, 0xFF}}},
+};
+
+Gfx mario_000_offset_004_mesh_tri_0[] = {
+	gsSPVertex(mario_000_offset_004_mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(3, 0, 4, 0),
+	gsSP1Triangle(0, 5, 4, 0),
+	gsSP1Triangle(0, 6, 5, 0),
+	gsSP1Triangle(0, 2, 6, 0),
+	gsSP1Triangle(6, 2, 7, 0),
+	gsSP1Triangle(8, 7, 2, 0),
+	gsSP1Triangle(8, 2, 1, 0),
+	gsSP1Triangle(9, 8, 1, 0),
+	gsSP1Triangle(3, 9, 1, 0),
+	gsSP1Triangle(10, 9, 3, 0),
+	gsSP1Triangle(10, 3, 11, 0),
+	gsSP1Triangle(3, 4, 11, 0),
+	gsSP1Triangle(4, 12, 11, 0),
+	gsSP1Triangle(5, 12, 4, 0),
+	gsSP1Triangle(13, 12, 5, 0),
+	gsSP1Triangle(6, 13, 5, 0),
+	gsSP1Triangle(6, 14, 13, 0),
+	gsSP1Triangle(6, 7, 14, 0),
+	gsSP1Triangle(14, 7, 8, 0),
+	gsSP1Triangle(14, 8, 10, 0),
+	gsSP1Triangle(10, 8, 9, 0),
+	gsSP1Triangle(14, 10, 15, 0),
+	gsSP1Triangle(10, 11, 15, 0),
+	gsSP1Triangle(11, 12, 15, 0),
+	gsSP1Triangle(15, 12, 13, 0),
+	gsSP1Triangle(14, 15, 13, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_000_displaylist_003_mesh_vtx_0[46] = {
+	{{{17, -38, -39},0, {-16, -16},{0x9E, 0xB9, 0xDA, 0xFF}}},
+	{{{-14, -14, -4},0, {-16, -16},{0x8C, 0xCD, 0x3, 0xFF}}},
+	{{{-10, 26, -38},0, {-16, -16},{0x88, 0xEC, 0xDA, 0xFF}}},
+	{{{27, -58, 6},0, {-16, -16},{0xA2, 0xAC, 0xE, 0xFF}}},
+	{{{5, -6, 36},0, {-16, -16},{0x99, 0xD2, 0x3A, 0xFF}}},
+	{{{-18, 45, 8},0, {-16, -16},{0x82, 0xF5, 0xE, 0xFF}}},
+	{{{26, -25, -32},0, {-16, -16},{0x17, 0xC9, 0x90, 0xFF}}},
+	{{{17, -38, -39},0, {-16, -16},{0x5E, 0xEC, 0xAC, 0xFF}}},
+	{{{-10, 26, -38},0, {-16, -16},{0x33, 0x54, 0xB0, 0xFF}}},
+	{{{34, -41, 3},0, {-16, -16},{0x3D, 0x97, 0x26, 0xFF}}},
+	{{{58, -45, 7},0, {-16, -16},{0x6, 0x8A, 0x2F, 0xFF}}},
+	{{{80, -31, -61},0, {-16, -16},{0x1D, 0xB6, 0x9D, 0xFF}}},
+	{{{33, 7, -44},0, {-16, -16},{0xC4, 0xFD, 0x90, 0xFF}}},
+	{{{4, 24, -31},0, {-16, -16},{0xFB, 0x44, 0x95, 0xFF}}},
+	{{{-1, 39, 5},0, {-16, -16},{0xDB, 0x71, 0x2D, 0xFF}}},
+	{{{-18, 45, 8},0, {-16, -16},{0x2E, 0x73, 0x1C, 0xFF}}},
+	{{{-1, 39, 5},0, {-16, -16},{0xDB, 0x71, 0x2D, 0xFF}}},
+	{{{-18, 45, 8},0, {-16, -16},{0x2E, 0x73, 0x1C, 0xFF}}},
+	{{{5, -6, 36},0, {-16, -16},{0x43, 0x1C, 0x68, 0xFF}}},
+	{{{17, -1, 27},0, {-16, -16},{0xFE, 0xFD, 0x7F, 0xFF}}},
+	{{{34, -41, 3},0, {-16, -16},{0x3D, 0x97, 0x26, 0xFF}}},
+	{{{27, -58, 6},0, {-16, -16},{0x75, 0xD4, 0x18, 0xFF}}},
+	{{{17, -38, -39},0, {-16, -16},{0x5E, 0xEC, 0xAC, 0xFF}}},
+	{{{36, 6, 42},0, {-16, -16},{0xE2, 0xEF, 0x7A, 0xFF}}},
+	{{{12, 59, 10},0, {-16, -16},{0xAF, 0x55, 0x30, 0xFF}}},
+	{{{59, 81, 8},0, {-16, -16},{0x15, 0x79, 0x21, 0xFF}}},
+	{{{86, 29, 41},0, {-16, -16},{0x3F, 0x1A, 0x6B, 0xFF}}},
+	{{{107, -26, 4},0, {-16, -16},{0x65, 0xBF, 0x29, 0xFF}}},
+	{{{58, -45, 7},0, {-16, -16},{0x6, 0x8A, 0x2F, 0xFF}}},
+	{{{80, -31, -61},0, {-16, -16},{0x1D, 0xB6, 0x9D, 0xFF}}},
+	{{{100, -6, -46},0, {-16, -16},{0x69, 0xFD, 0xB9, 0xFF}}},
+	{{{61, 12, -60},0, {-16, -16},{0xF4, 0x18, 0x84, 0xFF}}},
+	{{{33, 7, -44},0, {-16, -16},{0xC4, 0xFD, 0x90, 0xFF}}},
+	{{{61, 12, -60},0, {-16, -16},{0xF4, 0x18, 0x84, 0xFF}}},
+	{{{80, -31, -61},0, {-16, -16},{0x1D, 0xB6, 0x9D, 0xFF}}},
+	{{{32, 63, -28},0, {-16, -16},{0xD0, 0x5B, 0xB6, 0xFF}}},
+	{{{4, 24, -31},0, {-16, -16},{0xFB, 0x44, 0x95, 0xFF}}},
+	{{{12, 59, 10},0, {-16, -16},{0xAF, 0x55, 0x30, 0xFF}}},
+	{{{-1, 39, 5},0, {-16, -16},{0xDB, 0x71, 0x2D, 0xFF}}},
+	{{{59, 81, 8},0, {-16, -16},{0x15, 0x79, 0x21, 0xFF}}},
+	{{{57, 55, -37},0, {-16, -16},{0x18, 0x54, 0xA4, 0xFF}}},
+	{{{99, 40, -16},0, {-16, -16},{0x6B, 0x41, 0xEA, 0xFF}}},
+	{{{86, 29, 41},0, {-16, -16},{0x3F, 0x1A, 0x6B, 0xFF}}},
+	{{{107, -26, 4},0, {-16, -16},{0x65, 0xBF, 0x29, 0xFF}}},
+	{{{100, -6, -46},0, {-16, -16},{0x69, 0xFD, 0xB9, 0xFF}}},
+	{{{90, 17, -46},0, {-16, -16},{0x47, 0x31, 0xA3, 0xFF}}},
+};
+
+Gfx mario_000_displaylist_003_mesh_tri_0[] = {
+	gsSPVertex(mario_000_displaylist_003_mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(4, 1, 3, 0),
+	gsSP1Triangle(5, 1, 4, 0),
+	gsSP1Triangle(2, 1, 5, 0),
+	gsSP1Triangle(6, 7, 8, 0),
+	gsSP1Triangle(7, 6, 9, 0),
+	gsSP1Triangle(10, 9, 6, 0),
+	gsSP1Triangle(6, 11, 10, 0),
+	gsSP1Triangle(6, 12, 11, 0),
+	gsSP1Triangle(6, 13, 12, 0),
+	gsSP1Triangle(8, 13, 6, 0),
+	gsSP1Triangle(14, 13, 8, 0),
+	gsSP1Triangle(8, 15, 14, 0),
+	gsSPVertex(mario_000_displaylist_003_mesh_vtx_0 + 16, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(4, 3, 2, 0),
+	gsSP1Triangle(2, 5, 4, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(7, 3, 4, 0),
+	gsSP1Triangle(0, 3, 7, 0),
+	gsSP1Triangle(0, 7, 8, 0),
+	gsSP1Triangle(7, 9, 8, 0),
+	gsSP1Triangle(7, 10, 9, 0),
+	gsSP1Triangle(11, 10, 7, 0),
+	gsSP1Triangle(12, 11, 7, 0),
+	gsSP1Triangle(4, 12, 7, 0),
+	gsSP1Triangle(13, 11, 12, 0),
+	gsSP1Triangle(13, 14, 11, 0),
+	gsSP1Triangle(15, 14, 13, 0),
+	gsSPVertex(mario_000_displaylist_003_mesh_vtx_0 + 32, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 0, 3, 0),
+	gsSP1Triangle(3, 0, 4, 0),
+	gsSP1Triangle(5, 3, 4, 0),
+	gsSP1Triangle(4, 6, 5, 0),
+	gsSP1Triangle(3, 5, 7, 0),
+	gsSP1Triangle(7, 8, 3, 0),
+	gsSP1Triangle(7, 9, 8, 0),
+	gsSP1Triangle(10, 9, 7, 0),
+	gsSP1Triangle(11, 9, 10, 0),
+	gsSP1Triangle(12, 9, 11, 0),
+	gsSP1Triangle(13, 9, 12, 0),
+	gsSP1Triangle(1, 13, 12, 0),
+	gsSP1Triangle(8, 13, 1, 0),
+	gsSP1Triangle(1, 3, 8, 0),
+	gsSP1Triangle(13, 8, 9, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_002_switch_option_right_hand_open_mesh_vtx_0[58] = {
+	{{{2, 3, 26},0, {-16, -16},{0x4A, 0x34, 0x59, 0xFF}}},
+	{{{20, -46, 12},0, {-16, -16},{0x75, 0xDD, 0x23, 0xFF}}},
+	{{{26, -32, 6},0, {-16, -16},{0x37, 0xA8, 0x49, 0xFF}}},
+	{{{13, -39, -31},0, {-16, -16},{0x63, 0xDD, 0xB9, 0xFF}}},
+	{{{20, -27, -27},0, {-16, -16},{0x11, 0xB1, 0x9E, 0xFF}}},
+	{{{-10, 14, -43},0, {-16, -16},{0x32, 0x3C, 0x9C, 0xFF}}},
+	{{{1, 15, -37},0, {-16, -16},{0xE0, 0x1D, 0x88, 0xFF}}},
+	{{{-3, 35, -9},0, {-16, -16},{0xCE, 0x72, 0x19, 0xFF}}},
+	{{{-17, 40, -8},0, {-16, -16},{0x2B, 0x78, 0x0, 0xFF}}},
+	{{{11, 5, 17},0, {-16, -16},{0x6, 0x1C, 0x7C, 0xFF}}},
+	{{{26, 16, 28},0, {-16, -16},{0xDE, 0xD, 0x7A, 0xFF}}},
+	{{{45, -34, 10},0, {-16, -16},{0xFF, 0x9F, 0x52, 0xFF}}},
+	{{{41, -37, -36},0, {-16, -16},{0xD7, 0x9E, 0xBB, 0xFF}}},
+	{{{25, -1, -44},0, {-16, -16},{0xDF, 0xE2, 0x89, 0xFF}}},
+	{{{11, 29, -52},0, {-16, -16},{0xDA, 0x1F, 0x8B, 0xFF}}},
+	{{{6, 53, -9},0, {-16, -16},{0xAC, 0x5C, 0x17, 0xFF}}},
+	{{{26, 16, 28},0, {-16, -16},{0xDE, 0xD, 0x7A, 0xFF}}},
+	{{{70, 89, -20},0, {-16, -16},{0xF0, 0x7E, 0xF8, 0xFF}}},
+	{{{6, 53, -9},0, {-16, -16},{0xAC, 0x5C, 0x17, 0xFF}}},
+	{{{77, 41, 21},0, {-16, -16},{0x14, 0x28, 0x77, 0xFF}}},
+	{{{83, -17, 10},0, {-16, -16},{0x42, 0xC1, 0x58, 0xFF}}},
+	{{{45, -34, 10},0, {-16, -16},{0xFF, 0x9F, 0x52, 0xFF}}},
+	{{{89, -47, -37},0, {-16, -16},{0x4B, 0xA4, 0xD3, 0xFF}}},
+	{{{41, -37, -36},0, {-16, -16},{0xD7, 0x9E, 0xBB, 0xFF}}},
+	{{{76, -18, -48},0, {-16, -16},{0x2D, 0x3, 0x89, 0xFF}}},
+	{{{25, -1, -44},0, {-16, -16},{0xDF, 0xE2, 0x89, 0xFF}}},
+	{{{26, 41, -41},0, {-16, -16},{0xF5, 0x42, 0x94, 0xFF}}},
+	{{{11, 29, -52},0, {-16, -16},{0xDA, 0x1F, 0x8B, 0xFF}}},
+	{{{78, 59, -34},0, {-16, -16},{0xF6, 0x16, 0x83, 0xFF}}},
+	{{{119, 70, -42},0, {-16, -16},{0x33, 0x40, 0x9F, 0xFF}}},
+	{{{121, 73, -21},0, {-16, -16},{0x4D, 0x5F, 0x22, 0xFF}}},
+	{{{141, 34, -7},0, {-16, -16},{0x74, 0xF7, 0x33, 0xFF}}},
+	{{{133, 28, -40},0, {-16, -16},{0x50, 0xD8, 0xA6, 0xFF}}},
+	{{{141, 34, -7},0, {-16, -16},{0x74, 0xF7, 0x33, 0xFF}}},
+	{{{83, -17, 10},0, {-16, -16},{0x42, 0xC1, 0x58, 0xFF}}},
+	{{{89, -6, -27},0, {-16, -16},{0x64, 0xE3, 0xB8, 0xFF}}},
+	{{{89, -47, -37},0, {-16, -16},{0x4B, 0xA4, 0xD3, 0xFF}}},
+	{{{76, -18, -48},0, {-16, -16},{0x2D, 0x3, 0x89, 0xFF}}},
+	{{{69, 10, -36},0, {-16, -16},{0x34, 0x1D, 0x90, 0xFF}}},
+	{{{26, 41, -41},0, {-16, -16},{0xF5, 0x42, 0x94, 0xFF}}},
+	{{{78, 59, -34},0, {-16, -16},{0xF6, 0x16, 0x83, 0xFF}}},
+	{{{119, 70, -42},0, {-16, -16},{0x33, 0x40, 0x9F, 0xFF}}},
+	{{{121, 73, -21},0, {-16, -16},{0x4D, 0x5F, 0x22, 0xFF}}},
+	{{{2, 3, 26},0, {-16, -16},{0xA8, 0xF0, 0x5A, 0xFF}}},
+	{{{6, -38, 7},0, {-16, -16},{0xA7, 0xB0, 0x2A, 0xFF}}},
+	{{{20, -46, 12},0, {-16, -16},{0xBA, 0xA1, 0x2E, 0xFF}}},
+	{{{-6, -3, 17},0, {-16, -16},{0x97, 0xE2, 0x42, 0xFF}}},
+	{{{-20, 22, -7},0, {-16, -16},{0x83, 0x0, 0x17, 0xFF}}},
+	{{{-17, 40, -8},0, {-16, -16},{0x84, 0x16, 0x11, 0xFF}}},
+	{{{-20, 22, -7},0, {-16, -16},{0x83, 0x0, 0x17, 0xFF}}},
+	{{{2, 3, 26},0, {-16, -16},{0xA8, 0xF0, 0x5A, 0xFF}}},
+	{{{-10, 14, -43},0, {-16, -16},{0x91, 0xF4, 0xC4, 0xFF}}},
+	{{{-15, 4, -32},0, {-16, -16},{0x8D, 0xDE, 0xD6, 0xFF}}},
+	{{{1, -33, -23},0, {-16, -16},{0x9F, 0xB3, 0xE2, 0xFF}}},
+	{{{13, -39, -31},0, {-16, -16},{0xB5, 0xA4, 0xD4, 0xFF}}},
+	{{{6, -38, 7},0, {-16, -16},{0xA7, 0xB0, 0x2A, 0xFF}}},
+	{{{20, -46, 12},0, {-16, -16},{0xBA, 0xA1, 0x2E, 0xFF}}},
+	{{{-6, -3, 17},0, {-16, -16},{0x97, 0xE2, 0x42, 0xFF}}},
+};
+
+Gfx mario_002_switch_option_right_hand_open_mesh_tri_0[] = {
+	gsSPVertex(mario_002_switch_option_right_hand_open_mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 1, 3, 0),
+	gsSP1Triangle(3, 4, 2, 0),
+	gsSP1Triangle(4, 3, 5, 0),
+	gsSP1Triangle(5, 6, 4, 0),
+	gsSP1Triangle(7, 6, 5, 0),
+	gsSP1Triangle(5, 8, 7, 0),
+	gsSP1Triangle(7, 8, 0, 0),
+	gsSP1Triangle(0, 9, 7, 0),
+	gsSP1Triangle(2, 9, 0, 0),
+	gsSP1Triangle(10, 9, 2, 0),
+	gsSP1Triangle(2, 11, 10, 0),
+	gsSP1Triangle(2, 12, 11, 0),
+	gsSP1Triangle(2, 4, 12, 0),
+	gsSP1Triangle(4, 13, 12, 0),
+	gsSP1Triangle(4, 6, 13, 0),
+	gsSP1Triangle(6, 14, 13, 0),
+	gsSP1Triangle(14, 6, 7, 0),
+	gsSP1Triangle(7, 15, 14, 0),
+	gsSP1Triangle(7, 10, 15, 0),
+	gsSP1Triangle(7, 9, 10, 0),
+	gsSPVertex(mario_002_switch_option_right_hand_open_mesh_vtx_0 + 16, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(4, 3, 0, 0),
+	gsSP1Triangle(5, 4, 0, 0),
+	gsSP1Triangle(6, 4, 5, 0),
+	gsSP1Triangle(5, 7, 6, 0),
+	gsSP1Triangle(6, 7, 8, 0),
+	gsSP1Triangle(7, 9, 8, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(9, 11, 10, 0),
+	gsSP1Triangle(2, 10, 11, 0),
+	gsSP1Triangle(10, 2, 1, 0),
+	gsSP1Triangle(1, 12, 10, 0),
+	gsSP1Triangle(13, 12, 1, 0),
+	gsSP1Triangle(1, 14, 13, 0),
+	gsSP1Triangle(14, 1, 3, 0),
+	gsSP1Triangle(15, 14, 3, 0),
+	gsSP1Triangle(4, 15, 3, 0),
+	gsSPVertex(mario_002_switch_option_right_hand_open_mesh_vtx_0 + 32, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 0, 2, 0),
+	gsSP1Triangle(4, 3, 2, 0),
+	gsSP1Triangle(5, 3, 4, 0),
+	gsSP1Triangle(5, 6, 3, 0),
+	gsSP1Triangle(5, 7, 6, 0),
+	gsSP1Triangle(7, 8, 6, 0),
+	gsSP1Triangle(6, 8, 3, 0),
+	gsSP1Triangle(8, 0, 3, 0),
+	gsSP1Triangle(8, 9, 0, 0),
+	gsSP1Triangle(9, 1, 0, 0),
+	gsSP1Triangle(10, 1, 9, 0),
+	gsSP1Triangle(11, 12, 13, 0),
+	gsSP1Triangle(11, 14, 12, 0),
+	gsSP1Triangle(15, 14, 11, 0),
+	gsSPVertex(mario_002_switch_option_right_hand_open_mesh_vtx_0 + 48, 10, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(3, 4, 1, 0),
+	gsSP1Triangle(5, 4, 3, 0),
+	gsSP1Triangle(6, 5, 3, 0),
+	gsSP1Triangle(7, 5, 6, 0),
+	gsSP1Triangle(8, 7, 6, 0),
+	gsSP1Triangle(5, 7, 9, 0),
+	gsSP1Triangle(9, 4, 5, 0),
+	gsSP1Triangle(9, 1, 4, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_000_offset_006_mesh_vtx_0[28] = {
+	{{{58, 17, 27},0, {-16, -16},{0x37, 0x5A, 0x48, 0xFF}}},
+	{{{67, 10, 21},0, {-16, -16},{0x6F, 0x31, 0x26, 0xFF}}},
+	{{{67, 11, -4},0, {-16, -16},{0x6F, 0x33, 0xDE, 0xFF}}},
+	{{{67, -14, 28},0, {-16, -16},{0x6E, 0xE8, 0x3B, 0xFF}}},
+	{{{57, -17, 37},0, {-16, -16},{0x33, 0xD7, 0x6D, 0xFF}}},
+	{{{7, 25, 32},0, {-16, -16},{0xDF, 0x60, 0x4C, 0xFF}}},
+	{{{7, 27, -13},0, {-16, -16},{0xE0, 0x68, 0xBF, 0xFF}}},
+	{{{58, 19, -9},0, {-16, -16},{0x37, 0x60, 0xC2, 0xFF}}},
+	{{{67, -12, -13},0, {-16, -16},{0x6E, 0xEE, 0xC3, 0xFF}}},
+	{{{66, -28, 6},0, {-16, -16},{0x6F, 0xC3, 0xFA, 0xFF}}},
+	{{{57, -38, 6},0, {-16, -16},{0x34, 0x8C, 0xF9, 0xFF}}},
+	{{{57, -14, -22},0, {-16, -16},{0x32, 0xE2, 0x8F, 0xFF}}},
+	{{{5, -44, 5},0, {-16, -16},{0xD8, 0x88, 0xF8, 0xFF}}},
+	{{{6, -19, 44},0, {-16, -16},{0xDC, 0xD5, 0x72, 0xFF}}},
+	{{{-8, 14, 22},0, {-16, -16},{0x93, 0x35, 0x26, 0xFF}}},
+	{{{-8, 15, -5},0, {-16, -16},{0x93, 0x38, 0xDE, 0xFF}}},
+	{{{-9, -10, -15},0, {-16, -16},{0x90, 0xF5, 0xC4, 0xFF}}},
+	{{{-8, 15, -5},0, {-16, -16},{0x93, 0x38, 0xDE, 0xFF}}},
+	{{{7, 27, -13},0, {-16, -16},{0xE0, 0x68, 0xBF, 0xFF}}},
+	{{{6, -15, -30},0, {-16, -16},{0xDC, 0xE2, 0x8A, 0xFF}}},
+	{{{58, 19, -9},0, {-16, -16},{0x37, 0x60, 0xC2, 0xFF}}},
+	{{{57, -14, -22},0, {-16, -16},{0x32, 0xE2, 0x8F, 0xFF}}},
+	{{{67, -12, -13},0, {-16, -16},{0x6E, 0xEE, 0xC3, 0xFF}}},
+	{{{5, -44, 5},0, {-16, -16},{0xD8, 0x88, 0xF8, 0xFF}}},
+	{{{-9, -28, 6},0, {-16, -16},{0x8F, 0xC6, 0xFB, 0xFF}}},
+	{{{-9, -13, 30},0, {-16, -16},{0x91, 0xEE, 0x3B, 0xFF}}},
+	{{{6, -19, 44},0, {-16, -16},{0xDC, 0xD5, 0x72, 0xFF}}},
+	{{{-8, 14, 22},0, {-16, -16},{0x93, 0x35, 0x26, 0xFF}}},
+};
+
+Gfx mario_000_offset_006_mesh_tri_0[] = {
+	gsSPVertex(mario_000_offset_006_mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(4, 3, 0, 0),
+	gsSP1Triangle(4, 0, 5, 0),
+	gsSP1Triangle(0, 6, 5, 0),
+	gsSP1Triangle(0, 7, 6, 0),
+	gsSP1Triangle(0, 2, 7, 0),
+	gsSP1Triangle(7, 2, 8, 0),
+	gsSP1Triangle(8, 2, 9, 0),
+	gsSP1Triangle(2, 3, 9, 0),
+	gsSP1Triangle(2, 1, 3, 0),
+	gsSP1Triangle(10, 9, 3, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(11, 8, 10, 0),
+	gsSP1Triangle(11, 10, 12, 0),
+	gsSP1Triangle(10, 13, 12, 0),
+	gsSP1Triangle(10, 4, 13, 0),
+	gsSP1Triangle(10, 3, 4, 0),
+	gsSP1Triangle(4, 5, 13, 0),
+	gsSP1Triangle(5, 14, 13, 0),
+	gsSP1Triangle(15, 14, 5, 0),
+	gsSP1Triangle(6, 15, 5, 0),
+	gsSPVertex(mario_000_offset_006_mesh_vtx_0 + 16, 12, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 0, 2, 0),
+	gsSP1Triangle(4, 3, 2, 0),
+	gsSP1Triangle(4, 5, 3, 0),
+	gsSP1Triangle(4, 6, 5, 0),
+	gsSP1Triangle(5, 7, 3, 0),
+	gsSP1Triangle(7, 8, 3, 0),
+	gsSP1Triangle(9, 8, 7, 0),
+	gsSP1Triangle(10, 9, 7, 0),
+	gsSP1Triangle(11, 9, 10, 0),
+	gsSP1Triangle(9, 11, 1, 0),
+	gsSP1Triangle(9, 1, 0, 0),
+	gsSP1Triangle(0, 8, 9, 0),
+	gsSP1Triangle(8, 0, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_000_offset_007_mesh_vtx_0[16] = {
+	{{{-2, -18, 38},0, {-16, -16},{0xDC, 0xD6, 0x72, 0xFF}}},
+	{{{-14, -14, 28},0, {-16, -16},{0x93, 0xED, 0x3E, 0xFF}}},
+	{{{-3, -39, 6},0, {-16, -16},{0xD8, 0x88, 0xF9, 0xFF}}},
+	{{{-13, 10, 21},0, {-16, -16},{0x95, 0x36, 0x2A, 0xFF}}},
+	{{{-1, 18, 28},0, {-16, -16},{0xDF, 0x60, 0x4C, 0xFF}}},
+	{{{47, -17, 34},0, {-16, -16},{0x41, 0xD9, 0x66, 0xFF}}},
+	{{{46, -36, 6},0, {-16, -16},{0x3D, 0x91, 0xFA, 0xFF}}},
+	{{{47, -15, -19},0, {-16, -16},{0x3F, 0xE3, 0x96, 0xFF}}},
+	{{{-2, -15, -23},0, {-16, -16},{0xDC, 0xE2, 0x8A, 0xFF}}},
+	{{{-14, -28, 6},0, {-16, -16},{0x92, 0xC1, 0xFA, 0xFF}}},
+	{{{-14, -12, -13},0, {-16, -16},{0x94, 0xF2, 0xBF, 0xFF}}},
+	{{{-13, 12, -4},0, {-16, -16},{0x98, 0x3E, 0xDA, 0xFF}}},
+	{{{-1, 20, -9},0, {-16, -16},{0xE1, 0x68, 0xBE, 0xFF}}},
+	{{{48, 13, 25},0, {-16, -16},{0x44, 0x54, 0x44, 0xFF}}},
+	{{{59, -8, 7},0, {-16, -16},{0x7F, 0xFD, 0xFE, 0xFF}}},
+	{{{48, 15, -7},0, {-16, -16},{0x43, 0x5B, 0xC5, 0xFF}}},
+};
+
+Gfx mario_000_offset_007_mesh_tri_0[] = {
+	gsSPVertex(mario_000_offset_007_mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(4, 3, 0, 0),
+	gsSP1Triangle(5, 4, 0, 0),
+	gsSP1Triangle(6, 5, 0, 0),
+	gsSP1Triangle(6, 0, 2, 0),
+	gsSP1Triangle(7, 6, 2, 0),
+	gsSP1Triangle(7, 2, 8, 0),
+	gsSP1Triangle(2, 9, 8, 0),
+	gsSP1Triangle(1, 9, 2, 0),
+	gsSP1Triangle(9, 1, 3, 0),
+	gsSP1Triangle(10, 9, 3, 0),
+	gsSP1Triangle(10, 3, 11, 0),
+	gsSP1Triangle(11, 3, 4, 0),
+	gsSP1Triangle(12, 11, 4, 0),
+	gsSP1Triangle(13, 12, 4, 0),
+	gsSP1Triangle(5, 13, 4, 0),
+	gsSP1Triangle(5, 14, 13, 0),
+	gsSP1Triangle(6, 14, 5, 0),
+	gsSP1Triangle(7, 14, 6, 0),
+	gsSP1Triangle(15, 14, 7, 0),
+	gsSP1Triangle(15, 7, 8, 0),
+	gsSP1Triangle(15, 8, 12, 0),
+	gsSP1Triangle(8, 10, 12, 0),
+	gsSP1Triangle(9, 10, 8, 0),
+	gsSP1Triangle(10, 11, 12, 0),
+	gsSP1Triangle(13, 14, 15, 0),
+	gsSP1Triangle(13, 15, 12, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_000_displaylist_004_mesh_vtx_0[36] = {
+	{{{-14, 26, 41},0, {-16, -16},{0x2D, 0x50, 0x57, 0xFF}}},
+	{{{13, -38, 41},0, {-16, -16},{0x57, 0xE5, 0x58, 0xFF}}},
+	{{{23, -26, 35},0, {-16, -16},{0xF, 0xBF, 0x6C, 0xFF}}},
+	{{{31, -40, -1},0, {-16, -16},{0x3D, 0x99, 0xD4, 0xFF}}},
+	{{{24, -57, -4},0, {-16, -16},{0x75, 0xD3, 0xEC, 0xFF}}},
+	{{{4, -3, -33},0, {-16, -16},{0x4C, 0x21, 0x9F, 0xFF}}},
+	{{{15, 0, -23},0, {-16, -16},{0xC, 0x1, 0x82, 0xFF}}},
+	{{{-2, 41, -1},0, {-16, -16},{0xDA, 0x71, 0xD3, 0xFF}}},
+	{{{-19, 47, -4},0, {-16, -16},{0x2D, 0x75, 0xEB, 0xFF}}},
+	{{{1, 24, 35},0, {-16, -16},{0xF5, 0x3E, 0x6E, 0xFF}}},
+	{{{29, 6, 49},0, {-16, -16},{0xBF, 0xF9, 0x6D, 0xFF}}},
+	{{{75, -33, 66},0, {-16, -16},{0x19, 0xB2, 0x61, 0xFF}}},
+	{{{55, -44, -4},0, {-16, -16},{0x7, 0x8C, 0xCC, 0xFF}}},
+	{{{35, 9, -37},0, {-16, -16},{0xE7, 0xF6, 0x84, 0xFF}}},
+	{{{10, 60, -4},0, {-16, -16},{0xB1, 0x58, 0xD2, 0xFF}}},
+	{{{29, 62, 34},0, {-16, -16},{0xCE, 0x59, 0x4B, 0xFF}}},
+	{{{29, 62, 34},0, {-16, -16},{0xCE, 0x59, 0x4B, 0xFF}}},
+	{{{29, 6, 49},0, {-16, -16},{0xBF, 0xF9, 0x6D, 0xFF}}},
+	{{{57, 10, 66},0, {-16, -16},{0xF3, 0x15, 0x7D, 0xFF}}},
+	{{{75, -33, 66},0, {-16, -16},{0x19, 0xB2, 0x61, 0xFF}}},
+	{{{96, -8, 52},0, {-16, -16},{0x67, 0xF9, 0x4A, 0xFF}}},
+	{{{104, -26, 1},0, {-16, -16},{0x65, 0xBF, 0xD7, 0xFF}}},
+	{{{55, -44, -4},0, {-16, -16},{0x7, 0x8C, 0xCC, 0xFF}}},
+	{{{35, 9, -37},0, {-16, -16},{0xE7, 0xF6, 0x84, 0xFF}}},
+	{{{86, 30, -33},0, {-16, -16},{0x45, 0x1C, 0x99, 0xFF}}},
+	{{{58, 81, 0},0, {-16, -16},{0x17, 0x7A, 0xE4, 0xFF}}},
+	{{{10, 60, -4},0, {-16, -16},{0xB1, 0x58, 0xD2, 0xFF}}},
+	{{{54, 54, 44},0, {-16, -16},{0x14, 0x51, 0x5F, 0xFF}}},
+	{{{86, 15, 52},0, {-16, -16},{0x45, 0x2E, 0x61, 0xFF}}},
+	{{{97, 39, 24},0, {-16, -16},{0x6B, 0x3E, 0x1C, 0xFF}}},
+	{{{4, -3, -33},0, {-16, -16},{0x9A, 0xD6, 0xC1, 0xFF}}},
+	{{{-16, -12, 6},0, {-16, -16},{0x8B, 0xCF, 0xF6, 0xFF}}},
+	{{{-19, 47, -4},0, {-16, -16},{0x83, 0xF6, 0xEB, 0xFF}}},
+	{{{24, -57, -4},0, {-16, -16},{0xA0, 0xAF, 0xEC, 0xFF}}},
+	{{{13, -38, 41},0, {-16, -16},{0x9C, 0xB8, 0x1F, 0xFF}}},
+	{{{-14, 26, 41},0, {-16, -16},{0x86, 0xEB, 0x1E, 0xFF}}},
+};
+
+Gfx mario_000_displaylist_004_mesh_tri_0[] = {
+	gsSPVertex(mario_000_displaylist_004_mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 2, 1, 0),
+	gsSP1Triangle(1, 4, 3, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(5, 6, 3, 0),
+	gsSP1Triangle(7, 6, 5, 0),
+	gsSP1Triangle(5, 8, 7, 0),
+	gsSP1Triangle(7, 8, 0, 0),
+	gsSP1Triangle(0, 9, 7, 0),
+	gsSP1Triangle(2, 9, 0, 0),
+	gsSP1Triangle(10, 9, 2, 0),
+	gsSP1Triangle(11, 10, 2, 0),
+	gsSP1Triangle(12, 11, 2, 0),
+	gsSP1Triangle(2, 3, 12, 0),
+	gsSP1Triangle(13, 12, 3, 0),
+	gsSP1Triangle(3, 6, 13, 0),
+	gsSP1Triangle(13, 6, 7, 0),
+	gsSP1Triangle(14, 13, 7, 0),
+	gsSP1Triangle(14, 7, 9, 0),
+	gsSP1Triangle(15, 14, 9, 0),
+	gsSP1Triangle(9, 10, 15, 0),
+	gsSPVertex(mario_000_displaylist_004_mesh_vtx_0 + 16, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 2, 1, 0),
+	gsSP1Triangle(3, 4, 2, 0),
+	gsSP1Triangle(5, 4, 3, 0),
+	gsSP1Triangle(6, 5, 3, 0),
+	gsSP1Triangle(7, 5, 6, 0),
+	gsSP1Triangle(7, 8, 5, 0),
+	gsSP1Triangle(9, 8, 7, 0),
+	gsSP1Triangle(10, 9, 7, 0),
+	gsSP1Triangle(9, 10, 0, 0),
+	gsSP1Triangle(0, 11, 9, 0),
+	gsSP1Triangle(11, 0, 2, 0),
+	gsSP1Triangle(12, 11, 2, 0),
+	gsSP1Triangle(4, 12, 2, 0),
+	gsSP1Triangle(4, 13, 12, 0),
+	gsSP1Triangle(5, 13, 4, 0),
+	gsSP1Triangle(8, 13, 5, 0),
+	gsSP1Triangle(9, 13, 8, 0),
+	gsSP1Triangle(11, 13, 9, 0),
+	gsSP1Triangle(13, 11, 12, 0),
+	gsSPVertex(mario_000_displaylist_004_mesh_vtx_0 + 30, 6, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(4, 1, 3, 0),
+	gsSP1Triangle(5, 1, 4, 0),
+	gsSP1Triangle(2, 1, 5, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_002_switch_option_left_hand_open_mesh_vtx_0[57] = {
+	{{{7, 1, -26},0, {-16, -16},{0x4C, 0x2B, 0xA4, 0xFF}}},
+	{{{-9, 41, 5},0, {-16, -16},{0x32, 0x74, 0xF3, 0xFF}}},
+	{{{3, 36, 6},0, {-16, -16},{0xD7, 0x74, 0xE0, 0xFF}}},
+	{{{-1, 18, 42},0, {-16, -16},{0x3E, 0x42, 0x5A, 0xFF}}},
+	{{{9, 18, 35},0, {-16, -16},{0xEA, 0x29, 0x76, 0xFF}}},
+	{{{26, -24, 28},0, {-16, -16},{0xE, 0xBA, 0x69, 0xFF}}},
+	{{{19, -36, 33},0, {-16, -16},{0x66, 0xE1, 0x45, 0xFF}}},
+	{{{30, -32, -4},0, {-16, -16},{0x37, 0xA3, 0xBD, 0xFF}}},
+	{{{25, -46, -9},0, {-16, -16},{0x77, 0xE1, 0xDF, 0xFF}}},
+	{{{16, 4, -17},0, {-16, -16},{0xFF, 0x11, 0x82, 0xFF}}},
+	{{{30, 13, -30},0, {-16, -16},{0xD6, 0x3, 0x88, 0xFF}}},
+	{{{13, 53, 5},0, {-16, -16},{0xAE, 0x5E, 0xE7, 0xFF}}},
+	{{{20, 33, 48},0, {-16, -16},{0xE2, 0x2B, 0x74, 0xFF}}},
+	{{{32, 2, 43},0, {-16, -16},{0xE2, 0xED, 0x7A, 0xFF}}},
+	{{{46, -35, 37},0, {-16, -16},{0xD8, 0xA4, 0x4E, 0xFF}}},
+	{{{48, -35, -9},0, {-16, -16},{0xF7, 0x99, 0xB7, 0xFF}}},
+	{{{30, 13, -30},0, {-16, -16},{0xD6, 0x3, 0x88, 0xFF}}},
+	{{{86, -19, -13},0, {-16, -16},{0x3D, 0xB9, 0xAB, 0xFF}}},
+	{{{48, -35, -9},0, {-16, -16},{0xF7, 0x99, 0xB7, 0xFF}}},
+	{{{81, 37, -28},0, {-16, -16},{0x11, 0x1E, 0x86, 0xFF}}},
+	{{{76, 88, 9},0, {-16, -16},{0xF2, 0x7E, 0xFE, 0xFF}}},
+	{{{13, 53, 5},0, {-16, -16},{0xAE, 0x5E, 0xE7, 0xFF}}},
+	{{{34, 43, 36},0, {-16, -16},{0xFD, 0x4A, 0x67, 0xFF}}},
+	{{{20, 33, 48},0, {-16, -16},{0xE2, 0x2B, 0x74, 0xFF}}},
+	{{{32, 2, 43},0, {-16, -16},{0xE2, 0xED, 0x7A, 0xFF}}},
+	{{{81, -15, 45},0, {-16, -16},{0x35, 0xC, 0x73, 0xFF}}},
+	{{{46, -35, 37},0, {-16, -16},{0xD8, 0xA4, 0x4E, 0xFF}}},
+	{{{93, -45, 36},0, {-16, -16},{0x4C, 0xA7, 0x31, 0xFF}}},
+	{{{93, -5, 22},0, {-16, -16},{0x68, 0xE6, 0x45, 0xFF}}},
+	{{{136, 28, 31},0, {-16, -16},{0x51, 0xDD, 0x5B, 0xFF}}},
+	{{{143, 31, -1},0, {-16, -16},{0x72, 0xF0, 0xCB, 0xFF}}},
+	{{{125, 71, 9},0, {-16, -16},{0x4E, 0x5B, 0xD4, 0xFF}}},
+	{{{124, 69, 30},0, {-16, -16},{0x38, 0x45, 0x5A, 0xFF}}},
+	{{{125, 71, 9},0, {-16, -16},{0x4E, 0x5B, 0xD4, 0xFF}}},
+	{{{76, 88, 9},0, {-16, -16},{0xF2, 0x7E, 0xFE, 0xFF}}},
+	{{{84, 59, 25},0, {-16, -16},{0xFD, 0x21, 0x7B, 0xFF}}},
+	{{{34, 43, 36},0, {-16, -16},{0xFD, 0x4A, 0x67, 0xFF}}},
+	{{{75, 11, 32},0, {-16, -16},{0x3E, 0x24, 0x69, 0xFF}}},
+	{{{81, -15, 45},0, {-16, -16},{0x35, 0xC, 0x73, 0xFF}}},
+	{{{93, -5, 22},0, {-16, -16},{0x68, 0xE6, 0x45, 0xFF}}},
+	{{{93, -45, 36},0, {-16, -16},{0x4C, 0xA7, 0x31, 0xFF}}},
+	{{{136, 28, 31},0, {-16, -16},{0x51, 0xDD, 0x5B, 0xFF}}},
+	{{{143, 31, -1},0, {-16, -16},{0x72, 0xF0, 0xCB, 0xFF}}},
+	{{{25, -46, -9},0, {-16, -16},{0xB8, 0x9F, 0xDA, 0xFF}}},
+	{{{11, -38, -3},0, {-16, -16},{0xA5, 0xAD, 0xE2, 0xFF}}},
+	{{{7, 1, -26},0, {-16, -16},{0x9E, 0xE7, 0xB3, 0xFF}}},
+	{{{19, -36, 33},0, {-16, -16},{0xB6, 0xA8, 0x37, 0xFF}}},
+	{{{7, -30, 26},0, {-16, -16},{0x9E, 0xBA, 0x2A, 0xFF}}},
+	{{{-1, 18, 42},0, {-16, -16},{0x94, 0xFD, 0x42, 0xFF}}},
+	{{{7, -30, 26},0, {-16, -16},{0x9E, 0xBA, 0x2A, 0xFF}}},
+	{{{19, -36, 33},0, {-16, -16},{0xB6, 0xA8, 0x37, 0xFF}}},
+	{{{-7, 7, 32},0, {-16, -16},{0x8E, 0xE6, 0x31, 0xFF}}},
+	{{{-12, 23, 6},0, {-16, -16},{0x82, 0x0, 0xF0, 0xFF}}},
+	{{{-9, 41, 5},0, {-16, -16},{0x83, 0x14, 0xF4, 0xFF}}},
+	{{{7, 1, -26},0, {-16, -16},{0x9E, 0xE7, 0xB3, 0xFF}}},
+	{{{0, -4, -15},0, {-16, -16},{0x92, 0xDD, 0xCB, 0xFF}}},
+	{{{11, -38, -3},0, {-16, -16},{0xA5, 0xAD, 0xE2, 0xFF}}},
+};
+
+Gfx mario_002_switch_option_left_hand_open_mesh_tri_0[] = {
+	gsSPVertex(mario_002_switch_option_left_hand_open_mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 1, 3, 0),
+	gsSP1Triangle(3, 4, 2, 0),
+	gsSP1Triangle(5, 4, 3, 0),
+	gsSP1Triangle(3, 6, 5, 0),
+	gsSP1Triangle(7, 5, 6, 0),
+	gsSP1Triangle(6, 8, 7, 0),
+	gsSP1Triangle(7, 8, 0, 0),
+	gsSP1Triangle(0, 9, 7, 0),
+	gsSP1Triangle(2, 9, 0, 0),
+	gsSP1Triangle(10, 9, 2, 0),
+	gsSP1Triangle(11, 10, 2, 0),
+	gsSP1Triangle(12, 11, 2, 0),
+	gsSP1Triangle(2, 4, 12, 0),
+	gsSP1Triangle(13, 12, 4, 0),
+	gsSP1Triangle(13, 4, 5, 0),
+	gsSP1Triangle(14, 13, 5, 0),
+	gsSP1Triangle(14, 5, 7, 0),
+	gsSP1Triangle(15, 14, 7, 0),
+	gsSP1Triangle(10, 15, 7, 0),
+	gsSP1Triangle(7, 9, 10, 0),
+	gsSPVertex(mario_002_switch_option_left_hand_open_mesh_vtx_0 + 16, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(4, 3, 0, 0),
+	gsSP1Triangle(5, 4, 0, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(7, 6, 5, 0),
+	gsSP1Triangle(6, 7, 8, 0),
+	gsSP1Triangle(6, 8, 9, 0),
+	gsSP1Triangle(9, 8, 10, 0),
+	gsSP1Triangle(9, 10, 11, 0),
+	gsSP1Triangle(11, 10, 2, 0),
+	gsSP1Triangle(2, 1, 11, 0),
+	gsSP1Triangle(1, 12, 11, 0),
+	gsSP1Triangle(1, 13, 12, 0),
+	gsSP1Triangle(1, 14, 13, 0),
+	gsSP1Triangle(3, 14, 1, 0),
+	gsSP1Triangle(3, 15, 14, 0),
+	gsSP1Triangle(3, 4, 15, 0),
+	gsSPVertex(mario_002_switch_option_left_hand_open_mesh_vtx_0 + 32, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(4, 3, 2, 0),
+	gsSP1Triangle(5, 3, 4, 0),
+	gsSP1Triangle(5, 4, 6, 0),
+	gsSP1Triangle(7, 5, 6, 0),
+	gsSP1Triangle(8, 7, 6, 0),
+	gsSP1Triangle(7, 3, 5, 0),
+	gsSP1Triangle(7, 9, 3, 0),
+	gsSP1Triangle(9, 0, 3, 0),
+	gsSP1Triangle(9, 10, 0, 0),
+	gsSP1Triangle(0, 10, 1, 0),
+	gsSP1Triangle(11, 12, 13, 0),
+	gsSP1Triangle(14, 12, 11, 0),
+	gsSP1Triangle(14, 15, 12, 0),
+	gsSPVertex(mario_002_switch_option_left_hand_open_mesh_vtx_0 + 48, 9, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(4, 3, 0, 0),
+	gsSP1Triangle(5, 4, 0, 0),
+	gsSP1Triangle(6, 4, 5, 0),
+	gsSP1Triangle(6, 7, 4, 0),
+	gsSP1Triangle(8, 7, 6, 0),
+	gsSP1Triangle(7, 8, 1, 0),
+	gsSP1Triangle(1, 3, 7, 0),
+	gsSP1Triangle(3, 4, 7, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_004_switch_option_left_hand_peace_mesh_vtx_0[73] = {
+	{{{166, -13, -17},0, {-16, -16},{0x7A, 0x9, 0x23, 0xFF}}},
+	{{{162, 14, -11},0, {-16, -16},{0x7A, 0xB, 0x22, 0xFF}}},
+	{{{153, 7, 24},0, {-16, -16},{0x49, 0xF2, 0x67, 0xFF}}},
+	{{{155, -15, 21},0, {-16, -16},{0x47, 0xF8, 0x69, 0xFF}}},
+	{{{101, -29, 15},0, {-16, -16},{0x42, 0x97, 0x1A, 0xFF}}},
+	{{{98, 10, 29},0, {-16, -16},{0x4F, 0x9, 0x63, 0xFF}}},
+	{{{90, -3, 52},0, {-16, -16},{0x47, 0x3, 0x69, 0xFF}}},
+	{{{84, 48, 24},0, {-16, -16},{0x1A, 0x4F, 0x60, 0xFF}}},
+	{{{139, 53, 25},0, {-16, -16},{0xFC, 0x14, 0x7D, 0xFF}}},
+	{{{123, 72, 21},0, {-16, -16},{0xFC, 0x17, 0x7D, 0xFF}}},
+	{{{46, 49, 45},0, {-16, -16},{0xF7, 0x48, 0x68, 0xFF}}},
+	{{{56, 80, 1},0, {-16, -16},{0x7, 0x7D, 0xEC, 0xFF}}},
+	{{{84, 60, -7},0, {-16, -16},{0x2, 0x70, 0xC4, 0xFF}}},
+	{{{126, 84, -3},0, {-16, -16},{0xC3, 0x67, 0x2B, 0xFF}}},
+	{{{123, 72, 21},0, {-16, -16},{0xC4, 0x67, 0x2C, 0xFF}}},
+	{{{89, 18, -34},0, {-16, -16},{0x7, 0xB, 0x82, 0xFF}}},
+	{{{126, 84, -3},0, {-16, -16},{0x6, 0x33, 0x8C, 0xFF}}},
+	{{{89, 18, -34},0, {-16, -16},{0x7, 0xB, 0x82, 0xFF}}},
+	{{{84, 60, -7},0, {-16, -16},{0x2, 0x70, 0xC4, 0xFF}}},
+	{{{146, 59, -8},0, {-16, -16},{0x17, 0x2A, 0x8A, 0xFF}}},
+	{{{56, 80, 1},0, {-16, -16},{0x7, 0x7D, 0xEC, 0xFF}}},
+	{{{33, 7, -37},0, {-16, -16},{0xDF, 0xF9, 0x86, 0xFF}}},
+	{{{94, -22, -18},0, {-16, -16},{0x1A, 0xA8, 0xA9, 0xFF}}},
+	{{{166, -13, -17},0, {-16, -16},{0x1E, 0x7, 0x85, 0xFF}}},
+	{{{162, 14, -11},0, {-16, -16},{0x27, 0x20, 0x8B, 0xFF}}},
+	{{{56, -47, -5},0, {-16, -16},{0x3, 0x8A, 0xD1, 0xFF}}},
+	{{{32, -43, 0},0, {-16, -16},{0x34, 0x95, 0xD3, 0xFF}}},
+	{{{45, -29, 52},0, {-16, -16},{0xE7, 0xBC, 0x69, 0xFF}}},
+	{{{88, -34, 39},0, {-16, -16},{0x3D, 0xA6, 0x41, 0xFF}}},
+	{{{101, -29, 15},0, {-16, -16},{0x42, 0x97, 0x1A, 0xFF}}},
+	{{{155, -15, 21},0, {-16, -16},{0x15, 0x83, 0xF6, 0xFF}}},
+	{{{166, -13, -17},0, {-16, -16},{0x10, 0x82, 0xFE, 0xFF}}},
+	{{{88, -34, 39},0, {-16, -16},{0x3D, 0xA6, 0x41, 0xFF}}},
+	{{{101, -29, 15},0, {-16, -16},{0x42, 0x97, 0x1A, 0xFF}}},
+	{{{90, -3, 52},0, {-16, -16},{0x47, 0x3, 0x69, 0xFF}}},
+	{{{45, -29, 52},0, {-16, -16},{0xE7, 0xBC, 0x69, 0xFF}}},
+	{{{46, 49, 45},0, {-16, -16},{0xF7, 0x48, 0x68, 0xFF}}},
+	{{{18, 30, 41},0, {-16, -16},{0xC9, 0x2E, 0x69, 0xFF}}},
+	{{{8, 58, -2},0, {-16, -16},{0xAF, 0x5D, 0xE2, 0xFF}}},
+	{{{56, 80, 1},0, {-16, -16},{0x7, 0x7D, 0xEC, 0xFF}}},
+	{{{33, 7, -37},0, {-16, -16},{0xDF, 0xF9, 0x86, 0xFF}}},
+	{{{-4, 38, 0},0, {-16, -16},{0xD9, 0x72, 0xD8, 0xFF}}},
+	{{{14, -1, -22},0, {-16, -16},{0x4, 0x4, 0x81, 0xFF}}},
+	{{{32, -43, 0},0, {-16, -16},{0x34, 0x95, 0xD3, 0xFF}}},
+	{{{2, -5, -33},0, {-16, -16},{0xFA, 0x3, 0x81, 0xFF}}},
+	{{{24, -59, -3},0, {-16, -16},{0x27, 0x8D, 0xDA, 0xFF}}},
+	{{{23, -29, 36},0, {-16, -16},{0x17, 0xC5, 0x6E, 0xFF}}},
+	{{{0, 21, 37},0, {-16, -16},{0x5, 0x44, 0x6B, 0xFF}}},
+	{{{-15, 23, 43},0, {-16, -16},{0xD4, 0x3C, 0x67, 0xFF}}},
+	{{{0, 21, 37},0, {-16, -16},{0x5, 0x44, 0x6B, 0xFF}}},
+	{{{-4, 38, 0},0, {-16, -16},{0xD9, 0x72, 0xD8, 0xFF}}},
+	{{{15, -39, 42},0, {-16, -16},{0x13, 0xBA, 0x68, 0xFF}}},
+	{{{0, -35, 32},0, {-16, -16},{0xA4, 0xB8, 0x32, 0xFF}}},
+	{{{-21, 9, 33},0, {-16, -16},{0x8D, 0xE6, 0x30, 0xFF}}},
+	{{{-22, 43, -3},0, {-16, -16},{0xC2, 0x68, 0xD9, 0xFF}}},
+	{{{14, -1, -22},0, {-16, -16},{0x4, 0x4, 0x81, 0xFF}}},
+	{{{2, -5, -33},0, {-16, -16},{0xFA, 0x3, 0x81, 0xFF}}},
+	{{{-25, 24, 0},0, {-16, -16},{0x84, 0xFB, 0xE5, 0xFF}}},
+	{{{-8, -12, -20},0, {-16, -16},{0x9B, 0xD0, 0xC4, 0xFF}}},
+	{{{24, -59, -3},0, {-16, -16},{0x27, 0x8D, 0xDA, 0xFF}}},
+	{{{6, -49, 0},0, {-16, -16},{0xAC, 0xA5, 0xE6, 0xFF}}},
+	{{{23, -29, 36},0, {-16, -16},{0x17, 0xC5, 0x6E, 0xFF}}},
+	{{{146, 59, -8},0, {-16, -16},{0x5E, 0x4B, 0x29, 0xFF}}},
+	{{{126, 84, -3},0, {-16, -16},{0x60, 0x44, 0x2F, 0xFF}}},
+	{{{123, 72, 21},0, {-16, -16},{0x5D, 0x4C, 0x28, 0xFF}}},
+	{{{139, 53, 25},0, {-16, -16},{0x5A, 0x53, 0x22, 0xFF}}},
+	{{{105, 17, 3},0, {-16, -16},{0x77, 0x2D, 0x3, 0xFF}}},
+	{{{98, 10, 29},0, {-16, -16},{0x6E, 0x30, 0x2B, 0xFF}}},
+	{{{153, 7, 24},0, {-16, -16},{0xD, 0x7B, 0x1E, 0xFF}}},
+	{{{139, 53, 25},0, {-16, -16},{0x5B, 0xA8, 0x3, 0xFF}}},
+	{{{146, 59, -8},0, {-16, -16},{0x59, 0xA6, 0xF5, 0xFF}}},
+	{{{89, 18, -34},0, {-16, -16},{0x70, 0x25, 0xD0, 0xFF}}},
+	{{{162, 14, -11},0, {-16, -16},{0xB, 0x7D, 0x13, 0xFF}}},
+};
+
+Gfx mario_004_switch_option_left_hand_peace_mesh_tri_0[] = {
+	gsSPVertex(mario_004_switch_option_left_hand_peace_mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 3, 2, 0),
+	gsSP1Triangle(4, 2, 5, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(5, 7, 6, 0),
+	gsSP1Triangle(7, 5, 8, 0),
+	gsSP1Triangle(8, 9, 7, 0),
+	gsSP1Triangle(6, 7, 10, 0),
+	gsSP1Triangle(10, 7, 11, 0),
+	gsSP1Triangle(11, 7, 12, 0),
+	gsSP1Triangle(12, 7, 13, 0),
+	gsSP1Triangle(7, 14, 13, 0),
+	gsSP1Triangle(11, 12, 15, 0),
+	gsSPVertex(mario_004_switch_option_left_hand_peace_mesh_vtx_0 + 16, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 0, 3, 0),
+	gsSP1Triangle(4, 1, 5, 0),
+	gsSP1Triangle(5, 1, 6, 0),
+	gsSP1Triangle(7, 6, 1, 0),
+	gsSP1Triangle(1, 8, 7, 0),
+	gsSP1Triangle(9, 5, 6, 0),
+	gsSP1Triangle(5, 9, 10, 0),
+	gsSP1Triangle(9, 11, 10, 0),
+	gsSP1Triangle(11, 9, 12, 0),
+	gsSP1Triangle(13, 12, 9, 0),
+	gsSP1Triangle(13, 9, 6, 0),
+	gsSP1Triangle(6, 14, 13, 0),
+	gsSP1Triangle(14, 6, 15, 0),
+	gsSPVertex(mario_004_switch_option_left_hand_peace_mesh_vtx_0 + 32, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(3, 2, 4, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(4, 6, 5, 0),
+	gsSP1Triangle(4, 7, 6, 0),
+	gsSP1Triangle(6, 7, 8, 0),
+	gsSP1Triangle(6, 8, 9, 0),
+	gsSP1Triangle(8, 10, 9, 0),
+	gsSP1Triangle(11, 10, 8, 0),
+	gsSP1Triangle(12, 10, 11, 0),
+	gsSP1Triangle(12, 11, 13, 0),
+	gsSP1Triangle(13, 11, 14, 0),
+	gsSP1Triangle(3, 14, 11, 0),
+	gsSP1Triangle(14, 3, 5, 0),
+	gsSP1Triangle(15, 14, 5, 0),
+	gsSP1Triangle(9, 15, 5, 0),
+	gsSP1Triangle(5, 6, 9, 0),
+	gsSPVertex(mario_004_switch_option_left_hand_peace_mesh_vtx_0 + 48, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(0, 4, 3, 0),
+	gsSP1Triangle(0, 5, 4, 0),
+	gsSP1Triangle(6, 5, 0, 0),
+	gsSP1Triangle(0, 2, 6, 0),
+	gsSP1Triangle(6, 2, 7, 0),
+	gsSP1Triangle(6, 7, 8, 0),
+	gsSP1Triangle(8, 9, 6, 0),
+	gsSP1Triangle(8, 10, 9, 0),
+	gsSP1Triangle(11, 10, 8, 0),
+	gsSP1Triangle(11, 12, 10, 0),
+	gsSP1Triangle(3, 12, 11, 0),
+	gsSP1Triangle(11, 13, 3, 0),
+	gsSP1Triangle(3, 13, 1, 0),
+	gsSP1Triangle(3, 4, 12, 0),
+	gsSP1Triangle(10, 12, 4, 0),
+	gsSP1Triangle(4, 5, 10, 0),
+	gsSP1Triangle(5, 9, 10, 0),
+	gsSP1Triangle(6, 9, 5, 0),
+	gsSPVertex(mario_004_switch_option_left_hand_peace_mesh_vtx_0 + 62, 11, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(7, 5, 4, 0),
+	gsSP1Triangle(7, 4, 8, 0),
+	gsSP1Triangle(8, 4, 9, 0),
+	gsSP1Triangle(10, 9, 4, 0),
+	gsSP1Triangle(4, 6, 10, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_005_switch_option_left_hand_cap_mesh_vtx_0[59] = {
+	{{{131, 47, -1},0, {1088, 212},{0xE3, 0x5C, 0xAE, 0xFF}}},
+	{{{107, -19, -33},0, {458, 16},{0xCE, 0xF, 0x8C, 0xFF}}},
+	{{{78, 11, 40},0, {756, 802},{0xD2, 0x41, 0x9D, 0xFF}}},
+	{{{70, -52, 35},0, {180, 784},{0xC6, 0xDB, 0x95, 0xFF}}},
+	{{{114, -92, -11},0, {-164, 172},{0xD0, 0xBA, 0xA2, 0xFF}}},
+	{{{192, 11, -2},0, {-16, -16},{0x52, 0x22, 0xA6, 0xFF}}},
+	{{{107, -19, -33},0, {-16, -16},{0xCE, 0xF, 0x8C, 0xFF}}},
+	{{{131, 47, -1},0, {-16, -16},{0xE3, 0x5C, 0xAE, 0xFF}}},
+	{{{182, -72, -8},0, {-16, -16},{0x4A, 0xD8, 0xA0, 0xFF}}},
+	{{{246, 29, 128},0, {-16, -16},{0x71, 0x29, 0xD6, 0xFF}}},
+	{{{183, 100, 86},0, {-16, -16},{0x14, 0x7B, 0xE9, 0xFF}}},
+	{{{129, 65, 103},0, {-16, -16},{0xA4, 0x4D, 0x2A, 0xFF}}},
+	{{{78, 11, 40},0, {-16, -16},{0xD2, 0x41, 0x9D, 0xFF}}},
+	{{{45, 49, 53},0, {-16, -16},{0x18, 0x3B, 0x92, 0xFF}}},
+	{{{18, -13, 33},0, {-16, -16},{0x1, 0xA, 0x81, 0xFF}}},
+	{{{70, -52, 35},0, {-16, -16},{0xC6, 0xDB, 0x95, 0xFF}}},
+	{{{29, -82, 43},0, {-16, -16},{0xB, 0xD2, 0x8A, 0xFF}}},
+	{{{18, -13, 33},0, {-16, -16},{0x1, 0xA, 0x81, 0xFF}}},
+	{{{70, -52, 35},0, {-16, -16},{0xC6, 0xDB, 0x95, 0xFF}}},
+	{{{106, -124, 90},0, {-16, -16},{0x98, 0xBB, 0x17, 0xFF}}},
+	{{{114, -92, -11},0, {-16, -16},{0xD0, 0xBA, 0xA2, 0xFF}}},
+	{{{151, -168, 67},0, {-16, -16},{0xF7, 0x88, 0xD8, 0xFF}}},
+	{{{182, -72, -8},0, {-16, -16},{0x4A, 0xD8, 0xA0, 0xFF}}},
+	{{{107, -19, -33},0, {-16, -16},{0xCE, 0xF, 0x8C, 0xFF}}},
+	{{{228, -121, 117},0, {-16, -16},{0x64, 0xC4, 0xCE, 0xFF}}},
+	{{{181, -167, 138},0, {-16, -16},{0x8, 0x84, 0x1B, 0xFF}}},
+	{{{273, -105, 188},0, {-16, -16},{0x6D, 0xC5, 0x1E, 0xFF}}},
+	{{{285, -6, 196},0, {-16, -16},{0x76, 0x1B, 0x26, 0xFF}}},
+	{{{246, 29, 128},0, {-16, -16},{0x71, 0x29, 0xD6, 0xFF}}},
+	{{{211, 81, 156},0, {-16, -16},{0x26, 0x71, 0x2C, 0xFF}}},
+	{{{228, 1, 228},0, {-16, -16},{0xFB, 0x22, 0x7A, 0xFF}}},
+	{{{192, 42, 190},0, {-16, -16},{0xC4, 0x35, 0x62, 0xFF}}},
+	{{{192, 42, 190},0, {-16, -16},{0xC4, 0x35, 0x62, 0xFF}}},
+	{{{211, 81, 156},0, {-16, -16},{0x26, 0x71, 0x2C, 0xFF}}},
+	{{{160, 65, 148},0, {-16, -16},{0xB0, 0x42, 0x48, 0xFF}}},
+	{{{183, 100, 86},0, {-16, -16},{0x14, 0x7B, 0xE9, 0xFF}}},
+	{{{246, 29, 128},0, {-16, -16},{0x71, 0x29, 0xD6, 0xFF}}},
+	{{{129, 65, 103},0, {-16, -16},{0xA4, 0x4D, 0x2A, 0xFF}}},
+	{{{137, -137, 134},0, {-16, -16},{0xA3, 0xC8, 0x41, 0xFF}}},
+	{{{73, 11, 60},0, {-16, -16},{0xBC, 0xFA, 0x6B, 0xFF}}},
+	{{{45, 49, 53},0, {-16, -16},{0xC8, 0xEC, 0x70, 0xFF}}},
+	{{{18, -13, 33},0, {-16, -16},{0xCC, 0xFD, 0x74, 0xFF}}},
+	{{{65, -53, 55},0, {-16, -16},{0xBB, 0x8, 0x6A, 0xFF}}},
+	{{{29, -82, 43},0, {-16, -16},{0xCC, 0x10, 0x73, 0xFF}}},
+	{{{106, -124, 90},0, {-16, -16},{0x98, 0xBB, 0x17, 0xFF}}},
+	{{{151, -168, 67},0, {-16, -16},{0xF7, 0x88, 0xD8, 0xFF}}},
+	{{{181, -167, 138},0, {-16, -16},{0x8, 0x84, 0x1B, 0xFF}}},
+	{{{171, -129, 178},0, {-16, -16},{0xB7, 0xCD, 0x5A, 0xFF}}},
+	{{{171, -129, 178},0, {-16, -16},{0xB7, 0xCD, 0x5A, 0xFF}}},
+	{{{181, -167, 138},0, {-16, -16},{0x8, 0x84, 0x1B, 0xFF}}},
+	{{{216, -104, 220},0, {-16, -16},{0xF4, 0xCE, 0x74, 0xFF}}},
+	{{{273, -105, 188},0, {-16, -16},{0x6D, 0xC5, 0x1E, 0xFF}}},
+	{{{228, 1, 228},0, {-16, -16},{0xFB, 0x22, 0x7A, 0xFF}}},
+	{{{285, -6, 196},0, {-16, -16},{0x76, 0x1B, 0x26, 0xFF}}},
+	{{{192, 42, 190},0, {-16, -16},{0xC4, 0x35, 0x62, 0xFF}}},
+	{{{137, -137, 134},0, {-16, -16},{0xA3, 0xC8, 0x41, 0xFF}}},
+	{{{160, 65, 148},0, {-16, -16},{0xB0, 0x42, 0x48, 0xFF}}},
+	{{{73, 11, 60},0, {-16, -16},{0xBC, 0xFA, 0x6B, 0xFF}}},
+	{{{65, -53, 55},0, {-16, -16},{0xBB, 0x8, 0x6A, 0xFF}}},
+};
+
+Gfx mario_005_switch_option_left_hand_cap_mesh_tri_0[] = {
+	gsSPVertex(mario_005_switch_option_left_hand_cap_mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 3, 2, 0),
+	gsSP1Triangle(1, 4, 3, 0),
+	gsSP1Triangle(5, 6, 7, 0),
+	gsSP1Triangle(8, 6, 5, 0),
+	gsSP1Triangle(8, 5, 9, 0),
+	gsSP1Triangle(5, 10, 9, 0),
+	gsSP1Triangle(7, 10, 5, 0),
+	gsSP1Triangle(10, 7, 11, 0),
+	gsSP1Triangle(12, 11, 7, 0),
+	gsSP1Triangle(12, 13, 11, 0),
+	gsSP1Triangle(12, 14, 13, 0),
+	gsSP1Triangle(15, 14, 12, 0),
+	gsSPVertex(mario_005_switch_option_left_hand_cap_mesh_vtx_0 + 16, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 3, 2, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(6, 5, 4, 0),
+	gsSP1Triangle(4, 7, 6, 0),
+	gsSP1Triangle(8, 5, 6, 0),
+	gsSP1Triangle(5, 8, 9, 0),
+	gsSP1Triangle(8, 10, 9, 0),
+	gsSP1Triangle(11, 10, 8, 0),
+	gsSP1Triangle(8, 12, 11, 0),
+	gsSP1Triangle(8, 6, 12, 0),
+	gsSP1Triangle(13, 11, 12, 0),
+	gsSP1Triangle(14, 11, 13, 0),
+	gsSP1Triangle(14, 13, 15, 0),
+	gsSPVertex(mario_005_switch_option_left_hand_cap_mesh_vtx_0 + 32, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 1, 3, 0),
+	gsSP1Triangle(1, 4, 3, 0),
+	gsSP1Triangle(3, 5, 2, 0),
+	gsSP1Triangle(2, 5, 6, 0),
+	gsSP1Triangle(5, 7, 6, 0),
+	gsSP1Triangle(5, 8, 7, 0),
+	gsSP1Triangle(8, 9, 7, 0),
+	gsSP1Triangle(10, 7, 9, 0),
+	gsSP1Triangle(10, 9, 11, 0),
+	gsSP1Triangle(10, 11, 12, 0),
+	gsSP1Triangle(10, 12, 6, 0),
+	gsSP1Triangle(12, 13, 6, 0),
+	gsSP1Triangle(13, 14, 6, 0),
+	gsSP1Triangle(6, 14, 15, 0),
+	gsSPVertex(mario_005_switch_option_left_hand_cap_mesh_vtx_0 + 48, 11, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 3, 2, 0),
+	gsSP1Triangle(2, 3, 4, 0),
+	gsSP1Triangle(3, 5, 4, 0),
+	gsSP1Triangle(2, 4, 6, 0),
+	gsSP1Triangle(6, 0, 2, 0),
+	gsSP1Triangle(6, 7, 0, 0),
+	gsSP1Triangle(6, 8, 7, 0),
+	gsSP1Triangle(9, 10, 7, 0),
+	gsSPEndDisplayList(),
+};Vtx mario_005_switch_option_left_hand_cap_mesh_vtx_1[36] = {
+	{{{4, -3, -32},0, {-16, -16},{0x48, 0x20, 0x9D, 0xFF}}},
+	{{{-19, 47, -4},0, {-16, -16},{0x2F, 0x74, 0xE8, 0xFF}}},
+	{{{-2, 41, 0},0, {-16, -16},{0xDD, 0x73, 0xD7, 0xFF}}},
+	{{{-13, 26, 41},0, {-16, -16},{0x2E, 0x50, 0x57, 0xFF}}},
+	{{{1, 24, 35},0, {-16, -16},{0xF8, 0x3F, 0x6E, 0xFF}}},
+	{{{23, -25, 35},0, {-16, -16},{0x10, 0xC1, 0x6D, 0xFF}}},
+	{{{13, -37, 41},0, {-16, -16},{0x57, 0xE5, 0x59, 0xFF}}},
+	{{{31, -39, 0},0, {-16, -16},{0x3C, 0x98, 0xD7, 0xFF}}},
+	{{{24, -55, -4},0, {-16, -16},{0x74, 0xD2, 0xE9, 0xFF}}},
+	{{{16, 1, -22},0, {-16, -16},{0x4, 0xFF, 0x81, 0xFF}}},
+	{{{35, 9, -36},0, {-16, -16},{0xE6, 0xF5, 0x84, 0xFF}}},
+	{{{11, 60, -3},0, {-16, -16},{0xB1, 0x59, 0xD2, 0xFF}}},
+	{{{29, 62, 34},0, {-16, -16},{0xCE, 0x59, 0x4B, 0xFF}}},
+	{{{29, 7, 48},0, {-16, -16},{0xC1, 0xF9, 0x6E, 0xFF}}},
+	{{{75, -32, 65},0, {-16, -16},{0x19, 0xB2, 0x61, 0xFF}}},
+	{{{55, -43, -3},0, {-16, -16},{0x7, 0x8C, 0xCD, 0xFF}}},
+	{{{35, 9, -36},0, {-16, -16},{0xE6, 0xF5, 0x84, 0xFF}}},
+	{{{103, -25, 1},0, {-16, -16},{0x65, 0xC0, 0xD6, 0xFF}}},
+	{{{55, -43, -3},0, {-16, -16},{0x7, 0x8C, 0xCD, 0xFF}}},
+	{{{85, 30, -32},0, {-16, -16},{0x45, 0x1C, 0x99, 0xFF}}},
+	{{{58, 81, 0},0, {-16, -16},{0x18, 0x79, 0xE3, 0xFF}}},
+	{{{11, 60, -3},0, {-16, -16},{0xB1, 0x59, 0xD2, 0xFF}}},
+	{{{29, 62, 34},0, {-16, -16},{0xCE, 0x59, 0x4B, 0xFF}}},
+	{{{54, 54, 44},0, {-16, -16},{0x15, 0x51, 0x5F, 0xFF}}},
+	{{{56, 11, 65},0, {-16, -16},{0xF0, 0x13, 0x7D, 0xFF}}},
+	{{{29, 7, 48},0, {-16, -16},{0xC1, 0xF9, 0x6E, 0xFF}}},
+	{{{75, -32, 65},0, {-16, -16},{0x19, 0xB2, 0x61, 0xFF}}},
+	{{{95, -8, 52},0, {-16, -16},{0x67, 0xF9, 0x4A, 0xFF}}},
+	{{{96, 39, 24},0, {-16, -16},{0x6C, 0x3D, 0x1C, 0xFF}}},
+	{{{85, 15, 52},0, {-16, -16},{0x44, 0x2D, 0x61, 0xFF}}},
+	{{{13, -37, 41},0, {-16, -16},{0x9B, 0xB8, 0x1E, 0xFF}}},
+	{{{-15, -12, 7},0, {-16, -16},{0x8B, 0xCF, 0xF8, 0xFF}}},
+	{{{24, -55, -4},0, {-16, -16},{0xA1, 0xAF, 0xEC, 0xFF}}},
+	{{{-13, 26, 41},0, {-16, -16},{0x87, 0xEA, 0x1F, 0xFF}}},
+	{{{-19, 47, -4},0, {-16, -16},{0x83, 0xF4, 0xED, 0xFF}}},
+	{{{4, -3, -32},0, {-16, -16},{0x99, 0xD5, 0xC3, 0xFF}}},
+};
+
+Gfx mario_005_switch_option_left_hand_cap_mesh_tri_1[] = {
+	gsSPVertex(mario_005_switch_option_left_hand_cap_mesh_vtx_1 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 1, 3, 0),
+	gsSP1Triangle(3, 4, 2, 0),
+	gsSP1Triangle(5, 4, 3, 0),
+	gsSP1Triangle(3, 6, 5, 0),
+	gsSP1Triangle(7, 5, 6, 0),
+	gsSP1Triangle(6, 8, 7, 0),
+	gsSP1Triangle(7, 8, 0, 0),
+	gsSP1Triangle(0, 9, 7, 0),
+	gsSP1Triangle(2, 9, 0, 0),
+	gsSP1Triangle(10, 9, 2, 0),
+	gsSP1Triangle(11, 10, 2, 0),
+	gsSP1Triangle(11, 2, 4, 0),
+	gsSP1Triangle(12, 11, 4, 0),
+	gsSP1Triangle(4, 13, 12, 0),
+	gsSP1Triangle(13, 4, 5, 0),
+	gsSP1Triangle(14, 13, 5, 0),
+	gsSP1Triangle(15, 14, 5, 0),
+	gsSP1Triangle(5, 7, 15, 0),
+	gsSP1Triangle(10, 15, 7, 0),
+	gsSP1Triangle(7, 9, 10, 0),
+	gsSPVertex(mario_005_switch_option_left_hand_cap_mesh_vtx_1 + 16, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(4, 3, 0, 0),
+	gsSP1Triangle(5, 4, 0, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(6, 7, 4, 0),
+	gsSP1Triangle(7, 6, 8, 0),
+	gsSP1Triangle(6, 9, 8, 0),
+	gsSP1Triangle(10, 8, 9, 0),
+	gsSP1Triangle(10, 11, 8, 0),
+	gsSP1Triangle(1, 11, 10, 0),
+	gsSP1Triangle(2, 1, 10, 0),
+	gsSP1Triangle(1, 12, 11, 0),
+	gsSP1Triangle(3, 12, 1, 0),
+	gsSP1Triangle(4, 12, 3, 0),
+	gsSP1Triangle(7, 12, 4, 0),
+	gsSP1Triangle(12, 7, 13, 0),
+	gsSP1Triangle(13, 7, 8, 0),
+	gsSP1Triangle(11, 13, 8, 0),
+	gsSP1Triangle(11, 12, 13, 0),
+	gsSPVertex(mario_005_switch_option_left_hand_cap_mesh_vtx_1 + 30, 6, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(4, 1, 3, 0),
+	gsSP1Triangle(5, 1, 4, 0),
+	gsSP1Triangle(2, 1, 5, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_006_switch_option_left_hand_wing_cap_mesh_vtx_0[59] = {
+	{{{131, 47, -1},0, {1088, 212},{0xE3, 0x5C, 0xAE, 0xFF}}},
+	{{{107, -19, -33},0, {458, 16},{0xCE, 0xF, 0x8C, 0xFF}}},
+	{{{78, 11, 40},0, {756, 802},{0xD2, 0x41, 0x9D, 0xFF}}},
+	{{{70, -52, 35},0, {180, 784},{0xC6, 0xDB, 0x95, 0xFF}}},
+	{{{114, -92, -11},0, {-164, 172},{0xD0, 0xBA, 0xA2, 0xFF}}},
+	{{{192, 11, -2},0, {-16, -16},{0x52, 0x22, 0xA6, 0xFF}}},
+	{{{107, -19, -33},0, {-16, -16},{0xCE, 0xF, 0x8C, 0xFF}}},
+	{{{131, 47, -1},0, {-16, -16},{0xE3, 0x5C, 0xAE, 0xFF}}},
+	{{{182, -72, -8},0, {-16, -16},{0x4A, 0xD8, 0xA0, 0xFF}}},
+	{{{246, 29, 128},0, {-16, -16},{0x71, 0x29, 0xD6, 0xFF}}},
+	{{{183, 100, 86},0, {-16, -16},{0x14, 0x7B, 0xE9, 0xFF}}},
+	{{{129, 65, 103},0, {-16, -16},{0xA4, 0x4D, 0x2A, 0xFF}}},
+	{{{78, 11, 40},0, {-16, -16},{0xD2, 0x41, 0x9D, 0xFF}}},
+	{{{45, 49, 53},0, {-16, -16},{0x18, 0x3B, 0x92, 0xFF}}},
+	{{{18, -13, 33},0, {-16, -16},{0x1, 0xA, 0x81, 0xFF}}},
+	{{{70, -52, 35},0, {-16, -16},{0xC6, 0xDB, 0x95, 0xFF}}},
+	{{{29, -82, 43},0, {-16, -16},{0xB, 0xD2, 0x8A, 0xFF}}},
+	{{{18, -13, 33},0, {-16, -16},{0x1, 0xA, 0x81, 0xFF}}},
+	{{{70, -52, 35},0, {-16, -16},{0xC6, 0xDB, 0x95, 0xFF}}},
+	{{{106, -124, 90},0, {-16, -16},{0x98, 0xBB, 0x17, 0xFF}}},
+	{{{114, -92, -11},0, {-16, -16},{0xD0, 0xBA, 0xA2, 0xFF}}},
+	{{{151, -168, 67},0, {-16, -16},{0xF7, 0x88, 0xD8, 0xFF}}},
+	{{{182, -72, -8},0, {-16, -16},{0x4A, 0xD8, 0xA0, 0xFF}}},
+	{{{107, -19, -33},0, {-16, -16},{0xCE, 0xF, 0x8C, 0xFF}}},
+	{{{228, -121, 117},0, {-16, -16},{0x64, 0xC4, 0xCE, 0xFF}}},
+	{{{181, -167, 138},0, {-16, -16},{0x8, 0x84, 0x1B, 0xFF}}},
+	{{{273, -105, 188},0, {-16, -16},{0x6D, 0xC5, 0x1E, 0xFF}}},
+	{{{285, -6, 196},0, {-16, -16},{0x76, 0x1B, 0x26, 0xFF}}},
+	{{{246, 29, 128},0, {-16, -16},{0x71, 0x29, 0xD6, 0xFF}}},
+	{{{211, 81, 156},0, {-16, -16},{0x26, 0x71, 0x2C, 0xFF}}},
+	{{{228, 1, 228},0, {-16, -16},{0xFB, 0x22, 0x7A, 0xFF}}},
+	{{{192, 42, 190},0, {-16, -16},{0xC4, 0x35, 0x62, 0xFF}}},
+	{{{192, 42, 190},0, {-16, -16},{0xC4, 0x35, 0x62, 0xFF}}},
+	{{{211, 81, 156},0, {-16, -16},{0x26, 0x71, 0x2C, 0xFF}}},
+	{{{160, 65, 148},0, {-16, -16},{0xB0, 0x42, 0x48, 0xFF}}},
+	{{{183, 100, 86},0, {-16, -16},{0x14, 0x7B, 0xE9, 0xFF}}},
+	{{{246, 29, 128},0, {-16, -16},{0x71, 0x29, 0xD6, 0xFF}}},
+	{{{129, 65, 103},0, {-16, -16},{0xA4, 0x4D, 0x2A, 0xFF}}},
+	{{{137, -137, 134},0, {-16, -16},{0xA3, 0xC8, 0x41, 0xFF}}},
+	{{{73, 11, 60},0, {-16, -16},{0xBC, 0xFA, 0x6B, 0xFF}}},
+	{{{45, 49, 53},0, {-16, -16},{0xC8, 0xEC, 0x70, 0xFF}}},
+	{{{18, -13, 33},0, {-16, -16},{0xCC, 0xFD, 0x74, 0xFF}}},
+	{{{65, -53, 55},0, {-16, -16},{0xBB, 0x8, 0x6A, 0xFF}}},
+	{{{29, -82, 43},0, {-16, -16},{0xCC, 0x10, 0x73, 0xFF}}},
+	{{{106, -124, 90},0, {-16, -16},{0x98, 0xBB, 0x17, 0xFF}}},
+	{{{151, -168, 67},0, {-16, -16},{0xF7, 0x88, 0xD8, 0xFF}}},
+	{{{181, -167, 138},0, {-16, -16},{0x8, 0x84, 0x1B, 0xFF}}},
+	{{{171, -129, 178},0, {-16, -16},{0xB7, 0xCD, 0x5A, 0xFF}}},
+	{{{171, -129, 178},0, {-16, -16},{0xB7, 0xCD, 0x5A, 0xFF}}},
+	{{{181, -167, 138},0, {-16, -16},{0x8, 0x84, 0x1B, 0xFF}}},
+	{{{216, -104, 220},0, {-16, -16},{0xF4, 0xCE, 0x74, 0xFF}}},
+	{{{273, -105, 188},0, {-16, -16},{0x6D, 0xC5, 0x1E, 0xFF}}},
+	{{{228, 1, 228},0, {-16, -16},{0xFB, 0x22, 0x7A, 0xFF}}},
+	{{{285, -6, 196},0, {-16, -16},{0x76, 0x1B, 0x26, 0xFF}}},
+	{{{192, 42, 190},0, {-16, -16},{0xC4, 0x35, 0x62, 0xFF}}},
+	{{{137, -137, 134},0, {-16, -16},{0xA3, 0xC8, 0x41, 0xFF}}},
+	{{{160, 65, 148},0, {-16, -16},{0xB0, 0x42, 0x48, 0xFF}}},
+	{{{73, 11, 60},0, {-16, -16},{0xBC, 0xFA, 0x6B, 0xFF}}},
+	{{{65, -53, 55},0, {-16, -16},{0xBB, 0x8, 0x6A, 0xFF}}},
+};
+
+Gfx mario_006_switch_option_left_hand_wing_cap_mesh_tri_0[] = {
+	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 3, 2, 0),
+	gsSP1Triangle(1, 4, 3, 0),
+	gsSP1Triangle(5, 6, 7, 0),
+	gsSP1Triangle(8, 6, 5, 0),
+	gsSP1Triangle(8, 5, 9, 0),
+	gsSP1Triangle(5, 10, 9, 0),
+	gsSP1Triangle(7, 10, 5, 0),
+	gsSP1Triangle(10, 7, 11, 0),
+	gsSP1Triangle(12, 11, 7, 0),
+	gsSP1Triangle(12, 13, 11, 0),
+	gsSP1Triangle(12, 14, 13, 0),
+	gsSP1Triangle(15, 14, 12, 0),
+	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_mesh_vtx_0 + 16, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 3, 2, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(6, 5, 4, 0),
+	gsSP1Triangle(4, 7, 6, 0),
+	gsSP1Triangle(8, 5, 6, 0),
+	gsSP1Triangle(5, 8, 9, 0),
+	gsSP1Triangle(8, 10, 9, 0),
+	gsSP1Triangle(11, 10, 8, 0),
+	gsSP1Triangle(8, 12, 11, 0),
+	gsSP1Triangle(8, 6, 12, 0),
+	gsSP1Triangle(13, 11, 12, 0),
+	gsSP1Triangle(14, 11, 13, 0),
+	gsSP1Triangle(14, 13, 15, 0),
+	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_mesh_vtx_0 + 32, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 1, 3, 0),
+	gsSP1Triangle(1, 4, 3, 0),
+	gsSP1Triangle(3, 5, 2, 0),
+	gsSP1Triangle(2, 5, 6, 0),
+	gsSP1Triangle(5, 7, 6, 0),
+	gsSP1Triangle(5, 8, 7, 0),
+	gsSP1Triangle(8, 9, 7, 0),
+	gsSP1Triangle(10, 7, 9, 0),
+	gsSP1Triangle(10, 9, 11, 0),
+	gsSP1Triangle(10, 11, 12, 0),
+	gsSP1Triangle(10, 12, 6, 0),
+	gsSP1Triangle(12, 13, 6, 0),
+	gsSP1Triangle(13, 14, 6, 0),
+	gsSP1Triangle(6, 14, 15, 0),
+	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_mesh_vtx_0 + 48, 11, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 3, 2, 0),
+	gsSP1Triangle(2, 3, 4, 0),
+	gsSP1Triangle(3, 5, 4, 0),
+	gsSP1Triangle(2, 4, 6, 0),
+	gsSP1Triangle(6, 0, 2, 0),
+	gsSP1Triangle(6, 7, 0, 0),
+	gsSP1Triangle(6, 8, 7, 0),
+	gsSP1Triangle(9, 10, 7, 0),
+	gsSPEndDisplayList(),
+};Vtx mario_006_switch_option_left_hand_wing_cap_mesh_vtx_1[36] = {
+	{{{4, -3, -32},0, {-16, -16},{0x48, 0x20, 0x9D, 0xFF}}},
+	{{{-19, 47, -4},0, {-16, -16},{0x2F, 0x74, 0xE8, 0xFF}}},
+	{{{-2, 41, 0},0, {-16, -16},{0xDD, 0x73, 0xD7, 0xFF}}},
+	{{{-13, 26, 41},0, {-16, -16},{0x2E, 0x50, 0x57, 0xFF}}},
+	{{{1, 24, 35},0, {-16, -16},{0xF8, 0x3F, 0x6E, 0xFF}}},
+	{{{23, -25, 35},0, {-16, -16},{0x10, 0xC1, 0x6D, 0xFF}}},
+	{{{13, -37, 41},0, {-16, -16},{0x57, 0xE5, 0x59, 0xFF}}},
+	{{{31, -39, 0},0, {-16, -16},{0x3C, 0x98, 0xD7, 0xFF}}},
+	{{{24, -55, -4},0, {-16, -16},{0x74, 0xD2, 0xE9, 0xFF}}},
+	{{{16, 1, -22},0, {-16, -16},{0x4, 0xFF, 0x81, 0xFF}}},
+	{{{35, 9, -36},0, {-16, -16},{0xE6, 0xF5, 0x84, 0xFF}}},
+	{{{11, 60, -3},0, {-16, -16},{0xB1, 0x59, 0xD2, 0xFF}}},
+	{{{29, 62, 34},0, {-16, -16},{0xCE, 0x59, 0x4B, 0xFF}}},
+	{{{29, 7, 48},0, {-16, -16},{0xC1, 0xF9, 0x6E, 0xFF}}},
+	{{{75, -32, 65},0, {-16, -16},{0x19, 0xB2, 0x61, 0xFF}}},
+	{{{55, -43, -3},0, {-16, -16},{0x7, 0x8C, 0xCD, 0xFF}}},
+	{{{35, 9, -36},0, {-16, -16},{0xE6, 0xF5, 0x84, 0xFF}}},
+	{{{103, -25, 1},0, {-16, -16},{0x65, 0xC0, 0xD6, 0xFF}}},
+	{{{55, -43, -3},0, {-16, -16},{0x7, 0x8C, 0xCD, 0xFF}}},
+	{{{85, 30, -32},0, {-16, -16},{0x45, 0x1C, 0x99, 0xFF}}},
+	{{{58, 81, 0},0, {-16, -16},{0x18, 0x79, 0xE3, 0xFF}}},
+	{{{11, 60, -3},0, {-16, -16},{0xB1, 0x59, 0xD2, 0xFF}}},
+	{{{29, 62, 34},0, {-16, -16},{0xCE, 0x59, 0x4B, 0xFF}}},
+	{{{54, 54, 44},0, {-16, -16},{0x15, 0x51, 0x5F, 0xFF}}},
+	{{{56, 11, 65},0, {-16, -16},{0xF0, 0x13, 0x7D, 0xFF}}},
+	{{{29, 7, 48},0, {-16, -16},{0xC1, 0xF9, 0x6E, 0xFF}}},
+	{{{75, -32, 65},0, {-16, -16},{0x19, 0xB2, 0x61, 0xFF}}},
+	{{{95, -8, 52},0, {-16, -16},{0x67, 0xF9, 0x4A, 0xFF}}},
+	{{{96, 39, 24},0, {-16, -16},{0x6C, 0x3D, 0x1C, 0xFF}}},
+	{{{85, 15, 52},0, {-16, -16},{0x44, 0x2D, 0x61, 0xFF}}},
+	{{{13, -37, 41},0, {-16, -16},{0x9B, 0xB8, 0x1E, 0xFF}}},
+	{{{-15, -12, 7},0, {-16, -16},{0x8B, 0xCF, 0xF8, 0xFF}}},
+	{{{24, -55, -4},0, {-16, -16},{0xA1, 0xAF, 0xEC, 0xFF}}},
+	{{{-13, 26, 41},0, {-16, -16},{0x87, 0xEA, 0x1F, 0xFF}}},
+	{{{-19, 47, -4},0, {-16, -16},{0x83, 0xF4, 0xED, 0xFF}}},
+	{{{4, -3, -32},0, {-16, -16},{0x99, 0xD5, 0xC3, 0xFF}}},
+};
+
+Gfx mario_006_switch_option_left_hand_wing_cap_mesh_tri_1[] = {
+	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_mesh_vtx_1 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 1, 3, 0),
+	gsSP1Triangle(3, 4, 2, 0),
+	gsSP1Triangle(5, 4, 3, 0),
+	gsSP1Triangle(3, 6, 5, 0),
+	gsSP1Triangle(7, 5, 6, 0),
+	gsSP1Triangle(6, 8, 7, 0),
+	gsSP1Triangle(7, 8, 0, 0),
+	gsSP1Triangle(0, 9, 7, 0),
+	gsSP1Triangle(2, 9, 0, 0),
+	gsSP1Triangle(10, 9, 2, 0),
+	gsSP1Triangle(11, 10, 2, 0),
+	gsSP1Triangle(11, 2, 4, 0),
+	gsSP1Triangle(12, 11, 4, 0),
+	gsSP1Triangle(4, 13, 12, 0),
+	gsSP1Triangle(13, 4, 5, 0),
+	gsSP1Triangle(14, 13, 5, 0),
+	gsSP1Triangle(15, 14, 5, 0),
+	gsSP1Triangle(5, 7, 15, 0),
+	gsSP1Triangle(10, 15, 7, 0),
+	gsSP1Triangle(7, 9, 10, 0),
+	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_mesh_vtx_1 + 16, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(4, 3, 0, 0),
+	gsSP1Triangle(5, 4, 0, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(6, 7, 4, 0),
+	gsSP1Triangle(7, 6, 8, 0),
+	gsSP1Triangle(6, 9, 8, 0),
+	gsSP1Triangle(10, 8, 9, 0),
+	gsSP1Triangle(10, 11, 8, 0),
+	gsSP1Triangle(1, 11, 10, 0),
+	gsSP1Triangle(2, 1, 10, 0),
+	gsSP1Triangle(1, 12, 11, 0),
+	gsSP1Triangle(3, 12, 1, 0),
+	gsSP1Triangle(4, 12, 3, 0),
+	gsSP1Triangle(7, 12, 4, 0),
+	gsSP1Triangle(12, 7, 13, 0),
+	gsSP1Triangle(13, 7, 8, 0),
+	gsSP1Triangle(11, 13, 8, 0),
+	gsSP1Triangle(11, 12, 13, 0),
+	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_mesh_vtx_1 + 30, 6, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(4, 1, 3, 0),
+	gsSP1Triangle(5, 1, 4, 0),
+	gsSP1Triangle(2, 1, 5, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_006_switch_option_left_hand_wing_cap_wings_mesh_vtx_0[8] = {
+	{{{178, -177, 128},0, {-16, 4008},{0xA8, 0xB3, 0xCF, 0xFF}}},
+	{{{319, -248, -14},0, {-16, -16},{0xA8, 0xB4, 0xCE, 0xFF}}},
+	{{{349, -325, 53},0, {974, -16},{0xA8, 0xB3, 0xCF, 0xFF}}},
+	{{{207, -253, 195},0, {974, 4008},{0xA8, 0xB3, 0xCF, 0xFF}}},
+	{{{414, 206, 82},0, {974, -16},{0xBD, 0x64, 0xD8, 0xFF}}},
+	{{{368, 146, 7},0, {-16, -16},{0xBE, 0x65, 0xD8, 0xFF}}},
+	{{{212, 96, 143},0, {-16, 4008},{0xBE, 0x65, 0xD8, 0xFF}}},
+	{{{258, 156, 218},0, {974, 4008},{0xBD, 0x64, 0xD8, 0xFF}}},
+};
+
+Gfx mario_006_switch_option_left_hand_wing_cap_wings_mesh_tri_0[] = {
+	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_wings_mesh_vtx_0 + 0, 8, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 0, 2, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSPEndDisplayList(),
+};Vtx mario_006_switch_option_left_hand_wing_cap_wings_mesh_vtx_1[8] = {
+	{{{368, 146, 7},0, {974, -16},{0xBE, 0x65, 0xD8, 0xFF}}},
+	{{{166, 37, 68},0, {-16, 4008},{0xBE, 0x65, 0xD9, 0xFF}}},
+	{{{212, 96, 143},0, {974, 4008},{0xBE, 0x65, 0xD8, 0xFF}}},
+	{{{322, 87, -67},0, {-16, -16},{0xBE, 0x65, 0xD8, 0xFF}}},
+	{{{178, -177, 128},0, {974, 4008},{0xA8, 0xB3, 0xCF, 0xFF}}},
+	{{{149, -100, 60},0, {-16, 4008},{0xA8, 0xB4, 0xCE, 0xFF}}},
+	{{{319, -248, -14},0, {974, -16},{0xA8, 0xB4, 0xCE, 0xFF}}},
+	{{{290, -171, -81},0, {-16, -16},{0xA8, 0xB4, 0xCE, 0xFF}}},
+};
+
+Gfx mario_006_switch_option_left_hand_wing_cap_wings_mesh_tri_1[] = {
+	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_wings_mesh_vtx_1 + 0, 8, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(5, 7, 6, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_000_offset_009_mesh_vtx_0[22] = {
+	{{{-5, 37, 31},0, {-16, -16},{0x9D, 0x3F, 0x32, 0xFF}}},
+	{{{-15, 0, 7},0, {-16, -16},{0x81, 0xF7, 0xFE, 0xFF}}},
+	{{{-1, -12, 47},0, {-16, -16},{0xA5, 0xE2, 0x53, 0xFF}}},
+	{{{-4, 37, -17},0, {-16, -16},{0xA0, 0x3E, 0xC9, 0xFF}}},
+	{{{14, 48, -23},0, {-16, -16},{0xE2, 0x62, 0xB5, 0xFF}}},
+	{{{13, 48, 38},0, {-16, -16},{0xE0, 0x62, 0x4A, 0xFF}}},
+	{{{18, -15, 58},0, {-16, -16},{0xEB, 0xD9, 0x77, 0xFF}}},
+	{{{1, -44, 8},0, {-16, -16},{0xAA, 0xA3, 0x0, 0xFF}}},
+	{{{0, -13, -32},0, {-16, -16},{0xA8, 0xDF, 0xAA, 0xFF}}},
+	{{{19, -15, -42},0, {-16, -16},{0xEE, 0xD8, 0x89, 0xFF}}},
+	{{{92, 45, -16},0, {-16, -16},{0x3B, 0x5C, 0xC0, 0xFF}}},
+	{{{91, 45, 32},0, {-16, -16},{0x39, 0x5D, 0x40, 0xFF}}},
+	{{{95, -5, 48},0, {-16, -16},{0x42, 0xE6, 0x69, 0xFF}}},
+	{{{98, -37, 8},0, {-16, -16},{0x4A, 0x99, 0x0, 0xFF}}},
+	{{{21, -54, 8},0, {-16, -16},{0xF3, 0x82, 0x0, 0xFF}}},
+	{{{96, -5, -31},0, {-16, -16},{0x44, 0xE5, 0x98, 0xFF}}},
+	{{{92, 45, -16},0, {-16, -16},{0x3B, 0x5C, 0xC0, 0xFF}}},
+	{{{116, 10, 8},0, {-16, -16},{0x7F, 0xA, 0x1, 0xFF}}},
+	{{{96, -5, -31},0, {-16, -16},{0x44, 0xE5, 0x98, 0xFF}}},
+	{{{91, 45, 32},0, {-16, -16},{0x39, 0x5D, 0x40, 0xFF}}},
+	{{{95, -5, 48},0, {-16, -16},{0x42, 0xE6, 0x69, 0xFF}}},
+	{{{98, -37, 8},0, {-16, -16},{0x4A, 0x99, 0x0, 0xFF}}},
+};
+
+Gfx mario_000_offset_009_mesh_tri_0[] = {
+	gsSPVertex(mario_000_offset_009_mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(4, 3, 0, 0),
+	gsSP1Triangle(4, 0, 5, 0),
+	gsSP1Triangle(5, 0, 6, 0),
+	gsSP1Triangle(0, 2, 6, 0),
+	gsSP1Triangle(6, 2, 7, 0),
+	gsSP1Triangle(2, 1, 7, 0),
+	gsSP1Triangle(7, 1, 8, 0),
+	gsSP1Triangle(8, 1, 3, 0),
+	gsSP1Triangle(9, 8, 3, 0),
+	gsSP1Triangle(9, 3, 4, 0),
+	gsSP1Triangle(9, 4, 10, 0),
+	gsSP1Triangle(4, 5, 10, 0),
+	gsSP1Triangle(5, 11, 10, 0),
+	gsSP1Triangle(5, 6, 11, 0),
+	gsSP1Triangle(6, 12, 11, 0),
+	gsSP1Triangle(13, 12, 6, 0),
+	gsSP1Triangle(6, 14, 13, 0),
+	gsSP1Triangle(6, 7, 14, 0),
+	gsSP1Triangle(14, 7, 9, 0),
+	gsSP1Triangle(7, 8, 9, 0),
+	gsSP1Triangle(14, 9, 13, 0),
+	gsSP1Triangle(9, 15, 13, 0),
+	gsSP1Triangle(10, 15, 9, 0),
+	gsSPVertex(mario_000_offset_009_mesh_vtx_0 + 16, 6, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(4, 1, 3, 0),
+	gsSP1Triangle(5, 1, 4, 0),
+	gsSP1Triangle(2, 1, 5, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_000_offset_010_mesh_vtx_0[12] = {
+	{{{8, 44, 33},0, {-16, -16},{0xC5, 0x5C, 0x40, 0xFF}}},
+	{{{65, -11, 54},0, {-16, -16},{0x3A, 0xDB, 0x6B, 0xFF}}},
+	{{{68, 45, 37},0, {-16, -16},{0x40, 0x57, 0x44, 0xFF}}},
+	{{{6, -6, 49},0, {-16, -16},{0xBF, 0xE3, 0x69, 0xFF}}},
+	{{{-14, 8, 8},0, {-16, -16},{0x81, 0x6, 0xFE, 0xFF}}},
+	{{{9, 44, -16},0, {-16, -16},{0xC7, 0x5C, 0xBE, 0xFF}}},
+	{{{69, 45, -18},0, {-16, -16},{0x42, 0x57, 0xC0, 0xFF}}},
+	{{{81, 3, 9},0, {-16, -16},{0x7F, 0xF9, 0x1, 0xFF}}},
+	{{{64, -46, 9},0, {-16, -16},{0x36, 0x8D, 0x0, 0xFF}}},
+	{{{4, -37, 9},0, {-16, -16},{0xBA, 0x96, 0x0, 0xFF}}},
+	{{{6, -6, -31},0, {-16, -16},{0xBF, 0xE2, 0x97, 0xFF}}},
+	{{{66, -11, -36},0, {-16, -16},{0x3B, 0xDB, 0x96, 0xFF}}},
+};
+
+Gfx mario_000_offset_010_mesh_tri_0[] = {
+	gsSPVertex(mario_000_offset_010_mesh_vtx_0 + 0, 12, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(0, 4, 3, 0),
+	gsSP1Triangle(5, 4, 0, 0),
+	gsSP1Triangle(6, 5, 0, 0),
+	gsSP1Triangle(0, 2, 6, 0),
+	gsSP1Triangle(2, 7, 6, 0),
+	gsSP1Triangle(1, 7, 2, 0),
+	gsSP1Triangle(8, 7, 1, 0),
+	gsSP1Triangle(9, 8, 1, 0),
+	gsSP1Triangle(1, 3, 9, 0),
+	gsSP1Triangle(3, 4, 9, 0),
+	gsSP1Triangle(9, 4, 10, 0),
+	gsSP1Triangle(10, 4, 5, 0),
+	gsSP1Triangle(11, 10, 5, 0),
+	gsSP1Triangle(5, 6, 11, 0),
+	gsSP1Triangle(6, 7, 11, 0),
+	gsSP1Triangle(11, 7, 8, 0),
+	gsSP1Triangle(9, 11, 8, 0),
+	gsSP1Triangle(9, 10, 11, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_000_offset_011_mesh_vtx_0[29] = {
+	{{{-11, 54, 53},0, {-16, -16},{0x2D, 0x77, 0xFE, 0xFF}}},
+	{{{-39, 64, -8},0, {-16, -16},{0x2E, 0x76, 0xFE, 0xFF}}},
+	{{{-41, 65, 26},0, {-16, -16},{0x2D, 0x77, 0xFF, 0xFF}}},
+	{{{-12, 53, -32},0, {-16, -16},{0x2D, 0x77, 0xFE, 0xFF}}},
+	{{{78, 21, 61},0, {-16, -16},{0x2C, 0x77, 0xFE, 0xFF}}},
+	{{{76, 20, -41},0, {-16, -16},{0x2C, 0x77, 0xFE, 0xFF}}},
+	{{{110, 9, 35},0, {-16, -16},{0x2C, 0x77, 0xFE, 0xFF}}},
+	{{{110, 8, -20},0, {-16, -16},{0x2C, 0x77, 0xFE, 0xFF}}},
+	{{{-34, 12, 44},0, {-16, -16},{0xB3, 0xCF, 0x58, 0xFF}}},
+	{{{-11, 54, 53},0, {-16, -16},{0xD1, 0x3, 0x76, 0xFF}}},
+	{{{-41, 65, 26},0, {-16, -16},{0x8E, 0x1A, 0x31, 0xFF}}},
+	{{{43, -18, 54},0, {-16, -16},{0x0, 0xB0, 0x62, 0xFF}}},
+	{{{27, -35, 11},0, {-16, -16},{0xE4, 0x84, 0xFC, 0xFF}}},
+	{{{-54, 15, 8},0, {-16, -16},{0x89, 0xD3, 0xFC, 0xFF}}},
+	{{{-39, 64, -8},0, {-16, -16},{0x92, 0x19, 0xC6, 0xFF}}},
+	{{{-35, 11, -21},0, {-16, -16},{0xB4, 0xCB, 0xA9, 0xFF}}},
+	{{{-39, 64, -8},0, {-16, -16},{0x92, 0x19, 0xC6, 0xFF}}},
+	{{{-12, 53, -32},0, {-16, -16},{0xCE, 0xFE, 0x8B, 0xFF}}},
+	{{{-35, 11, -21},0, {-16, -16},{0xB4, 0xCB, 0xA9, 0xFF}}},
+	{{{44, -12, -33},0, {-16, -16},{0xFB, 0xB5, 0x99, 0xFF}}},
+	{{{76, 20, -41},0, {-16, -16},{0x13, 0xD0, 0x8C, 0xFF}}},
+	{{{110, 8, -20},0, {-16, -16},{0x48, 0xAA, 0xC5, 0xFF}}},
+	{{{80, -31, 7},0, {-16, -16},{0x36, 0x8D, 0xF9, 0xFF}}},
+	{{{110, 9, 35},0, {-16, -16},{0x4E, 0xAC, 0x36, 0xFF}}},
+	{{{43, -18, 54},0, {-16, -16},{0x0, 0xB0, 0x62, 0xFF}}},
+	{{{78, 21, 61},0, {-16, -16},{0x1C, 0xD2, 0x73, 0xFF}}},
+	{{{-11, 54, 53},0, {-16, -16},{0xD1, 0x3, 0x76, 0xFF}}},
+	{{{27, -35, 11},0, {-16, -16},{0xE4, 0x84, 0xFC, 0xFF}}},
+	{{{-54, 15, 8},0, {-16, -16},{0x89, 0xD3, 0xFC, 0xFF}}},
+};
+
+Gfx mario_000_offset_011_mesh_tri_0[] = {
+	gsSPVertex(mario_000_offset_011_mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(0, 4, 3, 0),
+	gsSP1Triangle(4, 5, 3, 0),
+	gsSP1Triangle(4, 6, 5, 0),
+	gsSP1Triangle(6, 7, 5, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 11, 9, 0),
+	gsSP1Triangle(12, 11, 8, 0),
+	gsSP1Triangle(12, 8, 13, 0),
+	gsSP1Triangle(10, 13, 8, 0),
+	gsSP1Triangle(13, 10, 14, 0),
+	gsSP1Triangle(14, 15, 13, 0),
+	gsSPVertex(mario_000_offset_011_mesh_vtx_0 + 16, 13, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 2, 1, 0),
+	gsSP1Triangle(3, 1, 4, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(5, 6, 3, 0),
+	gsSP1Triangle(6, 5, 7, 0),
+	gsSP1Triangle(8, 6, 7, 0),
+	gsSP1Triangle(7, 9, 8, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(6, 8, 11, 0),
+	gsSP1Triangle(11, 3, 6, 0),
+	gsSP1Triangle(2, 3, 11, 0),
+	gsSP1Triangle(12, 2, 11, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_000_offset_012_mesh_vtx_0[22] = {
+	{{{95, -3, -49},0, {-16, -16},{0x41, 0xE8, 0x96, 0xFF}}},
+	{{{116, 11, -9},0, {-16, -16},{0x7F, 0xB, 0xFF, 0xFF}}},
+	{{{98, -35, -10},0, {-16, -16},{0x4B, 0x99, 0xFD, 0xFF}}},
+	{{{90, 47, -32},0, {-16, -16},{0x37, 0x5F, 0xC1, 0xFF}}},
+	{{{18, -13, -58},0, {-16, -16},{0xEB, 0xDC, 0x88, 0xFF}}},
+	{{{22, -54, -9},0, {-16, -16},{0xF6, 0x81, 0xFE, 0xFF}}},
+	{{{19, -16, 41},0, {-16, -16},{0xEF, 0xD5, 0x76, 0xFF}}},
+	{{{96, -5, 30},0, {-16, -16},{0x44, 0xE2, 0x67, 0xFF}}},
+	{{{91, 46, 16},0, {-16, -16},{0x3B, 0x5C, 0x42, 0xFF}}},
+	{{{12, 49, -37},0, {-16, -16},{0xE0, 0x64, 0xB9, 0xFF}}},
+	{{{-6, 38, -31},0, {-16, -16},{0x9E, 0x3F, 0xCD, 0xFF}}},
+	{{{-1, -11, -47},0, {-16, -16},{0xA5, 0xE2, 0xAC, 0xFF}}},
+	{{{1, -44, -9},0, {-16, -16},{0xAB, 0xA2, 0xFE, 0xFF}}},
+	{{{0, -14, 31},0, {-16, -16},{0xA9, 0xDB, 0x54, 0xFF}}},
+	{{{-5, 36, 18},0, {-16, -16},{0x9E, 0x39, 0x39, 0xFF}}},
+	{{{13, 48, 24},0, {-16, -16},{0xE1, 0x60, 0x4D, 0xFF}}},
+	{{{-6, 38, -31},0, {-16, -16},{0x9E, 0x3F, 0xCD, 0xFF}}},
+	{{{-15, 0, -7},0, {-16, -16},{0x81, 0xF5, 0x2, 0xFF}}},
+	{{{-5, 36, 18},0, {-16, -16},{0x9E, 0x39, 0x39, 0xFF}}},
+	{{{-1, -11, -47},0, {-16, -16},{0xA5, 0xE2, 0xAC, 0xFF}}},
+	{{{1, -44, -9},0, {-16, -16},{0xAB, 0xA2, 0xFE, 0xFF}}},
+	{{{0, -14, 31},0, {-16, -16},{0xA9, 0xDB, 0x54, 0xFF}}},
+};
+
+Gfx mario_000_offset_012_mesh_tri_0[] = {
+	gsSPVertex(mario_000_offset_012_mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(3, 0, 4, 0),
+	gsSP1Triangle(4, 0, 2, 0),
+	gsSP1Triangle(2, 5, 4, 0),
+	gsSP1Triangle(2, 6, 5, 0),
+	gsSP1Triangle(2, 7, 6, 0),
+	gsSP1Triangle(2, 1, 7, 0),
+	gsSP1Triangle(7, 1, 8, 0),
+	gsSP1Triangle(8, 1, 3, 0),
+	gsSP1Triangle(8, 3, 9, 0),
+	gsSP1Triangle(3, 4, 9, 0),
+	gsSP1Triangle(4, 10, 9, 0),
+	gsSP1Triangle(4, 11, 10, 0),
+	gsSP1Triangle(12, 11, 4, 0),
+	gsSP1Triangle(5, 12, 4, 0),
+	gsSP1Triangle(6, 12, 5, 0),
+	gsSP1Triangle(6, 13, 12, 0),
+	gsSP1Triangle(14, 13, 6, 0),
+	gsSP1Triangle(15, 14, 6, 0),
+	gsSP1Triangle(8, 15, 6, 0),
+	gsSP1Triangle(6, 7, 8, 0),
+	gsSP1Triangle(8, 9, 15, 0),
+	gsSP1Triangle(9, 10, 15, 0),
+	gsSP1Triangle(10, 14, 15, 0),
+	gsSPVertex(mario_000_offset_012_mesh_vtx_0 + 16, 6, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(4, 1, 3, 0),
+	gsSP1Triangle(5, 1, 4, 0),
+	gsSP1Triangle(2, 1, 5, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_000_offset_013_mesh_vtx_0[12] = {
+	{{{66, -11, 34},0, {-16, -16},{0x39, 0xD8, 0x6A, 0xFF}}},
+	{{{69, 45, 18},0, {-16, -16},{0x40, 0x55, 0x44, 0xFF}}},
+	{{{9, 44, 16},0, {-16, -16},{0xC6, 0x5A, 0x45, 0xFF}}},
+	{{{83, 4, -10},0, {-16, -16},{0x7F, 0xF8, 0x0, 0xFF}}},
+	{{{63, -45, -12},0, {-16, -16},{0x33, 0x8C, 0xFC, 0xFF}}},
+	{{{4, -36, -10},0, {-16, -16},{0xB9, 0x96, 0xFF, 0xFF}}},
+	{{{6, -6, 30},0, {-16, -16},{0xC0, 0xE0, 0x69, 0xFF}}},
+	{{{-13, 10, -9},0, {-16, -16},{0x81, 0x8, 0x2, 0xFF}}},
+	{{{9, 46, -33},0, {-16, -16},{0xC6, 0x5F, 0xC3, 0xFF}}},
+	{{{69, 46, -37},0, {-16, -16},{0x40, 0x58, 0xBF, 0xFF}}},
+	{{{65, -9, -56},0, {-16, -16},{0x37, 0xDD, 0x93, 0xFF}}},
+	{{{5, -3, -50},0, {-16, -16},{0xBC, 0xE7, 0x97, 0xFF}}},
+};
+
+Gfx mario_000_offset_013_mesh_tri_0[] = {
+	gsSPVertex(mario_000_offset_013_mesh_vtx_0 + 0, 12, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(4, 3, 0, 0),
+	gsSP1Triangle(4, 0, 5, 0),
+	gsSP1Triangle(0, 6, 5, 0),
+	gsSP1Triangle(2, 6, 0, 0),
+	gsSP1Triangle(2, 7, 6, 0),
+	gsSP1Triangle(8, 7, 2, 0),
+	gsSP1Triangle(8, 2, 1, 0),
+	gsSP1Triangle(1, 9, 8, 0),
+	gsSP1Triangle(1, 3, 9, 0),
+	gsSP1Triangle(9, 3, 10, 0),
+	gsSP1Triangle(10, 3, 4, 0),
+	gsSP1Triangle(10, 4, 5, 0),
+	gsSP1Triangle(5, 11, 10, 0),
+	gsSP1Triangle(5, 7, 11, 0),
+	gsSP1Triangle(6, 7, 5, 0),
+	gsSP1Triangle(11, 7, 8, 0),
+	gsSP1Triangle(10, 11, 8, 0),
+	gsSP1Triangle(9, 10, 8, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx mario_000_displaylist_005_mesh_vtx_0[28] = {
+	{{{75, 23, 40},0, {-16, -16},{0x2A, 0x78, 0x0, 0xFF}}},
+	{{{109, 11, 20},0, {-16, -16},{0x2B, 0x78, 0x1, 0xFF}}},
+	{{{110, 11, -36},0, {-16, -16},{0x2A, 0x78, 0x0, 0xFF}}},
+	{{{78, 22, -61},0, {-16, -16},{0x2A, 0x78, 0x0, 0xFF}}},
+	{{{-14, 54, 29},0, {-16, -16},{0x2A, 0x78, 0x0, 0xFF}}},
+	{{{-11, 53, -56},0, {-16, -16},{0x2A, 0x78, 0x0, 0xFF}}},
+	{{{-40, 63, 5},0, {-16, -16},{0x2A, 0x78, 0x0, 0xFF}}},
+	{{{-42, 64, -29},0, {-16, -16},{0x2C, 0x77, 0x1, 0xFF}}},
+	{{{110, 11, -36},0, {-16, -16},{0x50, 0xAD, 0xCB, 0xFF}}},
+	{{{109, 11, 20},0, {-16, -16},{0x49, 0xAD, 0x3E, 0xFF}}},
+	{{{80, -29, -7},0, {-16, -16},{0x39, 0x8F, 0x9, 0xFF}}},
+	{{{44, -11, 32},0, {-16, -16},{0xFC, 0xB7, 0x68, 0xFF}}},
+	{{{75, 23, 40},0, {-16, -16},{0x12, 0xD4, 0x76, 0xFF}}},
+	{{{-14, 54, 29},0, {-16, -16},{0xCD, 0x0, 0x74, 0xFF}}},
+	{{{-36, 11, 19},0, {-16, -16},{0xB4, 0xCC, 0x57, 0xFF}}},
+	{{{-40, 63, 5},0, {-16, -16},{0x91, 0x19, 0x38, 0xFF}}},
+	{{{-54, 14, -10},0, {-16, -16},{0x8A, 0xD1, 0x4, 0xFF}}},
+	{{{-36, 11, 19},0, {-16, -16},{0xB4, 0xCC, 0x57, 0xFF}}},
+	{{{-40, 63, 5},0, {-16, -16},{0x91, 0x19, 0x38, 0xFF}}},
+	{{{-42, 64, -29},0, {-16, -16},{0x8D, 0x17, 0xCE, 0xFF}}},
+	{{{-34, 11, -46},0, {-16, -16},{0xB4, 0xCC, 0xA9, 0xFF}}},
+	{{{-11, 53, -56},0, {-16, -16},{0xD2, 0x0, 0x8A, 0xFF}}},
+	{{{43, -18, -55},0, {-16, -16},{0x2, 0xAF, 0x9F, 0xFF}}},
+	{{{78, 22, -61},0, {-16, -16},{0x1F, 0xD4, 0x8D, 0xFF}}},
+	{{{110, 11, -36},0, {-16, -16},{0x50, 0xAD, 0xCB, 0xFF}}},
+	{{{80, -29, -7},0, {-16, -16},{0x39, 0x8F, 0x9, 0xFF}}},
+	{{{27, -35, -11},0, {-16, -16},{0xE6, 0x84, 0x6, 0xFF}}},
+	{{{44, -11, 32},0, {-16, -16},{0xFC, 0xB7, 0x68, 0xFF}}},
+};
+
+Gfx mario_000_displaylist_005_mesh_tri_0[] = {
+	gsSPVertex(mario_000_displaylist_005_mesh_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 0, 3, 0),
+	gsSP1Triangle(4, 3, 5, 0),
+	gsSP1Triangle(6, 4, 5, 0),
+	gsSP1Triangle(7, 6, 5, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(11, 10, 9, 0),
+	gsSP1Triangle(9, 12, 11, 0),
+	gsSP1Triangle(12, 13, 11, 0),
+	gsSP1Triangle(13, 14, 11, 0),
+	gsSP1Triangle(14, 13, 15, 0),
+	gsSPVertex(mario_000_displaylist_005_mesh_vtx_0 + 16, 12, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(4, 0, 3, 0),
+	gsSP1Triangle(3, 5, 4, 0),
+	gsSP1Triangle(5, 6, 4, 0),
+	gsSP1Triangle(5, 7, 6, 0),
+	gsSP1Triangle(6, 7, 8, 0),
+	gsSP1Triangle(8, 9, 6, 0),
+	gsSP1Triangle(10, 6, 9, 0),
+	gsSP1Triangle(9, 11, 10, 0),
+	gsSP1Triangle(10, 11, 1, 0),
+	gsSP1Triangle(10, 1, 0, 0),
+	gsSP1Triangle(0, 4, 10, 0),
+	gsSP1Triangle(4, 6, 10, 0),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_mario_body_v3[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT, TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_mario_button_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(mario_body_v3_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_mario_metal_v3[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, TEXEL0, 0, 0, 0, ENVIRONMENT, 0, 0, 0, TEXEL0, 0, 0, 0, ENVIRONMENT),
+	gsSPSetGeometryMode(G_TEXTURE_GEN),
+	gsSPTexture(4031, 1983, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, mario_metal_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 16, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 252, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 16, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 124),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_mario_metal_v3[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_TEXTURE_GEN),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_mario_cap_v3[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT, TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_mario_cap_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(mario_cap_v3_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_mario_face_0___eye_open_v3[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT, TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_mario_face_1_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(mario_face_0___eye_open_v3_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_mario_mustache_v3[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT, TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_mario_mustache_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(mario_mustache_v3_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_mario_hair_v3[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsSPSetLights1(mario_hair_v3_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_mario_sideburns_v3[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT, TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_mario_sideburn_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(mario_sideburns_v3_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_mario_face_1___eye_half_v3[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT, TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_mario_face_2_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(mario_face_1___eye_half_v3_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_mario_face_2___eye_closed_v3[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT, TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_mario_face_3_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(mario_face_2___eye_closed_v3_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_mario_face_7___eye_X_v3[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT, TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_mario_face_4_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(mario_face_7___eye_X_v3_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_mario_wing_2_v3[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, TEXEL0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, TEXEL0, TEXEL0, 0, ENVIRONMENT, 0),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_wing_2_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 252),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_mario_wing_2_v3[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_mario_wing_1_v3[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, TEXEL0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, TEXEL0, TEXEL0, 0, ENVIRONMENT, 0),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_wing1_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 252),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_mario_wing_1_v3[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_mario_gloves_v3[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsSPSetLights1(mario_gloves_v3_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_mario_shoes_v3[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsSPSetLights1(mario_shoes_v3_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mario_000_offset_mesh[] = {
+	gsSPDisplayList(mat_mario_body_v3),
+	gsSPDisplayList(mario_000_offset_mesh_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_000_offset_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_offset_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx mario_000_offset_001_mesh[] = {
+	gsSPDisplayList(mat_mario_body_v3),
+	gsSPDisplayList(mario_000_offset_001_mesh_tri_0),
+	gsSPDisplayList(mat_mario_cap_v3),
+	gsSPDisplayList(mario_000_offset_001_mesh_tri_1),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_000_offset_001_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_offset_001_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_offset_001_mesh_tri_1),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx mario_000_displaylist_mesh[] = {
+	gsSPDisplayList(mat_mario_face_0___eye_open_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_0),
+	gsSPDisplayList(mat_mario_mustache_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_1),
+	gsSPDisplayList(mat_mario_hair_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_2),
+	gsSPDisplayList(mat_mario_sideburns_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_3),
+	gsSPDisplayList(mat_mario_cap_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_4),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_000_displaylist_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_1),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_2),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_3),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_4),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_000_displaylist_mesh_mat_override_face_1___eye_half_v3_1[] = {
+	gsSPDisplayList(mat_mario_face_1___eye_half_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_0),
+	gsSPDisplayList(mat_mario_mustache_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_1),
+	gsSPDisplayList(mat_mario_hair_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_2),
+	gsSPDisplayList(mat_mario_sideburns_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_3),
+	gsSPDisplayList(mat_mario_cap_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_4),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2[] = {
+	gsSPDisplayList(mat_mario_face_2___eye_closed_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_0),
+	gsSPDisplayList(mat_mario_mustache_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_1),
+	gsSPDisplayList(mat_mario_hair_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_2),
+	gsSPDisplayList(mat_mario_sideburns_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_3),
+	gsSPDisplayList(mat_mario_cap_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_4),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_000_displaylist_mesh_mat_override_face_7___eye_X_v3_3[] = {
+	gsSPDisplayList(mat_mario_face_7___eye_X_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_0),
+	gsSPDisplayList(mat_mario_mustache_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_1),
+	gsSPDisplayList(mat_mario_hair_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_2),
+	gsSPDisplayList(mat_mario_sideburns_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_3),
+	gsSPDisplayList(mat_mario_cap_v3),
+	gsSPDisplayList(mario_000_displaylist_mesh_tri_4),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx mario_002_switch_option_head__no_cap__mesh[] = {
+	gsSPDisplayList(mat_mario_face_0___eye_open_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_0),
+	gsSPDisplayList(mat_mario_mustache_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_1),
+	gsSPDisplayList(mat_mario_sideburns_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_2),
+	gsSPDisplayList(mat_mario_hair_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_3),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_002_switch_option_head__no_cap__mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_1),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_2),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_3),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_002_switch_option_head__no_cap__mesh_mat_override_face_1___eye_half_v3_1[] = {
+	gsSPDisplayList(mat_mario_face_1___eye_half_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_0),
+	gsSPDisplayList(mat_mario_mustache_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_1),
+	gsSPDisplayList(mat_mario_sideburns_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_2),
+	gsSPDisplayList(mat_mario_hair_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_3),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2[] = {
+	gsSPDisplayList(mat_mario_face_2___eye_closed_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_0),
+	gsSPDisplayList(mat_mario_mustache_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_1),
+	gsSPDisplayList(mat_mario_sideburns_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_2),
+	gsSPDisplayList(mat_mario_hair_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_3),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_002_switch_option_head__no_cap__mesh_mat_override_face_7___eye_X_v3_3[] = {
+	gsSPDisplayList(mat_mario_face_7___eye_X_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_0),
+	gsSPDisplayList(mat_mario_mustache_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_1),
+	gsSPDisplayList(mat_mario_sideburns_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_2),
+	gsSPDisplayList(mat_mario_hair_v3),
+	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_3),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx mario_000_displaylist_001_mesh[] = {
+	gsSPDisplayList(mat_mario_wing_2_v3),
+	gsSPDisplayList(mario_000_displaylist_001_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_wing_2_v3),
+	gsSPDisplayList(mat_mario_wing_1_v3),
+	gsSPDisplayList(mario_000_displaylist_001_mesh_tri_1),
+	gsSPDisplayList(mat_revert_mario_wing_1_v3),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_000_displaylist_001_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_wing_2_v3),
+	gsSPDisplayList(mario_000_displaylist_001_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_wing_2_v3),
+	gsSPDisplayList(mat_mario_wing_1_v3),
+	gsSPDisplayList(mario_000_displaylist_001_mesh_tri_1),
+	gsSPDisplayList(mat_revert_mario_wing_1_v3),
+	gsSPEndDisplayList(),
 };
 
-// 0x04001090
-ALIGNED8 static const Texture mario_texture_yellow_button[] = {
-#include "actors/mario/mario_overalls_button.rgba16.inc.c"
+
+
+Gfx mario_000_displaylist_002_mesh[] = {
+	gsSPDisplayList(mat_mario_wing_2_v3),
+	gsSPDisplayList(mario_000_displaylist_002_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_wing_2_v3),
+	gsSPDisplayList(mat_mario_wing_1_v3),
+	gsSPDisplayList(mario_000_displaylist_002_mesh_tri_1),
+	gsSPDisplayList(mat_revert_mario_wing_1_v3),
+	gsSPEndDisplayList(),
 };
 
-// 0x04001890
-ALIGNED8 static const Texture mario_texture_m_logo[] = {
-#include "actors/mario/mario_logo.rgba16.inc.c"
+Gfx mario_000_displaylist_002_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_wing_2_v3),
+	gsSPDisplayList(mario_000_displaylist_002_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_wing_2_v3),
+	gsSPDisplayList(mat_mario_wing_1_v3),
+	gsSPDisplayList(mario_000_displaylist_002_mesh_tri_1),
+	gsSPDisplayList(mat_revert_mario_wing_1_v3),
+	gsSPEndDisplayList(),
 };
 
-// 0x04002090
-ALIGNED8 static const Texture mario_texture_hair_sideburn[] = {
-#include "actors/mario/mario_sideburn.rgba16.inc.c"
+
+
+Gfx mario_000_offset_003_mesh[] = {
+	gsSPDisplayList(mat_mario_cap_v3),
+	gsSPDisplayList(mario_000_offset_003_mesh_tri_0),
+	gsSPEndDisplayList(),
 };
 
-// 0x04002890
-ALIGNED8 static const Texture mario_texture_mustache[] = {
-#include "actors/mario/mario_mustache.rgba16.inc.c"
+Gfx mario_000_offset_003_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_offset_003_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
 };
 
-// 0x04003090
-ALIGNED8 static const Texture mario_texture_eyes_front[] = {
-#include "actors/mario/mario_eyes_center.rgba16.inc.c"
+
+
+Gfx mario_000_offset_004_mesh[] = {
+	gsSPDisplayList(mat_mario_cap_v3),
+	gsSPDisplayList(mario_000_offset_004_mesh_tri_0),
+	gsSPEndDisplayList(),
 };
 
-// 0x04003890
-ALIGNED8 static const Texture mario_texture_eyes_half_closed[] = {
-#include "actors/mario/mario_eyes_half_closed.rgba16.inc.c"
+Gfx mario_000_offset_004_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_offset_004_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
 };
 
-// 0x04004090
-ALIGNED8 static const Texture mario_texture_eyes_closed[] = {
-#include "actors/mario/mario_eyes_closed.rgba16.inc.c"
+
+
+Gfx mario_000_displaylist_003_mesh[] = {
+	gsSPDisplayList(mat_mario_gloves_v3),
+	gsSPDisplayList(mario_000_displaylist_003_mesh_tri_0),
+	gsSPEndDisplayList(),
 };
 
-// Unreferenced
-// 0x04004890
-ALIGNED8 static const Texture mario_texture_eyes_closed_unused1[] = {
-#include "actors/mario/mario_eyes_closed_unused_0.rgba16.inc.c"
+Gfx mario_000_displaylist_003_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_displaylist_003_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
 };
 
-// Unreferenced
-// 0x04005090
-ALIGNED8 static const Texture mario_texture_eyes_closed_unused2[] = {
-#include "actors/mario/mario_eyes_closed_unused_1.rgba16.inc.c"
+
+
+Gfx mario_002_switch_option_right_hand_open_mesh[] = {
+	gsSPDisplayList(mat_mario_gloves_v3),
+	gsSPDisplayList(mario_002_switch_option_right_hand_open_mesh_tri_0),
+	gsSPEndDisplayList(),
 };
 
-// 0x04005890
-ALIGNED8 static const Texture mario_texture_eyes_right[] = {
-#include "actors/mario/mario_eyes_left_unused.rgba16.inc.c"
+Gfx mario_002_switch_option_right_hand_open_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_002_switch_option_right_hand_open_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
 };
 
-// 0x04006090
-ALIGNED8 static const Texture mario_texture_eyes_left[] = {
-#include "actors/mario/mario_eyes_right_unused.rgba16.inc.c"
+
+
+Gfx mario_000_offset_006_mesh[] = {
+	gsSPDisplayList(mat_mario_cap_v3),
+	gsSPDisplayList(mario_000_offset_006_mesh_tri_0),
+	gsSPEndDisplayList(),
 };
 
-// 0x04006890
-ALIGNED8 static const Texture mario_texture_eyes_up[] = {
-#include "actors/mario/mario_eyes_up_unused.rgba16.inc.c"
+Gfx mario_000_offset_006_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_offset_006_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
 };
 
-// 0x04007090
-ALIGNED8 static const Texture mario_texture_eyes_down[] = {
-#include "actors/mario/mario_eyes_down_unused.rgba16.inc.c"
-};
 
-// 0x04007890
-ALIGNED8 static const Texture mario_texture_eyes_dead[] = {
-#include "actors/mario/mario_eyes_dead.rgba16.inc.c"
+
+Gfx mario_000_offset_007_mesh[] = {
+	gsSPDisplayList(mat_mario_cap_v3),
+	gsSPDisplayList(mario_000_offset_007_mesh_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_000_offset_007_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_offset_007_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
 };
 
-// 0x04008090
-ALIGNED8 static const Texture mario_texture_wings_half_1[] = {
-#include "actors/mario/mario_wing.rgba16.inc.c"
+
+
+Gfx mario_000_displaylist_004_mesh[] = {
+	gsSPDisplayList(mat_mario_gloves_v3),
+	gsSPDisplayList(mario_000_displaylist_004_mesh_tri_0),
+	gsSPEndDisplayList(),
 };
 
-// 0x04009090
-ALIGNED8 static const Texture mario_texture_wings_half_2[] = {
-#include "actors/mario/mario_wing_tip.rgba16.inc.c"
-};
-
-// 0x0400A090
-ALIGNED8 static const Texture mario_texture_metal_wings_half_1[] = {
-#include "actors/mario/mario_metal_wing_unused.rgba16.inc.c"
-};
+Gfx mario_000_displaylist_004_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_displaylist_004_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx mario_002_switch_option_left_hand_open_mesh[] = {
+	gsSPDisplayList(mat_mario_gloves_v3),
+	gsSPDisplayList(mario_002_switch_option_left_hand_open_mesh_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_002_switch_option_left_hand_open_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_002_switch_option_left_hand_open_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx mario_004_switch_option_left_hand_peace_mesh[] = {
+	gsSPDisplayList(mat_mario_gloves_v3),
+	gsSPDisplayList(mario_004_switch_option_left_hand_peace_mesh_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_004_switch_option_left_hand_peace_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_004_switch_option_left_hand_peace_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx mario_005_switch_option_left_hand_cap_mesh[] = {
+	gsSPDisplayList(mat_mario_cap_v3),
+	gsSPDisplayList(mario_005_switch_option_left_hand_cap_mesh_tri_0),
+	gsSPDisplayList(mat_mario_gloves_v3),
+	gsSPDisplayList(mario_005_switch_option_left_hand_cap_mesh_tri_1),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_005_switch_option_left_hand_cap_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_005_switch_option_left_hand_cap_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_005_switch_option_left_hand_cap_mesh_tri_1),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx mario_006_switch_option_left_hand_wing_cap_mesh[] = {
+	gsSPDisplayList(mat_mario_cap_v3),
+	gsSPDisplayList(mario_006_switch_option_left_hand_wing_cap_mesh_tri_0),
+	gsSPDisplayList(mat_mario_gloves_v3),
+	gsSPDisplayList(mario_006_switch_option_left_hand_wing_cap_mesh_tri_1),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_006_switch_option_left_hand_wing_cap_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_006_switch_option_left_hand_wing_cap_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_006_switch_option_left_hand_wing_cap_mesh_tri_1),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx mario_006_switch_option_left_hand_wing_cap_wings_mesh[] = {
+	gsSPDisplayList(mat_mario_wing_2_v3),
+	gsSPDisplayList(mario_006_switch_option_left_hand_wing_cap_wings_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_wing_2_v3),
+	gsSPDisplayList(mat_mario_wing_1_v3),
+	gsSPDisplayList(mario_006_switch_option_left_hand_wing_cap_wings_mesh_tri_1),
+	gsSPDisplayList(mat_revert_mario_wing_1_v3),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_006_switch_option_left_hand_wing_cap_wings_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_wing_2_v3),
+	gsSPDisplayList(mario_006_switch_option_left_hand_wing_cap_wings_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_wing_2_v3),
+	gsSPDisplayList(mat_mario_wing_1_v3),
+	gsSPDisplayList(mario_006_switch_option_left_hand_wing_cap_wings_mesh_tri_1),
+	gsSPDisplayList(mat_revert_mario_wing_1_v3),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx mario_000_offset_009_mesh[] = {
+	gsSPDisplayList(mat_mario_body_v3),
+	gsSPDisplayList(mario_000_offset_009_mesh_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_000_offset_009_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_offset_009_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx mario_000_offset_010_mesh[] = {
+	gsSPDisplayList(mat_mario_body_v3),
+	gsSPDisplayList(mario_000_offset_010_mesh_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_000_offset_010_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_offset_010_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx mario_000_offset_011_mesh[] = {
+	gsSPDisplayList(mat_mario_shoes_v3),
+	gsSPDisplayList(mario_000_offset_011_mesh_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_000_offset_011_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_offset_011_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx mario_000_offset_012_mesh[] = {
+	gsSPDisplayList(mat_mario_body_v3),
+	gsSPDisplayList(mario_000_offset_012_mesh_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_000_offset_012_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_offset_012_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx mario_000_offset_013_mesh[] = {
+	gsSPDisplayList(mat_mario_body_v3),
+	gsSPDisplayList(mario_000_offset_013_mesh_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_000_offset_013_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_offset_013_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx mario_000_displaylist_005_mesh[] = {
+	gsSPDisplayList(mat_mario_shoes_v3),
+	gsSPDisplayList(mario_000_displaylist_005_mesh_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mario_000_displaylist_005_mesh_mat_override_metal_v3_0[] = {
+	gsSPDisplayList(mat_mario_metal_v3),
+	gsSPDisplayList(mario_000_displaylist_005_mesh_tri_0),
+	gsSPDisplayList(mat_revert_mario_metal_v3),
+	gsSPEndDisplayList(),
+};
+
+
 
-// 0x0400B090
-ALIGNED8 static const Texture mario_texture_metal_wings_half_2[] = {
-#include "actors/mario/mario_metal_wing_tip_unused.rgba16.inc.c"
-};
-
-// 0x0400C090
-static const Vtx mario_butt_dl_vertex_group1[] = {
-    {{{    -9,     73,    -34}, 0, {     0,      0}, {0xc2, 0x6b, 0xe6, 0x00}}},
-    {{{    -9,     73,     34}, 0, {     0,      0}, {0xbe, 0x6a, 0x12, 0x00}}},
-    {{{    22,     82,    -26}, 0, {     0,      0}, {0x07, 0x7e, 0xf5, 0x00}}},
-    {{{    73,     11,      0}, 0, {     0,      0}, {0x7e, 0x04, 0x00, 0x00}}},
-    {{{    55,    -61,    -36}, 0, {     0,      0}, {0x67, 0xbe, 0xe1, 0x00}}},
-    {{{    44,    -10,    -92}, 0, {     0,      0}, {0x4f, 0xf2, 0x9e, 0x00}}},
-    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
-    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
-    {{{    43,     40,     91}, 0, {     0,      0}, {0x4e, 0x30, 0x57, 0x00}}},
-    {{{     8,     -8,    -99}, 0, {     0,      0}, {0xf3, 0xee, 0x84, 0x00}}},
-    {{{    36,    -51,    -79}, 0, {     0,      0}, {0x30, 0xb8, 0xa4, 0x00}}},
-    {{{    26,    -74,    -46}, 0, {     0,      0}, {0x18, 0x88, 0xe2, 0x00}}},
-    {{{    36,    -52,     79}, 0, {     0,      0}, {0x30, 0xb8, 0x5c, 0x00}}},
-    {{{    26,    -74,     45}, 0, {     0,      0}, {0x12, 0x88, 0x22, 0x00}}},
-    {{{    55,    -61,     36}, 0, {     0,      0}, {0x60, 0xb3, 0x1a, 0x00}}},
-};
-
-// 0x0400C180
-static const Vtx mario_butt_dl_vertex_group2[] = {
-    {{{    -5,     59,     72}, 0, {     0,      0}, {0xc0, 0x52, 0x47, 0x00}}},
-    {{{    -9,     73,     34}, 0, {     0,      0}, {0xbe, 0x6a, 0x12, 0x00}}},
-    {{{   -32,     40,     39}, 0, {     0,      0}, {0x8b, 0x25, 0x1d, 0x00}}},
-    {{{    52,     70,     38}, 0, {     0,      0}, {0x53, 0x5d, 0x16, 0x00}}},
-    {{{    22,     82,     26}, 0, {     0,      0}, {0x07, 0x7d, 0x11, 0x00}}},
-    {{{    27,     72,     63}, 0, {     0,      0}, {0x06, 0x6c, 0x42, 0x00}}},
-    {{{    43,     40,    -91}, 0, {     0,      0}, {0x4e, 0x30, 0xa9, 0x00}}},
-    {{{    27,     72,    -63}, 0, {     0,      0}, {0x07, 0x6b, 0xbe, 0x00}}},
-    {{{    52,     70,    -39}, 0, {     0,      0}, {0x59, 0x56, 0xe5, 0x00}}},
-    {{{    -5,     59,    -72}, 0, {     0,      0}, {0xc0, 0x52, 0xb9, 0x00}}},
-    {{{   -17,     32,    -79}, 0, {     0,      0}, {0xa4, 0x23, 0xb1, 0x00}}},
-    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
-    {{{    73,     11,      0}, 0, {     0,      0}, {0x7e, 0x04, 0x00, 0x00}}},
-    {{{    43,     40,     91}, 0, {     0,      0}, {0x4e, 0x30, 0x57, 0x00}}},
-};
-
-// 0x0400C260
-static const Vtx mario_butt_dl_vertex_group3[] = {
-    {{{   -14,    -74,      0}, 0, {     0,      0}, {0xcb, 0x8d, 0x00, 0x00}}},
-    {{{    -9,    -69,     55}, 0, {     0,      0}, {0xcd, 0x97, 0x30, 0x00}}},
-    {{{   -31,    -51,     42}, 0, {     0,      0}, {0x8d, 0xd7, 0x1f, 0x00}}},
-    {{{    26,    -74,    -46}, 0, {     0,      0}, {0x18, 0x88, 0xe2, 0x00}}},
-    {{{    -9,    -69,    -55}, 0, {     0,      0}, {0xcd, 0x97, 0xd0, 0x00}}},
-    {{{     4,    -48,    -86}, 0, {     0,      0}, {0xd8, 0xba, 0x9f, 0x00}}},
-    {{{     4,    -49,     86}, 0, {     0,      0}, {0xd8, 0xb9, 0x61, 0x00}}},
-    {{{    26,    -74,     45}, 0, {     0,      0}, {0x12, 0x88, 0x22, 0x00}}},
-    {{{   -32,     40,     39}, 0, {     0,      0}, {0x8b, 0x25, 0x1d, 0x00}}},
-    {{{    -9,     73,     34}, 0, {     0,      0}, {0xbe, 0x6a, 0x12, 0x00}}},
-    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
-    {{{    27,     72,     63}, 0, {     0,      0}, {0x06, 0x6c, 0x42, 0x00}}},
-    {{{    -5,     59,     72}, 0, {     0,      0}, {0xc0, 0x52, 0x47, 0x00}}},
-    {{{    52,     70,    -39}, 0, {     0,      0}, {0x59, 0x56, 0xe5, 0x00}}},
-    {{{    22,     82,    -26}, 0, {     0,      0}, {0x07, 0x7e, 0xf5, 0x00}}},
-    {{{    52,     70,     38}, 0, {     0,      0}, {0x53, 0x5d, 0x16, 0x00}}},
-};
-
-// 0x0400C360
-static const Vtx mario_butt_dl_vertex_group4[] = {
-    {{{     6,     33,    -95}, 0, {     0,      0}, {0xe6, 0x26, 0x8b, 0x00}}},
-    {{{    27,     72,    -63}, 0, {     0,      0}, {0x07, 0x6b, 0xbe, 0x00}}},
-    {{{    43,     40,    -91}, 0, {     0,      0}, {0x4e, 0x30, 0xa9, 0x00}}},
-    {{{   -31,    -51,     42}, 0, {     0,      0}, {0x8d, 0xd7, 0x1f, 0x00}}},
-    {{{   -31,    -51,    -42}, 0, {     0,      0}, {0x91, 0xd0, 0xdc, 0x00}}},
-    {{{   -14,    -74,      0}, 0, {     0,      0}, {0xcb, 0x8d, 0x00, 0x00}}},
-    {{{    -9,    -69,    -55}, 0, {     0,      0}, {0xcd, 0x97, 0xd0, 0x00}}},
-    {{{    73,     11,      0}, 0, {     0,      0}, {0x7e, 0x04, 0x00, 0x00}}},
-    {{{    44,    -10,    -92}, 0, {     0,      0}, {0x4f, 0xf2, 0x9e, 0x00}}},
-    {{{    52,     70,     38}, 0, {     0,      0}, {0x53, 0x5d, 0x16, 0x00}}},
-    {{{    52,     70,    -39}, 0, {     0,      0}, {0x59, 0x56, 0xe5, 0x00}}},
-    {{{    43,     40,     91}, 0, {     0,      0}, {0x4e, 0x30, 0x57, 0x00}}},
-    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
-    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
-    {{{    27,     72,     63}, 0, {     0,      0}, {0x06, 0x6c, 0x42, 0x00}}},
-};
-
-// 0x0400C450
-static const Vtx mario_butt_dl_vertex_group5[] = {
-    {{{    -5,     59,    -72}, 0, {     0,      0}, {0xc0, 0x52, 0xb9, 0x00}}},
-    {{{    -9,     73,    -34}, 0, {     0,      0}, {0xc2, 0x6b, 0xe6, 0x00}}},
-    {{{    27,     72,    -63}, 0, {     0,      0}, {0x07, 0x6b, 0xbe, 0x00}}},
-    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
-    {{{   -32,     40,     39}, 0, {     0,      0}, {0x8b, 0x25, 0x1d, 0x00}}},
-    {{{   -18,     32,     79}, 0, {     0,      0}, {0xa4, 0x23, 0x4f, 0x00}}},
-    {{{    -5,     59,     72}, 0, {     0,      0}, {0xc0, 0x52, 0x47, 0x00}}},
-    {{{    22,     82,    -26}, 0, {     0,      0}, {0x07, 0x7e, 0xf5, 0x00}}},
-    {{{    52,     70,    -39}, 0, {     0,      0}, {0x59, 0x56, 0xe5, 0x00}}},
-    {{{    27,     72,     63}, 0, {     0,      0}, {0x06, 0x6c, 0x42, 0x00}}},
-    {{{    43,     40,     91}, 0, {     0,      0}, {0x4e, 0x30, 0x57, 0x00}}},
-    {{{    52,     70,     38}, 0, {     0,      0}, {0x53, 0x5d, 0x16, 0x00}}},
-    {{{     8,     -8,     99}, 0, {     0,      0}, {0xf3, 0xef, 0x7c, 0x00}}},
-    {{{    36,    -52,     79}, 0, {     0,      0}, {0x30, 0xb8, 0x5c, 0x00}}},
-    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
-};
-
-// 0x0400C540
-static const Vtx mario_butt_dl_vertex_group6[] = {
-    {{{     6,     33,    -95}, 0, {     0,      0}, {0xe6, 0x26, 0x8b, 0x00}}},
-    {{{    43,     40,    -91}, 0, {     0,      0}, {0x4e, 0x30, 0xa9, 0x00}}},
-    {{{    44,    -10,    -92}, 0, {     0,      0}, {0x4f, 0xf2, 0x9e, 0x00}}},
-    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
-    {{{    36,    -52,     79}, 0, {     0,      0}, {0x30, 0xb8, 0x5c, 0x00}}},
-    {{{    55,    -61,     36}, 0, {     0,      0}, {0x60, 0xb3, 0x1a, 0x00}}},
-    {{{   -18,     32,     79}, 0, {     0,      0}, {0xa4, 0x23, 0x4f, 0x00}}},
-    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
-    {{{    -5,     59,     72}, 0, {     0,      0}, {0xc0, 0x52, 0x47, 0x00}}},
-    {{{   -20,     -7,     81}, 0, {     0,      0}, {0xa3, 0xf9, 0x55, 0x00}}},
-    {{{     8,     -8,     99}, 0, {     0,      0}, {0xf3, 0xef, 0x7c, 0x00}}},
-    {{{     4,    -49,     86}, 0, {     0,      0}, {0xd8, 0xb9, 0x61, 0x00}}},
-    {{{   -20,     -8,    -81}, 0, {     0,      0}, {0xa3, 0xf8, 0xab, 0x00}}},
-    {{{     8,     -8,    -99}, 0, {     0,      0}, {0xf3, 0xee, 0x84, 0x00}}},
-    {{{     4,    -48,    -86}, 0, {     0,      0}, {0xd8, 0xba, 0x9f, 0x00}}},
-};
-
-// 0x0400C630
-static const Vtx mario_butt_dl_vertex_group7[] = {
-    {{{    -5,     59,    -72}, 0, {     0,      0}, {0xc0, 0x52, 0xb9, 0x00}}},
-    {{{     6,     33,    -95}, 0, {     0,      0}, {0xe6, 0x26, 0x8b, 0x00}}},
-    {{{   -17,     32,    -79}, 0, {     0,      0}, {0xa4, 0x23, 0xb1, 0x00}}},
-    {{{   -20,     -8,    -81}, 0, {     0,      0}, {0xa3, 0xf8, 0xab, 0x00}}},
-    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
-    {{{   -18,     32,     79}, 0, {     0,      0}, {0xa4, 0x23, 0x4f, 0x00}}},
-    {{{   -20,     -7,     81}, 0, {     0,      0}, {0xa3, 0xf9, 0x55, 0x00}}},
-    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
-    {{{    55,    -61,     36}, 0, {     0,      0}, {0x60, 0xb3, 0x1a, 0x00}}},
-    {{{    73,     11,      0}, 0, {     0,      0}, {0x7e, 0x04, 0x00, 0x00}}},
-    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
-    {{{    55,    -61,    -36}, 0, {     0,      0}, {0x67, 0xbe, 0xe1, 0x00}}},
-    {{{    36,    -51,    -79}, 0, {     0,      0}, {0x30, 0xb8, 0xa4, 0x00}}},
-    {{{    44,    -10,    -92}, 0, {     0,      0}, {0x4f, 0xf2, 0x9e, 0x00}}},
-    {{{     8,     -8,    -99}, 0, {     0,      0}, {0xf3, 0xee, 0x84, 0x00}}},
-};
-
-// 0x0400C720
-static const Vtx mario_butt_dl_vertex_group8[] = {
-    {{{     8,     -8,     99}, 0, {     0,      0}, {0xf3, 0xef, 0x7c, 0x00}}},
-    {{{     4,    -49,     86}, 0, {     0,      0}, {0xd8, 0xb9, 0x61, 0x00}}},
-    {{{    36,    -52,     79}, 0, {     0,      0}, {0x30, 0xb8, 0x5c, 0x00}}},
-    {{{    -9,     73,    -34}, 0, {     0,      0}, {0xc2, 0x6b, 0xe6, 0x00}}},
-    {{{    22,     82,    -26}, 0, {     0,      0}, {0x07, 0x7e, 0xf5, 0x00}}},
-    {{{    27,     72,    -63}, 0, {     0,      0}, {0x07, 0x6b, 0xbe, 0x00}}},
-    {{{    27,     72,     63}, 0, {     0,      0}, {0x06, 0x6c, 0x42, 0x00}}},
-    {{{    -5,     59,     72}, 0, {     0,      0}, {0xc0, 0x52, 0x47, 0x00}}},
-    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
-    {{{     6,     33,    -95}, 0, {     0,      0}, {0xe6, 0x26, 0x8b, 0x00}}},
-    {{{    -5,     59,    -72}, 0, {     0,      0}, {0xc0, 0x52, 0xb9, 0x00}}},
-    {{{    22,     82,     26}, 0, {     0,      0}, {0x07, 0x7d, 0x11, 0x00}}},
-    {{{    52,     70,     38}, 0, {     0,      0}, {0x53, 0x5d, 0x16, 0x00}}},
-    {{{    -9,     73,     34}, 0, {     0,      0}, {0xbe, 0x6a, 0x12, 0x00}}},
-    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
-    {{{    26,    -74,     45}, 0, {     0,      0}, {0x12, 0x88, 0x22, 0x00}}},
-};
-
-// 0x0400C820
-static const Vtx mario_butt_dl_vertex_group9[] = {
-    {{{     4,    -48,    -86}, 0, {     0,      0}, {0xd8, 0xba, 0x9f, 0x00}}},
-    {{{    36,    -51,    -79}, 0, {     0,      0}, {0x30, 0xb8, 0xa4, 0x00}}},
-    {{{    26,    -74,    -46}, 0, {     0,      0}, {0x18, 0x88, 0xe2, 0x00}}},
-    {{{   -20,     -7,     81}, 0, {     0,      0}, {0xa3, 0xf9, 0x55, 0x00}}},
-    {{{   -18,     32,     79}, 0, {     0,      0}, {0xa4, 0x23, 0x4f, 0x00}}},
-    {{{   -32,     40,     39}, 0, {     0,      0}, {0x8b, 0x25, 0x1d, 0x00}}},
-    {{{     8,     -8,    -99}, 0, {     0,      0}, {0xf3, 0xee, 0x84, 0x00}}},
-    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
-    {{{     8,     -8,     99}, 0, {     0,      0}, {0xf3, 0xef, 0x7c, 0x00}}},
-    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
-    {{{    -9,     73,     34}, 0, {     0,      0}, {0xbe, 0x6a, 0x12, 0x00}}},
-    {{{    22,     82,     26}, 0, {     0,      0}, {0x07, 0x7d, 0x11, 0x00}}},
-    {{{    22,     82,    -26}, 0, {     0,      0}, {0x07, 0x7e, 0xf5, 0x00}}},
-    {{{    -9,    -69,    -55}, 0, {     0,      0}, {0xcd, 0x97, 0xd0, 0x00}}},
-    {{{   -31,    -51,    -42}, 0, {     0,      0}, {0x91, 0xd0, 0xdc, 0x00}}},
-    {{{   -20,     -8,    -81}, 0, {     0,      0}, {0xa3, 0xf8, 0xab, 0x00}}},
-};
-
-// 0x0400C920
-static const Vtx mario_butt_dl_vertex_group10[] = {
-    {{{   -31,    -51,     42}, 0, {     0,      0}, {0x8d, 0xd7, 0x1f, 0x00}}},
-    {{{    -9,    -69,     55}, 0, {     0,      0}, {0xcd, 0x97, 0x30, 0x00}}},
-    {{{     4,    -49,     86}, 0, {     0,      0}, {0xd8, 0xb9, 0x61, 0x00}}},
-    {{{   -20,     -7,     81}, 0, {     0,      0}, {0xa3, 0xf9, 0x55, 0x00}}},
-    {{{   -32,     40,     39}, 0, {     0,      0}, {0x8b, 0x25, 0x1d, 0x00}}},
-    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
-    {{{   -20,     -8,    -81}, 0, {     0,      0}, {0xa3, 0xf8, 0xab, 0x00}}},
-    {{{   -31,    -51,    -42}, 0, {     0,      0}, {0x91, 0xd0, 0xdc, 0x00}}},
-    {{{    55,    -61,     36}, 0, {     0,      0}, {0x60, 0xb3, 0x1a, 0x00}}},
-    {{{    26,    -74,     45}, 0, {     0,      0}, {0x12, 0x88, 0x22, 0x00}}},
-    {{{    26,    -74,    -46}, 0, {     0,      0}, {0x18, 0x88, 0xe2, 0x00}}},
-    {{{   -14,    -74,      0}, 0, {     0,      0}, {0xcb, 0x8d, 0x00, 0x00}}},
-    {{{    -9,    -69,    -55}, 0, {     0,      0}, {0xcd, 0x97, 0xd0, 0x00}}},
-    {{{    55,    -61,    -36}, 0, {     0,      0}, {0x67, 0xbe, 0xe1, 0x00}}},
-};
-
-// 0x0400CA00 - 0x0400CC98
-const Gfx mario_butt_dl[] = {
-    gsSPVertex(mario_butt_dl_vertex_group1, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  9,  5, 10, 0x0),
-    gsSP2Triangles( 4, 11, 10, 0x0, 12, 13, 14, 0x0),
-    gsSPVertex(mario_butt_dl_vertex_group2, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10, 11, 0x0),
-    gsSP2Triangles(12,  3, 13, 0x0,  6,  8, 12, 0x0),
-    gsSPVertex(mario_butt_dl_vertex_group3, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  1,  7, 0x0,  8,  9, 10, 0x0),
-    gsSP2Triangles(11,  9, 12, 0x0, 13, 14, 15, 0x0),
-    gsSPVertex(mario_butt_dl_vertex_group4, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 4,  6,  5, 0x0,  7,  8,  2, 0x0),
-    gsSP2Triangles( 9,  7, 10, 0x0, 11, 12,  7, 0x0),
-    gsSP1Triangle(13, 11, 14, 0x0),
-    gsSPVertex(mario_butt_dl_vertex_group5, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  2,  7,  8, 0x0),
-    gsSP2Triangles( 9, 10, 11, 0x0, 12, 13, 14, 0x0),
-    gsSPVertex(mario_butt_dl_vertex_group6, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10,  7, 0x0),
-    gsSP2Triangles(11, 10,  9, 0x0, 12, 13, 14, 0x0),
-    gsSP1Triangle( 0, 13, 12, 0x0),
-    gsSPVertex(mario_butt_dl_vertex_group7, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  2,  1, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  2,  3, 0x0),
-    gsSP2Triangles( 8,  9, 10, 0x0,  9,  8, 11, 0x0),
-    gsSP2Triangles(11, 12, 13, 0x0, 13, 14,  1, 0x0),
-    gsSPVertex(mario_butt_dl_vertex_group8, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10,  5, 0x0),
-    gsSP2Triangles( 4, 11, 12, 0x0,  6, 11, 13, 0x0),
-    gsSP2Triangles(13,  3, 14, 0x0, 15,  2,  1, 0x0),
-    gsSPVertex(mario_butt_dl_vertex_group9, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 1,  0,  6, 0x0,  7,  8,  9, 0x0),
-    gsSP2Triangles(10, 11, 12, 0x0,  0, 13, 14, 0x0),
-    gsSP1Triangle(15,  0, 14, 0x0),
-    gsSPVertex(mario_butt_dl_vertex_group10, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
-    gsSP2Triangles( 3,  4,  0, 0x0,  0,  4,  5, 0x0),
-    gsSP2Triangles( 5,  6,  7, 0x0,  5,  7,  0, 0x0),
-    gsSP2Triangles( 8,  9, 10, 0x0,  9, 11, 10, 0x0),
-    gsSP2Triangles( 9,  1, 11, 0x0, 11, 12, 10, 0x0),
-    gsSP1Triangle(10, 13,  8, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400CC98 - 0x0400CCC8
-const Gfx mario_butt[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPLight(&mario_blue_lights_group.l, 1),
-    gsSPLight(&mario_blue_lights_group.a, 2),
-    gsSPDisplayList(mario_butt_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400CCC8 - 0x0400CD40
-const Gfx mario_metal_butt[] = {
-    gsDPPipeSync(),
-    gsSPSetGeometryMode(G_TEXTURE_GEN),
-    gsDPSetCombineMode(G_CC_DECALFADE, G_CC_DECALFADE),
-    gsDPLoadTextureBlock(mario_texture_metal, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_ON),
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPDisplayList(mario_butt_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400CD40
-static const Vtx mario_left_arm_shared_dl_vertex_group1[] = {
-    {{{     7,     27,     20}, 0, {     0,      0}, {0xda, 0x61, 0x47, 0x00}}},
-    {{{    59,     20,     15}, 0, {     0,      0}, {0x44, 0x4a, 0x4c, 0x00}}},
-    {{{    59,     21,    -21}, 0, {     0,      0}, {0x37, 0x67, 0xd0, 0x00}}},
-    {{{     6,    -16,     32}, 0, {     0,      0}, {0xd5, 0xdc, 0x71, 0x00}}},
-    {{{    58,    -15,     25}, 0, {     0,      0}, {0x32, 0xc6, 0x64, 0x00}}},
-    {{{     5,    -42,     -5}, 0, {     0,      0}, {0xd3, 0x8a, 0xff, 0x00}}},
-    {{{    57,    -36,     -5}, 0, {     0,      0}, {0x3e, 0x93, 0xef, 0x00}}},
-    {{{     6,    -13,    -42}, 0, {     0,      0}, {0xd6, 0xde, 0x8e, 0x00}}},
-    {{{    58,    -13,    -34}, 0, {     0,      0}, {0x3b, 0xfb, 0x90, 0x00}}},
-    {{{     7,     29,    -26}, 0, {     0,      0}, {0xda, 0x62, 0xbb, 0x00}}},
-    {{{    -8,     17,    -17}, 0, {     0,      0}, {0x90, 0x2a, 0xd6, 0x00}}},
-    {{{    -8,     16,     10}, 0, {     0,      0}, {0x9a, 0x44, 0x1d, 0x00}}},
-    {{{    -8,     -9,    -27}, 0, {     0,      0}, {0x8e, 0xe8, 0xce, 0x00}}},
-    {{{    -9,    -26,     -5}, 0, {     0,      0}, {0x96, 0xbd, 0x0e, 0x00}}},
-    {{{    -8,    -11,     18}, 0, {     0,      0}, {0x8b, 0xff, 0x2f, 0x00}}},
-};
-
-// 0x0400CE30
-static const Vtx mario_left_arm_shared_dl_vertex_group2[] = {
-    {{{    68,     13,    -16}, 0, {     0,      0}, {0x6a, 0x38, 0xd9, 0x00}}},
-    {{{    68,    -10,    -25}, 0, {     0,      0}, {0x75, 0xe7, 0xd9, 0x00}}},
-    {{{    58,    -13,    -34}, 0, {     0,      0}, {0x3b, 0xfb, 0x90, 0x00}}},
-    {{{    59,     20,     15}, 0, {     0,      0}, {0x44, 0x4a, 0x4c, 0x00}}},
-    {{{    68,     12,      9}, 0, {     0,      0}, {0x78, 0x1f, 0x1b, 0x00}}},
-    {{{    67,    -12,     16}, 0, {     0,      0}, {0x6f, 0xe8, 0x37, 0x00}}},
-    {{{    57,    -36,     -5}, 0, {     0,      0}, {0x3e, 0x93, 0xef, 0x00}}},
-    {{{    67,    -26,     -5}, 0, {     0,      0}, {0x6e, 0xc2, 0xfe, 0x00}}},
-    {{{    58,    -15,     25}, 0, {     0,      0}, {0x32, 0xc6, 0x64, 0x00}}},
-    {{{    59,     21,    -21}, 0, {     0,      0}, {0x37, 0x67, 0xd0, 0x00}}},
-    {{{     7,     27,     20}, 0, {     0,      0}, {0xda, 0x61, 0x47, 0x00}}},
-    {{{    -8,    -11,     18}, 0, {     0,      0}, {0x8b, 0xff, 0x2f, 0x00}}},
-    {{{     6,    -16,     32}, 0, {     0,      0}, {0xd5, 0xdc, 0x71, 0x00}}},
-    {{{    -9,    -26,     -5}, 0, {     0,      0}, {0x96, 0xbd, 0x0e, 0x00}}},
-    {{{     5,    -42,     -5}, 0, {     0,      0}, {0xd3, 0x8a, 0xff, 0x00}}},
-};
-
-// 0x0400CF20
-static const Vtx mario_left_arm_shared_dl_vertex_group3[] = {
-    {{{     5,    -42,     -5}, 0, {     0,      0}, {0xd3, 0x8a, 0xff, 0x00}}},
-    {{{    -8,     -9,    -27}, 0, {     0,      0}, {0x8e, 0xe8, 0xce, 0x00}}},
-    {{{     6,    -13,    -42}, 0, {     0,      0}, {0xd6, 0xde, 0x8e, 0x00}}},
-    {{{    -8,     17,    -17}, 0, {     0,      0}, {0x90, 0x2a, 0xd6, 0x00}}},
-    {{{     7,     29,    -26}, 0, {     0,      0}, {0xda, 0x62, 0xbb, 0x00}}},
-    {{{    -8,     16,     10}, 0, {     0,      0}, {0x9a, 0x44, 0x1d, 0x00}}},
-    {{{     7,     27,     20}, 0, {     0,      0}, {0xda, 0x61, 0x47, 0x00}}},
-    {{{    58,    -13,    -34}, 0, {     0,      0}, {0x3b, 0xfb, 0x90, 0x00}}},
-    {{{    57,    -36,     -5}, 0, {     0,      0}, {0x3e, 0x93, 0xef, 0x00}}},
-    {{{     6,    -16,     32}, 0, {     0,      0}, {0xd5, 0xdc, 0x71, 0x00}}},
-    {{{    58,    -15,     25}, 0, {     0,      0}, {0x32, 0xc6, 0x64, 0x00}}},
-    {{{    59,     20,     15}, 0, {     0,      0}, {0x44, 0x4a, 0x4c, 0x00}}},
-    {{{    59,     21,    -21}, 0, {     0,      0}, {0x37, 0x67, 0xd0, 0x00}}},
-    {{{    -8,    -11,     18}, 0, {     0,      0}, {0x8b, 0xff, 0x2f, 0x00}}},
-};
-
-// 0x0400D000
-static const Vtx mario_left_arm_shared_dl_vertex_group4[] = {
-    {{{    68,     12,      9}, 0, {     0,      0}, {0x78, 0x1f, 0x1b, 0x00}}},
-    {{{    68,    -10,    -25}, 0, {     0,      0}, {0x75, 0xe7, 0xd9, 0x00}}},
-    {{{    68,     13,    -16}, 0, {     0,      0}, {0x6a, 0x38, 0xd9, 0x00}}},
-    {{{    67,    -12,     16}, 0, {     0,      0}, {0x6f, 0xe8, 0x37, 0x00}}},
-    {{{    67,    -26,     -5}, 0, {     0,      0}, {0x6e, 0xc2, 0xfe, 0x00}}},
-    {{{    -8,     17,    -17}, 0, {     0,      0}, {0x90, 0x2a, 0xd6, 0x00}}},
-    {{{    -8,     -9,    -27}, 0, {     0,      0}, {0x8e, 0xe8, 0xce, 0x00}}},
-    {{{    -8,    -11,     18}, 0, {     0,      0}, {0x8b, 0xff, 0x2f, 0x00}}},
-    {{{    -9,    -26,     -5}, 0, {     0,      0}, {0x96, 0xbd, 0x0e, 0x00}}},
-};
-
-// 0x0400D090 - 0x0400D1D8
-const Gfx mario_left_arm_shared_dl[] = {
-    gsSPVertex(mario_left_arm_shared_dl_vertex_group1, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
-    gsSP2Triangles( 5,  6,  4, 0x0,  7,  8,  6, 0x0),
-    gsSP2Triangles( 9,  2,  8, 0x0,  9, 10, 11, 0x0),
-    gsSP2Triangles( 7, 12, 10, 0x0,  5, 13, 12, 0x0),
-    gsSP2Triangles( 3, 14, 13, 0x0,  0, 11, 14, 0x0),
-    gsSPVertex(mario_left_arm_shared_dl_vertex_group2, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  0, 0x0),
-    gsSP2Triangles( 5,  4,  3, 0x0,  6,  7,  5, 0x0),
-    gsSP2Triangles( 1,  7,  6, 0x0,  2,  1,  6, 0x0),
-    gsSP2Triangles( 6,  5,  8, 0x0,  8,  5,  3, 0x0),
-    gsSP2Triangles( 3,  0,  9, 0x0,  9,  0,  2, 0x0),
-    gsSP2Triangles(10, 11, 12, 0x0, 12, 13, 14, 0x0),
-    gsSPVertex(mario_left_arm_shared_dl_vertex_group3, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  4, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  2,  4,  7, 0x0),
-    gsSP2Triangles( 0,  2,  8, 0x0,  9,  0, 10, 0x0),
-    gsSP2Triangles( 6,  9, 11, 0x0,  4,  6, 12, 0x0),
-    gsSP1Triangle(13,  5,  3, 0x0),
-    gsSPVertex(mario_left_arm_shared_dl_vertex_group4, 9, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
-    gsSP2Triangles( 3,  4,  1, 0x0,  5,  6,  7, 0x0),
-    gsSP1Triangle( 6,  8,  7, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400D1D8 - 0x0400D1F8
-const Gfx mario_left_arm[] = {
-    gsSPLight(&mario_red_lights_group.l, 1),
-    gsSPLight(&mario_red_lights_group.a, 2),
-    gsSPDisplayList(mario_left_arm_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400D1F8
-static const Vtx mario_left_forearm_shared_dl_vertex[] = {
-    {{{    -2,     19,     16}, 0, {     0,      0}, {0xdb, 0x61, 0x48, 0x00}}},
-    {{{    47,     14,     13}, 0, {     0,      0}, {0x44, 0x44, 0x51, 0x00}}},
-    {{{    47,     16,    -19}, 0, {     0,      0}, {0x45, 0x61, 0xd6, 0x00}}},
-    {{{    -3,    -17,     26}, 0, {     0,      0}, {0xd7, 0xdb, 0x71, 0x00}}},
-    {{{    46,    -17,     22}, 0, {     0,      0}, {0x41, 0xc7, 0x5c, 0x00}}},
-    {{{    -3,    -38,     -4}, 0, {     0,      0}, {0xd4, 0x89, 0xfe, 0x00}}},
-    {{{    45,    -34,     -4}, 0, {     0,      0}, {0x3f, 0x95, 0xe8, 0x00}}},
-    {{{    -3,    -14,    -34}, 0, {     0,      0}, {0xd7, 0xde, 0x8e, 0x00}}},
-    {{{    46,    -14,    -30}, 0, {     0,      0}, {0x42, 0xf4, 0x95, 0x00}}},
-    {{{    -2,     21,    -21}, 0, {     0,      0}, {0xdb, 0x63, 0xbb, 0x00}}},
-    {{{   -14,     13,    -15}, 0, {     0,      0}, {0x93, 0x2c, 0xd3, 0x00}}},
-    {{{   -14,     11,     10}, 0, {     0,      0}, {0x93, 0x3b, 0x19, 0x00}}},
-    {{{   -15,    -11,    -24}, 0, {     0,      0}, {0x9a, 0xde, 0xbe, 0x00}}},
-    {{{   -15,    -27,     -4}, 0, {     0,      0}, {0x8b, 0xd2, 0x0a, 0x00}}},
-    {{{   -15,    -13,     17}, 0, {     0,      0}, {0x9b, 0xfb, 0x4c, 0x00}}},
-    {{{    58,     -7,     -3}, 0, {     0,      0}, {0x7e, 0xfc, 0x00, 0x00}}},
-};
-
-// 0x0400D2F8 - 0x0400D3E8
-const Gfx mario_left_forearm_shared_dl[] = {
-    gsSPVertex(mario_left_forearm_shared_dl_vertex, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
-    gsSP2Triangles( 5,  6,  4, 0x0,  7,  8,  6, 0x0),
-    gsSP2Triangles( 9,  2,  8, 0x0,  9, 10, 11, 0x0),
-    gsSP2Triangles( 7, 12, 10, 0x0,  5, 13, 12, 0x0),
-    gsSP2Triangles( 3, 14, 13, 0x0,  0, 11, 14, 0x0),
-    gsSP2Triangles( 8, 15,  6, 0x0,  6, 15,  4, 0x0),
-    gsSP2Triangles( 4, 15,  1, 0x0,  1, 15,  2, 0x0),
-    gsSP2Triangles( 2, 15,  8, 0x0,  0, 14,  3, 0x0),
-    gsSP2Triangles( 3, 13,  5, 0x0,  5, 12,  7, 0x0),
-    gsSP2Triangles( 7, 10,  9, 0x0,  9, 11,  0, 0x0),
-    gsSP2Triangles( 7,  9,  8, 0x0,  5,  7,  6, 0x0),
-    gsSP2Triangles( 3,  5,  4, 0x0,  0,  3,  1, 0x0),
-    gsSP2Triangles( 9,  0,  2, 0x0, 12, 13, 10, 0x0),
-    gsSP2Triangles(13, 11, 10, 0x0, 13, 14, 11, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400D3E8
-static const Vtx mario_left_hand_closed_shared_dl_vertex_group1[] = {
-    {{{    36,      6,     42}, 0, {     0,      0}, {0xe1, 0xf0, 0x79, 0x00}}},
-    {{{    17,     -1,     27}, 0, {     0,      0}, {0x00, 0xfd, 0x7f, 0x00}}},
-    {{{    34,    -41,      3}, 0, {     0,      0}, {0x42, 0xa3, 0x36, 0x00}}},
-    {{{    26,    -25,    -32}, 0, {     0,      0}, {0x09, 0xc7, 0x8f, 0x00}}},
-    {{{     4,     24,    -31}, 0, {     0,      0}, {0xd5, 0x3f, 0x9c, 0x00}}},
-    {{{    33,      7,    -44}, 0, {     0,      0}, {0xc6, 0xfe, 0x90, 0x00}}},
-    {{{    -1,     39,      5}, 0, {     0,      0}, {0xea, 0x6e, 0x3a, 0x00}}},
-    {{{     5,     -6,     36}, 0, {     0,      0}, {0x44, 0x1b, 0x67, 0x00}}},
-    {{{   -10,     26,    -38}, 0, {     0,      0}, {0xf0, 0x41, 0x95, 0x00}}},
-    {{{    17,    -38,    -39}, 0, {     0,      0}, {0x1a, 0xb7, 0x9d, 0x00}}},
-    {{{    86,     29,     41}, 0, {     0,      0}, {0x4b, 0x20, 0x60, 0x00}}},
-    {{{    59,     81,      8}, 0, {     0,      0}, {0x11, 0x7a, 0x1d, 0x00}}},
-    {{{   107,    -26,      4}, 0, {     0,      0}, {0x67, 0xc5, 0x2b, 0x00}}},
-    {{{    61,     12,    -60}, 0, {     0,      0}, {0x00, 0x21, 0x86, 0x00}}},
-    {{{    90,     17,    -46}, 0, {     0,      0}, {0x43, 0x35, 0xa3, 0x00}}},
-    {{{   100,     -6,    -46}, 0, {     0,      0}, {0x63, 0x0a, 0xb3, 0x00}}},
-};
-
-// 0x0400D4E8
-static const Vtx mario_left_hand_closed_shared_dl_vertex_group2[] = {
-    {{{    90,     17,    -46}, 0, {     0,      0}, {0x43, 0x35, 0xa3, 0x00}}},
-    {{{    57,     55,    -37}, 0, {     0,      0}, {0x22, 0x54, 0xa9, 0x00}}},
-    {{{    99,     40,    -16}, 0, {     0,      0}, {0x6c, 0x3c, 0xe5, 0x00}}},
-    {{{    32,     63,    -28}, 0, {     0,      0}, {0xd0, 0x4f, 0xaa, 0x00}}},
-    {{{    12,     59,     10}, 0, {     0,      0}, {0xaa, 0x58, 0x1b, 0x00}}},
-    {{{    59,     81,      8}, 0, {     0,      0}, {0x11, 0x7a, 0x1d, 0x00}}},
-    {{{    80,    -31,    -61}, 0, {     0,      0}, {0x0c, 0xb2, 0x9d, 0x00}}},
-    {{{   100,     -6,    -46}, 0, {     0,      0}, {0x63, 0x0a, 0xb3, 0x00}}},
-    {{{   107,    -26,      4}, 0, {     0,      0}, {0x67, 0xc5, 0x2b, 0x00}}},
-    {{{    61,     12,    -60}, 0, {     0,      0}, {0x00, 0x21, 0x86, 0x00}}},
-    {{{    33,      7,    -44}, 0, {     0,      0}, {0xc6, 0xfe, 0x90, 0x00}}},
-    {{{    86,     29,     41}, 0, {     0,      0}, {0x4b, 0x20, 0x60, 0x00}}},
-    {{{    58,    -45,      7}, 0, {     0,      0}, {0x01, 0x85, 0x1c, 0x00}}},
-    {{{    36,      6,     42}, 0, {     0,      0}, {0xe1, 0xf0, 0x79, 0x00}}},
-};
-
-// 0x0400D5C8
-static const Vtx mario_left_hand_closed_shared_dl_vertex_group3[] = {
-    {{{    27,    -58,      6}, 0, {     0,      0}, {0xa3, 0xad, 0x12, 0x00}}},
-    {{{   -14,    -14,     -4}, 0, {     0,      0}, {0x8c, 0xcd, 0x02, 0x00}}},
-    {{{    17,    -38,    -39}, 0, {     0,      0}, {0x1a, 0xb7, 0x9d, 0x00}}},
-    {{{   -10,     26,    -38}, 0, {     0,      0}, {0xf0, 0x41, 0x95, 0x00}}},
-    {{{   -18,     45,      8}, 0, {     0,      0}, {0x84, 0xf3, 0x13, 0x00}}},
-    {{{     5,     -6,     36}, 0, {     0,      0}, {0x99, 0xd2, 0x38, 0x00}}},
-    {{{    34,    -41,      3}, 0, {     0,      0}, {0x42, 0xa3, 0x36, 0x00}}},
-    {{{    27,    -58,      6}, 0, {     0,      0}, {0x73, 0xd5, 0x1d, 0x00}}},
-    {{{    26,    -25,    -32}, 0, {     0,      0}, {0x09, 0xc7, 0x8f, 0x00}}},
-    {{{   -18,     45,      8}, 0, {     0,      0}, {0x2d, 0x71, 0x21, 0x00}}},
-    {{{    -1,     39,      5}, 0, {     0,      0}, {0xea, 0x6e, 0x3a, 0x00}}},
-    {{{     5,     -6,     36}, 0, {     0,      0}, {0x44, 0x1b, 0x67, 0x00}}},
-    {{{    36,      6,     42}, 0, {     0,      0}, {0xe1, 0xf0, 0x79, 0x00}}},
-    {{{    12,     59,     10}, 0, {     0,      0}, {0xaa, 0x58, 0x1b, 0x00}}},
-    {{{    58,    -45,      7}, 0, {     0,      0}, {0x01, 0x85, 0x1c, 0x00}}},
-};
-
-// 0x0400D6B8
-static const Vtx mario_left_hand_closed_shared_dl_vertex_group4[] = {
-    {{{    26,    -25,    -32}, 0, {     0,      0}, {0x09, 0xc7, 0x8f, 0x00}}},
-    {{{    33,      7,    -44}, 0, {     0,      0}, {0xc6, 0xfe, 0x90, 0x00}}},
-    {{{    80,    -31,    -61}, 0, {     0,      0}, {0x0c, 0xb2, 0x9d, 0x00}}},
-    {{{    58,    -45,      7}, 0, {     0,      0}, {0x01, 0x85, 0x1c, 0x00}}},
-    {{{    34,    -41,      3}, 0, {     0,      0}, {0x42, 0xa3, 0x36, 0x00}}},
-    {{{    61,     12,    -60}, 0, {     0,      0}, {0x00, 0x21, 0x86, 0x00}}},
-    {{{    12,     59,     10}, 0, {     0,      0}, {0xaa, 0x58, 0x1b, 0x00}}},
-    {{{    32,     63,    -28}, 0, {     0,      0}, {0xd0, 0x4f, 0xaa, 0x00}}},
-    {{{     4,     24,    -31}, 0, {     0,      0}, {0xd5, 0x3f, 0x9c, 0x00}}},
-    {{{    -1,     39,      5}, 0, {     0,      0}, {0xea, 0x6e, 0x3a, 0x00}}},
-};
-
-// 0x0400D758 - 0x0400D8F0
-const Gfx mario_left_hand_closed_shared_dl[] = {
-    gsSPVertex(mario_left_hand_closed_shared_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  1,  0, 0x0,  2,  1,  7, 0x0),
-    gsSP2Triangles( 7,  1,  6, 0x0,  6,  4,  8, 0x0),
-    gsSP2Triangles( 8,  4,  3, 0x0,  9,  3,  2, 0x0),
-    gsSP2Triangles( 0, 10, 11, 0x0, 12, 10,  0, 0x0),
-    gsSP1Triangle(13, 14, 15, 0x0),
-    gsSPVertex(mario_left_hand_closed_shared_dl_vertex_group2, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 5,  1,  3, 0x0,  6,  7,  8, 0x0),
-    gsSP2Triangles( 9, 10,  3, 0x0,  1,  0,  9, 0x0),
-    gsSP2Triangles( 9,  3,  1, 0x0,  5,  2,  1, 0x0),
-    gsSP2Triangles( 0,  2,  7, 0x0,  7,  2,  8, 0x0),
-    gsSP2Triangles( 8,  2, 11, 0x0, 11,  2,  5, 0x0),
-    gsSP2Triangles( 9,  7,  6, 0x0,  6,  8, 12, 0x0),
-    gsSP2Triangles(12,  8, 13, 0x0, 13,  5,  4, 0x0),
-    gsSPVertex(mario_left_hand_closed_shared_dl_vertex_group3, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
-    gsSP2Triangles( 3,  1,  4, 0x0,  4,  1,  5, 0x0),
-    gsSP2Triangles( 5,  1,  0, 0x0,  6,  7,  2, 0x0),
-    gsSP2Triangles( 8,  2,  3, 0x0,  3,  9, 10, 0x0),
-    gsSP2Triangles(10,  9, 11, 0x0, 11,  7,  6, 0x0),
-    gsSP2Triangles(10, 12, 13, 0x0,  6, 14, 12, 0x0),
-    gsSPVertex(mario_left_hand_closed_shared_dl_vertex_group4, 10, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  0, 0x0),
-    gsSP2Triangles( 1,  5,  2, 0x0,  0,  2,  3, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  8,  9,  6, 0x0),
-    gsSP1Triangle( 7,  1,  8, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400D8F0 - 0x0400D910
-const Gfx mario_left_hand_closed[] = {
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPDisplayList(mario_left_hand_closed_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400D910
-static const Vtx mario_right_arm_shared_dl_vertex_group1[] = {
-    {{{    57,    -14,    -22}, 0, {     0,      0}, {0x33, 0xcf, 0x97, 0x00}}},
-    {{{     5,    -44,      5}, 0, {     0,      0}, {0xd3, 0x8a, 0xf7, 0x00}}},
-    {{{     6,    -15,    -30}, 0, {     0,      0}, {0xd6, 0xe6, 0x8c, 0x00}}},
-    {{{    57,    -38,      6}, 0, {     0,      0}, {0x3e, 0x93, 0x07, 0x00}}},
-    {{{     6,    -19,     44}, 0, {     0,      0}, {0xd5, 0xd4, 0x6e, 0x00}}},
-    {{{    57,    -17,     37}, 0, {     0,      0}, {0x33, 0xe8, 0x71, 0x00}}},
-    {{{     7,     25,     32}, 0, {     0,      0}, {0xd9, 0x5c, 0x4d, 0x00}}},
-    {{{    58,     17,     27}, 0, {     0,      0}, {0x44, 0x59, 0x39, 0x00}}},
-    {{{     7,     27,    -13}, 0, {     0,      0}, {0xda, 0x67, 0xc2, 0x00}}},
-    {{{    58,     19,     -9}, 0, {     0,      0}, {0x3e, 0x4a, 0xaf, 0x00}}},
-    {{{    -9,    -28,      6}, 0, {     0,      0}, {0x96, 0xbf, 0xec, 0x00}}},
-    {{{    -9,    -10,    -15}, 0, {     0,      0}, {0x8f, 0x01, 0xc7, 0x00}}},
-    {{{    -8,     15,     -5}, 0, {     0,      0}, {0x91, 0x39, 0xed, 0x00}}},
-    {{{    -8,     14,     22}, 0, {     0,      0}, {0x99, 0x2e, 0x38, 0x00}}},
-    {{{    -9,    -13,     30}, 0, {     0,      0}, {0x8a, 0xe9, 0x26, 0x00}}},
-    {{{    67,    -12,    -13}, 0, {     0,      0}, {0x68, 0xeb, 0xbc, 0x00}}},
-};
-
-// 0x0400DA10
-static const Vtx mario_right_arm_shared_dl_vertex_group2[] = {
-    {{{    57,    -38,      6}, 0, {     0,      0}, {0x3e, 0x93, 0x07, 0x00}}},
-    {{{    67,    -14,     28}, 0, {     0,      0}, {0x6f, 0xe8, 0x37, 0x00}}},
-    {{{    57,    -17,     37}, 0, {     0,      0}, {0x33, 0xe8, 0x71, 0x00}}},
-    {{{    58,     17,     27}, 0, {     0,      0}, {0x44, 0x59, 0x39, 0x00}}},
-    {{{    67,     11,     -4}, 0, {     0,      0}, {0x78, 0x26, 0xf1, 0x00}}},
-    {{{    58,     19,     -9}, 0, {     0,      0}, {0x3e, 0x4a, 0xaf, 0x00}}},
-    {{{    67,     10,     21}, 0, {     0,      0}, {0x71, 0x2a, 0x25, 0x00}}},
-    {{{    66,    -28,      6}, 0, {     0,      0}, {0x75, 0xd1, 0xfe, 0x00}}},
-    {{{    67,    -12,    -13}, 0, {     0,      0}, {0x68, 0xeb, 0xbc, 0x00}}},
-    {{{    -9,    -13,     30}, 0, {     0,      0}, {0x8a, 0xe9, 0x26, 0x00}}},
-    {{{    -9,    -28,      6}, 0, {     0,      0}, {0x96, 0xbf, 0xec, 0x00}}},
-    {{{     5,    -44,      5}, 0, {     0,      0}, {0xd3, 0x8a, 0xf7, 0x00}}},
-    {{{    -8,     14,     22}, 0, {     0,      0}, {0x99, 0x2e, 0x38, 0x00}}},
-    {{{     6,    -19,     44}, 0, {     0,      0}, {0xd5, 0xd4, 0x6e, 0x00}}},
-    {{{    -8,     15,     -5}, 0, {     0,      0}, {0x91, 0x39, 0xed, 0x00}}},
-    {{{     7,     25,     32}, 0, {     0,      0}, {0xd9, 0x5c, 0x4d, 0x00}}},
-};
-
-// 0x0400DB10
-static const Vtx mario_right_arm_shared_dl_vertex_group3[] = {
-    {{{    -9,    -10,    -15}, 0, {     0,      0}, {0x8f, 0x01, 0xc7, 0x00}}},
-    {{{    -8,     15,     -5}, 0, {     0,      0}, {0x91, 0x39, 0xed, 0x00}}},
-    {{{     7,     27,    -13}, 0, {     0,      0}, {0xda, 0x67, 0xc2, 0x00}}},
-    {{{    -9,    -28,      6}, 0, {     0,      0}, {0x96, 0xbf, 0xec, 0x00}}},
-    {{{     6,    -15,    -30}, 0, {     0,      0}, {0xd6, 0xe6, 0x8c, 0x00}}},
-    {{{    58,     19,     -9}, 0, {     0,      0}, {0x3e, 0x4a, 0xaf, 0x00}}},
-    {{{    57,    -14,    -22}, 0, {     0,      0}, {0x33, 0xcf, 0x97, 0x00}}},
-    {{{    58,     17,     27}, 0, {     0,      0}, {0x44, 0x59, 0x39, 0x00}}},
-    {{{    57,    -17,     37}, 0, {     0,      0}, {0x33, 0xe8, 0x71, 0x00}}},
-    {{{     7,     25,     32}, 0, {     0,      0}, {0xd9, 0x5c, 0x4d, 0x00}}},
-    {{{    57,    -38,      6}, 0, {     0,      0}, {0x3e, 0x93, 0x07, 0x00}}},
-    {{{     6,    -19,     44}, 0, {     0,      0}, {0xd5, 0xd4, 0x6e, 0x00}}},
-    {{{     5,    -44,      5}, 0, {     0,      0}, {0xd3, 0x8a, 0xf7, 0x00}}},
-    {{{    67,    -12,    -13}, 0, {     0,      0}, {0x68, 0xeb, 0xbc, 0x00}}},
-    {{{    67,     11,     -4}, 0, {     0,      0}, {0x78, 0x26, 0xf1, 0x00}}},
-    {{{    66,    -28,      6}, 0, {     0,      0}, {0x75, 0xd1, 0xfe, 0x00}}},
-};
-
-// 0x0400DC10
-static const Vtx mario_right_arm_shared_dl_vertex_group4[] = {
-    {{{    -9,    -10,    -15}, 0, {     0,      0}, {0x8f, 0x01, 0xc7, 0x00}}},
-    {{{    -9,    -28,      6}, 0, {     0,      0}, {0x96, 0xbf, 0xec, 0x00}}},
-    {{{    -9,    -13,     30}, 0, {     0,      0}, {0x8a, 0xe9, 0x26, 0x00}}},
-    {{{    -8,     15,     -5}, 0, {     0,      0}, {0x91, 0x39, 0xed, 0x00}}},
-    {{{    -8,     14,     22}, 0, {     0,      0}, {0x99, 0x2e, 0x38, 0x00}}},
-    {{{    67,     11,     -4}, 0, {     0,      0}, {0x78, 0x26, 0xf1, 0x00}}},
-    {{{    67,    -14,     28}, 0, {     0,      0}, {0x6f, 0xe8, 0x37, 0x00}}},
-    {{{    66,    -28,      6}, 0, {     0,      0}, {0x75, 0xd1, 0xfe, 0x00}}},
-    {{{    67,     10,     21}, 0, {     0,      0}, {0x71, 0x2a, 0x25, 0x00}}},
-};
-
-// 0x0400DCA0 - 0x0400DDE8
-const Gfx mario_right_arm_shared_dl[] = {
-    gsSPVertex(mario_right_arm_shared_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
-    gsSP2Triangles( 5,  6,  4, 0x0,  7,  8,  6, 0x0),
-    gsSP2Triangles( 9,  2,  8, 0x0,  1, 10,  2, 0x0),
-    gsSP2Triangles( 2, 11,  8, 0x0,  8, 12,  6, 0x0),
-    gsSP2Triangles( 6, 13,  4, 0x0,  4, 14,  1, 0x0),
-    gsSP2Triangles( 9, 15,  0, 0x0,  0, 15,  3, 0x0),
-    gsSPVertex(mario_right_arm_shared_dl_vertex_group2, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
-    gsSP2Triangles( 3,  4,  5, 0x0,  3,  6,  4, 0x0),
-    gsSP2Triangles( 1,  6,  3, 0x0,  0,  7,  1, 0x0),
-    gsSP2Triangles( 8,  7,  0, 0x0,  5,  4,  8, 0x0),
-    gsSP2Triangles( 9, 10, 11, 0x0, 12,  9, 13, 0x0),
-    gsSP1Triangle(14, 12, 15, 0x0),
-    gsSPVertex(mario_right_arm_shared_dl_vertex_group3, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  4, 0x0),
-    gsSP2Triangles( 5,  6,  4, 0x0,  7,  5,  2, 0x0),
-    gsSP2Triangles( 8,  7,  9, 0x0, 10,  8, 11, 0x0),
-    gsSP2Triangles( 6, 10, 12, 0x0, 13, 14, 15, 0x0),
-    gsSPVertex(mario_right_arm_shared_dl_vertex_group4, 9, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
-    gsSP2Triangles( 2,  4,  3, 0x0,  5,  6,  7, 0x0),
-    gsSP1Triangle( 5,  8,  6, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400DDE8 - 0x0400DE08
-const Gfx mario_right_arm[] = {
-    gsSPLight(&mario_red_lights_group.l, 1),
-    gsSPLight(&mario_red_lights_group.a, 2),
-    gsSPDisplayList(mario_right_arm_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400DE08
-static const Vtx mario_right_forearm_shared_dl_vertex[] = {
-    {{{    47,    -15,    -19}, 0, {     0,      0}, {0x41, 0xcf, 0x9f, 0x00}}},
-    {{{    -3,    -39,      6}, 0, {     0,      0}, {0xd4, 0x8a, 0xf8, 0x00}}},
-    {{{    -2,    -15,    -23}, 0, {     0,      0}, {0xd7, 0xe5, 0x8c, 0x00}}},
-    {{{    46,    -36,      6}, 0, {     0,      0}, {0x3f, 0x94, 0x0f, 0x00}}},
-    {{{    -2,    -18,     38}, 0, {     0,      0}, {0xd6, 0xd5, 0x6f, 0x00}}},
-    {{{    47,    -17,     34}, 0, {     0,      0}, {0x42, 0xec, 0x6a, 0x00}}},
-    {{{    -1,     18,     28}, 0, {     0,      0}, {0xdb, 0x5d, 0x4d, 0x00}}},
-    {{{    48,     13,     25}, 0, {     0,      0}, {0x45, 0x5d, 0x32, 0x00}}},
-    {{{    -1,     20,     -9}, 0, {     0,      0}, {0xdb, 0x67, 0xc1, 0x00}}},
-    {{{    48,     15,     -7}, 0, {     0,      0}, {0x45, 0x4c, 0xb6, 0x00}}},
-    {{{   -14,    -28,      6}, 0, {     0,      0}, {0x90, 0xc9, 0xef, 0x00}}},
-    {{{   -14,    -12,    -13}, 0, {     0,      0}, {0x91, 0x01, 0xc3, 0x00}}},
-    {{{   -13,     12,     -4}, 0, {     0,      0}, {0x9e, 0x4b, 0xe7, 0x00}}},
-    {{{   -13,     10,     21}, 0, {     0,      0}, {0x8d, 0x22, 0x28, 0x00}}},
-    {{{   -14,    -14,     28}, 0, {     0,      0}, {0x9a, 0xd8, 0x3f, 0x00}}},
-    {{{    59,     -8,      7}, 0, {     0,      0}, {0x7f, 0xfd, 0x00, 0x00}}},
-};
-
-// 0x0400DF08 - 0x0400DFF8
-const Gfx mario_right_forearm_shared_dl[] = {
-    gsSPVertex(mario_right_forearm_shared_dl_vertex, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
-    gsSP2Triangles( 5,  6,  4, 0x0,  7,  8,  6, 0x0),
-    gsSP2Triangles( 9,  2,  8, 0x0,  1, 10,  2, 0x0),
-    gsSP2Triangles( 2, 11,  8, 0x0,  8, 12,  6, 0x0),
-    gsSP2Triangles( 6, 13,  4, 0x0,  4, 14,  1, 0x0),
-    gsSP2Triangles( 9, 15,  0, 0x0,  0, 15,  3, 0x0),
-    gsSP2Triangles( 3, 15,  5, 0x0,  5, 15,  7, 0x0),
-    gsSP2Triangles( 7, 15,  9, 0x0, 14, 10,  1, 0x0),
-    gsSP2Triangles(13, 14,  4, 0x0, 12, 13,  6, 0x0),
-    gsSP2Triangles(11, 12,  8, 0x0, 10, 11,  2, 0x0),
-    gsSP2Triangles( 9,  0,  2, 0x0,  7,  9,  8, 0x0),
-    gsSP2Triangles( 5,  7,  6, 0x0,  3,  5,  4, 0x0),
-    gsSP2Triangles( 0,  3,  1, 0x0, 11, 13, 12, 0x0),
-    gsSP2Triangles(11, 10, 13, 0x0, 10, 14, 13, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400DFF8
-static const Vtx mario_right_hand_closed_dl_vertex_group1[] = {
-    {{{    35,      9,    -37}, 0, {     0,      0}, {0xe5, 0xf5, 0x85, 0x00}}},
-    {{{    55,    -44,     -4}, 0, {     0,      0}, {0x00, 0x86, 0xdf, 0x00}}},
-    {{{    31,    -40,     -1}, 0, {     0,      0}, {0x43, 0xa4, 0xc9, 0x00}}},
-    {{{    10,     60,     -4}, 0, {     0,      0}, {0xac, 0x5a, 0xe5, 0x00}}},
-    {{{    -2,     41,     -1}, 0, {     0,      0}, {0xed, 0x70, 0xc9, 0x00}}},
-    {{{    24,    -57,     -4}, 0, {     0,      0}, {0x73, 0xd4, 0xe6, 0x00}}},
-    {{{     4,     -3,    -33}, 0, {     0,      0}, {0x48, 0x1e, 0x9d, 0x00}}},
-    {{{   -19,     47,     -4}, 0, {     0,      0}, {0x30, 0x72, 0xe5, 0x00}}},
-    {{{   -14,     26,     41}, 0, {     0,      0}, {0xed, 0x3d, 0x6d, 0x00}}},
-    {{{    13,    -38,     41}, 0, {     0,      0}, {0x15, 0xb3, 0x61, 0x00}}},
-    {{{    23,    -26,     35}, 0, {     0,      0}, {0x04, 0xc3, 0x6e, 0x00}}},
-    {{{    24,    -57,     -4}, 0, {     0,      0}, {0xa2, 0xaf, 0xe7, 0x00}}},
-    {{{   -16,    -12,      6}, 0, {     0,      0}, {0x8c, 0xcf, 0xf8, 0x00}}},
-    {{{     4,     -3,    -33}, 0, {     0,      0}, {0x9b, 0xd5, 0xc2, 0x00}}},
-    {{{   -19,     47,     -4}, 0, {     0,      0}, {0x85, 0xf5, 0xe7, 0x00}}},
-    {{{    58,     81,      0}, 0, {     0,      0}, {0x14, 0x7b, 0xe9, 0x00}}},
-};
-
-// 0x0400E0F8
-static const Vtx mario_right_hand_closed_dl_vertex_group2[] = {
-    {{{    35,      9,    -37}, 0, {     0,      0}, {0xe5, 0xf5, 0x85, 0x00}}},
-    {{{   104,    -26,      1}, 0, {     0,      0}, {0x68, 0xc5, 0xd7, 0x00}}},
-    {{{    55,    -44,     -4}, 0, {     0,      0}, {0x00, 0x86, 0xdf, 0x00}}},
-    {{{    75,    -33,     66}, 0, {     0,      0}, {0x08, 0xaf, 0x60, 0x00}}},
-    {{{    96,     -8,     52}, 0, {     0,      0}, {0x60, 0x06, 0x51, 0x00}}},
-    {{{    57,     10,     66}, 0, {     0,      0}, {0xfd, 0x1c, 0x7b, 0x00}}},
-    {{{    58,     81,      0}, 0, {     0,      0}, {0x14, 0x7b, 0xe9, 0x00}}},
-    {{{    97,     39,     24}, 0, {     0,      0}, {0x6b, 0x3a, 0x21, 0x00}}},
-    {{{    86,     30,    -33}, 0, {     0,      0}, {0x4f, 0x22, 0xa4, 0x00}}},
-    {{{    86,     15,     52}, 0, {     0,      0}, {0x40, 0x30, 0x61, 0x00}}},
-    {{{    54,     54,     44}, 0, {     0,      0}, {0x20, 0x51, 0x5c, 0x00}}},
-    {{{    29,     62,     34}, 0, {     0,      0}, {0xce, 0x4c, 0x57, 0x00}}},
-    {{{    29,      6,     49}, 0, {     0,      0}, {0xc2, 0xfa, 0x6e, 0x00}}},
-    {{{    10,     60,     -4}, 0, {     0,      0}, {0xac, 0x5a, 0xe5, 0x00}}},
-};
-
-// 0x0400E1D8
-static const Vtx mario_right_hand_closed_dl_vertex_group3[] = {
-    {{{    31,    -40,     -1}, 0, {     0,      0}, {0x43, 0xa4, 0xc9, 0x00}}},
-    {{{    23,    -26,     35}, 0, {     0,      0}, {0x04, 0xc3, 0x6e, 0x00}}},
-    {{{    13,    -38,     41}, 0, {     0,      0}, {0x15, 0xb3, 0x61, 0x00}}},
-    {{{     1,     24,     35}, 0, {     0,      0}, {0xd2, 0x3c, 0x65, 0x00}}},
-    {{{   -14,     26,     41}, 0, {     0,      0}, {0xed, 0x3d, 0x6d, 0x00}}},
-    {{{    -2,     41,     -1}, 0, {     0,      0}, {0xed, 0x70, 0xc9, 0x00}}},
-    {{{    15,      0,    -23}, 0, {     0,      0}, {0x04, 0x01, 0x82, 0x00}}},
-    {{{     4,     -3,    -33}, 0, {     0,      0}, {0x48, 0x1e, 0x9d, 0x00}}},
-    {{{    35,      9,    -37}, 0, {     0,      0}, {0xe5, 0xf5, 0x85, 0x00}}},
-    {{{    29,      6,     49}, 0, {     0,      0}, {0xc2, 0xfa, 0x6e, 0x00}}},
-    {{{    55,    -44,     -4}, 0, {     0,      0}, {0x00, 0x86, 0xdf, 0x00}}},
-    {{{    75,    -33,     66}, 0, {     0,      0}, {0x08, 0xaf, 0x60, 0x00}}},
-    {{{    57,     10,     66}, 0, {     0,      0}, {0xfd, 0x1c, 0x7b, 0x00}}},
-    {{{    10,     60,     -4}, 0, {     0,      0}, {0xac, 0x5a, 0xe5, 0x00}}},
-    {{{    29,     62,     34}, 0, {     0,      0}, {0xce, 0x4c, 0x57, 0x00}}},
-};
-
-// 0x0400E2C8 - 0x0400E458
-const Gfx mario_right_hand_closed_dl[] = {
-    gsSPVertex(mario_right_hand_closed_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  4, 0x0),
-    gsSP2Triangles( 2,  5,  6, 0x0,  6,  7,  4, 0x0),
-    gsSP2Triangles( 4,  7,  8, 0x0,  8,  9, 10, 0x0),
-    gsSP2Triangles( 9,  5,  2, 0x0, 11, 12, 13, 0x0),
-    gsSP2Triangles(13, 12, 14, 0x0, 14, 12,  8, 0x0),
-    gsSP2Triangles( 8, 12,  9, 0x0,  9, 12, 11, 0x0),
-    gsSP1Triangle( 3, 15,  0, 0x0),
-    gsSPVertex(mario_right_hand_closed_dl_vertex_group2, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
-    gsSP2Triangles( 3,  4,  5, 0x0,  6,  7,  8, 0x0),
-    gsSP2Triangles( 8,  7,  1, 0x0,  1,  7,  4, 0x0),
-    gsSP2Triangles( 4,  7,  9, 0x0, 10,  7,  6, 0x0),
-    gsSP2Triangles( 9, 10,  5, 0x0, 10, 11,  5, 0x0),
-    gsSP2Triangles(11, 12,  5, 0x0,  1,  4,  3, 0x0),
-    gsSP2Triangles(11, 10,  6, 0x0,  6, 13, 11, 0x0),
-    gsSP2Triangles( 7, 10,  9, 0x0,  4,  9,  5, 0x0),
-    gsSP2Triangles( 0,  8,  1, 0x0,  6,  8,  0, 0x0),
-    gsSPVertex(mario_right_hand_closed_dl_vertex_group3, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  4, 0x0),
-    gsSP2Triangles( 4,  3,  5, 0x0,  5,  6,  7, 0x0),
-    gsSP2Triangles( 7,  6,  0, 0x0,  8,  6,  5, 0x0),
-    gsSP2Triangles( 9,  3,  1, 0x0,  0,  6,  8, 0x0),
-    gsSP2Triangles(10, 11,  1, 0x0, 11,  9,  1, 0x0),
-    gsSP2Triangles(11, 12,  9, 0x0,  1,  0, 10, 0x0),
-    gsSP2Triangles(13,  5,  3, 0x0,  3,  9, 14, 0x0),
-    gsSP1Triangle(14, 13,  3, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400E458 - 0x0400E478
-const Gfx mario_right_hand_closed[] = {
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPDisplayList(mario_right_hand_closed_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400E478 - 0x0400E4A8
-const Gfx mario_metal_right_hand_closed[] = {
-    gsSPDisplayList(mario_right_hand_closed_dl),
-    gsDPPipeSync(),
-    gsSPClearGeometryMode(G_TEXTURE_GEN),
-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400E4A8
-static const Vtx mario_left_thigh_dl_vertex_group1[] = {
-    {{{     1,    -44,      8}, 0, {     0,      0}, {0xab, 0xa2, 0x00, 0x00}}},
-    {{{   -15,      0,      7}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
-    {{{     0,    -13,    -32}, 0, {     0,      0}, {0x9f, 0xe1, 0xb5, 0x00}}},
-    {{{    -4,     37,    -17}, 0, {     0,      0}, {0x9e, 0x30, 0xc0, 0x00}}},
-    {{{    -5,     37,     31}, 0, {     0,      0}, {0xa0, 0x3f, 0x34, 0x00}}},
-    {{{    -1,    -12,     47}, 0, {     0,      0}, {0x9e, 0xe3, 0x49, 0x00}}},
-    {{{    95,     -5,     48}, 0, {     0,      0}, {0x4e, 0xe9, 0x60, 0x00}}},
-    {{{   116,     10,      8}, 0, {     0,      0}, {0x7e, 0x09, 0x01, 0x00}}},
-    {{{    91,     45,     32}, 0, {     0,      0}, {0x3c, 0x4e, 0x4f, 0x00}}},
-    {{{    92,     45,    -16}, 0, {     0,      0}, {0x35, 0x5d, 0xbd, 0x00}}},
-    {{{    96,     -5,    -31}, 0, {     0,      0}, {0x50, 0xe8, 0xa1, 0x00}}},
-    {{{    98,    -37,      8}, 0, {     0,      0}, {0x46, 0x97, 0x01, 0x00}}},
-    {{{    19,    -15,    -42}, 0, {     0,      0}, {0xec, 0xd9, 0x8a, 0x00}}},
-    {{{    14,     48,    -23}, 0, {     0,      0}, {0xd7, 0x67, 0xc5, 0x00}}},
-    {{{    13,     48,     38}, 0, {     0,      0}, {0xe7, 0x6d, 0x3a, 0x00}}},
-    {{{    18,    -15,     58}, 0, {     0,      0}, {0xea, 0xda, 0x76, 0x00}}},
-};
-
-// 0x0400E5A8
-static const Vtx mario_left_thigh_dl_vertex_group2[] = {
-    {{{    18,    -15,     58}, 0, {     0,      0}, {0xea, 0xda, 0x76, 0x00}}},
-    {{{     1,    -44,      8}, 0, {     0,      0}, {0xab, 0xa2, 0x00, 0x00}}},
-    {{{    21,    -54,      8}, 0, {     0,      0}, {0xf0, 0x83, 0x00, 0x00}}},
-    {{{    19,    -15,    -42}, 0, {     0,      0}, {0xec, 0xd9, 0x8a, 0x00}}},
-    {{{    -1,    -12,     47}, 0, {     0,      0}, {0x9e, 0xe3, 0x49, 0x00}}},
-    {{{   -15,      0,      7}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
-    {{{    98,    -37,      8}, 0, {     0,      0}, {0x46, 0x97, 0x01, 0x00}}},
-    {{{    13,     48,     38}, 0, {     0,      0}, {0xe7, 0x6d, 0x3a, 0x00}}},
-    {{{    91,     45,     32}, 0, {     0,      0}, {0x3c, 0x4e, 0x4f, 0x00}}},
-    {{{    14,     48,    -23}, 0, {     0,      0}, {0xd7, 0x67, 0xc5, 0x00}}},
-    {{{    92,     45,    -16}, 0, {     0,      0}, {0x35, 0x5d, 0xbd, 0x00}}},
-    {{{    96,     -5,    -31}, 0, {     0,      0}, {0x50, 0xe8, 0xa1, 0x00}}},
-    {{{    95,     -5,     48}, 0, {     0,      0}, {0x4e, 0xe9, 0x60, 0x00}}},
-    {{{     0,    -13,    -32}, 0, {     0,      0}, {0x9f, 0xe1, 0xb5, 0x00}}},
-    {{{    -5,     37,     31}, 0, {     0,      0}, {0xa0, 0x3f, 0x34, 0x00}}},
-    {{{    -4,     37,    -17}, 0, {     0,      0}, {0x9e, 0x30, 0xc0, 0x00}}},
-};
-
-// 0x0400E6A8 - 0x0400E7B0
-const Gfx mario_left_thigh_dl[] = {
-    gsSPVertex(mario_left_thigh_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
-    gsSP2Triangles( 3,  1,  4, 0x0,  4,  1,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  8,  7,  9, 0x0),
-    gsSP2Triangles( 9,  7, 10, 0x0, 10,  7, 11, 0x0),
-    gsSP2Triangles(11,  7,  6, 0x0, 12,  3, 13, 0x0),
-    gsSP2Triangles(13,  4, 14, 0x0, 14,  4, 15, 0x0),
-    gsSPVertex(mario_left_thigh_dl_vertex_group2, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
-    gsSP2Triangles( 4,  5,  1, 0x0,  0,  2,  6, 0x0),
-    gsSP2Triangles( 7,  0,  8, 0x0,  9,  7, 10, 0x0),
-    gsSP2Triangles( 3,  9, 10, 0x0,  2,  3,  6, 0x0),
-    gsSP2Triangles( 3, 11,  6, 0x0, 10, 11,  3, 0x0),
-    gsSP2Triangles( 7,  8, 10, 0x0,  0, 12,  8, 0x0),
-    gsSP2Triangles( 6, 12,  0, 0x0,  1, 13,  3, 0x0),
-    gsSP2Triangles( 0,  4,  1, 0x0, 14,  4,  0, 0x0),
-    gsSP2Triangles( 9, 15, 14, 0x0,  3, 13, 15, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400E7B0 - 0x0400E7E0
-const Gfx mario_left_thigh[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPLight(&mario_blue_lights_group.l, 1),
-    gsSPLight(&mario_blue_lights_group.a, 2),
-    gsSPDisplayList(mario_left_thigh_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400E7E0 - 0x0400E858
-const Gfx mario_metal_left_thigh[] = {
-    gsDPPipeSync(),
-    gsSPSetGeometryMode(G_TEXTURE_GEN),
-    gsDPSetCombineMode(G_CC_DECALFADE, G_CC_DECALFADE),
-    gsDPLoadTextureBlock(mario_texture_metal, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_ON),
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPDisplayList(mario_left_thigh_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400E858
-static const Vtx mario_left_leg_shared_dl_vertex[] = {
-    {{{     4,    -37,      9}, 0, {     0,      0}, {0xc1, 0x93, 0x00, 0x00}}},
-    {{{    64,    -46,      9}, 0, {     0,      0}, {0x4b, 0x9a, 0x01, 0x00}}},
-    {{{    65,    -11,     54}, 0, {     0,      0}, {0x2d, 0xdb, 0x70, 0x00}}},
-    {{{     8,     44,     33}, 0, {     0,      0}, {0xcc, 0x5e, 0x43, 0x00}}},
-    {{{    68,     45,     37}, 0, {     0,      0}, {0x52, 0x4b, 0x3c, 0x00}}},
-    {{{    69,     45,    -18}, 0, {     0,      0}, {0x42, 0x61, 0xd1, 0x00}}},
-    {{{     9,     44,    -16}, 0, {     0,      0}, {0xc4, 0x4d, 0xaf, 0x00}}},
-    {{{    66,    -11,    -36}, 0, {     0,      0}, {0x2e, 0xda, 0x91, 0x00}}},
-    {{{     6,     -6,    -31}, 0, {     0,      0}, {0xb4, 0xe5, 0x9f, 0x00}}},
-    {{{     6,     -6,     49}, 0, {     0,      0}, {0xb3, 0xe7, 0x60, 0x00}}},
-    {{{   -14,      8,      8}, 0, {     0,      0}, {0x82, 0x06, 0xff, 0x00}}},
-    {{{    81,      3,      9}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
-};
-
-// 0x0400E918 - 0x0400E9C8
-const Gfx mario_left_leg_shared_dl[] = {
-    gsSPVertex(mario_left_leg_shared_dl_vertex, 12, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  2,  4, 0x0),
-    gsSP2Triangles( 3,  4,  5, 0x0,  6,  5,  7, 0x0),
-    gsSP2Triangles( 0,  7,  1, 0x0,  0,  8,  7, 0x0),
-    gsSP2Triangles( 7,  8,  6, 0x0,  5,  6,  3, 0x0),
-    gsSP2Triangles( 3,  9,  2, 0x0,  2,  9,  0, 0x0),
-    gsSP2Triangles( 3, 10,  9, 0x0,  5, 11,  7, 0x0),
-    gsSP2Triangles( 7, 11,  1, 0x0,  1, 11,  2, 0x0),
-    gsSP2Triangles( 2, 11,  4, 0x0,  4, 11,  5, 0x0),
-    gsSP2Triangles( 9, 10,  0, 0x0,  0, 10,  8, 0x0),
-    gsSP2Triangles( 8, 10,  6, 0x0,  6, 10,  3, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400E9C8
-static const Vtx mario_left_foot_shared_dl_vertex_group1[] = {
-    {{{   110,      9,     35}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{   110,      8,    -20}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{    76,     20,    -41}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{    78,     21,     61}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{   -12,     53,    -32}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{   -11,     54,     53}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{   -39,     64,     -8}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{   -41,     65,     26}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{    43,    -18,     54}, 0, {     0,      0}, {0x07, 0xb3, 0x64, 0x00}}},
-    {{{    78,     21,     61}, 0, {     0,      0}, {0x15, 0xdb, 0x77, 0x00}}},
-    {{{   -11,     54,     53}, 0, {     0,      0}, {0xd9, 0x00, 0x78, 0x00}}},
-    {{{    44,    -12,    -33}, 0, {     0,      0}, {0x01, 0xb7, 0x99, 0x00}}},
-    {{{   -35,     11,    -21}, 0, {     0,      0}, {0xb5, 0xd2, 0xa5, 0x00}}},
-    {{{   -12,     53,    -32}, 0, {     0,      0}, {0xd7, 0xfd, 0x89, 0x00}}},
-    {{{   -34,     12,     44}, 0, {     0,      0}, {0xb2, 0xd2, 0x58, 0x00}}},
-    {{{    76,     20,    -41}, 0, {     0,      0}, {0x0c, 0xd8, 0x89, 0x00}}},
-};
-
-// 0x0400EAC8
-static const Vtx mario_left_foot_shared_dl_vertex_group2[] = {
-    {{{    44,    -12,    -33}, 0, {     0,      0}, {0x01, 0xb7, 0x99, 0x00}}},
-    {{{    76,     20,    -41}, 0, {     0,      0}, {0x0c, 0xd8, 0x89, 0x00}}},
-    {{{   110,      8,    -20}, 0, {     0,      0}, {0x44, 0xad, 0xbe, 0x00}}},
-    {{{    80,    -31,      7}, 0, {     0,      0}, {0x34, 0x8d, 0xfb, 0x00}}},
-    {{{   110,      9,     35}, 0, {     0,      0}, {0x4c, 0xaf, 0x3c, 0x00}}},
-    {{{    78,     21,     61}, 0, {     0,      0}, {0x15, 0xdb, 0x77, 0x00}}},
-    {{{    43,    -18,     54}, 0, {     0,      0}, {0x07, 0xb3, 0x64, 0x00}}},
-    {{{   -34,     12,     44}, 0, {     0,      0}, {0xb2, 0xd2, 0x58, 0x00}}},
-    {{{   -11,     54,     53}, 0, {     0,      0}, {0xd9, 0x00, 0x78, 0x00}}},
-    {{{   -41,     65,     26}, 0, {     0,      0}, {0x90, 0x17, 0x35, 0x00}}},
-    {{{   -39,     64,     -8}, 0, {     0,      0}, {0x93, 0x16, 0xc4, 0x00}}},
-    {{{   -35,     11,    -21}, 0, {     0,      0}, {0xb5, 0xd2, 0xa5, 0x00}}},
-    {{{   -54,     15,      8}, 0, {     0,      0}, {0x88, 0xd8, 0xfd, 0x00}}},
-    {{{   -12,     53,    -32}, 0, {     0,      0}, {0xd7, 0xfd, 0x89, 0x00}}},
-    {{{    27,    -35,     11}, 0, {     0,      0}, {0xdb, 0x87, 0xfc, 0x00}}},
-};
-
-// 0x0400EBB8 - 0x0400ECA0
-const Gfx mario_left_foot_shared_dl[] = {
-    gsSPVertex(mario_left_foot_shared_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
-    gsSP2Triangles( 3,  2,  4, 0x0,  5,  3,  4, 0x0),
-    gsSP2Triangles( 5,  4,  6, 0x0,  5,  6,  7, 0x0),
-    gsSP2Triangles( 8,  9, 10, 0x0, 11, 12, 13, 0x0),
-    gsSP2Triangles(14,  8, 10, 0x0, 11, 13, 15, 0x0),
-    gsSPVertex(mario_left_foot_shared_dl_vertex_group2, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  2,  4, 0x0),
-    gsSP2Triangles( 2,  3,  0, 0x0,  4,  5,  6, 0x0),
-    gsSP2Triangles( 6,  3,  4, 0x0,  7,  8,  9, 0x0),
-    gsSP2Triangles(10, 11, 12, 0x0, 10, 13, 11, 0x0),
-    gsSP2Triangles(12,  9, 10, 0x0,  9, 12,  7, 0x0),
-    gsSP2Triangles(14,  0,  3, 0x0, 11,  0, 14, 0x0),
-    gsSP2Triangles( 3,  6, 14, 0x0, 14,  6,  7, 0x0),
-    gsSP2Triangles(14,  7, 12, 0x0, 12, 11, 14, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400ECA0 - 0x0400ECC0
-const Gfx mario_left_foot[] = {
-    gsSPLight(&mario_brown1_lights_group.l, 1),
-    gsSPLight(&mario_brown1_lights_group.a, 2),
-    gsSPDisplayList(mario_left_foot_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400ECC0
-static const Vtx mario_right_thigh_shared_dl_vertex_group1[] = {
-    {{{    98,    -35,    -10}, 0, {     0,      0}, {0x47, 0x97, 0xfc, 0x00}}},
-    {{{    19,    -16,     41}, 0, {     0,      0}, {0xee, 0xd6, 0x76, 0x00}}},
-    {{{    22,    -54,     -9}, 0, {     0,      0}, {0xf2, 0x82, 0xfd, 0x00}}},
-    {{{    91,     46,     16}, 0, {     0,      0}, {0x35, 0x5c, 0x44, 0x00}}},
-    {{{    13,     48,     24}, 0, {     0,      0}, {0xd6, 0x66, 0x3e, 0x00}}},
-    {{{    12,     49,    -37}, 0, {     0,      0}, {0xe5, 0x6e, 0xc9, 0x00}}},
-    {{{    90,     47,    -32}, 0, {     0,      0}, {0x3b, 0x50, 0xb2, 0x00}}},
-    {{{    18,    -13,    -58}, 0, {     0,      0}, {0xea, 0xdc, 0x89, 0x00}}},
-    {{{     1,    -44,     -9}, 0, {     0,      0}, {0xad, 0xa1, 0xff, 0x00}}},
-    {{{   -15,      0,     -7}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
-    {{{    -1,    -11,    -47}, 0, {     0,      0}, {0x9d, 0xe3, 0xb7, 0x00}}},
-    {{{    -6,     38,    -31}, 0, {     0,      0}, {0x9e, 0x3f, 0xcf, 0x00}}},
-    {{{    -5,     36,     18}, 0, {     0,      0}, {0x9e, 0x2d, 0x42, 0x00}}},
-    {{{    95,     -3,    -49}, 0, {     0,      0}, {0x4d, 0xec, 0x9e, 0x00}}},
-    {{{   116,     11,     -9}, 0, {     0,      0}, {0x7e, 0x0b, 0xfe, 0x00}}},
-    {{{    96,     -5,     30}, 0, {     0,      0}, {0x51, 0xe7, 0x5d, 0x00}}},
-};
-
-// 0x0400EDC0
-static const Vtx mario_right_thigh_shared_dl_vertex_group2[] = {
-    {{{    -5,     36,     18}, 0, {     0,      0}, {0x9e, 0x2d, 0x42, 0x00}}},
-    {{{   -15,      0,     -7}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
-    {{{     0,    -14,     31}, 0, {     0,      0}, {0xa0, 0xdf, 0x4b, 0x00}}},
-    {{{     1,    -44,     -9}, 0, {     0,      0}, {0xad, 0xa1, 0xff, 0x00}}},
-    {{{    19,    -16,     41}, 0, {     0,      0}, {0xee, 0xd6, 0x76, 0x00}}},
-    {{{    -6,     38,    -31}, 0, {     0,      0}, {0x9e, 0x3f, 0xcf, 0x00}}},
-    {{{    13,     48,     24}, 0, {     0,      0}, {0xd6, 0x66, 0x3e, 0x00}}},
-    {{{    18,    -13,    -58}, 0, {     0,      0}, {0xea, 0xdc, 0x89, 0x00}}},
-    {{{    -1,    -11,    -47}, 0, {     0,      0}, {0x9d, 0xe3, 0xb7, 0x00}}},
-    {{{    95,     -3,    -49}, 0, {     0,      0}, {0x4d, 0xec, 0x9e, 0x00}}},
-    {{{    98,    -35,    -10}, 0, {     0,      0}, {0x47, 0x97, 0xfc, 0x00}}},
-    {{{    90,     47,    -32}, 0, {     0,      0}, {0x3b, 0x50, 0xb2, 0x00}}},
-    {{{    91,     46,     16}, 0, {     0,      0}, {0x35, 0x5c, 0x44, 0x00}}},
-    {{{    12,     49,    -37}, 0, {     0,      0}, {0xe5, 0x6e, 0xc9, 0x00}}},
-    {{{    96,     -5,     30}, 0, {     0,      0}, {0x51, 0xe7, 0x5d, 0x00}}},
-};
-
-// 0x0400EEB0 - 0x0400EFB8
-const Gfx mario_right_thigh_shared_dl[] = {
-    gsSPVertex(mario_right_thigh_shared_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
-    gsSP2Triangles( 3,  5,  4, 0x0,  6,  7,  5, 0x0),
-    gsSP2Triangles( 0,  2,  7, 0x0,  8,  9, 10, 0x0),
-    gsSP2Triangles( 1,  8,  2, 0x0,  2,  8,  7, 0x0),
-    gsSP2Triangles( 7, 11,  5, 0x0,  5, 11,  4, 0x0),
-    gsSP2Triangles( 4, 12,  1, 0x0, 13, 14,  0, 0x0),
-    gsSP2Triangles( 0, 14, 15, 0x0, 15, 14,  3, 0x0),
-    gsSP2Triangles( 3, 14,  6, 0x0,  6, 14, 13, 0x0),
-    gsSP2Triangles(10,  9, 11, 0x0, 11,  9, 12, 0x0),
-    gsSPVertex(mario_right_thigh_shared_dl_vertex_group2, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
-    gsSP2Triangles( 0,  2,  4, 0x0,  5,  0,  6, 0x0),
-    gsSP2Triangles( 7,  8,  5, 0x0,  3,  8,  7, 0x0),
-    gsSP2Triangles( 4,  2,  3, 0x0,  7,  9, 10, 0x0),
-    gsSP2Triangles(11,  9,  7, 0x0, 12, 11, 13, 0x0),
-    gsSP2Triangles( 4, 14, 12, 0x0, 10, 14,  4, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400EFB8 - 0x0400EFD8
-const Gfx mario_right_thigh[] = {
-    gsSPLight(&mario_blue_lights_group.l, 1),
-    gsSPLight(&mario_blue_lights_group.a, 2),
-    gsSPDisplayList(mario_right_thigh_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400EFD8
-static const Vtx mario_right_leg_shared_dl_vertex_group1[] = {
-    {{{    63,    -45,    -12}, 0, {     0,      0}, {0xf2, 0x9b, 0x4a, 0x00}}},
-    {{{    66,    -11,     34}, 0, {     0,      0}, {0xf2, 0x9b, 0x4a, 0x00}}},
-    {{{     4,    -36,    -10}, 0, {     0,      0}, {0xc0, 0x93, 0xfe, 0x00}}},
-    {{{    66,    -11,     34}, 0, {     0,      0}, {0xfb, 0x22, 0x7a, 0x00}}},
-    {{{    69,     45,     18}, 0, {     0,      0}, {0xfc, 0x22, 0x7a, 0x00}}},
-    {{{     9,     44,     16}, 0, {     0,      0}, {0xc6, 0x4b, 0x53, 0x00}}},
-    {{{    69,     45,     18}, 0, {     0,      0}, {0xff, 0x7f, 0x03, 0x00}}},
-    {{{    69,     46,    -37}, 0, {     0,      0}, {0xff, 0x7f, 0x03, 0x00}}},
-    {{{     9,     46,    -33}, 0, {     0,      0}, {0xcd, 0x60, 0xc0, 0x00}}},
-    {{{    69,     46,    -37}, 0, {     0,      0}, {0xf7, 0x27, 0x88, 0x00}}},
-    {{{    65,     -9,    -56}, 0, {     0,      0}, {0xf8, 0x28, 0x88, 0x00}}},
-    {{{    65,     -9,    -56}, 0, {     0,      0}, {0xef, 0xa0, 0xb0, 0x00}}},
-    {{{    63,    -45,    -12}, 0, {     0,      0}, {0xef, 0xa0, 0xb0, 0x00}}},
-    {{{     6,     -6,     30}, 0, {     0,      0}, {0xb4, 0xe4, 0x61, 0x00}}},
-    {{{   -13,     10,     -9}, 0, {     0,      0}, {0x82, 0x08, 0x02, 0x00}}},
-    {{{     5,     -3,    -50}, 0, {     0,      0}, {0xb2, 0xea, 0xa0, 0x00}}},
-};
-
-// 0x0400F0D8
-static const Vtx mario_right_leg_shared_dl_vertex_group2[] = {
-    {{{    65,     -9,    -56}, 0, {     0,      0}, {0x75, 0xee, 0xd5, 0x00}}},
-    {{{    83,      4,    -10}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
-    {{{    63,    -45,    -12}, 0, {     0,      0}, {0x75, 0xd1, 0xfd, 0x00}}},
-    {{{    66,    -11,     34}, 0, {     0,      0}, {0x77, 0xec, 0x26, 0x00}}},
-    {{{    69,     45,     18}, 0, {     0,      0}, {0x7a, 0x18, 0x17, 0x00}}},
-    {{{    69,     46,    -37}, 0, {     0,      0}, {0x79, 0x19, 0xe6, 0x00}}},
-    {{{     4,    -36,    -10}, 0, {     0,      0}, {0xc0, 0x93, 0xfe, 0x00}}},
-    {{{     5,     -3,    -50}, 0, {     0,      0}, {0xb2, 0xea, 0xa0, 0x00}}},
-    {{{    65,     -9,    -56}, 0, {     0,      0}, {0xef, 0xa0, 0xb0, 0x00}}},
-    {{{    65,     -9,    -56}, 0, {     0,      0}, {0xf8, 0x28, 0x88, 0x00}}},
-    {{{     9,     46,    -33}, 0, {     0,      0}, {0xcd, 0x60, 0xc0, 0x00}}},
-    {{{     9,     44,     16}, 0, {     0,      0}, {0xc6, 0x4b, 0x53, 0x00}}},
-    {{{    69,     45,     18}, 0, {     0,      0}, {0xff, 0x7f, 0x03, 0x00}}},
-    {{{     6,     -6,     30}, 0, {     0,      0}, {0xb4, 0xe4, 0x61, 0x00}}},
-    {{{    66,    -11,     34}, 0, {     0,      0}, {0xfb, 0x22, 0x7a, 0x00}}},
-    {{{    66,    -11,     34}, 0, {     0,      0}, {0xf2, 0x9b, 0x4a, 0x00}}},
-};
-
-// 0x0400F1D8 - 0x0400F290
-const Gfx mario_right_leg_shared_dl[] = {
-    gsSPVertex(mario_right_leg_shared_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10,  8, 0x0),
-    gsSP2Triangles(11, 12,  2, 0x0, 13, 14,  2, 0x0),
-    gsSP2Triangles( 2, 14, 15, 0x0, 15, 14,  8, 0x0),
-    gsSP2Triangles( 8, 14,  5, 0x0,  5, 14, 13, 0x0),
-    gsSPVertex(mario_right_leg_shared_dl_vertex_group2, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
-    gsSP2Triangles( 3,  1,  4, 0x0,  4,  1,  5, 0x0),
-    gsSP2Triangles( 5,  1,  0, 0x0,  6,  7,  8, 0x0),
-    gsSP2Triangles( 9,  7, 10, 0x0, 10, 11, 12, 0x0),
-    gsSP2Triangles(11, 13, 14, 0x0, 15, 13,  6, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400F290
-static const Vtx mario_right_foot_dl_vertex_group1[] = {
-    {{{    27,    -35,    -11}, 0, {     0,      0}, {0xdc, 0x87, 0x06, 0x00}}},
-    {{{   -36,     11,     19}, 0, {     0,      0}, {0xb5, 0xd3, 0x5b, 0x00}}},
-    {{{   -54,     14,    -10}, 0, {     0,      0}, {0x89, 0xd6, 0x03, 0x00}}},
-    {{{   -34,     11,    -46}, 0, {     0,      0}, {0xb4, 0xd0, 0xa8, 0x00}}},
-    {{{    43,    -18,    -55}, 0, {     0,      0}, {0x0a, 0xb2, 0x9d, 0x00}}},
-    {{{    80,    -29,     -7}, 0, {     0,      0}, {0x36, 0x8e, 0x08, 0x00}}},
-    {{{    44,    -11,     32}, 0, {     0,      0}, {0x01, 0xb8, 0x68, 0x00}}},
-    {{{   -42,     64,    -29}, 0, {     0,      0}, {0x90, 0x14, 0xc9, 0x00}}},
-    {{{   -40,     63,      5}, 0, {     0,      0}, {0x92, 0x15, 0x3b, 0x00}}},
-    {{{   -14,     54,     29}, 0, {     0,      0}, {0xd5, 0xfe, 0x77, 0x00}}},
-    {{{   -11,     53,    -56}, 0, {     0,      0}, {0xda, 0xfe, 0x87, 0x00}}},
-    {{{   110,     11,    -36}, 0, {     0,      0}, {0x4e, 0xb0, 0xc6, 0x00}}},
-    {{{    78,     22,    -61}, 0, {     0,      0}, {0x17, 0xd9, 0x8a, 0x00}}},
-    {{{   109,     11,     20}, 0, {     0,      0}, {0x45, 0xaf, 0x44, 0x00}}},
-    {{{    75,     23,     40}, 0, {     0,      0}, {0x0b, 0xda, 0x78, 0x00}}},
-};
-
-// 0x0400F380
-static const Vtx mario_right_foot_dl_vertex_group2[] = {
-    {{{   -42,     64,    -29}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-    {{{   -40,     63,      5}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-    {{{   -11,     53,    -56}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-    {{{   -14,     54,     29}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-    {{{    78,     22,    -61}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-    {{{    75,     23,     40}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-    {{{   110,     11,    -36}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-    {{{   109,     11,     20}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-};
-
-// 0x0400F400 - 0x0400F4E8
-const Gfx mario_right_foot_dl[] = {
-    gsSPVertex(mario_right_foot_dl_vertex_group1, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
-    gsSP2Triangles( 3,  4,  0, 0x0,  0,  4,  5, 0x0),
-    gsSP2Triangles( 0,  6,  1, 0x0,  5,  6,  0, 0x0),
-    gsSP2Triangles( 3,  2,  7, 0x0,  8,  7,  2, 0x0),
-    gsSP2Triangles( 1,  9,  8, 0x0,  2,  1,  8, 0x0),
-    gsSP2Triangles( 7, 10,  3, 0x0, 11,  5,  4, 0x0),
-    gsSP2Triangles( 4, 12, 11, 0x0,  6,  5, 13, 0x0),
-    gsSP2Triangles(11, 13,  5, 0x0, 13, 14,  6, 0x0),
-    gsSP2Triangles(14,  9,  6, 0x0, 10,  4,  3, 0x0),
-    gsSP2Triangles( 9,  1,  6, 0x0, 10, 12,  4, 0x0),
-    gsSPVertex(mario_right_foot_dl_vertex_group2, 8, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  2, 0x0),
-    gsSP2Triangles( 3,  4,  2, 0x0,  3,  5,  4, 0x0),
-    gsSP2Triangles( 5,  6,  4, 0x0,  5,  7,  6, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400F4E8 - 0x0400F528
-const Gfx mario_right_foot[] = {
-    gsSPLight(&mario_brown1_lights_group.l, 1),
-    gsSPLight(&mario_brown1_lights_group.a, 2),
-    gsSPDisplayList(mario_right_foot_dl),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
-    gsDPSetEnvColor(255, 255, 255, 255),
-    gsDPSetAlphaCompare(G_AC_NONE),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400F528 - 0x0400F568
-const Gfx mario_metal_right_foot[] = {
-    gsSPDisplayList(mario_right_foot_dl),
-    gsDPPipeSync(),
-    gsSPClearGeometryMode(G_TEXTURE_GEN),
-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPSetEnvColor(255, 255, 255, 255),
-    gsDPSetAlphaCompare(G_AC_NONE),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400F568
-static const Vtx mario_yellow_button_dl_vertex[] = {
-    {{{     9,     89,     41}, 0, {   180,    962}, {0x14, 0x78, 0x23, 0xff}}},
-    {{{     3,     77,     62}, 0, {   682,    966}, {0x04, 0x6a, 0x44, 0xff}}},
-    {{{    47,     75,     35}, 0, {    34,    106}, {0x39, 0x6a, 0x26, 0xff}}},
-    {{{    28,     85,     30}, 0, {   -60,    572}, {0x2c, 0x76, 0x08, 0xff}}},
-    {{{    17,     66,     76}, 0, {   966,    590}, {0x19, 0x58, 0x57, 0xff}}},
-    {{{    32,     62,     74}, 0, {   902,    252}, {0x29, 0x53, 0x56, 0xff}}},
-    {{{    48,     64,     59}, 0, {   548,      0}, {0x4d, 0x51, 0x3a, 0xff}}},
-    {{{     9,     89,    -40}, 0, {   776,    920}, {0x10, 0x7b, 0xe7, 0xff}}},
-    {{{    28,     85,    -29}, 0, {   990,    512}, {0x2d, 0x75, 0xf2, 0xff}}},
-    {{{    47,     75,    -34}, 0, {   850,     72}, {0x3e, 0x6a, 0xe2, 0xff}}},
-    {{{     3,     77,    -61}, 0, {   264,    972}, {0x03, 0x6a, 0xbb, 0xff}}},
-    {{{    48,     64,    -58}, 0, {   312,      0}, {0x4d, 0x50, 0xc5, 0xff}}},
-    {{{    32,     62,    -73}, 0, {   -24,    310}, {0x29, 0x52, 0xa9, 0xff}}},
-    {{{    17,     66,    -75}, 0, {   -58,    642}, {0x17, 0x58, 0xa8, 0xff}}},
-};
-
-// 0x0400F648
-static const Vtx mario_tshirt_shared_dl_vertex_group1[] = {
-    {{{    47,     75,    -34}, 0, {     0,      0}, {0x3e, 0x6a, 0xe2, 0xff}}},
-    {{{    47,     75,     35}, 0, {     0,      0}, {0x39, 0x6a, 0x26, 0xff}}},
-    {{{    82,     37,     27}, 0, {     0,      0}, {0x66, 0x48, 0x14, 0xff}}},
-    {{{    82,     37,    -26}, 0, {     0,      0}, {0x69, 0x43, 0xec, 0xff}}},
-    {{{   100,      1,     24}, 0, {     0,      0}, {0x7a, 0x17, 0x16, 0xff}}},
-    {{{   100,      1,    -23}, 0, {     0,      0}, {0x7c, 0x09, 0xea, 0xff}}},
-    {{{     6,    -10,    -92}, 0, {     0,      0}, {0x00, 0xeb, 0x83, 0xff}}},
-    {{{    47,      3,    -88}, 0, {     0,      0}, {0x30, 0x09, 0x8b, 0xff}}},
-    {{{    46,    -34,    -83}, 0, {     0,      0}, {0x24, 0xc8, 0x95, 0xff}}},
-    {{{    12,     33,    -90}, 0, {     0,      0}, {0x11, 0x20, 0x87, 0xff}}},
-    {{{    20,    -61,    -67}, 0, {     0,      0}, {0x0a, 0x9a, 0xb7, 0xff}}},
-    {{{    66,    -52,    -50}, 0, {     0,      0}, {0x3b, 0x9a, 0xd3, 0xff}}},
-    {{{    84,    -29,    -62}, 0, {     0,      0}, {0x5f, 0xde, 0xb4, 0xff}}},
-    {{{    20,    -61,     68}, 0, {     0,      0}, {0x0a, 0x99, 0x49, 0xff}}},
-    {{{    66,    -52,     51}, 0, {     0,      0}, {0x3b, 0x9a, 0x2d, 0xff}}},
-    {{{    46,    -34,     84}, 0, {     0,      0}, {0x24, 0xc8, 0x6b, 0xff}}},
-};
-
-// 0x0400F748
-static const Vtx mario_tshirt_shared_dl_vertex_group2[] = {
-    {{{    20,    -61,     68}, 0, {     0,      0}, {0x0a, 0x99, 0x49, 0xff}}},
-    {{{    46,    -34,     84}, 0, {     0,      0}, {0x24, 0xc8, 0x6b, 0xff}}},
-    {{{     6,    -11,     93}, 0, {     0,      0}, {0x00, 0xea, 0x7c, 0xff}}},
-    {{{    47,      3,     89}, 0, {     0,      0}, {0x30, 0x08, 0x75, 0xff}}},
-    {{{    84,    -29,     63}, 0, {     0,      0}, {0x5f, 0xde, 0x4c, 0xff}}},
-    {{{    66,    -52,     51}, 0, {     0,      0}, {0x3b, 0x9a, 0x2d, 0xff}}},
-    {{{    13,     33,     91}, 0, {     0,      0}, {0x12, 0x20, 0x79, 0xff}}},
-    {{{   100,      1,    -23}, 0, {     0,      0}, {0x7c, 0x09, 0xea, 0xff}}},
-    {{{   100,      1,     24}, 0, {     0,      0}, {0x7a, 0x17, 0x16, 0xff}}},
-    {{{    93,    -36,     26}, 0, {     0,      0}, {0x6b, 0xbf, 0x0d, 0xff}}},
-    {{{    93,    -36,    -25}, 0, {     0,      0}, {0x66, 0xb7, 0xf0, 0xff}}},
-    {{{    54,    -63,      0}, 0, {     0,      0}, {0x30, 0x8b, 0x00, 0xff}}},
-    {{{    80,     14,     62}, 0, {     0,      0}, {0x60, 0x28, 0x47, 0xff}}},
-    {{{    44,     51,     75}, 0, {     0,      0}, {0x3c, 0x34, 0x62, 0xff}}},
-};
-
-// 0x0400F828
-static const Vtx mario_tshirt_shared_dl_vertex_group3[] = {
-    {{{    80,     14,    -61}, 0, {     0,      0}, {0x60, 0x28, 0xb8, 0xff}}},
-    {{{    47,      3,    -88}, 0, {     0,      0}, {0x30, 0x09, 0x8b, 0xff}}},
-    {{{    43,     51,    -74}, 0, {     0,      0}, {0x3c, 0x32, 0x9d, 0xff}}},
-    {{{    84,    -29,    -62}, 0, {     0,      0}, {0x5f, 0xde, 0xb4, 0xff}}},
-    {{{    12,     33,    -90}, 0, {     0,      0}, {0x11, 0x20, 0x87, 0xff}}},
-};
-
-// 0x0400F878
-static const Vtx mario_pants_overalls_shared_dl_vertex_group1[] = {
-    {{{    47,     75,    -34}, 0, {     0,      0}, {0x3e, 0x6a, 0xe2, 0xff}}},
-    {{{    28,     85,     30}, 0, {     0,      0}, {0x2c, 0x76, 0x08, 0xff}}},
-    {{{    47,     75,     35}, 0, {     0,      0}, {0x39, 0x6a, 0x26, 0xff}}},
-    {{{    28,     85,    -29}, 0, {     0,      0}, {0x2d, 0x75, 0xf2, 0xff}}},
-    {{{     9,     89,     41}, 0, {     0,      0}, {0x14, 0x78, 0x23, 0xff}}},
-    {{{     9,     89,    -40}, 0, {     0,      0}, {0x10, 0x7b, 0xe7, 0xff}}},
-    {{{   -15,     88,     35}, 0, {     0,      0}, {0xec, 0x7a, 0x1c, 0xff}}},
-    {{{   -15,     87,    -35}, 0, {     0,      0}, {0xea, 0x76, 0xda, 0xff}}},
-    {{{     3,     77,    -61}, 0, {     0,      0}, {0x03, 0x6a, 0xbb, 0xff}}},
-    {{{   -43,     83,    -24}, 0, {     0,      0}, {0xcc, 0x72, 0xee, 0xff}}},
-    {{{   -28,     63,    -74}, 0, {     0,      0}, {0xd1, 0x4f, 0xaa, 0xff}}},
-    {{{   -40,     72,    -54}, 0, {     0,      0}, {0xc5, 0x5f, 0xc6, 0xff}}},
-    {{{   -40,     72,     55}, 0, {     0,      0}, {0xc4, 0x5e, 0x3a, 0xff}}},
-    {{{   -43,     83,     25}, 0, {     0,      0}, {0xbc, 0x69, 0x11, 0xff}}},
-    {{{   -28,     63,     75}, 0, {     0,      0}, {0xd0, 0x50, 0x55, 0xff}}},
-};
-
-// 0x0400F968
-static const Vtx mario_pants_overalls_shared_dl_vertex_group2[] = {
-    {{{    80,     14,    -61}, 0, {     0,      0}, {0x60, 0x28, 0xb8, 0xff}}},
-    {{{    43,     51,    -74}, 0, {     0,      0}, {0x3c, 0x32, 0x9d, 0xff}}},
-    {{{    48,     64,    -58}, 0, {     0,      0}, {0x4d, 0x50, 0xc5, 0xff}}},
-    {{{     3,     77,     62}, 0, {     0,      0}, {0x04, 0x6a, 0x44, 0xff}}},
-    {{{     9,     89,     41}, 0, {     0,      0}, {0x14, 0x78, 0x23, 0xff}}},
-    {{{   -15,     88,     35}, 0, {     0,      0}, {0xec, 0x7a, 0x1c, 0xff}}},
-    {{{    47,     75,     35}, 0, {     0,      0}, {0x39, 0x6a, 0x26, 0xff}}},
-    {{{    48,     64,     59}, 0, {     0,      0}, {0x4d, 0x51, 0x3a, 0xff}}},
-    {{{    82,     37,     27}, 0, {     0,      0}, {0x66, 0x48, 0x14, 0xff}}},
-    {{{    32,     62,     74}, 0, {     0,      0}, {0x29, 0x53, 0x56, 0xff}}},
-    {{{    44,     51,     75}, 0, {     0,      0}, {0x3c, 0x34, 0x62, 0xff}}},
-    {{{    80,     14,     62}, 0, {     0,      0}, {0x60, 0x28, 0x47, 0xff}}},
-    {{{   100,      1,     24}, 0, {     0,      0}, {0x7a, 0x17, 0x16, 0xff}}},
-    {{{    82,     37,    -26}, 0, {     0,      0}, {0x69, 0x43, 0xec, 0xff}}},
-    {{{    32,     62,    -73}, 0, {     0,      0}, {0x29, 0x52, 0xa9, 0xff}}},
-    {{{    47,     75,    -34}, 0, {     0,      0}, {0x3e, 0x6a, 0xe2, 0xff}}},
-};
-
-// 0x0400FA68
-static const Vtx mario_pants_overalls_shared_dl_vertex_group3[] = {
-    {{{    80,     14,    -61}, 0, {     0,      0}, {0x60, 0x28, 0xb8, 0xff}}},
-    {{{    82,     37,    -26}, 0, {     0,      0}, {0x69, 0x43, 0xec, 0xff}}},
-    {{{   100,      1,    -23}, 0, {     0,      0}, {0x7c, 0x09, 0xea, 0xff}}},
-    {{{    20,    -61,    -67}, 0, {     0,      0}, {0x0a, 0x9a, 0xb7, 0xff}}},
-    {{{    66,    -52,    -50}, 0, {     0,      0}, {0x3b, 0x9a, 0xd3, 0xff}}},
-    {{{    54,    -63,      0}, 0, {     0,      0}, {0x30, 0x8b, 0x00, 0xff}}},
-    {{{   -27,    -25,    -86}, 0, {     0,      0}, {0xcb, 0xd5, 0x96, 0xff}}},
-    {{{     6,    -10,    -92}, 0, {     0,      0}, {0x00, 0xeb, 0x83, 0xff}}},
-    {{{   -29,    -58,    -59}, 0, {     0,      0}, {0xc9, 0x9a, 0xcf, 0xff}}},
-    {{{     8,    -74,      0}, 0, {     0,      0}, {0xfd, 0x82, 0x00, 0xff}}},
-    {{{   -59,    -28,    -37}, 0, {     0,      0}, {0x90, 0xd5, 0xd9, 0xff}}},
-    {{{   -30,    -66,      0}, 0, {     0,      0}, {0xb8, 0x98, 0x00, 0xff}}},
-    {{{   -27,     26,    -89}, 0, {     0,      0}, {0xc7, 0x0f, 0x90, 0xff}}},
-    {{{    12,     33,    -90}, 0, {     0,      0}, {0x11, 0x20, 0x87, 0xff}}},
-    {{{    20,    -61,     68}, 0, {     0,      0}, {0x0a, 0x99, 0x49, 0xff}}},
-    {{{    66,    -52,     51}, 0, {     0,      0}, {0x3b, 0x9a, 0x2d, 0xff}}},
-};
-
-// 0x0400FB68
-static const Vtx mario_pants_overalls_shared_dl_vertex_group4[] = {
-    {{{     8,    -74,      0}, 0, {     0,      0}, {0xfd, 0x82, 0x00, 0xff}}},
-    {{{    20,    -61,     68}, 0, {     0,      0}, {0x0a, 0x99, 0x49, 0xff}}},
-    {{{   -29,    -58,     59}, 0, {     0,      0}, {0xc8, 0x99, 0x30, 0xff}}},
-    {{{   -27,    -25,     87}, 0, {     0,      0}, {0xcb, 0xd3, 0x69, 0xff}}},
-    {{{     6,    -11,     93}, 0, {     0,      0}, {0x00, 0xea, 0x7c, 0xff}}},
-    {{{   -27,     26,     91}, 0, {     0,      0}, {0xc8, 0x0e, 0x70, 0xff}}},
-    {{{    13,     33,     91}, 0, {     0,      0}, {0x12, 0x20, 0x79, 0xff}}},
-    {{{   -59,    -28,     38}, 0, {     0,      0}, {0x8d, 0xd8, 0x21, 0xff}}},
-    {{{   -30,    -66,      0}, 0, {     0,      0}, {0xb8, 0x98, 0x00, 0xff}}},
-    {{{   -28,     63,    -74}, 0, {     0,      0}, {0xd1, 0x4f, 0xaa, 0xff}}},
-    {{{   -27,     26,    -89}, 0, {     0,      0}, {0xc7, 0x0f, 0x90, 0xff}}},
-    {{{   -71,     54,    -29}, 0, {     0,      0}, {0x8f, 0x2a, 0xda, 0xff}}},
-    {{{   -59,    -28,    -37}, 0, {     0,      0}, {0x90, 0xd5, 0xd9, 0xff}}},
-    {{{   -71,     54,     30}, 0, {     0,      0}, {0x94, 0x2a, 0x31, 0xff}}},
-    {{{   -43,     83,     25}, 0, {     0,      0}, {0xbc, 0x69, 0x11, 0xff}}},
-    {{{   -43,     83,    -24}, 0, {     0,      0}, {0xcc, 0x72, 0xee, 0xff}}},
-};
-
-// 0x0400FC68
-static const Vtx mario_pants_overalls_shared_dl_vertex_group5[] = {
-    {{{   -71,     54,    -29}, 0, {     0,      0}, {0x8f, 0x2a, 0xda, 0xff}}},
-    {{{   -43,     83,    -24}, 0, {     0,      0}, {0xcc, 0x72, 0xee, 0xff}}},
-    {{{   -40,     72,    -54}, 0, {     0,      0}, {0xc5, 0x5f, 0xc6, 0xff}}},
-    {{{   -59,    -28,    -37}, 0, {     0,      0}, {0x90, 0xd5, 0xd9, 0xff}}},
-    {{{   -59,    -28,     38}, 0, {     0,      0}, {0x8d, 0xd8, 0x21, 0xff}}},
-    {{{   -28,     63,    -74}, 0, {     0,      0}, {0xd1, 0x4f, 0xaa, 0xff}}},
-    {{{   -43,     83,     25}, 0, {     0,      0}, {0xbc, 0x69, 0x11, 0xff}}},
-    {{{   -71,     54,     30}, 0, {     0,      0}, {0x94, 0x2a, 0x31, 0xff}}},
-    {{{   -30,    -66,      0}, 0, {     0,      0}, {0xb8, 0x98, 0x00, 0xff}}},
-    {{{   -27,     26,     91}, 0, {     0,      0}, {0xc8, 0x0e, 0x70, 0xff}}},
-    {{{   -28,     63,     75}, 0, {     0,      0}, {0xd0, 0x50, 0x55, 0xff}}},
-    {{{   -40,     72,     55}, 0, {     0,      0}, {0xc4, 0x5e, 0x3a, 0xff}}},
-    {{{    13,     33,     91}, 0, {     0,      0}, {0x12, 0x20, 0x79, 0xff}}},
-    {{{    -4,     58,     84}, 0, {     0,      0}, {0xfb, 0x43, 0x6b, 0xff}}},
-};
-
-// 0x0400FD48
-static const Vtx mario_pants_overalls_shared_dl_vertex_group6[] = {
-    {{{   -27,     26,    -89}, 0, {     0,      0}, {0xc7, 0x0f, 0x90, 0xff}}},
-    {{{    -4,     58,    -82}, 0, {     0,      0}, {0xf9, 0x42, 0x94, 0xff}}},
-    {{{    12,     33,    -90}, 0, {     0,      0}, {0x11, 0x20, 0x87, 0xff}}},
-    {{{   -28,     63,    -74}, 0, {     0,      0}, {0xd1, 0x4f, 0xaa, 0xff}}},
-    {{{    80,     14,    -61}, 0, {     0,      0}, {0x60, 0x28, 0xb8, 0xff}}},
-    {{{   100,      1,    -23}, 0, {     0,      0}, {0x7c, 0x09, 0xea, 0xff}}},
-    {{{    84,    -29,    -62}, 0, {     0,      0}, {0x5f, 0xde, 0xb4, 0xff}}},
-    {{{    93,    -36,    -25}, 0, {     0,      0}, {0x66, 0xb7, 0xf0, 0xff}}},
-    {{{    66,    -52,    -50}, 0, {     0,      0}, {0x3b, 0x9a, 0xd3, 0xff}}},
-    {{{    54,    -63,      0}, 0, {     0,      0}, {0x30, 0x8b, 0x00, 0xff}}},
-    {{{    66,    -52,     51}, 0, {     0,      0}, {0x3b, 0x9a, 0x2d, 0xff}}},
-    {{{    93,    -36,     26}, 0, {     0,      0}, {0x6b, 0xbf, 0x0d, 0xff}}},
-    {{{    84,    -29,     63}, 0, {     0,      0}, {0x5f, 0xde, 0x4c, 0xff}}},
-    {{{   100,      1,     24}, 0, {     0,      0}, {0x7a, 0x17, 0x16, 0xff}}},
-    {{{    80,     14,     62}, 0, {     0,      0}, {0x60, 0x28, 0x47, 0xff}}},
-};
-
-// 0x0400FE38
-static const Vtx mario_pants_overalls_shared_dl_vertex_group7[] = {
-    {{{    17,     66,    -75}, 0, {     0,      0}, {0x17, 0x58, 0xa8, 0xff}}},
-    {{{    -4,     58,    -82}, 0, {     0,      0}, {0xf9, 0x42, 0x94, 0xff}}},
-    {{{     3,     77,    -61}, 0, {     0,      0}, {0x03, 0x6a, 0xbb, 0xff}}},
-    {{{   -28,     63,    -74}, 0, {     0,      0}, {0xd1, 0x4f, 0xaa, 0xff}}},
-    {{{    32,     62,     74}, 0, {     0,      0}, {0x29, 0x53, 0x56, 0xff}}},
-    {{{    17,     66,     76}, 0, {     0,      0}, {0x19, 0x58, 0x57, 0xff}}},
-    {{{    13,     33,     91}, 0, {     0,      0}, {0x12, 0x20, 0x79, 0xff}}},
-    {{{   -28,     63,     75}, 0, {     0,      0}, {0xd0, 0x50, 0x55, 0xff}}},
-    {{{    -4,     58,     84}, 0, {     0,      0}, {0xfb, 0x43, 0x6b, 0xff}}},
-    {{{     3,     77,     62}, 0, {     0,      0}, {0x04, 0x6a, 0x44, 0xff}}},
-    {{{   -15,     88,     35}, 0, {     0,      0}, {0xec, 0x7a, 0x1c, 0xff}}},
-    {{{    12,     33,    -90}, 0, {     0,      0}, {0x11, 0x20, 0x87, 0xff}}},
-    {{{    32,     62,    -73}, 0, {     0,      0}, {0x29, 0x52, 0xa9, 0xff}}},
-    {{{    43,     51,    -74}, 0, {     0,      0}, {0x3c, 0x32, 0x9d, 0xff}}},
-    {{{    44,     51,     75}, 0, {     0,      0}, {0x3c, 0x34, 0x62, 0xff}}},
-};
-
-// 0x0400FF28 - 0x0400FF88
-const Gfx mario_yellow_button_dl[] = {
-    gsSPVertex(mario_yellow_button_dl_vertex, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
-    gsSP2Triangles( 1,  4,  2, 0x0,  5,  6,  2, 0x0),
-    gsSP2Triangles( 4,  5,  2, 0x0,  7,  8,  9, 0x0),
-    gsSP2Triangles(10,  7,  9, 0x0,  9, 11, 12, 0x0),
-    gsSP2Triangles(12, 13,  9, 0x0, 13, 10,  9, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0400FF88 - 0x04010260
-const Gfx mario_pants_overalls_shared_dl[] = {
-    gsSPVertex(mario_pants_overalls_shared_dl_vertex_group1, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
-    gsSP2Triangles( 4,  1,  5, 0x0,  1,  3,  5, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  5,  7,  6, 0x0),
-    gsSP2Triangles( 7,  5,  8, 0x0,  9,  6,  7, 0x0),
-    gsSP2Triangles( 7,  8, 10, 0x0, 10, 11,  7, 0x0),
-    gsSP2Triangles( 9,  7, 11, 0x0, 12,  6, 13, 0x0),
-    gsSP2Triangles( 9, 13,  6, 0x0,  6, 12, 14, 0x0),
-    gsSPVertex(mario_pants_overalls_shared_dl_vertex_group2, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10,  7, 0x0),
-    gsSP2Triangles( 7, 10, 11, 0x0, 11,  8,  7, 0x0),
-    gsSP2Triangles(12,  8, 11, 0x0, 13,  0,  2, 0x0),
-    gsSP2Triangles( 2,  1, 14, 0x0,  2, 15, 13, 0x0),
-    gsSPVertex(mario_pants_overalls_shared_dl_vertex_group3, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 3,  6,  7, 0x0,  3,  8,  6, 0x0),
-    gsSP2Triangles( 5,  9,  3, 0x0,  8,  3,  9, 0x0),
-    gsSP2Triangles( 6,  8, 10, 0x0, 11, 10,  8, 0x0),
-    gsSP2Triangles( 9, 11,  8, 0x0,  6, 12,  7, 0x0),
-    gsSP2Triangles(12,  6, 10, 0x0,  7, 12, 13, 0x0),
-    gsSP2Triangles(14,  5, 15, 0x0, 14,  9,  5, 0x0),
-    gsSPVertex(mario_pants_overalls_shared_dl_vertex_group4, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
-    gsSP2Triangles( 1,  4,  3, 0x0,  5,  4,  6, 0x0),
-    gsSP2Triangles( 4,  5,  3, 0x0,  2,  3,  7, 0x0),
-    gsSP2Triangles( 7,  3,  5, 0x0,  8,  2,  7, 0x0),
-    gsSP2Triangles( 2,  8,  0, 0x0,  9, 10, 11, 0x0),
-    gsSP2Triangles(12, 11, 10, 0x0, 11,  7, 13, 0x0),
-    gsSP1Triangle(14, 15, 11, 0x0),
-    gsSPVertex(mario_pants_overalls_shared_dl_vertex_group5, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  4, 0x0),
-    gsSP2Triangles( 2,  5,  0, 0x0,  6,  0,  7, 0x0),
-    gsSP2Triangles( 4,  3,  8, 0x0,  9,  7,  4, 0x0),
-    gsSP2Triangles( 7, 10, 11, 0x0, 11,  6,  7, 0x0),
-    gsSP2Triangles( 9, 12, 13, 0x0, 10,  9, 13, 0x0),
-    gsSP1Triangle( 7,  9, 10, 0x0),
-    gsSPVertex(mario_pants_overalls_shared_dl_vertex_group6, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  5,  7,  6, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  9,  8,  7, 0x0),
-    gsSP2Triangles(10, 11, 12, 0x0, 12, 11, 13, 0x0),
-    gsSP2Triangles(14, 12, 13, 0x0, 11, 10,  9, 0x0),
-    gsSPVertex(mario_pants_overalls_shared_dl_vertex_group7, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  2,  1, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  8,  9, 0x0),
-    gsSP2Triangles(10,  7,  9, 0x0,  9,  8,  5, 0x0),
-    gsSP2Triangles( 5,  8,  6, 0x0, 11,  1,  0, 0x0),
-    gsSP2Triangles(11, 12, 13, 0x0,  6, 14,  4, 0x0),
-    gsSP1Triangle(11,  0, 12, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04010260 - 0x04010348
-const Gfx mario_tshirt_shared_dl[] = {
-    gsSPVertex(mario_tshirt_shared_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
-    gsSP2Triangles( 4,  3,  2, 0x0,  4,  5,  3, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  6,  9,  7, 0x0),
-    gsSP2Triangles( 6,  8, 10, 0x0, 11,  8, 12, 0x0),
-    gsSP2Triangles(12,  8,  7, 0x0,  8, 11, 10, 0x0),
-    gsSP1Triangle(13, 14, 15, 0x0),
-    gsSPVertex(mario_tshirt_shared_dl_vertex_group2, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  2, 0x0),
-    gsSP2Triangles( 3,  1,  4, 0x0,  4,  1,  5, 0x0),
-    gsSP2Triangles( 6,  2,  3, 0x0,  7,  8,  9, 0x0),
-    gsSP2Triangles( 7,  9, 10, 0x0, 11, 10,  9, 0x0),
-    gsSP2Triangles(12,  3,  4, 0x0, 13,  3, 12, 0x0),
-    gsSP1Triangle( 6,  3, 13, 0x0),
-    gsSPVertex(mario_tshirt_shared_dl_vertex_group3, 5, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
-    gsSP1Triangle( 1,  4,  2, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04010348 - 0x04010370
-const Gfx mario_torso_dl[] = {
-    gsSPDisplayList(mario_pants_overalls_shared_dl),
-    gsSPLight(&mario_red_lights_group.l, 1),
-    gsSPLight(&mario_red_lights_group.a, 2),
-    gsSPDisplayList(mario_tshirt_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04010370 - 0x040103F0
-const Gfx mario_torso[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_yellow_button),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_yellow_button_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_torso_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x040103F0 - 0x04010410
-const Gfx mario_metal_torso_shared_dl[] = {
-    gsSPDisplayList(mario_yellow_button_dl),
-    gsSPDisplayList(mario_pants_overalls_shared_dl),
-    gsSPDisplayList(mario_tshirt_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04010410
-static const Vtx mario_m_logo_dl_vertex[] = {
-    {{{   195,     93,     32}, 0, {   744,    732}, {0x51, 0x54, 0x30, 0xff}}},
-    {{{   153,     33,     95}, 0, {  1250,   1066}, {0x04, 0x46, 0x69, 0xff}}},
-    {{{   252,     62,     70}, 0, {  1032,    152}, {0x39, 0x4a, 0x55, 0xff}}},
-    {{{   272,     85,      0}, 0, {   472,    -16}, {0x5f, 0x54, 0x00, 0xff}}},
-    {{{   252,     62,    -69}, 0, {   -78,    158}, {0x39, 0x4a, 0xab, 0xff}}},
-    {{{   195,     93,    -31}, 0, {   232,    736}, {0x51, 0x54, 0xcf, 0xff}}},
-    {{{   153,     33,    -94}, 0, {  -258,   1076}, {0x03, 0x46, 0x97, 0xff}}},
-};
-
-// 0x04010480
-static const Vtx mario_eyes_cap_on_dl_vertex[] = {
-    {{{   145,    101,      0}, 0, {   480,    446}, {0x13, 0x7d, 0x00, 0xff}}},
-    {{{   108,    105,      0}, 0, {   488,    854}, {0x69, 0x46, 0x00, 0xff}}},
-    {{{    97,    103,     25}, 0, {   724,    958}, {0x40, 0x5a, 0x3d, 0xff}}},
-    {{{    97,    103,    -24}, 0, {   256,    970}, {0x40, 0x5a, 0xc3, 0xff}}},
-    {{{   175,     91,    -38}, 0, {   106,    130}, {0xc6, 0x6d, 0xe7, 0xff}}},
-    {{{   144,     83,    -66}, 0, {  -146,    460}, {0x19, 0x5b, 0xad, 0xff}}},
-    {{{   104,     87,    -69}, 0, {  -160,    898}, {0x30, 0x5c, 0xb7, 0xff}}},
-    {{{   175,     91,     39}, 0, {   842,    112}, {0xc6, 0x6d, 0x19, 0xff}}},
-    {{{   153,     33,    -94}, 0, {  -404,    342}, {0x03, 0x46, 0x97, 0xff}}},
-    {{{   104,     87,     70}, 0, {  1138,    864}, {0x30, 0x5c, 0x49, 0xff}}},
-    {{{   144,     83,     67}, 0, {  1108,    428}, {0x19, 0x5b, 0x53, 0xff}}},
-    {{{   153,     33,     95}, 0, {  1362,    296}, {0x04, 0x46, 0x69, 0xff}}},
-};
-
-// 0x04010540
-static const Vtx mario_hair_sideburn_cap_on_dl_vertex[] = {
-    {{{   120,    -12,   -109}, 0, {   916,    184}, {0xed, 0x24, 0x88, 0xff}}},
-    {{{    96,     49,    -93}, 0, {   -70,    700}, {0x11, 0x27, 0x89, 0xff}}},
-    {{{   153,     33,    -94}, 0, {    90,    -58}, {0x03, 0x46, 0x97, 0xff}}},
-    {{{    85,    -23,   -110}, 0, {  1150,    582}, {0x06, 0x59, 0xa6, 0xff}}},
-    {{{    42,      0,   -102}, 0, {   842,   1210}, {0xc3, 0x05, 0x92, 0xff}}},
-    {{{    44,     44,    -96}, 0, {   118,   1334}, {0xda, 0x21, 0x8c, 0xff}}},
-    {{{    96,     49,     94}, 0, {   -74,    726}, {0x10, 0x28, 0x77, 0xff}}},
-    {{{    44,     44,     97}, 0, {   196,   1366}, {0xda, 0x21, 0x74, 0xff}}},
-    {{{    42,      0,    103}, 0, {   968,   1192}, {0xc3, 0x05, 0x6e, 0xff}}},
-    {{{    85,    -23,    111}, 0, {  1238,    518}, {0x04, 0x58, 0x5a, 0xff}}},
-    {{{   120,    -11,    111}, 0, {   922,    122}, {0xed, 0x24, 0x78, 0xff}}},
-    {{{   153,     33,     95}, 0, {    22,    -68}, {0x04, 0x46, 0x69, 0xff}}},
-};
-
-// 0x04010600
-static const Vtx mario_mustache_cap_on_dl_vertex_group1[] = {
-    {{{    77,    108,     34}, 0, {   342,    368}, {0x0e, 0x16, 0x7c, 0xff}}},
-    {{{    92,     88,     84}, 0, {   898,    -18}, {0x23, 0x59, 0x53, 0xff}}},
-    {{{    97,    103,     25}, 0, {   224,    146}, {0x40, 0x5a, 0x3d, 0xff}}},
-    {{{    48,     94,     76}, 0, {   888,    564}, {0xd7, 0x60, 0x47, 0xff}}},
-    {{{    52,    111,     31}, 0, {   354,    690}, {0xa8, 0x33, 0x4b, 0xff}}},
-    {{{    27,    100,     30}, 0, {   442,    982}, {0xb1, 0x60, 0x16, 0xff}}},
-    {{{    41,    109,      0}, 0, {    70,    924}, {0x95, 0x44, 0x00, 0xff}}},
-    {{{    44,     44,     97}, 0, {  1296,    438}, {0xda, 0x21, 0x74, 0xff}}},
-    {{{     3,     54,     52}, 0, {   892,   1090}, {0x95, 0x1d, 0x3c, 0xff}}},
-    {{{    52,    111,    -30}, 0, {   340,    684}, {0xa8, 0x32, 0xb5, 0xff}}},
-    {{{    48,     94,    -75}, 0, {   856,    608}, {0xd7, 0x60, 0xb9, 0xff}}},
-    {{{    27,    100,    -29}, 0, {   394,    998}, {0xb1, 0x60, 0xea, 0xff}}},
-    {{{     3,     54,    -51}, 0, {   806,   1162}, {0x95, 0x1d, 0xc4, 0xff}}},
-    {{{    44,     44,    -96}, 0, {  1250,    518}, {0xda, 0x21, 0x8c, 0xff}}},
-    {{{    77,    108,    -33}, 0, {   362,    344}, {0x0e, 0x16, 0x84, 0xff}}},
-    {{{    41,    109,      0}, 0, {    50,    900}, {0x95, 0x44, 0x00, 0xff}}},
-};
-
-// 0x04010700
-static const Vtx mario_mustache_cap_on_dl_vertex_group2[] = {
-    {{{    48,     94,    -75}, 0, {   856,    608}, {0xd7, 0x60, 0xb9, 0xff}}},
-    {{{    77,    108,    -33}, 0, {   362,    344}, {0x0e, 0x16, 0x84, 0xff}}},
-    {{{    92,     88,    -83}, 0, {   922,     -4}, {0x23, 0x59, 0xad, 0xff}}},
-    {{{    97,    103,    -24}, 0, {   274,    100}, {0x40, 0x5a, 0xc3, 0xff}}},
-    {{{    44,     44,    -96}, 0, {  1250,    518}, {0xda, 0x21, 0x8c, 0xff}}},
-};
-
-// 0x04010750
-static const Vtx mario_face_cap_dl_vertex_group1[] = {
-    {{{   164,    -89,    -74}, 0, {     0,      0}, {0x51, 0xa9, 0xd5, 0xff}}},
-    {{{   122,   -139,    -48}, 0, {     0,      0}, {0x28, 0x94, 0xcd, 0xff}}},
-    {{{   131,    -56,   -123}, 0, {     0,      0}, {0xde, 0xd4, 0x8f, 0xff}}},
-    {{{   187,     -6,   -133}, 0, {     0,      0}, {0x1e, 0x04, 0x85, 0xff}}},
-    {{{   120,    -12,   -109}, 0, {     0,      0}, {0xed, 0x24, 0x88, 0xff}}},
-    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xd9, 0xb0, 0xa7, 0xff}}},
-    {{{    77,   -138,    -50}, 0, {     0,      0}, {0xbc, 0x9e, 0xd8, 0xff}}},
-    {{{    64,   -103,    -51}, 0, {     0,      0}, {0xde, 0x94, 0xc7, 0xff}}},
-    {{{   122,   -139,     49}, 0, {     0,      0}, {0x2d, 0x8f, 0x22, 0xff}}},
-    {{{    77,   -138,     51}, 0, {     0,      0}, {0xc1, 0xa4, 0x3c, 0xff}}},
-    {{{    64,   -103,     52}, 0, {     0,      0}, {0xc9, 0x9a, 0x31, 0xff}}},
-    {{{   131,    -56,    124}, 0, {     0,      0}, {0xdf, 0xd3, 0x71, 0xff}}},
-    {{{   164,    -89,     75}, 0, {     0,      0}, {0x4e, 0xa6, 0x2b, 0xff}}},
-    {{{    91,    -54,     86}, 0, {     0,      0}, {0xd9, 0xaf, 0x59, 0xff}}},
-    {{{   187,     -6,    134}, 0, {     0,      0}, {0x1f, 0x04, 0x7a, 0xff}}},
-    {{{   120,    -11,    111}, 0, {     0,      0}, {0xed, 0x24, 0x78, 0xff}}},
-};
-
-// 0x04010850
-static const Vtx mario_face_cap_dl_vertex_group2[] = {
-    {{{   153,     33,    -94}, 0, {     0,      0}, {0x03, 0x46, 0x97, 0xff}}},
-    {{{   187,     -6,   -133}, 0, {     0,      0}, {0x1e, 0x04, 0x85, 0xff}}},
-    {{{   120,    -12,   -109}, 0, {     0,      0}, {0xed, 0x24, 0x88, 0xff}}},
-    {{{   175,     91,    -38}, 0, {     0,      0}, {0xc6, 0x6d, 0xe7, 0xff}}},
-    {{{   173,    132,    -65}, 0, {     0,      0}, {0xda, 0x5a, 0xb0, 0xff}}},
-    {{{   195,     93,    -31}, 0, {     0,      0}, {0x51, 0x54, 0xcf, 0xff}}},
-    {{{   252,     62,    -69}, 0, {     0,      0}, {0x39, 0x4a, 0xab, 0xff}}},
-    {{{   164,    -89,    -74}, 0, {     0,      0}, {0x51, 0xa9, 0xd5, 0xff}}},
-    {{{   271,      0,    -41}, 0, {     0,      0}, {0x6e, 0xcf, 0xdc, 0xff}}},
-    {{{   187,     -6,    134}, 0, {     0,      0}, {0x1f, 0x04, 0x7a, 0xff}}},
-    {{{   153,     33,     95}, 0, {     0,      0}, {0x04, 0x46, 0x69, 0xff}}},
-    {{{   120,    -11,    111}, 0, {     0,      0}, {0xed, 0x24, 0x78, 0xff}}},
-    {{{   252,     62,     70}, 0, {     0,      0}, {0x39, 0x4a, 0x55, 0xff}}},
-    {{{   271,      0,     42}, 0, {     0,      0}, {0x71, 0xdc, 0x2b, 0xff}}},
-    {{{   164,    -89,     75}, 0, {     0,      0}, {0x4e, 0xa6, 0x2b, 0xff}}},
-};
-
-// 0x04010940
-static const Vtx mario_face_cap_dl_vertex_group3[] = {
-    {{{   195,     93,     32}, 0, {     0,      0}, {0x51, 0x54, 0x30, 0xff}}},
-    {{{   173,    132,     66}, 0, {     0,      0}, {0xda, 0x5a, 0x50, 0xff}}},
-    {{{   153,     33,     95}, 0, {     0,      0}, {0x04, 0x46, 0x69, 0xff}}},
-    {{{   175,     91,     39}, 0, {     0,      0}, {0xc6, 0x6d, 0x19, 0xff}}},
-    {{{   164,    -89,    -74}, 0, {     0,      0}, {0x51, 0xa9, 0xd5, 0xff}}},
-    {{{   271,      0,    -41}, 0, {     0,      0}, {0x6e, 0xcf, 0xdc, 0xff}}},
-    {{{   164,    -89,     75}, 0, {     0,      0}, {0x4e, 0xa6, 0x2b, 0xff}}},
-    {{{   271,      0,     42}, 0, {     0,      0}, {0x71, 0xdc, 0x2b, 0xff}}},
-    {{{   252,     62,    -69}, 0, {     0,      0}, {0x39, 0x4a, 0xab, 0xff}}},
-    {{{   272,     85,      0}, 0, {     0,      0}, {0x5f, 0x54, 0x00, 0xff}}},
-    {{{   182,    155,      0}, 0, {     0,      0}, {0xed, 0x7d, 0x00, 0xff}}},
-    {{{   195,     93,    -31}, 0, {     0,      0}, {0x51, 0x54, 0xcf, 0xff}}},
-    {{{   175,     91,    -38}, 0, {     0,      0}, {0xc6, 0x6d, 0xe7, 0xff}}},
-    {{{   173,    132,    -65}, 0, {     0,      0}, {0xda, 0x5a, 0xb0, 0xff}}},
-    {{{   252,     62,     70}, 0, {     0,      0}, {0x39, 0x4a, 0x55, 0xff}}},
-};
-
-// 0x04010A30
-static const Vtx mario_face_part_cap_on_dl_vertex_group1[] = {
-    {{{    41,    109,      0}, 0, {     0,      0}, {0x95, 0x44, 0x00, 0xff}}},
-    {{{    27,    100,    -29}, 0, {     0,      0}, {0xb1, 0x60, 0xea, 0xff}}},
-    {{{    27,    100,     30}, 0, {     0,      0}, {0xb1, 0x60, 0x16, 0xff}}},
-    {{{    -7,     62,      0}, 0, {     0,      0}, {0x85, 0x1d, 0x00, 0xff}}},
-    {{{     3,     54,     52}, 0, {     0,      0}, {0x95, 0x1d, 0x3c, 0xff}}},
-    {{{     3,     54,    -51}, 0, {     0,      0}, {0x95, 0x1d, 0xc4, 0xff}}},
-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
-    {{{    42,      0,    103}, 0, {     0,      0}, {0xc3, 0x05, 0x6e, 0xff}}},
-    {{{    44,     44,     97}, 0, {     0,      0}, {0xda, 0x21, 0x74, 0xff}}},
-    {{{    42,      0,   -102}, 0, {     0,      0}, {0xc3, 0x05, 0x92, 0xff}}},
-    {{{    44,     44,    -96}, 0, {     0,      0}, {0xda, 0x21, 0x8c, 0xff}}},
-    {{{    64,    -25,    135}, 0, {     0,      0}, {0xcc, 0xe5, 0x70, 0xff}}},
-    {{{    91,    -54,     86}, 0, {     0,      0}, {0xd9, 0xaf, 0x59, 0xff}}},
-    {{{   102,    -33,    135}, 0, {     0,      0}, {0x30, 0x18, 0x72, 0xff}}},
-};
-
-// 0x04010B20
-static const Vtx mario_face_part_cap_on_dl_vertex_group2[] = {
-    {{{   102,    -33,   -134}, 0, {     0,      0}, {0x32, 0x19, 0x8f, 0xff}}},
-    {{{   120,    -12,   -109}, 0, {     0,      0}, {0xed, 0x24, 0x88, 0xff}}},
-    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xd9, 0xb0, 0xa7, 0xff}}},
-    {{{    64,    -25,    135}, 0, {     0,      0}, {0xcc, 0xe5, 0x70, 0xff}}},
-    {{{    56,    -45,     77}, 0, {     0,      0}, {0xe3, 0xca, 0x6e, 0xff}}},
-    {{{    91,    -54,     86}, 0, {     0,      0}, {0xd9, 0xaf, 0x59, 0xff}}},
-    {{{   120,    -11,    111}, 0, {     0,      0}, {0xed, 0x24, 0x78, 0xff}}},
-    {{{    85,    -23,    111}, 0, {     0,      0}, {0x04, 0x58, 0x5a, 0xff}}},
-    {{{   102,    -33,    135}, 0, {     0,      0}, {0x30, 0x18, 0x72, 0xff}}},
-    {{{    42,      0,    103}, 0, {     0,      0}, {0xc3, 0x05, 0x6e, 0xff}}},
-    {{{    85,    -23,   -110}, 0, {     0,      0}, {0x06, 0x59, 0xa6, 0xff}}},
-    {{{    64,    -25,   -134}, 0, {     0,      0}, {0xcc, 0xe5, 0x90, 0xff}}},
-    {{{    42,      0,   -102}, 0, {     0,      0}, {0xc3, 0x05, 0x92, 0xff}}},
-    {{{    33,    165,      0}, 0, {     0,      0}, {0x8f, 0x38, 0x09, 0xff}}},
-    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
-    {{{    32,    132,      0}, 0, {     0,      0}, {0x84, 0xe8, 0xf8, 0xff}}},
-};
-
-// 0x04010C20
-static const Vtx mario_face_part_cap_on_dl_vertex_group3[] = {
-    {{{    56,    -45,    -76}, 0, {     0,      0}, {0xe3, 0xca, 0x92, 0xff}}},
-    {{{    64,    -25,   -134}, 0, {     0,      0}, {0xcc, 0xe5, 0x90, 0xff}}},
-    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xd9, 0xb0, 0xa7, 0xff}}},
-    {{{    42,      0,   -102}, 0, {     0,      0}, {0xc3, 0x05, 0x92, 0xff}}},
-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
-    {{{    56,    -45,     77}, 0, {     0,      0}, {0xe3, 0xca, 0x6e, 0xff}}},
-    {{{    42,      0,    103}, 0, {     0,      0}, {0xc3, 0x05, 0x6e, 0xff}}},
-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
-    {{{    32,    132,      0}, 0, {     0,      0}, {0x84, 0xe8, 0xf8, 0xff}}},
-    {{{    47,    131,     41}, 0, {     0,      0}, {0xb0, 0xe4, 0x5e, 0xff}}},
-    {{{    33,    165,      0}, 0, {     0,      0}, {0x8f, 0x38, 0x09, 0xff}}},
-    {{{    52,    111,     31}, 0, {     0,      0}, {0xa8, 0x33, 0x4b, 0xff}}},
-    {{{    52,    111,    -30}, 0, {     0,      0}, {0xa8, 0x32, 0xb5, 0xff}}},
-    {{{    41,    109,      0}, 0, {     0,      0}, {0x95, 0x44, 0x00, 0xff}}},
-    {{{    77,    108,     34}, 0, {     0,      0}, {0x0e, 0x16, 0x7c, 0xff}}},
-};
-
-// 0x04010D10
-static const Vtx mario_face_part_cap_on_dl_vertex_group4[] = {
-    {{{    92,     88,     84}, 0, {     0,      0}, {0x23, 0x59, 0x53, 0xff}}},
-    {{{   104,     87,     70}, 0, {     0,      0}, {0x30, 0x5c, 0x49, 0xff}}},
-    {{{    97,    103,     25}, 0, {     0,      0}, {0x40, 0x5a, 0x3d, 0xff}}},
-    {{{   117,    128,      0}, 0, {     0,      0}, {0x7a, 0xe1, 0x06, 0xff}}},
-    {{{   102,    129,     41}, 0, {     0,      0}, {0x45, 0xd6, 0x61, 0xff}}},
-    {{{    77,    108,     34}, 0, {     0,      0}, {0x0e, 0x16, 0x7c, 0xff}}},
-    {{{   108,    105,      0}, 0, {     0,      0}, {0x69, 0x46, 0x00, 0xff}}},
-    {{{    97,    103,    -24}, 0, {     0,      0}, {0x40, 0x5a, 0xc3, 0xff}}},
-    {{{   119,    161,      0}, 0, {     0,      0}, {0x79, 0x23, 0xf6, 0xff}}},
-    {{{   104,    162,     41}, 0, {     0,      0}, {0x52, 0x27, 0x58, 0xff}}},
-    {{{   102,    129,    -40}, 0, {     0,      0}, {0x50, 0xdc, 0xa6, 0xff}}},
-    {{{    75,    130,     46}, 0, {     0,      0}, {0x00, 0xec, 0x7d, 0xff}}},
-    {{{    78,    163,     46}, 0, {     0,      0}, {0x03, 0x55, 0x5d, 0xff}}},
-    {{{   101,    179,      0}, 0, {     0,      0}, {0x27, 0x78, 0x00, 0xff}}},
-    {{{    52,    164,     41}, 0, {     0,      0}, {0xc8, 0x3d, 0x5f, 0xff}}},
-    {{{    47,    131,     41}, 0, {     0,      0}, {0xb0, 0xe4, 0x5e, 0xff}}},
-};
-
-// 0x04010E10
-static const Vtx mario_face_part_cap_on_dl_vertex_group5[] = {
-    {{{    47,    131,     41}, 0, {     0,      0}, {0xb0, 0xe4, 0x5e, 0xff}}},
-    {{{    52,    164,     41}, 0, {     0,      0}, {0xc8, 0x3d, 0x5f, 0xff}}},
-    {{{    33,    165,      0}, 0, {     0,      0}, {0x8f, 0x38, 0x09, 0xff}}},
-    {{{    75,    130,     46}, 0, {     0,      0}, {0x00, 0xec, 0x7d, 0xff}}},
-    {{{    77,    108,     34}, 0, {     0,      0}, {0x0e, 0x16, 0x7c, 0xff}}},
-    {{{    78,    163,     46}, 0, {     0,      0}, {0x03, 0x55, 0x5d, 0xff}}},
-    {{{    60,    181,      0}, 0, {     0,      0}, {0xea, 0x7c, 0x00, 0xff}}},
-    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
-    {{{    96,     49,     94}, 0, {     0,      0}, {0x10, 0x28, 0x77, 0xff}}},
-    {{{   153,     33,     95}, 0, {     0,      0}, {0x04, 0x46, 0x69, 0xff}}},
-    {{{   144,     83,     67}, 0, {     0,      0}, {0x19, 0x5b, 0x53, 0xff}}},
-    {{{   101,    179,      0}, 0, {     0,      0}, {0x27, 0x78, 0x00, 0xff}}},
-    {{{   104,     87,     70}, 0, {     0,      0}, {0x30, 0x5c, 0x49, 0xff}}},
-    {{{    92,     88,     84}, 0, {     0,      0}, {0x23, 0x59, 0x53, 0xff}}},
-    {{{    44,     44,     97}, 0, {     0,      0}, {0xda, 0x21, 0x74, 0xff}}},
-};
-
-// 0x04010F00
-static const Vtx mario_face_part_cap_on_dl_vertex_group6[] = {
-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
-    {{{    31,    -84,      0}, 0, {     0,      0}, {0xa0, 0xae, 0x00, 0xff}}},
-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
-    {{{   144,     83,    -66}, 0, {     0,      0}, {0x19, 0x5b, 0xad, 0xff}}},
-    {{{   153,     33,    -94}, 0, {     0,      0}, {0x03, 0x46, 0x97, 0xff}}},
-    {{{    96,     49,    -93}, 0, {     0,      0}, {0x11, 0x27, 0x89, 0xff}}},
-    {{{    92,     88,    -83}, 0, {     0,      0}, {0x23, 0x59, 0xad, 0xff}}},
-    {{{   104,     87,    -69}, 0, {     0,      0}, {0x30, 0x5c, 0xb7, 0xff}}},
-    {{{    44,     44,    -96}, 0, {     0,      0}, {0xda, 0x21, 0x8c, 0xff}}},
-    {{{    75,    130,    -45}, 0, {     0,      0}, {0x00, 0xec, 0x83, 0xff}}},
-    {{{    78,    163,    -45}, 0, {     0,      0}, {0x03, 0x54, 0xa2, 0xff}}},
-    {{{   104,    162,    -40}, 0, {     0,      0}, {0x44, 0x31, 0xa1, 0xff}}},
-    {{{    97,    103,    -24}, 0, {     0,      0}, {0x40, 0x5a, 0xc3, 0xff}}},
-    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
-    {{{    47,    131,    -40}, 0, {     0,      0}, {0xbc, 0xde, 0x9c, 0xff}}},
-    {{{    60,    181,      0}, 0, {     0,      0}, {0xea, 0x7c, 0x00, 0xff}}},
-};
-
-// 0x04011000
-static const Vtx mario_face_part_cap_on_dl_vertex_group7[] = {
-    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
-    {{{    47,    131,    -40}, 0, {     0,      0}, {0xbc, 0xde, 0x9c, 0xff}}},
-    {{{    32,    132,      0}, 0, {     0,      0}, {0x84, 0xe8, 0xf8, 0xff}}},
-    {{{    77,    108,    -33}, 0, {     0,      0}, {0x0e, 0x16, 0x84, 0xff}}},
-    {{{    52,    111,    -30}, 0, {     0,      0}, {0xa8, 0x32, 0xb5, 0xff}}},
-    {{{    75,    130,    -45}, 0, {     0,      0}, {0x00, 0xec, 0x83, 0xff}}},
-    {{{   104,    162,    -40}, 0, {     0,      0}, {0x44, 0x31, 0xa1, 0xff}}},
-    {{{   102,    129,    -40}, 0, {     0,      0}, {0x50, 0xdc, 0xa6, 0xff}}},
-    {{{   119,    161,      0}, 0, {     0,      0}, {0x79, 0x23, 0xf6, 0xff}}},
-    {{{    97,    103,    -24}, 0, {     0,      0}, {0x40, 0x5a, 0xc3, 0xff}}},
-    {{{    78,    163,    -45}, 0, {     0,      0}, {0x03, 0x54, 0xa2, 0xff}}},
-    {{{    60,    181,      0}, 0, {     0,      0}, {0xea, 0x7c, 0x00, 0xff}}},
-    {{{   101,    179,      0}, 0, {     0,      0}, {0x27, 0x78, 0x00, 0xff}}},
-};
-
-// 0x040110D0
-static const Vtx mario_face_back_hair_cap_on_dl_vertex_group1[] = {
-    {{{    31,    -84,      0}, 0, {     0,      0}, {0xa0, 0xae, 0x00, 0xff}}},
-    {{{    36,   -116,    -35}, 0, {     0,      0}, {0xfb, 0x8e, 0x37, 0xff}}},
-    {{{    64,   -103,    -51}, 0, {     0,      0}, {0xde, 0x94, 0xc7, 0xff}}},
-    {{{    31,    -85,     87}, 0, {     0,      0}, {0xdb, 0xfd, 0x79, 0xff}}},
-    {{{    35,   -120,     68}, 0, {     0,      0}, {0xda, 0x94, 0x35, 0xff}}},
-    {{{    58,   -114,     60}, 0, {     0,      0}, {0x57, 0xb4, 0x32, 0xff}}},
-    {{{    64,   -103,     52}, 0, {     0,      0}, {0xc9, 0x9a, 0x31, 0xff}}},
-    {{{    56,    -45,     77}, 0, {     0,      0}, {0xe3, 0xca, 0x6e, 0xff}}},
-    {{{    36,   -116,     36}, 0, {     0,      0}, {0xfb, 0x8e, 0xc9, 0xff}}},
-    {{{    91,    -54,     86}, 0, {     0,      0}, {0xd9, 0xaf, 0x59, 0xff}}},
-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
-    {{{    35,   -120,    -67}, 0, {     0,      0}, {0xda, 0x94, 0xcb, 0xff}}},
-    {{{    58,   -114,    -59}, 0, {     0,      0}, {0x57, 0xb4, 0xce, 0xff}}},
-    {{{    31,    -85,    -86}, 0, {     0,      0}, {0xdb, 0xfd, 0x87, 0xff}}},
-    {{{    56,    -45,    -76}, 0, {     0,      0}, {0xe3, 0xca, 0x92, 0xff}}},
-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
-};
-
-// 0x040111D0
-static const Vtx mario_face_back_hair_cap_on_dl_vertex_group2[] = {
-    {{{    31,    -85,    -86}, 0, {     0,      0}, {0xdb, 0xfd, 0x87, 0xff}}},
-    {{{    35,   -120,    -67}, 0, {     0,      0}, {0xda, 0x94, 0xcb, 0xff}}},
-    {{{     9,    -88,    -58}, 0, {     0,      0}, {0x87, 0xdf, 0xf5, 0xff}}},
-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
-    {{{    56,    -45,    -76}, 0, {     0,      0}, {0xe3, 0xca, 0x92, 0xff}}},
-    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xd9, 0xb0, 0xa7, 0xff}}},
-    {{{    64,   -103,    -51}, 0, {     0,      0}, {0xde, 0x94, 0xc7, 0xff}}},
-    {{{    31,    -84,      0}, 0, {     0,      0}, {0xa0, 0xae, 0x00, 0xff}}},
-    {{{    36,   -116,     36}, 0, {     0,      0}, {0xfb, 0x8e, 0xc9, 0xff}}},
-    {{{     9,    -88,     59}, 0, {     0,      0}, {0x87, 0xdf, 0x0b, 0xff}}},
-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
-    {{{    36,   -116,    -35}, 0, {     0,      0}, {0xfb, 0x8e, 0x37, 0xff}}},
-    {{{    35,   -120,     68}, 0, {     0,      0}, {0xda, 0x94, 0x35, 0xff}}},
-    {{{    31,    -85,     87}, 0, {     0,      0}, {0xdb, 0xfd, 0x79, 0xff}}},
-};
-
-// 0x040112B0 - 0x040112E8
-const Gfx mario_m_logo_dl[] = {
-    gsSPVertex(mario_m_logo_dl_vertex, 7, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 2,  3,  0, 0x0,  3,  5,  0, 0x0),
-    gsSP1Triangle( 4,  6,  5, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040112E8 - 0x04011350
-const Gfx mario_eyes_cap_on_dl[] = {
-    gsSPVertex(mario_eyes_cap_on_dl_vertex, 12, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 3,  0,  4, 0x0,  6,  3,  5, 0x0),
-    gsSP2Triangles( 3,  1,  0, 0x0,  4,  0,  7, 0x0),
-    gsSP2Triangles( 5,  4,  8, 0x0,  2,  9, 10, 0x0),
-    gsSP2Triangles(10,  7,  2, 0x0, 11,  7, 10, 0x0),
-    gsSP1Triangle( 7,  0,  2, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04011350 - 0x040113A0
-const Gfx mario_hair_sideburn_cap_on_dl[] = {
-    gsSPVertex(mario_hair_sideburn_cap_on_dl_vertex, 12, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  4, 0x0),
-    gsSP2Triangles( 4,  5,  1, 0x0,  3,  1,  0, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  8,  9,  6, 0x0),
-    gsSP2Triangles( 9, 10,  6, 0x0, 11,  6, 10, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040113A0 - 0x04011438
-const Gfx mario_mustache_cap_on_dl[] = {
-    gsSPVertex(mario_mustache_cap_on_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  0,  3, 0x0),
-    gsSP2Triangles( 0,  4,  3, 0x0,  5,  3,  4, 0x0),
-    gsSP2Triangles( 5,  4,  6, 0x0,  7,  3,  8, 0x0),
-    gsSP2Triangles( 8,  3,  5, 0x0,  3,  7,  1, 0x0),
-    gsSP2Triangles( 9, 10, 11, 0x0, 12, 10, 13, 0x0),
-    gsSP2Triangles(11, 10, 12, 0x0, 10,  9, 14, 0x0),
-    gsSP1Triangle(15,  9, 11, 0x0),
-    gsSPVertex(mario_mustache_cap_on_dl_vertex_group2, 5, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
-    gsSP1Triangle( 2,  4,  0, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04011438 - 0x040116F8
-const Gfx mario_face_part_cap_on_dl[] = {
-    gsSPVertex(mario_face_part_cap_on_dl_vertex_group1, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
-    gsSP2Triangles( 3,  4,  2, 0x0,  1,  5,  3, 0x0),
-    gsSP2Triangles( 6,  7,  3, 0x0,  7,  4,  3, 0x0),
-    gsSP2Triangles( 6,  3,  5, 0x0,  4,  7,  8, 0x0),
-    gsSP2Triangles( 9,  4,  8, 0x0, 10,  6,  5, 0x0),
-    gsSP2Triangles(10,  5, 11, 0x0, 12, 13, 14, 0x0),
-    gsSPVertex(mario_face_part_cap_on_dl_vertex_group2, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  5,  6,  8, 0x0),
-    gsSP2Triangles( 3,  8,  7, 0x0,  9,  3,  7, 0x0),
-    gsSP2Triangles( 3,  9,  4, 0x0, 10, 11, 12, 0x0),
-    gsSP2Triangles( 0, 10,  1, 0x0, 10,  0, 11, 0x0),
-    gsSP2Triangles(11,  0,  2, 0x0, 13, 14, 15, 0x0),
-    gsSPVertex(mario_face_part_cap_on_dl_vertex_group3, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  3,  0,  7, 0x0),
-    gsSP2Triangles( 8,  9, 10, 0x0, 11,  9,  8, 0x0),
-    gsSP2Triangles(12, 13,  8, 0x0,  8, 13, 11, 0x0),
-    gsSP1Triangle( 9, 11, 14, 0x0),
-    gsSPVertex(mario_face_part_cap_on_dl_vertex_group4, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  2, 0x0),
-    gsSP2Triangles( 5,  2,  4, 0x0,  2,  6,  3, 0x0),
-    gsSP2Triangles( 3,  6,  7, 0x0,  8,  9,  3, 0x0),
-    gsSP2Triangles( 9,  4,  3, 0x0,  7, 10,  3, 0x0),
-    gsSP2Triangles( 3, 10,  8, 0x0, 11,  4,  9, 0x0),
-    gsSP2Triangles(12, 11,  9, 0x0, 13,  9,  8, 0x0),
-    gsSP2Triangles( 9, 13, 12, 0x0,  4, 11,  5, 0x0),
-    gsSP1Triangle(14, 15, 11, 0x0),
-    gsSPVertex(mario_face_part_cap_on_dl_vertex_group5, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  4, 0x0),
-    gsSP2Triangles( 1,  5,  6, 0x0,  1,  3,  5, 0x0),
-    gsSP2Triangles( 2,  1,  6, 0x0,  2,  6,  7, 0x0),
-    gsSP2Triangles( 8,  9, 10, 0x0,  6,  5, 11, 0x0),
-    gsSP2Triangles(12, 13,  8, 0x0, 10, 12,  8, 0x0),
-    gsSP1Triangle(14,  8, 13, 0x0),
-    gsSPVertex(mario_face_part_cap_on_dl_vertex_group6, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 5,  6,  7, 0x0,  6,  5,  8, 0x0),
-    gsSP2Triangles( 5,  7,  3, 0x0,  9, 10, 11, 0x0),
-    gsSP2Triangles( 6, 12,  7, 0x0, 13, 10,  9, 0x0),
-    gsSP2Triangles(14, 13,  9, 0x0, 15, 10, 13, 0x0),
-    gsSPVertex(mario_face_part_cap_on_dl_vertex_group7, 13, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
-    gsSP2Triangles( 1,  5,  3, 0x0,  2,  1,  4, 0x0),
-    gsSP2Triangles( 5,  6,  7, 0x0,  7,  6,  8, 0x0),
-    gsSP2Triangles( 7,  9,  3, 0x0,  5,  7,  3, 0x0),
-    gsSP2Triangles(10, 11, 12, 0x0, 12,  6, 10, 0x0),
-    gsSP1Triangle(12,  8,  6, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040116F8 - 0x04011870
-const Gfx mario_face_cap_dl[] = {
-    gsSPVertex(mario_face_cap_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  2,  4, 0x0),
-    gsSP2Triangles( 4,  2,  5, 0x0,  3,  0,  2, 0x0),
-    gsSP2Triangles( 2,  1,  6, 0x0,  6,  7,  2, 0x0),
-    gsSP2Triangles( 5,  2,  7, 0x0,  6,  1,  8, 0x0),
-    gsSP2Triangles( 8,  1,  0, 0x0,  6,  8,  9, 0x0),
-    gsSP2Triangles(10,  7,  6, 0x0,  9, 10,  6, 0x0),
-    gsSP2Triangles(11, 10,  9, 0x0,  9,  8, 11, 0x0),
-    gsSP2Triangles(11,  8, 12, 0x0,  0, 12,  8, 0x0),
-    gsSP2Triangles(13, 10, 11, 0x0, 11, 12, 14, 0x0),
-    gsSP2Triangles(15, 11, 14, 0x0, 13, 11, 15, 0x0),
-    gsSPVertex(mario_face_cap_dl_vertex_group2, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  0, 0x0),
-    gsSP2Triangles( 4,  5,  0, 0x0,  0,  6,  1, 0x0),
-    gsSP2Triangles( 7,  1,  8, 0x0,  8,  1,  6, 0x0),
-    gsSP2Triangles( 9, 10, 11, 0x0,  9, 12, 10, 0x0),
-    gsSP2Triangles(12,  9, 13, 0x0, 13,  9, 14, 0x0),
-    gsSPVertex(mario_face_cap_dl_vertex_group3, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  5,  7,  6, 0x0),
-    gsSP2Triangles( 8,  9,  5, 0x0,  0, 10,  1, 0x0),
-    gsSP2Triangles( 1, 10,  3, 0x0, 11, 10,  0, 0x0),
-    gsSP2Triangles(12,  3, 10, 0x0, 12, 10, 13, 0x0),
-    gsSP2Triangles(13, 10, 11, 0x0,  5,  9,  7, 0x0),
-    gsSP1Triangle( 7,  9, 14, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04011870 - 0x04011960
-const Gfx mario_face_back_hair_cap_on_dl[] = {
-    gsSPVertex(mario_face_back_hair_cap_on_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 5,  6,  7, 0x0,  5,  8,  6, 0x0),
-    gsSP2Triangles( 5,  4,  8, 0x0,  7,  3,  5, 0x0),
-    gsSP2Triangles( 0,  2,  6, 0x0,  6,  9,  7, 0x0),
-    gsSP2Triangles( 0,  6,  8, 0x0,  3,  7, 10, 0x0),
-    gsSP2Triangles( 1, 11, 12, 0x0, 12, 13, 14, 0x0),
-    gsSP2Triangles(11, 13, 12, 0x0,  1, 12,  2, 0x0),
-    gsSP2Triangles(14,  2, 12, 0x0, 15, 14, 13, 0x0),
-    gsSPVertex(mario_face_back_hair_cap_on_dl_vertex_group2, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  3,  2, 0x0),
-    gsSP2Triangles( 7,  8,  9, 0x0,  9, 10,  7, 0x0),
-    gsSP2Triangles( 2,  1, 11, 0x0,  2, 11,  7, 0x0),
-    gsSP2Triangles( 9, 12, 13, 0x0, 10,  9, 13, 0x0),
-    gsSP1Triangle( 8, 12,  9, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04011960 - 0x040119A0
-const Gfx mario_face_cap_on_dl[] = {
-    gsSPDisplayList(mario_face_part_cap_on_dl),
-    gsSPLight(&mario_red_lights_group.l, 1),
-    gsSPLight(&mario_red_lights_group.a, 2),
-    gsSPDisplayList(mario_face_cap_dl),
-    gsSPLight(&mario_brown2_lights_group.l, 1),
-    gsSPLight(&mario_brown2_lights_group.a, 2),
-    gsSPDisplayList(mario_face_back_hair_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x040119A0 - 0x04011A90
-const Gfx mario_cap_on_eyes_front[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_m_logo_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_front),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_eyes_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_mustache_cap_on_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_face_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04011A90 - 0x04011B80
-const Gfx mario_cap_on_eyes_half_closed[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_m_logo_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_half_closed),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_eyes_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_mustache_cap_on_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_face_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04011B80 - 0x04011C70
-const Gfx mario_cap_on_eyes_closed[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_m_logo_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_closed),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_eyes_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_mustache_cap_on_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_face_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04011C70 - 0x04011D60
-const Gfx mario_cap_on_eyes_right[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_m_logo_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_right),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_eyes_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_mustache_cap_on_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_face_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04011D60 - 0x04011E50
-const Gfx mario_cap_on_eyes_left[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_m_logo_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_left),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_eyes_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_mustache_cap_on_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_face_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04011E50 - 0x04011F40
-const Gfx mario_cap_on_eyes_up[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_m_logo_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_up),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_eyes_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_mustache_cap_on_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_face_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04011F40 - 0x04012030
-const Gfx mario_cap_on_eyes_down[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_m_logo_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_down),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_eyes_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_mustache_cap_on_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_face_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04012030 - 0x04012120
-const Gfx mario_cap_on_eyes_dead[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_m_logo_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_dead),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_eyes_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_mustache_cap_on_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_face_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04012120 - 0x04012160
-const Gfx mario_metal_cap_on_shared_dl[] = {
-    gsSPDisplayList(mario_m_logo_dl),
-    gsSPDisplayList(mario_eyes_cap_on_dl),
-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
-    gsSPDisplayList(mario_mustache_cap_on_dl),
-    gsSPDisplayList(mario_face_part_cap_on_dl),
-    gsSPDisplayList(mario_face_cap_dl),
-    gsSPDisplayList(mario_face_back_hair_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// Unreferenced light group
-UNUSED static const Lights1 mario_lights_unused1 = gdSPDefLights1(
-    0x3f, 0x30, 0x1e,
-    0xfe, 0xc1, 0x79, 0x28, 0x28, 0x28
-);
-
-// Unreferenced light group
-UNUSED static const Lights1 mario_lights_unused2 = gdSPDefLights1(
-    0x1c, 0x01, 0x00,
-    0x73, 0x06, 0x00, 0x28, 0x28, 0x28
-);
-
-// 0x04012190
-static const Vtx mario_eyes_cap_off_dl_vertex[] = {
-    {{{   104,     87,    -69}, 0, {  -160,    898}, {0x30, 0x5c, 0xb7, 0xff}}},
-    {{{    97,    103,    -24}, 0, {   256,    970}, {0x40, 0x5a, 0xc3, 0xff}}},
-    {{{   144,     83,    -66}, 0, {  -146,    460}, {0x19, 0x5b, 0xad, 0xff}}},
-    {{{   153,     33,     95}, 0, {  1362,    296}, {0x05, 0x38, 0x71, 0xff}}},
-    {{{   175,     91,     39}, 0, {   842,    112}, {0x01, 0x75, 0x2f, 0xff}}},
-    {{{   144,     83,     67}, 0, {  1108,    428}, {0x19, 0x5b, 0x53, 0xff}}},
-    {{{   145,    101,      0}, 0, {   480,    446}, {0x13, 0x7d, 0x00, 0xff}}},
-    {{{    97,    103,     25}, 0, {   724,    958}, {0x40, 0x5a, 0x3d, 0xff}}},
-    {{{   175,     91,    -38}, 0, {   106,    130}, {0xf5, 0x73, 0xcc, 0xff}}},
-    {{{   104,     87,     70}, 0, {  1138,    864}, {0x30, 0x5c, 0x49, 0xff}}},
-    {{{   153,     33,    -94}, 0, {  -404,    342}, {0xfe, 0x36, 0x8e, 0xff}}},
-    {{{   108,    105,      0}, 0, {   488,    854}, {0x69, 0x46, 0x00, 0xff}}},
-};
-
-// 0x04012250
-static const Vtx mario_hair_sideburn_cap_off_dl_vertex[] = {
-    {{{    42,      0,    103}, 0, {   968,   1192}, {0xc3, 0x05, 0x6e, 0xff}}},
-    {{{    85,    -23,    111}, 0, {  1238,    518}, {0x04, 0x58, 0x5a, 0xff}}},
-    {{{    96,     49,     94}, 0, {   -74,    726}, {0x10, 0x28, 0x77, 0xff}}},
-    {{{    44,     44,     97}, 0, {   196,   1366}, {0xda, 0x21, 0x74, 0xff}}},
-    {{{   153,     33,     95}, 0, {    22,    -68}, {0x05, 0x38, 0x71, 0xff}}},
-    {{{   120,    -11,    111}, 0, {   922,    122}, {0xff, 0x13, 0x7d, 0xff}}},
-    {{{    42,      0,   -102}, 0, {   842,   1210}, {0xc3, 0x05, 0x92, 0xff}}},
-    {{{    44,     44,    -96}, 0, {   118,   1334}, {0xda, 0x21, 0x8c, 0xff}}},
-    {{{    96,     49,    -93}, 0, {   -70,    700}, {0x11, 0x27, 0x89, 0xff}}},
-    {{{    85,    -23,   -110}, 0, {  1150,    582}, {0x06, 0x59, 0xa6, 0xff}}},
-    {{{   120,    -12,   -109}, 0, {   916,    184}, {0xff, 0x13, 0x83, 0xff}}},
-    {{{   153,     33,    -94}, 0, {    90,    -58}, {0xfe, 0x36, 0x8e, 0xff}}},
-};
-
-// 0x04012310
-static const Vtx mario_mustache_cap_off_dl_vertex_group1[] = {
-    {{{    92,     88,    -83}, 0, {   992,    -10}, {0x23, 0x59, 0xad, 0xff}}},
-    {{{    77,    108,    -33}, 0, {   360,    296}, {0x0e, 0x16, 0x84, 0xff}}},
-    {{{    97,    103,    -24}, 0, {   298,     20}, {0x40, 0x5a, 0xc3, 0xff}}},
-    {{{    48,     94,    -75}, 0, {   844,    640}, {0xd7, 0x60, 0xb9, 0xff}}},
-    {{{    44,     44,    -96}, 0, {  1272,    592}, {0xda, 0x21, 0x8c, 0xff}}},
-    {{{    52,    111,    -30}, 0, {   294,    656}, {0xa8, 0x32, 0xb5, 0xff}}},
-    {{{    92,     88,     84}, 0, {   948,     -8}, {0x23, 0x59, 0x53, 0xff}}},
-    {{{    77,    108,     34}, 0, {   330,    316}, {0x0e, 0x16, 0x7c, 0xff}}},
-    {{{    48,     94,     76}, 0, {   848,    630}, {0xd7, 0x60, 0x47, 0xff}}},
-    {{{    97,    103,     25}, 0, {   248,     50}, {0x40, 0x5a, 0x3d, 0xff}}},
-    {{{    52,    111,     31}, 0, {   292,    670}, {0xa8, 0x33, 0x4b, 0xff}}},
-    {{{    44,     44,     97}, 0, {  1276,    566}, {0xda, 0x21, 0x74, 0xff}}},
-    {{{     3,     54,     52}, 0, {   768,   1210}, {0x95, 0x1d, 0x3c, 0xff}}},
-    {{{    27,    100,     30}, 0, {   336,   1006}, {0xb1, 0x60, 0x16, 0xff}}},
-    {{{     3,     54,    -51}, 0, {   720,   1228}, {0x95, 0x1d, 0xc4, 0xff}}},
-    {{{    41,    109,      0}, 0, {   -30,    876}, {0x95, 0x44, 0x00, 0xff}}},
-};
-
-// 0x04012410
-static const Vtx mario_mustache_cap_off_dl_vertex_group2[] = {
-    {{{    41,    109,      0}, 0, {   -38,    852}, {0x95, 0x44, 0x00, 0xff}}},
-    {{{    52,    111,    -30}, 0, {   294,    656}, {0xa8, 0x32, 0xb5, 0xff}}},
-    {{{    27,    100,    -29}, 0, {   310,   1002}, {0xb1, 0x60, 0xea, 0xff}}},
-    {{{    48,     94,    -75}, 0, {   844,    640}, {0xd7, 0x60, 0xb9, 0xff}}},
-    {{{     3,     54,    -51}, 0, {   720,   1228}, {0x95, 0x1d, 0xc4, 0xff}}},
-};
-
-// 0x04012460
-static const Vtx mario_face_part_cap_off_dl_vertex_group1[] = {
-    {{{    97,    103,     25}, 0, {     0,      0}, {0x40, 0x5a, 0x3d, 0xff}}},
-    {{{   108,    105,      0}, 0, {     0,      0}, {0x69, 0x46, 0x00, 0xff}}},
-    {{{   117,    128,      0}, 0, {     0,      0}, {0x7a, 0xe1, 0x06, 0xff}}},
-    {{{    92,     88,    -83}, 0, {     0,      0}, {0x23, 0x59, 0xad, 0xff}}},
-    {{{    97,    103,    -24}, 0, {     0,      0}, {0x40, 0x5a, 0xc3, 0xff}}},
-    {{{   104,     87,    -69}, 0, {     0,      0}, {0x30, 0x5c, 0xb7, 0xff}}},
-    {{{    96,     49,    -93}, 0, {     0,      0}, {0x11, 0x27, 0x89, 0xff}}},
-    {{{    44,     44,    -96}, 0, {     0,      0}, {0xda, 0x21, 0x8c, 0xff}}},
-    {{{   102,    129,    -40}, 0, {     0,      0}, {0x50, 0xdc, 0xa6, 0xff}}},
-    {{{    77,    108,    -33}, 0, {     0,      0}, {0x0e, 0x16, 0x84, 0xff}}},
-    {{{   144,     83,    -66}, 0, {     0,      0}, {0x19, 0x5b, 0xad, 0xff}}},
-    {{{    44,     44,     97}, 0, {     0,      0}, {0xda, 0x21, 0x74, 0xff}}},
-    {{{    96,     49,     94}, 0, {     0,      0}, {0x10, 0x28, 0x77, 0xff}}},
-    {{{    92,     88,     84}, 0, {     0,      0}, {0x23, 0x59, 0x53, 0xff}}},
-    {{{   104,     87,     70}, 0, {     0,      0}, {0x30, 0x5c, 0x49, 0xff}}},
-};
-
-// 0x04012550
-static const Vtx mario_face_part_cap_off_dl_vertex_group2[] = {
-    {{{    -7,     62,      0}, 0, {     0,      0}, {0x85, 0x1d, 0x00, 0xff}}},
-    {{{     3,     54,     52}, 0, {     0,      0}, {0x95, 0x1d, 0x3c, 0xff}}},
-    {{{    27,    100,     30}, 0, {     0,      0}, {0xb1, 0x60, 0x16, 0xff}}},
-    {{{   144,     83,     67}, 0, {     0,      0}, {0x19, 0x5b, 0x53, 0xff}}},
-    {{{   104,     87,     70}, 0, {     0,      0}, {0x30, 0x5c, 0x49, 0xff}}},
-    {{{    96,     49,     94}, 0, {     0,      0}, {0x10, 0x28, 0x77, 0xff}}},
-    {{{   117,    128,      0}, 0, {     0,      0}, {0x7a, 0xe1, 0x06, 0xff}}},
-    {{{   102,    129,     41}, 0, {     0,      0}, {0x45, 0xd6, 0x61, 0xff}}},
-    {{{    97,    103,     25}, 0, {     0,      0}, {0x40, 0x5a, 0x3d, 0xff}}},
-    {{{    77,    108,     34}, 0, {     0,      0}, {0x0e, 0x16, 0x7c, 0xff}}},
-    {{{    44,     44,     97}, 0, {     0,      0}, {0xda, 0x21, 0x74, 0xff}}},
-    {{{    42,      0,    103}, 0, {     0,      0}, {0xc3, 0x05, 0x6e, 0xff}}},
-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
-    {{{    64,    -25,    135}, 0, {     0,      0}, {0xcc, 0xe5, 0x70, 0xff}}},
-    {{{    56,    -45,     77}, 0, {     0,      0}, {0xe3, 0xca, 0x6e, 0xff}}},
-    {{{    85,    -23,    111}, 0, {     0,      0}, {0x04, 0x58, 0x5a, 0xff}}},
-};
-
-// 0x04012650
-static const Vtx mario_face_part_cap_off_dl_vertex_group3[] = {
-    {{{    96,     49,     94}, 0, {     0,      0}, {0x10, 0x28, 0x77, 0xff}}},
-    {{{   153,     33,     95}, 0, {     0,      0}, {0x05, 0x38, 0x71, 0xff}}},
-    {{{   144,     83,     67}, 0, {     0,      0}, {0x19, 0x5b, 0x53, 0xff}}},
-    {{{    64,    -25,    135}, 0, {     0,      0}, {0xcc, 0xe5, 0x70, 0xff}}},
-    {{{    91,    -54,     86}, 0, {     0,      0}, {0xe9, 0xa9, 0x59, 0xff}}},
-    {{{   102,    -33,    135}, 0, {     0,      0}, {0x30, 0x18, 0x72, 0xff}}},
-    {{{    56,    -45,     77}, 0, {     0,      0}, {0xe3, 0xca, 0x6e, 0xff}}},
-    {{{    85,    -23,    111}, 0, {     0,      0}, {0x04, 0x58, 0x5a, 0xff}}},
-    {{{   120,    -11,    111}, 0, {     0,      0}, {0xff, 0x13, 0x7d, 0xff}}},
-    {{{    52,    111,    -30}, 0, {     0,      0}, {0xa8, 0x32, 0xb5, 0xff}}},
-    {{{    41,    109,      0}, 0, {     0,      0}, {0x95, 0x44, 0x00, 0xff}}},
-    {{{    32,    132,      0}, 0, {     0,      0}, {0x84, 0xe8, 0xf8, 0xff}}},
-    {{{    85,    -23,   -110}, 0, {     0,      0}, {0x06, 0x59, 0xa6, 0xff}}},
-    {{{    64,    -25,   -134}, 0, {     0,      0}, {0xcc, 0xe5, 0x90, 0xff}}},
-    {{{    42,      0,   -102}, 0, {     0,      0}, {0xc3, 0x05, 0x92, 0xff}}},
-};
-
-// 0x04012740
-static const Vtx mario_face_part_cap_off_dl_vertex_group4[] = {
-    {{{    27,    100,     30}, 0, {     0,      0}, {0xb1, 0x60, 0x16, 0xff}}},
-    {{{    27,    100,    -29}, 0, {     0,      0}, {0xb1, 0x60, 0xea, 0xff}}},
-    {{{    -7,     62,      0}, 0, {     0,      0}, {0x85, 0x1d, 0x00, 0xff}}},
-    {{{     3,     54,    -51}, 0, {     0,      0}, {0x95, 0x1d, 0xc4, 0xff}}},
-    {{{    41,    109,      0}, 0, {     0,      0}, {0x95, 0x44, 0x00, 0xff}}},
-    {{{   144,     83,    -66}, 0, {     0,      0}, {0x19, 0x5b, 0xad, 0xff}}},
-    {{{   153,     33,    -94}, 0, {     0,      0}, {0xfe, 0x36, 0x8e, 0xff}}},
-    {{{    96,     49,    -93}, 0, {     0,      0}, {0x11, 0x27, 0x89, 0xff}}},
-    {{{    42,      0,   -102}, 0, {     0,      0}, {0xc3, 0x05, 0x92, 0xff}}},
-    {{{    44,     44,    -96}, 0, {     0,      0}, {0xda, 0x21, 0x8c, 0xff}}},
-    {{{    64,    -25,   -134}, 0, {     0,      0}, {0xcc, 0xe5, 0x90, 0xff}}},
-    {{{   102,    -33,   -134}, 0, {     0,      0}, {0x32, 0x19, 0x8f, 0xff}}},
-    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xe8, 0xaa, 0xa7, 0xff}}},
-    {{{    85,    -23,   -110}, 0, {     0,      0}, {0x06, 0x59, 0xa6, 0xff}}},
-    {{{   120,    -12,   -109}, 0, {     0,      0}, {0xff, 0x13, 0x83, 0xff}}},
-};
-
-// 0x04012830
-static const Vtx mario_face_part_cap_off_dl_vertex_group5[] = {
-    {{{    33,    165,      0}, 0, {     0,      0}, {0x8f, 0x38, 0x09, 0xff}}},
-    {{{    60,    181,      0}, 0, {     0,      0}, {0xea, 0x7c, 0x00, 0xff}}},
-    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
-    {{{   102,    -33,   -134}, 0, {     0,      0}, {0x32, 0x19, 0x8f, 0xff}}},
-    {{{   120,    -12,   -109}, 0, {     0,      0}, {0xff, 0x13, 0x83, 0xff}}},
-    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xe8, 0xaa, 0xa7, 0xff}}},
-    {{{    56,    -45,    -76}, 0, {     0,      0}, {0xe3, 0xca, 0x92, 0xff}}},
-    {{{    64,    -25,   -134}, 0, {     0,      0}, {0xcc, 0xe5, 0x90, 0xff}}},
-    {{{    42,      0,   -102}, 0, {     0,      0}, {0xc3, 0x05, 0x92, 0xff}}},
-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
-    {{{     3,     54,    -51}, 0, {     0,      0}, {0x95, 0x1d, 0xc4, 0xff}}},
-    {{{    -7,     62,      0}, 0, {     0,      0}, {0x85, 0x1d, 0x00, 0xff}}},
-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
-    {{{    52,    164,     41}, 0, {     0,      0}, {0xc8, 0x3d, 0x5f, 0xff}}},
-    {{{    78,    163,     46}, 0, {     0,      0}, {0x03, 0x55, 0x5d, 0xff}}},
-    {{{   101,    179,      0}, 0, {     0,      0}, {0x27, 0x78, 0x00, 0xff}}},
-};
-
-// 0x04012930
-static const Vtx mario_face_part_cap_off_dl_vertex_group6[] = {
-    {{{   104,    162,     41}, 0, {     0,      0}, {0x52, 0x27, 0x58, 0xff}}},
-    {{{   101,    179,      0}, 0, {     0,      0}, {0x27, 0x78, 0x00, 0xff}}},
-    {{{    78,    163,     46}, 0, {     0,      0}, {0x03, 0x55, 0x5d, 0xff}}},
-    {{{    52,    164,     41}, 0, {     0,      0}, {0xc8, 0x3d, 0x5f, 0xff}}},
-    {{{    75,    130,     46}, 0, {     0,      0}, {0x00, 0xec, 0x7d, 0xff}}},
-    {{{   119,    161,      0}, 0, {     0,      0}, {0x79, 0x23, 0xf6, 0xff}}},
-    {{{   104,    162,    -40}, 0, {     0,      0}, {0x44, 0x31, 0xa1, 0xff}}},
-    {{{    78,    163,    -45}, 0, {     0,      0}, {0x03, 0x54, 0xa2, 0xff}}},
-    {{{    60,    181,      0}, 0, {     0,      0}, {0xea, 0x7c, 0x00, 0xff}}},
-    {{{    47,    131,     41}, 0, {     0,      0}, {0xb0, 0xe4, 0x5e, 0xff}}},
-    {{{    33,    165,      0}, 0, {     0,      0}, {0x8f, 0x38, 0x09, 0xff}}},
-    {{{   102,    129,     41}, 0, {     0,      0}, {0x45, 0xd6, 0x61, 0xff}}},
-    {{{    77,    108,     34}, 0, {     0,      0}, {0x0e, 0x16, 0x7c, 0xff}}},
-    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
-    {{{    32,    132,      0}, 0, {     0,      0}, {0x84, 0xe8, 0xf8, 0xff}}},
-    {{{   117,    128,      0}, 0, {     0,      0}, {0x7a, 0xe1, 0x06, 0xff}}},
-};
-
-// 0x04012A30
-static const Vtx mario_face_part_cap_off_dl_vertex_group7[] = {
-    {{{    52,    111,     31}, 0, {     0,      0}, {0xa8, 0x33, 0x4b, 0xff}}},
-    {{{    47,    131,     41}, 0, {     0,      0}, {0xb0, 0xe4, 0x5e, 0xff}}},
-    {{{    32,    132,      0}, 0, {     0,      0}, {0x84, 0xe8, 0xf8, 0xff}}},
-    {{{    77,    108,     34}, 0, {     0,      0}, {0x0e, 0x16, 0x7c, 0xff}}},
-    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
-    {{{    78,    163,    -45}, 0, {     0,      0}, {0x03, 0x54, 0xa2, 0xff}}},
-    {{{    75,    130,    -45}, 0, {     0,      0}, {0x00, 0xec, 0x83, 0xff}}},
-    {{{   104,    162,    -40}, 0, {     0,      0}, {0x44, 0x31, 0xa1, 0xff}}},
-    {{{    60,    181,      0}, 0, {     0,      0}, {0xea, 0x7c, 0x00, 0xff}}},
-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
-    {{{    31,    -84,      0}, 0, {     0,      0}, {0xa0, 0xae, 0x00, 0xff}}},
-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
-    {{{    41,    109,      0}, 0, {     0,      0}, {0x95, 0x44, 0x00, 0xff}}},
-    {{{    47,    131,    -40}, 0, {     0,      0}, {0xbc, 0xde, 0x9c, 0xff}}},
-    {{{   102,    129,    -40}, 0, {     0,      0}, {0x50, 0xdc, 0xa6, 0xff}}},
-    {{{    77,    108,    -33}, 0, {     0,      0}, {0x0e, 0x16, 0x84, 0xff}}},
-};
-
-// 0x04012B30
-static const Vtx mario_face_part_cap_off_dl_vertex_group8[] = {
-    {{{   102,    129,    -40}, 0, {     0,      0}, {0x50, 0xdc, 0xa6, 0xff}}},
-    {{{   104,    162,    -40}, 0, {     0,      0}, {0x44, 0x31, 0xa1, 0xff}}},
-    {{{   119,    161,      0}, 0, {     0,      0}, {0x79, 0x23, 0xf6, 0xff}}},
-    {{{   117,    128,      0}, 0, {     0,      0}, {0x7a, 0xe1, 0x06, 0xff}}},
-    {{{    32,    132,      0}, 0, {     0,      0}, {0x84, 0xe8, 0xf8, 0xff}}},
-    {{{    47,    131,    -40}, 0, {     0,      0}, {0xbc, 0xde, 0x9c, 0xff}}},
-    {{{    52,    111,    -30}, 0, {     0,      0}, {0xa8, 0x32, 0xb5, 0xff}}},
-    {{{    77,    108,    -33}, 0, {     0,      0}, {0x0e, 0x16, 0x84, 0xff}}},
-    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
-};
-
-// 0x04012BC0
-static const Vtx mario_face_hair_cap_off_dl_vertex_group1[] = {
-    {{{   153,     33,    -94}, 0, {     0,      0}, {0xfe, 0x36, 0x8e, 0xff}}},
-    {{{   200,     70,    -97}, 0, {     0,      0}, {0x07, 0x48, 0x99, 0xff}}},
-    {{{   182,     -9,   -115}, 0, {     0,      0}, {0x2f, 0xfe, 0x8b, 0xff}}},
-    {{{   153,     33,     95}, 0, {     0,      0}, {0x05, 0x38, 0x71, 0xff}}},
-    {{{   200,     75,     84}, 0, {     0,      0}, {0x10, 0x52, 0x5f, 0xff}}},
-    {{{   151,     72,     70}, 0, {     0,      0}, {0xe4, 0x5c, 0x51, 0xff}}},
-    {{{   120,    -11,    111}, 0, {     0,      0}, {0xff, 0x13, 0x7d, 0xff}}},
-    {{{   181,     -9,    116}, 0, {     0,      0}, {0x2d, 0x01, 0x76, 0xff}}},
-    {{{   175,     91,     39}, 0, {     0,      0}, {0x01, 0x75, 0x2f, 0xff}}},
-    {{{   209,     86,     60}, 0, {     0,      0}, {0x38, 0x60, 0x3c, 0xff}}},
-    {{{   227,     35,     75}, 0, {     0,      0}, {0x6d, 0x12, 0x3d, 0xff}}},
-    {{{   175,     91,    -38}, 0, {     0,      0}, {0xf5, 0x73, 0xcc, 0xff}}},
-    {{{   151,     72,    -68}, 0, {     0,      0}, {0xd6, 0x5b, 0xb3, 0xff}}},
-    {{{   221,     35,    -73}, 0, {     0,      0}, {0x71, 0x03, 0xc8, 0xff}}},
-    {{{   211,     91,    -71}, 0, {     0,      0}, {0x31, 0x46, 0xa3, 0xff}}},
-    {{{   227,    -14,    -58}, 0, {     0,      0}, {0x72, 0xf1, 0xcc, 0xff}}},
-};
-
-// 0x04012CC0
-static const Vtx mario_face_hair_cap_off_dl_vertex_group2[] = {
-    {{{   120,    -12,   -109}, 0, {     0,      0}, {0xff, 0x13, 0x83, 0xff}}},
-    {{{   153,     33,    -94}, 0, {     0,      0}, {0xfe, 0x36, 0x8e, 0xff}}},
-    {{{   182,     -9,   -115}, 0, {     0,      0}, {0x2f, 0xfe, 0x8b, 0xff}}},
-    {{{   227,    -14,     59}, 0, {     0,      0}, {0x72, 0xec, 0x32, 0xff}}},
-    {{{   241,    -34,      0}, 0, {     0,      0}, {0x7a, 0xe0, 0x00, 0xff}}},
-    {{{   237,     64,      0}, 0, {     0,      0}, {0x7e, 0xf9, 0xff, 0xff}}},
-    {{{   189,   -102,     73}, 0, {     0,      0}, {0x50, 0xbb, 0x44, 0xff}}},
-    {{{   181,     -9,    116}, 0, {     0,      0}, {0x2d, 0x01, 0x76, 0xff}}},
-    {{{   227,     35,     75}, 0, {     0,      0}, {0x6d, 0x12, 0x3d, 0xff}}},
-    {{{   189,   -102,    -71}, 0, {     0,      0}, {0x50, 0xb9, 0xbd, 0xff}}},
-    {{{   227,    -14,    -58}, 0, {     0,      0}, {0x72, 0xf1, 0xcc, 0xff}}},
-    {{{   200,   -117,      0}, 0, {     0,      0}, {0x3f, 0x93, 0x00, 0xff}}},
-    {{{   221,     35,    -73}, 0, {     0,      0}, {0x71, 0x03, 0xc8, 0xff}}},
-    {{{   248,    104,    -43}, 0, {     0,      0}, {0x76, 0x2c, 0xf3, 0xff}}},
-    {{{   231,     81,     33}, 0, {     0,      0}, {0x71, 0x27, 0x2a, 0xff}}},
-};
-
-// 0x04012DB0
-static const Vtx mario_face_hair_cap_off_dl_vertex_group3[] = {
-    {{{   221,     35,    -73}, 0, {     0,      0}, {0x71, 0x03, 0xc8, 0xff}}},
-    {{{   211,     91,    -71}, 0, {     0,      0}, {0x31, 0x46, 0xa3, 0xff}}},
-    {{{   232,     69,    -34}, 0, {     0,      0}, {0x72, 0xe4, 0xd1, 0xff}}},
-    {{{   237,     64,      0}, 0, {     0,      0}, {0x7e, 0xf9, 0xff, 0xff}}},
-    {{{   175,     91,    -38}, 0, {     0,      0}, {0xf5, 0x73, 0xcc, 0xff}}},
-    {{{   201,    125,    -13}, 0, {     0,      0}, {0xe4, 0x7b, 0xfb, 0xff}}},
-    {{{   160,     96,      0}, 0, {     0,      0}, {0xb7, 0x67, 0xfe, 0xff}}},
-    {{{   189,   -102,    -71}, 0, {     0,      0}, {0x50, 0xb9, 0xbd, 0xff}}},
-    {{{   116,   -124,    -67}, 0, {     0,      0}, {0xfc, 0x8f, 0xc8, 0xff}}},
-    {{{   145,    -84,   -104}, 0, {     0,      0}, {0xef, 0xcf, 0x8d, 0xff}}},
-    {{{   182,     -9,   -115}, 0, {     0,      0}, {0x2f, 0xfe, 0x8b, 0xff}}},
-    {{{   200,   -117,      0}, 0, {     0,      0}, {0x3f, 0x93, 0x00, 0xff}}},
-    {{{   189,   -102,     73}, 0, {     0,      0}, {0x50, 0xbb, 0x44, 0xff}}},
-    {{{   116,   -126,     68}, 0, {     0,      0}, {0xfb, 0x8f, 0x38, 0xff}}},
-    {{{   119,   -134,      0}, 0, {     0,      0}, {0xe8, 0x84, 0xff, 0xff}}},
-    {{{   145,    -83,    105}, 0, {     0,      0}, {0xef, 0xd0, 0x73, 0xff}}},
-};
-
-// 0x04012EB0
-static const Vtx mario_face_hair_cap_off_dl_vertex_group4[] = {
-    {{{   145,    -83,    105}, 0, {     0,      0}, {0xef, 0xd0, 0x73, 0xff}}},
-    {{{   189,   -102,     73}, 0, {     0,      0}, {0x50, 0xbb, 0x44, 0xff}}},
-    {{{   181,     -9,    116}, 0, {     0,      0}, {0x2d, 0x01, 0x76, 0xff}}},
-    {{{   201,    125,    -13}, 0, {     0,      0}, {0xe4, 0x7b, 0xfb, 0xff}}},
-    {{{   209,     86,     60}, 0, {     0,      0}, {0x38, 0x60, 0x3c, 0xff}}},
-    {{{   248,    104,    -43}, 0, {     0,      0}, {0x76, 0x2c, 0xf3, 0xff}}},
-    {{{   231,     81,     33}, 0, {     0,      0}, {0x71, 0x27, 0x2a, 0xff}}},
-    {{{   232,     69,    -34}, 0, {     0,      0}, {0x72, 0xe4, 0xd1, 0xff}}},
-    {{{   211,     91,    -71}, 0, {     0,      0}, {0x31, 0x46, 0xa3, 0xff}}},
-    {{{   237,     64,      0}, 0, {     0,      0}, {0x7e, 0xf9, 0xff, 0xff}}},
-    {{{   227,     35,     75}, 0, {     0,      0}, {0x6d, 0x12, 0x3d, 0xff}}},
-    {{{   175,     91,     39}, 0, {     0,      0}, {0x01, 0x75, 0x2f, 0xff}}},
-    {{{   160,     96,      0}, 0, {     0,      0}, {0xb7, 0x67, 0xfe, 0xff}}},
-    {{{    64,   -103,     52}, 0, {     0,      0}, {0xf3, 0x8b, 0x2e, 0xff}}},
-    {{{    64,   -103,    -51}, 0, {     0,      0}, {0xf3, 0x8b, 0xd2, 0xff}}},
-    {{{   119,   -134,      0}, 0, {     0,      0}, {0xe8, 0x84, 0xff, 0xff}}},
-};
-
-// 0x04012FB0
-static const Vtx mario_face_hair_cap_off_dl_vertex_group5[] = {
-    {{{   145,    -83,    105}, 0, {     0,      0}, {0xef, 0xd0, 0x73, 0xff}}},
-    {{{   181,     -9,    116}, 0, {     0,      0}, {0x2d, 0x01, 0x76, 0xff}}},
-    {{{   120,    -11,    111}, 0, {     0,      0}, {0xff, 0x13, 0x7d, 0xff}}},
-    {{{    64,   -103,    -51}, 0, {     0,      0}, {0xf3, 0x8b, 0xd2, 0xff}}},
-    {{{   116,   -124,    -67}, 0, {     0,      0}, {0xfc, 0x8f, 0xc8, 0xff}}},
-    {{{   119,   -134,      0}, 0, {     0,      0}, {0xe8, 0x84, 0xff, 0xff}}},
-    {{{   145,    -84,   -104}, 0, {     0,      0}, {0xef, 0xcf, 0x8d, 0xff}}},
-    {{{   182,     -9,   -115}, 0, {     0,      0}, {0x2f, 0xfe, 0x8b, 0xff}}},
-    {{{   120,    -12,   -109}, 0, {     0,      0}, {0xff, 0x13, 0x83, 0xff}}},
-    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xe8, 0xaa, 0xa7, 0xff}}},
-    {{{    64,   -103,     52}, 0, {     0,      0}, {0xf3, 0x8b, 0x2e, 0xff}}},
-    {{{   116,   -126,     68}, 0, {     0,      0}, {0xfb, 0x8f, 0x38, 0xff}}},
-    {{{    91,    -54,     86}, 0, {     0,      0}, {0xe9, 0xa9, 0x59, 0xff}}},
-    {{{    31,    -84,      0}, 0, {     0,      0}, {0xa0, 0xae, 0x00, 0xff}}},
-    {{{    36,   -116,     36}, 0, {     0,      0}, {0xfb, 0x8e, 0xc9, 0xff}}},
-    {{{     9,    -88,     59}, 0, {     0,      0}, {0x87, 0xdf, 0x0b, 0xff}}},
-};
-
-// 0x040130B0
-static const Vtx mario_face_hair_cap_off_dl_vertex_group6[] = {
-    {{{    64,   -103,     52}, 0, {     0,      0}, {0xf3, 0x8b, 0x2e, 0xff}}},
-    {{{    91,    -54,     86}, 0, {     0,      0}, {0xe9, 0xa9, 0x59, 0xff}}},
-    {{{    56,    -45,     77}, 0, {     0,      0}, {0xe3, 0xca, 0x6e, 0xff}}},
-    {{{    31,    -84,      0}, 0, {     0,      0}, {0xa0, 0xae, 0x00, 0xff}}},
-    {{{    36,   -116,     36}, 0, {     0,      0}, {0xfb, 0x8e, 0xc9, 0xff}}},
-    {{{    58,   -114,     60}, 0, {     0,      0}, {0x57, 0xb4, 0x32, 0xff}}},
-    {{{    36,   -116,    -35}, 0, {     0,      0}, {0xfb, 0x8e, 0x37, 0xff}}},
-    {{{    64,   -103,    -51}, 0, {     0,      0}, {0xf3, 0x8b, 0xd2, 0xff}}},
-    {{{    56,    -45,    -76}, 0, {     0,      0}, {0xe3, 0xca, 0x92, 0xff}}},
-    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xe8, 0xaa, 0xa7, 0xff}}},
-    {{{    58,   -114,    -59}, 0, {     0,      0}, {0x57, 0xb4, 0xce, 0xff}}},
-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
-    {{{     9,    -88,    -58}, 0, {     0,      0}, {0x87, 0xdf, 0xf5, 0xff}}},
-    {{{     9,    -88,     59}, 0, {     0,      0}, {0x87, 0xdf, 0x0b, 0xff}}},
-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
-    {{{    35,   -120,    -67}, 0, {     0,      0}, {0xda, 0x94, 0xcb, 0xff}}},
-};
-
-// 0x040131B0
-static const Vtx mario_face_hair_cap_off_dl_vertex_group7[] = {
-    {{{    36,   -116,     36}, 0, {     0,      0}, {0xfb, 0x8e, 0xc9, 0xff}}},
-    {{{    35,   -120,     68}, 0, {     0,      0}, {0xda, 0x94, 0x35, 0xff}}},
-    {{{     9,    -88,     59}, 0, {     0,      0}, {0x87, 0xdf, 0x0b, 0xff}}},
-    {{{    58,   -114,     60}, 0, {     0,      0}, {0x57, 0xb4, 0x32, 0xff}}},
-    {{{    35,   -120,    -67}, 0, {     0,      0}, {0xda, 0x94, 0xcb, 0xff}}},
-    {{{    31,    -85,    -86}, 0, {     0,      0}, {0xdb, 0xfd, 0x87, 0xff}}},
-    {{{    58,   -114,    -59}, 0, {     0,      0}, {0x57, 0xb4, 0xce, 0xff}}},
-    {{{     9,    -88,    -58}, 0, {     0,      0}, {0x87, 0xdf, 0xf5, 0xff}}},
-    {{{    56,    -45,    -76}, 0, {     0,      0}, {0xe3, 0xca, 0x92, 0xff}}},
-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
-    {{{    31,    -85,     87}, 0, {     0,      0}, {0xdb, 0xfd, 0x79, 0xff}}},
-    {{{    56,    -45,     77}, 0, {     0,      0}, {0xe3, 0xca, 0x6e, 0xff}}},
-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
-};
-
-// 0x04013280
-static const Vtx mario_face_part_cap_off_dl_vertex_group9[] = {
-    {{{    44,     44,     97}, 0, {     0,      0}, {0xda, 0x21, 0x74, 0xff}}},
-    {{{    48,     94,     76}, 0, {     0,      0}, {0xd7, 0x60, 0x47, 0xff}}},
-    {{{     3,     54,     52}, 0, {     0,      0}, {0x95, 0x1d, 0x3c, 0xff}}},
-};
-
-// 0x040132B0 - 0x04013318
-const Gfx mario_eyes_cap_off_dl[] = {
-    gsSPVertex(mario_eyes_cap_off_dl_vertex, 12, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 4,  6,  7, 0x0,  8,  6,  4, 0x0),
-    gsSP2Triangles( 5,  4,  7, 0x0,  7,  9,  5, 0x0),
-    gsSP2Triangles( 2,  8, 10, 0x0,  1,  6,  8, 0x0),
-    gsSP2Triangles( 1,  8,  2, 0x0,  6, 11,  7, 0x0),
-    gsSP1Triangle( 1, 11,  6, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04013318 - 0x040133A8
-const Gfx mario_mustache_cap_off_dl[] = {
-    gsSPVertex(mario_mustache_cap_off_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
-    gsSP2Triangles( 0,  4,  3, 0x0,  3,  5,  1, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  7,  6,  9, 0x0),
-    gsSP2Triangles( 7, 10,  8, 0x0,  8, 11,  6, 0x0),
-    gsSP2Triangles(12,  8, 13, 0x0, 13,  8, 10, 0x0),
-    gsSP2Triangles(14,  3,  4, 0x0, 13, 10, 15, 0x0),
-    gsSPVertex(mario_mustache_cap_off_dl_vertex_group2, 5, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  2, 0x0),
-    gsSP1Triangle( 2,  3,  4, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040133A8 - 0x040133F8
-const Gfx mario_hair_sideburn_cap_off_dl[] = {
-    gsSPVertex(mario_hair_sideburn_cap_off_dl_vertex, 12, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
-    gsSP2Triangles( 4,  2,  5, 0x0,  1,  5,  2, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  8,  9,  6, 0x0),
-    gsSP2Triangles( 9,  8, 10, 0x0, 10,  8, 11, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040133F8 - 0x040136D0
-const Gfx mario_face_part_cap_off_dl[] = {
-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group1, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  3,  5, 0x0,  3,  6,  7, 0x0),
-    gsSP2Triangles( 4,  8,  2, 0x0,  8,  4,  9, 0x0),
-    gsSP2Triangles( 2,  1,  4, 0x0,  6,  5, 10, 0x0),
-    gsSP2Triangles(11, 12, 13, 0x0, 14, 13, 12, 0x0),
-    gsSP1Triangle(13, 14,  0, 0x0),
-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group2, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  9,  8,  7, 0x0),
-    gsSP2Triangles(10,  1, 11, 0x0,  1, 12, 11, 0x0),
-    gsSP2Triangles(12,  1,  0, 0x0, 13, 11, 14, 0x0),
-    gsSP2Triangles(12, 14, 11, 0x0, 11, 13, 15, 0x0),
-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group3, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 3,  6,  4, 0x0,  3,  5,  7, 0x0),
-    gsSP2Triangles( 8,  7,  5, 0x0,  4,  8,  5, 0x0),
-    gsSP2Triangles( 9, 10, 11, 0x0, 12, 13, 14, 0x0),
-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group4, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  2, 0x0),
-    gsSP2Triangles( 4,  1,  0, 0x0,  5,  6,  7, 0x0),
-    gsSP2Triangles( 8,  3,  9, 0x0, 10, 11, 12, 0x0),
-    gsSP2Triangles(13, 11, 10, 0x0, 11, 13, 14, 0x0),
-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group5, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  5, 0x0,  8,  7,  6, 0x0),
-    gsSP2Triangles( 8,  9, 10, 0x0,  8,  6,  9, 0x0),
-    gsSP2Triangles( 9, 11, 10, 0x0,  9, 12, 11, 0x0),
-    gsSP2Triangles( 0, 13,  1, 0x0, 13, 14,  1, 0x0),
-    gsSP1Triangle( 1, 14, 15, 0x0),
-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group6, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  2, 0x0),
-    gsSP2Triangles( 2,  4,  0, 0x0,  1,  0,  5, 0x0),
-    gsSP2Triangles( 1,  6,  7, 0x0,  1,  5,  6, 0x0),
-    gsSP2Triangles( 7,  8,  1, 0x0,  3,  9,  4, 0x0),
-    gsSP2Triangles( 9,  3, 10, 0x0,  4, 11,  0, 0x0),
-    gsSP2Triangles(11,  4, 12, 0x0,  4,  9, 12, 0x0),
-    gsSP2Triangles(10, 13, 14, 0x0,  0, 11, 15, 0x0),
-    gsSP2Triangles( 5,  0, 15, 0x0, 14,  9, 10, 0x0),
-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group7, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  0,  3, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  6,  5,  7, 0x0),
-    gsSP2Triangles( 8,  5,  4, 0x0,  9, 10, 11, 0x0),
-    gsSP2Triangles( 2, 12,  0, 0x0, 13,  4,  6, 0x0),
-    gsSP2Triangles( 6, 14, 15, 0x0,  6,  7, 14, 0x0),
-    gsSP1Triangle(13,  6, 15, 0x0),
-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group8, 9, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  6,  5, 0x0),
-    gsSP1Triangle( 8,  5,  4, 0x0),
-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group9, 3, 0),
-    gsSP1Triangle( 0,  1,  2, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040136D0 - 0x040139C0
-const Gfx mario_face_hair_cap_off_dl[] = {
-    gsSPVertex(mario_face_hair_cap_off_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 3,  6,  7, 0x0,  3,  7,  4, 0x0),
-    gsSP2Triangles( 8,  4,  9, 0x0,  7, 10,  4, 0x0),
-    gsSP2Triangles( 4, 10,  9, 0x0,  8,  5,  4, 0x0),
-    gsSP2Triangles(11,  1, 12, 0x0,  1,  0, 12, 0x0),
-    gsSP2Triangles( 1, 13,  2, 0x0,  1, 11, 14, 0x0),
-    gsSP2Triangles(13,  1, 14, 0x0, 15,  2, 13, 0x0),
-    gsSPVertex(mario_face_hair_cap_off_dl_vertex_group2, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 4,  3,  6, 0x0,  3,  7,  6, 0x0),
-    gsSP2Triangles( 8,  7,  3, 0x0,  5,  8,  3, 0x0),
-    gsSP2Triangles( 9, 10,  4, 0x0, 11,  4,  6, 0x0),
-    gsSP2Triangles(11,  9,  4, 0x0, 10,  5,  4, 0x0),
-    gsSP2Triangles(10, 12,  5, 0x0,  5, 13, 14, 0x0),
-    gsSP2Triangles( 8,  5, 14, 0x0,  9,  2, 10, 0x0),
-    gsSPVertex(mario_face_hair_cap_off_dl_vertex_group3, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
-    gsSP2Triangles( 1,  4,  5, 0x0,  4,  6,  5, 0x0),
-    gsSP2Triangles( 7,  8,  9, 0x0, 10,  7,  9, 0x0),
-    gsSP2Triangles( 8,  7, 11, 0x0, 11, 12, 13, 0x0),
-    gsSP2Triangles(14, 11, 13, 0x0, 14,  8, 11, 0x0),
-    gsSP1Triangle(15, 13, 12, 0x0),
-    gsSPVertex(mario_face_hair_cap_off_dl_vertex_group4, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 4,  6,  5, 0x0,  7,  8,  5, 0x0),
-    gsSP2Triangles( 8,  3,  5, 0x0,  9,  7,  5, 0x0),
-    gsSP2Triangles(10,  6,  4, 0x0,  4,  3, 11, 0x0),
-    gsSP2Triangles( 3, 12, 11, 0x0, 13, 14, 15, 0x0),
-    gsSPVertex(mario_face_hair_cap_off_dl_vertex_group5, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  4,  3, 0x0,  7,  6,  8, 0x0),
-    gsSP2Triangles( 9,  6,  3, 0x0,  6,  9,  8, 0x0),
-    gsSP2Triangles(10, 11,  0, 0x0, 12,  0,  2, 0x0),
-    gsSP2Triangles(10,  0, 12, 0x0, 10,  5, 11, 0x0),
-    gsSP2Triangles(13, 14, 15, 0x0, 13,  3, 10, 0x0),
-    gsSPVertex(mario_face_hair_cap_off_dl_vertex_group6, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  4, 0x0),
-    gsSP2Triangles( 5,  0,  2, 0x0,  5,  4,  0, 0x0),
-    gsSP2Triangles( 3,  6,  7, 0x0,  8,  9,  7, 0x0),
-    gsSP2Triangles( 6, 10,  7, 0x0,  8,  7, 10, 0x0),
-    gsSP2Triangles( 3, 11, 12, 0x0, 13, 14,  3, 0x0),
-    gsSP2Triangles(12,  6,  3, 0x0,  6, 15, 10, 0x0),
-    gsSP1Triangle(12, 15,  6, 0x0),
-    gsSPVertex(mario_face_hair_cap_off_dl_vertex_group7, 13, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  5,  4,  7, 0x0),
-    gsSP2Triangles( 6,  5,  8, 0x0,  9,  8,  5, 0x0),
-    gsSP2Triangles( 5,  7,  9, 0x0, 10, 11, 12, 0x0),
-    gsSP2Triangles(11, 10,  3, 0x0, 12,  2, 10, 0x0),
-    gsSP2Triangles( 2,  1, 10, 0x0, 10,  1,  3, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040139C0 - 0x040139E8
-const Gfx mario_face_cap_off_dl[] = {
-    gsSPDisplayList(mario_face_part_cap_off_dl),
-    gsSPLight(&mario_brown2_lights_group.l, 1),
-    gsSPLight(&mario_brown2_lights_group.a, 2),
-    gsSPDisplayList(mario_face_hair_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x040139E8 - 0x04013AB8
-const Gfx mario_cap_off_eyes_front[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_front),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_eyes_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_mustache_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_face_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04013AB8 - 0x04013B88
-const Gfx mario_cap_off_eyes_half_closed[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_half_closed),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_eyes_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_mustache_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_face_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04013B88 - 0x04013C58
-const Gfx mario_cap_off_eyes_closed[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_closed),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_eyes_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_mustache_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_face_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04013C58 - 0x04013D28
-const Gfx mario_cap_off_eyes_right[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_right),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_eyes_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_mustache_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_face_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04013D28 - 0x04013DF8
-const Gfx mario_cap_off_eyes_left[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_left),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_eyes_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_mustache_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_face_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04013DF8 - 0x04013EC8
-const Gfx mario_cap_off_eyes_up[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_up),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_eyes_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_mustache_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_face_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04013EC8 - 0x04013F98
-const Gfx mario_cap_off_eyes_down[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_down),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_eyes_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_mustache_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_face_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04013F98 - 0x04014068
-const Gfx mario_cap_off_eyes_dead[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_dead),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_eyes_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_mustache_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_face_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04014068 - 0x04014098
-const Gfx mario_metal_cap_off_shared_dl[] = {
-    gsSPDisplayList(mario_eyes_cap_off_dl),
-    gsSPDisplayList(mario_mustache_cap_off_dl),
-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
-    gsSPDisplayList(mario_face_part_cap_off_dl),
-    gsSPDisplayList(mario_face_hair_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04014098
-static const Vtx mario_medium_poly_butt_dl_vertex_group1[] = {
-    {{{     0,     78,     37}, 0, {     0,      0}, {0xc7, 0x6f, 0x14, 0x00}}},
-    {{{    44,     80,     46}, 0, {     0,      0}, {0x36, 0x68, 0x2e, 0x00}}},
-    {{{    43,     80,    -45}, 0, {     0,      0}, {0x2c, 0x70, 0xdb, 0x00}}},
-    {{{    -6,    -84,     50}, 0, {     0,      0}, {0xd5, 0x90, 0x26, 0x00}}},
-    {{{    41,    -86,    -45}, 0, {     0,      0}, {0x35, 0x90, 0xe7, 0x00}}},
-    {{{    41,    -86,     45}, 0, {     0,      0}, {0x44, 0x9b, 0x1f, 0x00}}},
-    {{{   -33,    -45,    -31}, 0, {     0,      0}, {0x87, 0xe9, 0xe3, 0x00}}},
-    {{{   -33,    -45,     31}, 0, {     0,      0}, {0x86, 0xe5, 0x15, 0x00}}},
-    {{{   -32,     43,    -22}, 0, {     0,      0}, {0x8b, 0x2d, 0xf0, 0x00}}},
-    {{{    -2,     41,     95}, 0, {     0,      0}, {0xba, 0x3b, 0x57, 0x00}}},
-    {{{    -5,    -45,     97}, 0, {     0,      0}, {0xc7, 0xde, 0x6b, 0x00}}},
-    {{{    44,     36,     95}, 0, {     0,      0}, {0x3d, 0x22, 0x69, 0x00}}},
-    {{{    -5,    -45,    -97}, 0, {     0,      0}, {0xc7, 0xdd, 0x95, 0x00}}},
-    {{{    -2,     41,    -95}, 0, {     0,      0}, {0xba, 0x3b, 0xaa, 0x00}}},
-    {{{    44,     35,    -96}, 0, {     0,      0}, {0x3c, 0x22, 0x96, 0x00}}},
-    {{{    -6,    -84,    -50}, 0, {     0,      0}, {0xc1, 0x9a, 0xd9, 0x00}}},
-};
-
-// 0x04014198
-static const Vtx mario_medium_poly_butt_dl_vertex_group2[] = {
-    {{{    -2,     41,     95}, 0, {     0,      0}, {0xba, 0x3b, 0x57, 0x00}}},
-    {{{     0,     78,     37}, 0, {     0,      0}, {0xc7, 0x6f, 0x14, 0x00}}},
-    {{{   -32,     43,     22}, 0, {     0,      0}, {0x8c, 0x2c, 0x18, 0x00}}},
-    {{{     0,     78,    -37}, 0, {     0,      0}, {0xc5, 0x6c, 0xe2, 0x00}}},
-    {{{    -2,     41,    -95}, 0, {     0,      0}, {0xba, 0x3b, 0xaa, 0x00}}},
-    {{{   -32,     43,    -22}, 0, {     0,      0}, {0x8b, 0x2d, 0xf0, 0x00}}},
-    {{{   -33,    -45,     31}, 0, {     0,      0}, {0x86, 0xe5, 0x15, 0x00}}},
-    {{{   -33,    -45,    -31}, 0, {     0,      0}, {0x87, 0xe9, 0xe3, 0x00}}},
-    {{{    -6,    -84,    -50}, 0, {     0,      0}, {0xc1, 0x9a, 0xd9, 0x00}}},
-    {{{    43,    -48,    -97}, 0, {     0,      0}, {0x3b, 0xc1, 0xa4, 0x00}}},
-    {{{    41,    -86,    -45}, 0, {     0,      0}, {0x35, 0x90, 0xe7, 0x00}}},
-    {{{    -6,    -84,     50}, 0, {     0,      0}, {0xd5, 0x90, 0x26, 0x00}}},
-    {{{    41,    -86,     45}, 0, {     0,      0}, {0x44, 0x9b, 0x1f, 0x00}}},
-    {{{    43,    -48,     97}, 0, {     0,      0}, {0x3b, 0xc2, 0x5c, 0x00}}},
-    {{{    44,     36,     95}, 0, {     0,      0}, {0x3d, 0x22, 0x69, 0x00}}},
-    {{{    44,     80,     46}, 0, {     0,      0}, {0x36, 0x68, 0x2e, 0x00}}},
-};
-
-// 0x04014298
-static const Vtx mario_medium_poly_butt_dl_vertex_group3[] = {
-    {{{    -2,     41,    -95}, 0, {     0,      0}, {0xba, 0x3b, 0xaa, 0x00}}},
-    {{{    43,     80,    -45}, 0, {     0,      0}, {0x2c, 0x70, 0xdb, 0x00}}},
-    {{{    44,     35,    -96}, 0, {     0,      0}, {0x3c, 0x22, 0x96, 0x00}}},
-    {{{     0,     78,    -37}, 0, {     0,      0}, {0xc5, 0x6c, 0xe2, 0x00}}},
-    {{{    44,     80,     46}, 0, {     0,      0}, {0x36, 0x68, 0x2e, 0x00}}},
-    {{{     0,     78,     37}, 0, {     0,      0}, {0xc7, 0x6f, 0x14, 0x00}}},
-    {{{    -2,     41,     95}, 0, {     0,      0}, {0xba, 0x3b, 0x57, 0x00}}},
-    {{{   -32,     43,    -22}, 0, {     0,      0}, {0x8b, 0x2d, 0xf0, 0x00}}},
-    {{{    43,    -48,     97}, 0, {     0,      0}, {0x3b, 0xc2, 0x5c, 0x00}}},
-    {{{    -5,    -45,     97}, 0, {     0,      0}, {0xc7, 0xde, 0x6b, 0x00}}},
-    {{{    -6,    -84,     50}, 0, {     0,      0}, {0xd5, 0x90, 0x26, 0x00}}},
-    {{{    -6,    -84,    -50}, 0, {     0,      0}, {0xc1, 0x9a, 0xd9, 0x00}}},
-    {{{    -5,    -45,    -97}, 0, {     0,      0}, {0xc7, 0xdd, 0x95, 0x00}}},
-    {{{    43,    -48,    -97}, 0, {     0,      0}, {0x3b, 0xc1, 0xa4, 0x00}}},
-    {{{   -33,    -45,     31}, 0, {     0,      0}, {0x86, 0xe5, 0x15, 0x00}}},
-    {{{   -33,    -45,    -31}, 0, {     0,      0}, {0x87, 0xe9, 0xe3, 0x00}}},
-};
-
-// 0x04014398
-static const Vtx mario_medium_poly_butt_dl_vertex_group4[] = {
-    {{{    -5,    -45,     97}, 0, {     0,      0}, {0xc7, 0xde, 0x6b, 0x00}}},
-    {{{    43,    -48,     97}, 0, {     0,      0}, {0x3b, 0xc2, 0x5c, 0x00}}},
-    {{{    44,     36,     95}, 0, {     0,      0}, {0x3d, 0x22, 0x69, 0x00}}},
-    {{{   -33,    -45,     31}, 0, {     0,      0}, {0x86, 0xe5, 0x15, 0x00}}},
-    {{{   -32,     43,     22}, 0, {     0,      0}, {0x8c, 0x2c, 0x18, 0x00}}},
-    {{{   -32,     43,    -22}, 0, {     0,      0}, {0x8b, 0x2d, 0xf0, 0x00}}},
-    {{{    -6,    -84,     50}, 0, {     0,      0}, {0xd5, 0x90, 0x26, 0x00}}},
-    {{{    -6,    -84,    -50}, 0, {     0,      0}, {0xc1, 0x9a, 0xd9, 0x00}}},
-    {{{    41,    -86,    -45}, 0, {     0,      0}, {0x35, 0x90, 0xe7, 0x00}}},
-    {{{    43,     80,    -45}, 0, {     0,      0}, {0x2c, 0x70, 0xdb, 0x00}}},
-    {{{     0,     78,    -37}, 0, {     0,      0}, {0xc5, 0x6c, 0xe2, 0x00}}},
-    {{{     0,     78,     37}, 0, {     0,      0}, {0xc7, 0x6f, 0x14, 0x00}}},
-    {{{    85,     -5,      0}, 0, {     0,      0}, {0x7f, 0xfe, 0x00, 0x00}}},
-    {{{    44,     35,    -96}, 0, {     0,      0}, {0x3c, 0x22, 0x96, 0x00}}},
-    {{{    43,    -48,    -97}, 0, {     0,      0}, {0x3b, 0xc1, 0xa4, 0x00}}},
-    {{{    41,    -86,     45}, 0, {     0,      0}, {0x44, 0x9b, 0x1f, 0x00}}},
-};
-
-// 0x04014498
-static const Vtx mario_medium_poly_butt_dl_vertex_group5[] = {
-    {{{    44,     36,     95}, 0, {     0,      0}, {0x3d, 0x22, 0x69, 0x00}}},
-    {{{    85,     -5,      0}, 0, {     0,      0}, {0x7f, 0xfe, 0x00, 0x00}}},
-    {{{    44,     80,     46}, 0, {     0,      0}, {0x36, 0x68, 0x2e, 0x00}}},
-    {{{    43,     80,    -45}, 0, {     0,      0}, {0x2c, 0x70, 0xdb, 0x00}}},
-};
-
-// 0x040144D8 - 0x04014638
-const Gfx mario_medium_poly_butt_dl[] = {
-    gsSPVertex(mario_medium_poly_butt_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10, 11, 0x0),
-    gsSP2Triangles(12, 13, 14, 0x0, 12, 15,  6, 0x0),
-    gsSP1Triangle( 3, 10,  7, 0x0),
-    gsSPVertex(mario_medium_poly_butt_dl_vertex_group2, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 0,  2,  6, 0x0,  7,  5,  4, 0x0),
-    gsSP2Triangles( 7,  8,  6, 0x0,  9, 10,  8, 0x0),
-    gsSP2Triangles(11, 12, 13, 0x0,  2,  1,  5, 0x0),
-    gsSP1Triangle(14, 15,  0, 0x0),
-    gsSPVertex(mario_medium_poly_butt_dl_vertex_group3, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  5,  3,  7, 0x0),
-    gsSP2Triangles( 8,  9, 10, 0x0, 11, 12, 13, 0x0),
-    gsSP2Triangles(11, 10, 14, 0x0,  0, 12, 15, 0x0),
-    gsSP2Triangles(14,  9,  6, 0x0,  2, 13, 12, 0x0),
-    gsSPVertex(mario_medium_poly_butt_dl_vertex_group4, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10, 11, 0x0),
-    gsSP2Triangles( 9, 12, 13, 0x0, 13, 12, 14, 0x0),
-    gsSP2Triangles(14, 12,  8, 0x0,  8, 12, 15, 0x0),
-    gsSP2Triangles(15, 12,  1, 0x0,  1, 12,  2, 0x0),
-    gsSPVertex(mario_medium_poly_butt_dl_vertex_group5, 4, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04014638 - 0x04014668
-const Gfx mario_medium_poly_butt[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPLight(&mario_blue_lights_group.l, 1),
-    gsSPLight(&mario_blue_lights_group.a, 2),
-    gsSPDisplayList(mario_medium_poly_butt_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04014668 - 0x040146E0
-const Gfx mario_metal_medium_poly_butt[] = {
-    gsDPPipeSync(),
-    gsSPSetGeometryMode(G_TEXTURE_GEN),
-    gsDPSetCombineMode(G_CC_DECALFADE, G_CC_DECALFADE),
-    gsDPLoadTextureBlock(mario_texture_metal, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_ON),
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPDisplayList(mario_medium_poly_butt_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x040146E0
-static const Vtx mario_medium_poly_left_arm_shared_dl_vertex[] = {
-    {{{    -6,    -32,    -22}, 0, {     0,      0}, {0x08, 0x84, 0x18, 0x00}}},
-    {{{    60,    -27,    -18}, 0, {     0,      0}, {0x3d, 0xc5, 0xa3, 0x00}}},
-    {{{    60,    -18,     26}, 0, {     0,      0}, {0x5c, 0xbe, 0x36, 0x00}}},
-    {{{    -6,    -32,    -22}, 0, {     0,      0}, {0x07, 0xf5, 0x82, 0x00}}},
-    {{{    -7,     21,    -27}, 0, {     0,      0}, {0x07, 0xf5, 0x82, 0x00}}},
-    {{{    59,     16,    -22}, 0, {     0,      0}, {0x5b, 0x4f, 0xda, 0x00}}},
-    {{{    -7,     20,     18}, 0, {     0,      0}, {0x0c, 0x73, 0x32, 0x00}}},
-    {{{    59,     14,     14}, 0, {     0,      0}, {0x38, 0x4b, 0x55, 0x00}}},
-    {{{    -6,    -21,     33}, 0, {     0,      0}, {0x0b, 0x2a, 0x77, 0x00}}},
-    {{{    -7,     21,    -27}, 0, {     0,      0}, {0x0a, 0x7e, 0x04, 0x00}}},
-    {{{    -6,    -21,     33}, 0, {     0,      0}, {0x08, 0x84, 0x18, 0x00}}},
-    {{{    -7,     21,    -27}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
-    {{{    -6,    -32,    -22}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
-    {{{    -6,    -21,     33}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
-    {{{    -7,     20,     18}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
-};
-
-// 0x040147D0 - 0x04014840
-const Gfx mario_medium_poly_left_arm_shared_dl[] = {
-    gsSPVertex(mario_medium_poly_left_arm_shared_dl_vertex, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
-    gsSP2Triangles( 4,  5,  1, 0x0,  6,  7,  5, 0x0),
-    gsSP2Triangles( 8,  2,  7, 0x0,  6,  8,  7, 0x0),
-    gsSP2Triangles( 9,  6,  5, 0x0, 10,  0,  2, 0x0),
-    gsSP2Triangles( 5,  2,  1, 0x0, 11, 12, 13, 0x0),
-    gsSP2Triangles(13, 14, 11, 0x0,  5,  7,  2, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04014840 - 0x04014860
-const Gfx mario_medium_poly_left_arm[] = {
-    gsSPLight(&mario_red_lights_group.l, 1),
-    gsSPLight(&mario_red_lights_group.a, 2),
-    gsSPDisplayList(mario_medium_poly_left_arm_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04014860
-static const Vtx mario_medium_poly_left_forearm_shared_dl_vertex[] = {
-    {{{    -9,    -29,    -18}, 0, {     0,      0}, {0x05, 0x84, 0x19, 0x00}}},
-    {{{    53,    -26,    -17}, 0, {     0,      0}, {0x59, 0xd0, 0xb5, 0x00}}},
-    {{{    53,    -17,     24}, 0, {     0,      0}, {0x3d, 0xab, 0x47, 0x00}}},
-    {{{    -9,    -29,    -18}, 0, {     0,      0}, {0x04, 0xf3, 0x82, 0x00}}},
-    {{{    -9,     16,    -24}, 0, {     0,      0}, {0x04, 0xf4, 0x82, 0x00}}},
-    {{{    53,     13,    -21}, 0, {     0,      0}, {0x3b, 0x64, 0xce, 0x00}}},
-    {{{    -9,     15,     15}, 0, {     0,      0}, {0x07, 0x75, 0x30, 0x00}}},
-    {{{    53,     13,     12}, 0, {     0,      0}, {0x52, 0x41, 0x47, 0x00}}},
-    {{{    -9,    -19,     28}, 0, {     0,      0}, {0x07, 0x2c, 0x76, 0x00}}},
-    {{{    -9,     16,    -24}, 0, {     0,      0}, {0x06, 0x7e, 0x02, 0x00}}},
-    {{{    -9,    -19,     28}, 0, {     0,      0}, {0x05, 0x84, 0x1a, 0x00}}},
-    {{{    -9,     16,    -24}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
-    {{{    -9,    -29,    -18}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
-    {{{    -9,    -19,     28}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
-    {{{    -9,     15,     15}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
-};
-
-// 0x04014950 - 0x040149C0
-const Gfx mario_medium_poly_left_forearm_shared_dl[] = {
-    gsSPVertex(mario_medium_poly_left_forearm_shared_dl_vertex, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
-    gsSP2Triangles( 4,  5,  1, 0x0,  6,  7,  5, 0x0),
-    gsSP2Triangles( 8,  2,  7, 0x0,  6,  8,  7, 0x0),
-    gsSP2Triangles( 9,  6,  5, 0x0, 10,  0,  2, 0x0),
-    gsSP2Triangles( 1,  7,  2, 0x0,  1,  5,  7, 0x0),
-    gsSP2Triangles(11, 12, 13, 0x0, 13, 14, 11, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040149C0
-static const Vtx mario_medium_poly_left_hand_closed_shared_dl_vertex_group1[] = {
-    {{{    31,     10,     40}, 0, {     0,      0}, {0xd8, 0xed, 0x76, 0x00}}},
-    {{{    12,      1,     26}, 0, {     0,      0}, {0xf1, 0xf7, 0x7d, 0x00}}},
-    {{{    27,    -32,     -3}, 0, {     0,      0}, {0x06, 0x82, 0x0b, 0x00}}},
-    {{{    11,      2,    -28}, 0, {     0,      0}, {0xca, 0xf6, 0x8e, 0x00}}},
-    {{{    44,    -22,    -46}, 0, {     0,      0}, {0xde, 0xb9, 0x9d, 0x00}}},
-    {{{    18,     37,    -31}, 0, {     0,      0}, {0xc7, 0x28, 0x97, 0x00}}},
-    {{{    -2,     36,     -2}, 0, {     0,      0}, {0xb0, 0x61, 0x03, 0x00}}},
-    {{{    -5,     -5,     34}, 0, {     0,      0}, {0x2f, 0x13, 0x74, 0x00}}},
-    {{{    -6,     -5,    -32}, 0, {     0,      0}, {0x1c, 0x0e, 0x86, 0x00}}},
-    {{{    81,     32,     40}, 0, {     0,      0}, {0x48, 0x1f, 0x63, 0x00}}},
-    {{{    55,     84,      9}, 0, {     0,      0}, {0x14, 0x74, 0x2c, 0x00}}},
-    {{{   102,    -23,      6}, 0, {     0,      0}, {0x64, 0xc4, 0x31, 0x00}}},
-    {{{    95,     43,    -12}, 0, {     0,      0}, {0x6e, 0x36, 0xe0, 0x00}}},
-    {{{    54,     58,    -32}, 0, {     0,      0}, {0x02, 0x4e, 0x9d, 0x00}}},
-    {{{    84,    -10,    -41}, 0, {     0,      0}, {0x39, 0xe2, 0x93, 0x00}}},
-    {{{    53,    -42,      9}, 0, {     0,      0}, {0x04, 0x83, 0x0f, 0x00}}},
-};
-
-// 0x04014AC0
-static const Vtx mario_medium_poly_left_hand_closed_shared_dl_vertex_group2[] = {
-    {{{    31,     10,     40}, 0, {     0,      0}, {0xd8, 0xed, 0x76, 0x00}}},
-    {{{    55,     84,      9}, 0, {     0,      0}, {0x14, 0x74, 0x2c, 0x00}}},
-    {{{     7,     62,     10}, 0, {     0,      0}, {0xa7, 0x5a, 0x00, 0x00}}},
-    {{{    27,    -32,     -3}, 0, {     0,      0}, {0x06, 0x82, 0x0b, 0x00}}},
-    {{{    14,    -51,     -2}, 0, {     0,      0}, {0x37, 0xd5, 0x97, 0x00}}},
-    {{{    -6,     -5,    -32}, 0, {     0,      0}, {0x1c, 0x0e, 0x86, 0x00}}},
-    {{{   -26,     40,     -1}, 0, {     0,      0}, {0x05, 0x48, 0x98, 0x00}}},
-    {{{    -2,     36,     -2}, 0, {     0,      0}, {0xb0, 0x61, 0x03, 0x00}}},
-    {{{   -26,     40,     -1}, 0, {     0,      0}, {0x11, 0x50, 0x60, 0x00}}},
-    {{{    -5,     -5,     34}, 0, {     0,      0}, {0x2f, 0x13, 0x74, 0x00}}},
-    {{{    14,    -51,     -2}, 0, {     0,      0}, {0x49, 0xd5, 0x5e, 0x00}}},
-    {{{    18,     37,    -31}, 0, {     0,      0}, {0xc7, 0x28, 0x97, 0x00}}},
-    {{{    44,    -22,    -46}, 0, {     0,      0}, {0xde, 0xb9, 0x9d, 0x00}}},
-    {{{    53,    -42,      9}, 0, {     0,      0}, {0x04, 0x83, 0x0f, 0x00}}},
-    {{{    54,     58,    -32}, 0, {     0,      0}, {0x02, 0x4e, 0x9d, 0x00}}},
-};
-
-// 0x04014BB0
-static const Vtx mario_medium_poly_left_hand_closed_shared_dl_vertex_group3[] = {
-    {{{    54,     58,    -32}, 0, {     0,      0}, {0x02, 0x4e, 0x9d, 0x00}}},
-    {{{    95,     43,    -12}, 0, {     0,      0}, {0x6e, 0x36, 0xe0, 0x00}}},
-    {{{    84,    -10,    -41}, 0, {     0,      0}, {0x39, 0xe2, 0x93, 0x00}}},
-    {{{     7,     62,     10}, 0, {     0,      0}, {0xa7, 0x5a, 0x00, 0x00}}},
-    {{{    55,     84,      9}, 0, {     0,      0}, {0x14, 0x74, 0x2c, 0x00}}},
-    {{{    53,    -42,      9}, 0, {     0,      0}, {0x04, 0x83, 0x0f, 0x00}}},
-    {{{   102,    -23,      6}, 0, {     0,      0}, {0x64, 0xc4, 0x31, 0x00}}},
-    {{{    18,     37,    -31}, 0, {     0,      0}, {0xc7, 0x28, 0x97, 0x00}}},
-    {{{    44,    -22,    -46}, 0, {     0,      0}, {0xde, 0xb9, 0x9d, 0x00}}},
-    {{{    11,      2,    -28}, 0, {     0,      0}, {0xca, 0xf6, 0x8e, 0x00}}},
-    {{{    -5,     -5,     34}, 0, {     0,      0}, {0x8c, 0xce, 0x01, 0x00}}},
-    {{{    -6,     -5,    -32}, 0, {     0,      0}, {0x8c, 0xce, 0x01, 0x00}}},
-    {{{    14,    -51,     -2}, 0, {     0,      0}, {0x8c, 0xce, 0x01, 0x00}}},
-    {{{   -26,     40,     -1}, 0, {     0,      0}, {0x8c, 0xce, 0x01, 0x00}}},
-};
-
-// 0x04014C90 - 0x04014DC0
-const Gfx mario_medium_poly_left_hand_closed_shared_dl[] = {
-    gsSPVertex(mario_medium_poly_left_hand_closed_shared_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  4, 0x0),
-    gsSP2Triangles( 5,  3,  6, 0x0,  6,  1,  0, 0x0),
-    gsSP2Triangles( 2,  1,  7, 0x0,  7,  1,  6, 0x0),
-    gsSP2Triangles( 6,  3,  8, 0x0,  3,  2,  8, 0x0),
-    gsSP2Triangles( 0,  9, 10, 0x0, 11,  9,  0, 0x0),
-    gsSP2Triangles(10, 12, 13, 0x0, 14, 12, 11, 0x0),
-    gsSP2Triangles(11, 12,  9, 0x0,  9, 12, 10, 0x0),
-    gsSP1Triangle(15, 11,  0, 0x0),
-    gsSPVertex(mario_medium_poly_left_hand_closed_shared_dl_vertex_group2, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 5,  6,  7, 0x0,  7,  8,  9, 0x0),
-    gsSP2Triangles( 9, 10,  3, 0x0,  7,  0,  2, 0x0),
-    gsSP2Triangles( 7,  2, 11, 0x0,  3, 12, 13, 0x0),
-    gsSP2Triangles( 3, 13,  0, 0x0, 11,  2, 14, 0x0),
-    gsSPVertex(mario_medium_poly_left_hand_closed_shared_dl_vertex_group3, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  0, 0x0),
-    gsSP2Triangles( 5,  2,  6, 0x0,  7,  8,  9, 0x0),
-    gsSP2Triangles( 7,  2,  8, 0x0,  7,  0,  2, 0x0),
-    gsSP2Triangles( 5,  8,  2, 0x0, 10, 11, 12, 0x0),
-    gsSP1Triangle(10, 13, 11, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04014DC0 - 0x04014DE0
-const Gfx mario_medium_poly_left_hand_closed[] = {
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPDisplayList(mario_medium_poly_left_hand_closed_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04014DE0
-static const Vtx mario_medium_poly_right_arm_shared_dl_vertex[] = {
-    {{{    60,    -28,     22}, 0, {     0,      0}, {0x3b, 0xc7, 0x60, 0x00}}},
-    {{{    60,    -19,    -19}, 0, {     0,      0}, {0x5a, 0xbc, 0xc7, 0x00}}},
-    {{{    60,     14,     24}, 0, {     0,      0}, {0x5b, 0x4f, 0x26, 0x00}}},
-    {{{    -7,    -31,     24}, 0, {     0,      0}, {0x04, 0x84, 0xe6, 0x00}}},
-    {{{    -7,    -20,    -27}, 0, {     0,      0}, {0x04, 0x84, 0xe6, 0x00}}},
-    {{{    -8,     21,    -15}, 0, {     0,      0}, {0x11, 0x73, 0xce, 0x00}}},
-    {{{    -8,     22,     27}, 0, {     0,      0}, {0x0e, 0x7e, 0xfd, 0x00}}},
-    {{{    60,     13,     -9}, 0, {     0,      0}, {0x3c, 0x46, 0xaa, 0x00}}},
-    {{{    -7,    -20,    -27}, 0, {     0,      0}, {0x0e, 0x23, 0x88, 0x00}}},
-    {{{    -8,     22,     27}, 0, {     0,      0}, {0x03, 0xfa, 0x7e, 0x00}}},
-    {{{    -7,    -31,     24}, 0, {     0,      0}, {0x03, 0xfa, 0x7e, 0x00}}},
-    {{{    -7,    -20,    -27}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
-    {{{    -7,    -31,     24}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
-    {{{    -8,     22,     27}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
-    {{{    -8,     21,    -15}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
-};
-
-// 0x04014ED0 - 0x04014F40
-const Gfx mario_medium_poly_right_arm_shared_dl[] = {
-    gsSPVertex(mario_medium_poly_right_arm_shared_dl_vertex, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  4, 0x0),
-    gsSP2Triangles( 2,  5,  6, 0x0,  7,  8,  5, 0x0),
-    gsSP2Triangles( 7,  1,  8, 0x0,  2,  7,  5, 0x0),
-    gsSP2Triangles( 0,  2,  9, 0x0,  0,  9, 10, 0x0),
-    gsSP2Triangles( 1,  0,  3, 0x0, 11, 12, 13, 0x0),
-    gsSP2Triangles(13, 14, 11, 0x0,  1,  7,  2, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04014F40 - 0x04014F60
-const Gfx mario_medium_poly_right_arm[] = {
-    gsSPLight(&mario_red_lights_group.l, 1),
-    gsSPLight(&mario_red_lights_group.a, 2),
-    gsSPDisplayList(mario_medium_poly_right_arm_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04014F60
-static const Vtx mario_medium_poly_right_forearm_shared_dl_vertex[] = {
-    {{{    -5,    -18,    -24}, 0, {     0,      0}, {0x81, 0xfe, 0x03, 0x00}}},
-    {{{    -3,    -29,     21}, 0, {     0,      0}, {0x81, 0xfe, 0x03, 0x00}}},
-    {{{    -4,     17,     26}, 0, {     0,      0}, {0x81, 0xfe, 0x03, 0x00}}},
-    {{{    52,     13,    -10}, 0, {     0,      0}, {0x51, 0x40, 0xb7, 0x00}}},
-    {{{    53,     13,     22}, 0, {     0,      0}, {0x3d, 0x63, 0x31, 0x00}}},
-    {{{    53,    -26,     19}, 0, {     0,      0}, {0x5b, 0xd0, 0x49, 0x00}}},
-    {{{    52,    -17,    -21}, 0, {     0,      0}, {0x3a, 0xac, 0xb6, 0x00}}},
-    {{{    -3,    -29,     21}, 0, {     0,      0}, {0x04, 0x85, 0xe4, 0x00}}},
-    {{{    -5,    -18,    -24}, 0, {     0,      0}, {0x03, 0x85, 0xe3, 0x00}}},
-    {{{    -5,     17,    -12}, 0, {     0,      0}, {0x09, 0x75, 0xd1, 0x00}}},
-    {{{    -4,     17,     26}, 0, {     0,      0}, {0x08, 0x7e, 0x00, 0x00}}},
-    {{{    -5,    -18,    -24}, 0, {     0,      0}, {0x06, 0x2a, 0x89, 0x00}}},
-    {{{    -4,     17,     26}, 0, {     0,      0}, {0x06, 0xf5, 0x7e, 0x00}}},
-    {{{    -3,    -29,     21}, 0, {     0,      0}, {0x06, 0xf4, 0x7e, 0x00}}},
-    {{{    -5,     17,    -12}, 0, {     0,      0}, {0x81, 0xfe, 0x03, 0x00}}},
-};
-
-// 0x04015050 - 0x040150C0
-const Gfx mario_medium_poly_right_forearm_shared_dl[] = {
-    gsSPVertex(mario_medium_poly_right_forearm_shared_dl_vertex, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  3,  5, 0x0,  6,  7,  8, 0x0),
-    gsSP2Triangles( 4,  9, 10, 0x0,  3, 11,  9, 0x0),
-    gsSP2Triangles( 3,  6, 11, 0x0,  4,  3,  9, 0x0),
-    gsSP2Triangles( 5,  4, 12, 0x0,  5, 12, 13, 0x0),
-    gsSP2Triangles( 6,  5,  7, 0x0,  2, 14,  0, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040150C0
-static const Vtx mario_medium_poly_right_hand_closed_dl_vertex_group1[] = {
-    {{{    -7,     -4,     36}, 0, {     0,      0}, {0x8c, 0xcd, 0xfd, 0x00}}},
-    {{{   -26,     40,      0}, 0, {     0,      0}, {0x8c, 0xcd, 0xfd, 0x00}}},
-    {{{    -4,     -7,    -34}, 0, {     0,      0}, {0x8c, 0xcd, 0xfd, 0x00}}},
-    {{{    14,    -51,      7}, 0, {     0,      0}, {0x8c, 0xcd, 0xfd, 0x00}}},
-    {{{    81,     -8,     49}, 0, {     0,      0}, {0x36, 0xe6, 0x6f, 0x00}}},
-    {{{    42,    -20,     54}, 0, {     0,      0}, {0xd9, 0xbb, 0x62, 0x00}}},
-    {{{    54,    -42,     -4}, 0, {     0,      0}, {0x04, 0x82, 0xf6, 0x00}}},
-    {{{    52,     59,     37}, 0, {     0,      0}, {0xff, 0x55, 0x5e, 0x00}}},
-    {{{    16,     38,     35}, 0, {     0,      0}, {0xc1, 0x2d, 0x63, 0x00}}},
-    {{{    10,      3,     33}, 0, {     0,      0}, {0xc3, 0xfa, 0x6e, 0x00}}},
-    {{{   102,    -23,      0}, 0, {     0,      0}, {0x65, 0xc1, 0xd7, 0x00}}},
-    {{{    55,     84,     -8}, 0, {     0,      0}, {0x15, 0x73, 0xd1, 0x00}}},
-    {{{     7,     62,    -11}, 0, {     0,      0}, {0xa7, 0x5a, 0xf9, 0x00}}},
-    {{{    94,     43,     18}, 0, {     0,      0}, {0x6d, 0x38, 0x21, 0x00}}},
-    {{{    32,      8,    -40}, 0, {     0,      0}, {0xda, 0xe8, 0x8a, 0x00}}},
-    {{{    26,    -32,      8}, 0, {     0,      0}, {0x08, 0x82, 0xfa, 0x00}}},
-};
-
-// 0x040151C0
-static const Vtx mario_medium_poly_right_hand_closed_dl_vertex_group2[] = {
-    {{{    16,     38,     35}, 0, {     0,      0}, {0xc1, 0x2d, 0x63, 0x00}}},
-    {{{     7,     62,    -11}, 0, {     0,      0}, {0xa7, 0x5a, 0xf9, 0x00}}},
-    {{{    -3,     37,      3}, 0, {     0,      0}, {0xb0, 0x62, 0xf7, 0x00}}},
-    {{{    32,      8,    -40}, 0, {     0,      0}, {0xda, 0xe8, 0x8a, 0x00}}},
-    {{{    26,    -32,      8}, 0, {     0,      0}, {0x08, 0x82, 0xfa, 0x00}}},
-    {{{    14,    -51,      7}, 0, {     0,      0}, {0x4f, 0xd0, 0xaa, 0x00}}},
-    {{{    -4,     -7,    -34}, 0, {     0,      0}, {0x37, 0x10, 0x8f, 0x00}}},
-    {{{   -26,     40,      0}, 0, {     0,      0}, {0x15, 0x51, 0xa1, 0x00}}},
-    {{{   -26,     40,      0}, 0, {     0,      0}, {0x02, 0x4f, 0x62, 0x00}}},
-    {{{    -7,     -4,     36}, 0, {     0,      0}, {0x19, 0x13, 0x7a, 0x00}}},
-    {{{    14,    -51,      7}, 0, {     0,      0}, {0x36, 0xd7, 0x6b, 0x00}}},
-    {{{    55,     84,     -8}, 0, {     0,      0}, {0x15, 0x73, 0xd1, 0x00}}},
-    {{{   102,    -23,      0}, 0, {     0,      0}, {0x65, 0xc1, 0xd7, 0x00}}},
-    {{{    54,    -42,     -4}, 0, {     0,      0}, {0x04, 0x82, 0xf6, 0x00}}},
-    {{{    94,     43,     18}, 0, {     0,      0}, {0x6d, 0x38, 0x21, 0x00}}},
-    {{{    83,     30,    -39}, 0, {     0,      0}, {0x4e, 0x1c, 0xa1, 0x00}}},
-};
-
-// 0x040152C0
-static const Vtx mario_medium_poly_right_hand_closed_dl_vertex_group3[] = {
-    {{{   102,    -23,      0}, 0, {     0,      0}, {0x65, 0xc1, 0xd7, 0x00}}},
-    {{{    94,     43,     18}, 0, {     0,      0}, {0x6d, 0x38, 0x21, 0x00}}},
-    {{{    81,     -8,     49}, 0, {     0,      0}, {0x36, 0xe6, 0x6f, 0x00}}},
-    {{{    52,     59,     37}, 0, {     0,      0}, {0xff, 0x55, 0x5e, 0x00}}},
-    {{{    55,     84,     -8}, 0, {     0,      0}, {0x15, 0x73, 0xd1, 0x00}}},
-    {{{    32,      8,    -40}, 0, {     0,      0}, {0xda, 0xe8, 0x8a, 0x00}}},
-    {{{    83,     30,    -39}, 0, {     0,      0}, {0x4e, 0x1c, 0xa1, 0x00}}},
-    {{{    -7,     -4,     36}, 0, {     0,      0}, {0x19, 0x13, 0x7a, 0x00}}},
-    {{{    26,    -32,      8}, 0, {     0,      0}, {0x08, 0x82, 0xfa, 0x00}}},
-    {{{    10,      3,     33}, 0, {     0,      0}, {0xc3, 0xfa, 0x6e, 0x00}}},
-    {{{    -3,     37,      3}, 0, {     0,      0}, {0xb0, 0x62, 0xf7, 0x00}}},
-    {{{    13,      0,    -26}, 0, {     0,      0}, {0xf5, 0xf2, 0x83, 0x00}}},
-    {{{    -4,     -7,    -34}, 0, {     0,      0}, {0x37, 0x10, 0x8f, 0x00}}},
-    {{{    16,     38,     35}, 0, {     0,      0}, {0xc1, 0x2d, 0x63, 0x00}}},
-    {{{    42,    -20,     54}, 0, {     0,      0}, {0xd9, 0xbb, 0x62, 0x00}}},
-};
-
-// 0x040153B0 - 0x040154E0
-const Gfx mario_medium_poly_right_hand_closed_dl[] = {
-    gsSPVertex(mario_medium_poly_right_hand_closed_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  4,  7,  8, 0x0),
-    gsSP2Triangles( 5,  4,  8, 0x0,  9,  5,  8, 0x0),
-    gsSP2Triangles(10,  4,  6, 0x0,  7, 11, 12, 0x0),
-    gsSP2Triangles( 4, 13,  7, 0x0,  7, 12,  8, 0x0),
-    gsSP2Triangles(14,  6, 15, 0x0,  6,  5, 15, 0x0),
-    gsSPVertex(mario_medium_poly_right_hand_closed_dl_vertex_group2, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  2, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  6,  7,  2, 0x0),
-    gsSP2Triangles( 2,  8,  9, 0x0,  9, 10,  4, 0x0),
-    gsSP2Triangles( 1, 11,  3, 0x0,  3, 12, 13, 0x0),
-    gsSP2Triangles(11, 14, 15, 0x0, 15, 14, 12, 0x0),
-    gsSPVertex(mario_medium_poly_right_hand_closed_dl_vertex_group3, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  4, 0x0),
-    gsSP2Triangles( 5,  6,  0, 0x0,  4,  6,  5, 0x0),
-    gsSP2Triangles( 7,  8,  9, 0x0,  7,  9, 10, 0x0),
-    gsSP2Triangles(10, 11, 12, 0x0, 12, 11,  8, 0x0),
-    gsSP2Triangles( 5, 11, 10, 0x0, 10,  9, 13, 0x0),
-    gsSP2Triangles(14,  9,  8, 0x0,  8, 11,  5, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040154E0 - 0x04015500
-const Gfx mario_medium_poly_right_hand_closed[] = {
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPDisplayList(mario_medium_poly_right_hand_closed_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04015500 - 0x04015530
-const Gfx mario_metal_medium_poly_right_hand_closed[] = {
-    gsSPDisplayList(mario_medium_poly_right_hand_closed_dl),
-    gsDPPipeSync(),
-    gsSPClearGeometryMode(G_TEXTURE_GEN),
-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
-    gsSPEndDisplayList(),
-};
-
-// 0x04015530
-static const Vtx mario_medium_poly_left_thigh_dl_vertex[] = {
-    {{{    18,    -12,     58}, 0, {     0,      0}, {0x13, 0xdd, 0x78, 0x00}}},
-    {{{    22,    -52,      8}, 0, {     0,      0}, {0x1c, 0x85, 0x01, 0x00}}},
-    {{{    99,    -35,      8}, 0, {     0,      0}, {0x3e, 0x92, 0x01, 0x00}}},
-    {{{    14,     51,     38}, 0, {     0,      0}, {0x08, 0x75, 0x30, 0x00}}},
-    {{{    92,     47,     33}, 0, {     0,      0}, {0x36, 0x4b, 0x56, 0x00}}},
-    {{{    14,     50,    -23}, 0, {     0,      0}, {0x0a, 0x65, 0xb5, 0x00}}},
-    {{{    92,     47,    -16}, 0, {     0,      0}, {0x47, 0x55, 0xc5, 0x00}}},
-    {{{    19,    -13,    -42}, 0, {     0,      0}, {0x15, 0xdb, 0x89, 0x00}}},
-    {{{    96,     -3,    -31}, 0, {     0,      0}, {0x68, 0xf1, 0xba, 0x00}}},
-    {{{    96,     -3,     48}, 0, {     0,      0}, {0x71, 0xf8, 0x38, 0x00}}},
-    {{{    19,    -13,    -42}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
-    {{{    22,    -52,      8}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
-    {{{    18,    -12,     58}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
-    {{{    14,     51,     38}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
-    {{{    14,     50,    -23}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
-};
-
-// 0x04015620 - 0x040156B0
-const Gfx mario_medium_poly_left_thigh_dl[] = {
-    gsSPVertex(mario_medium_poly_left_thigh_dl_vertex, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  4, 0x0),
-    gsSP2Triangles( 5,  3,  6, 0x0,  7,  5,  6, 0x0),
-    gsSP2Triangles( 1,  7,  2, 0x0,  7,  8,  2, 0x0),
-    gsSP2Triangles( 6,  8,  7, 0x0,  3,  4,  6, 0x0),
-    gsSP2Triangles( 0,  9,  4, 0x0,  2,  9,  0, 0x0),
-    gsSP2Triangles( 9,  2,  8, 0x0, 10, 11, 12, 0x0),
-    gsSP2Triangles(12, 13, 10, 0x0, 13, 14, 10, 0x0),
-    gsSP2Triangles( 8,  6,  9, 0x0,  6,  4,  9, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040156B0 - 0x040156E0
-const Gfx mario_medium_poly_left_thigh[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPLight(&mario_blue_lights_group.l, 1),
-    gsSPLight(&mario_blue_lights_group.a, 2),
-    gsSPDisplayList(mario_medium_poly_left_thigh_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x040156E0 - 0x04015758
-const Gfx mario_metal_medium_poly_left_thigh[] = {
-    gsDPPipeSync(),
-    gsSPSetGeometryMode(G_TEXTURE_GEN),
-    gsDPSetCombineMode(G_CC_DECALFADE, G_CC_DECALFADE),
-    gsDPLoadTextureBlock(mario_texture_metal, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_ON),
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPDisplayList(mario_medium_poly_left_thigh_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04015758
-static const Vtx mario_medium_poly_left_leg_shared_dl_vertex[] = {
-    {{{     5,    -35,      9}, 0, {     0,      0}, {0xca, 0x8e, 0x00, 0x00}}},
-    {{{    65,    -44,     10}, 0, {     0,      0}, {0xee, 0x83, 0x01, 0x00}}},
-    {{{    66,     -9,     54}, 0, {     0,      0}, {0xf2, 0xdc, 0x78, 0x00}}},
-    {{{     9,     46,     33}, 0, {     0,      0}, {0xd5, 0x61, 0x45, 0x00}}},
-    {{{    69,     47,     37}, 0, {     0,      0}, {0xf9, 0x66, 0x4b, 0x00}}},
-    {{{    70,     47,    -18}, 0, {     0,      0}, {0xfb, 0x74, 0xcf, 0x00}}},
-    {{{    10,     46,    -16}, 0, {     0,      0}, {0xaf, 0x40, 0xb7, 0x00}}},
-    {{{    67,     -9,    -36}, 0, {     0,      0}, {0xf4, 0xda, 0x88, 0x00}}},
-    {{{     7,     -4,    -31}, 0, {     0,      0}, {0x9b, 0xee, 0xb6, 0x00}}},
-    {{{     7,     -4,     49}, 0, {     0,      0}, {0x8f, 0xf5, 0x37, 0x00}}},
-    {{{    66,     -9,     54}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
-    {{{    65,    -44,     10}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
-    {{{    67,     -9,    -36}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
-    {{{    70,     47,    -18}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
-    {{{    69,     47,     37}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
-};
-
-// 0x04015848 - 0x040158D8
-const Gfx mario_medium_poly_left_leg_shared_dl[] = {
-    gsSPVertex(mario_medium_poly_left_leg_shared_dl_vertex, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  2,  4, 0x0),
-    gsSP2Triangles( 3,  4,  5, 0x0,  6,  5,  7, 0x0),
-    gsSP2Triangles( 0,  7,  1, 0x0,  0,  8,  7, 0x0),
-    gsSP2Triangles( 7,  8,  6, 0x0,  5,  6,  3, 0x0),
-    gsSP2Triangles( 3,  9,  2, 0x0,  2,  9,  0, 0x0),
-    gsSP2Triangles(10, 11, 12, 0x0,  8,  0,  9, 0x0),
-    gsSP2Triangles( 9,  6,  8, 0x0,  9,  3,  6, 0x0),
-    gsSP2Triangles(12, 13, 10, 0x0, 13, 14, 10, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040158D8
-static const Vtx mario_medium_poly_left_foot_shared_dl_vertex_group1[] = {
-    {{{   108,     10,     36}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{   108,      9,    -20}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{    75,     21,    -41}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{    76,     22,     61}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{   -14,     55,    -27}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{   -13,     55,     49}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{   -41,     65,      9}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{    41,    -18,     54}, 0, {     0,      0}, {0x04, 0xb4, 0x65, 0x00}}},
-    {{{    76,     22,     61}, 0, {     0,      0}, {0x12, 0xdd, 0x78, 0x00}}},
-    {{{   -13,     55,     49}, 0, {     0,      0}, {0xce, 0x07, 0x74, 0x00}}},
-    {{{    42,    -11,    -33}, 0, {     0,      0}, {0xff, 0xb8, 0x98, 0x00}}},
-    {{{   -37,     12,    -16}, 0, {     0,      0}, {0xa1, 0xcf, 0xbd, 0x00}}},
-    {{{   -14,     55,    -27}, 0, {     0,      0}, {0xcc, 0x02, 0x8d, 0x00}}},
-    {{{   -36,     13,     39}, 0, {     0,      0}, {0xa0, 0xd0, 0x42, 0x00}}},
-    {{{    75,     21,    -41}, 0, {     0,      0}, {0x09, 0xda, 0x88, 0x00}}},
-    {{{   108,      9,    -20}, 0, {     0,      0}, {0x44, 0xad, 0xbe, 0x00}}},
-};
-
-// 0x040159D8
-static const Vtx mario_medium_poly_left_foot_shared_dl_vertex_group2[] = {
-    {{{    78,    -30,      7}, 0, {     0,      0}, {0x34, 0x8d, 0xfb, 0x00}}},
-    {{{   108,      9,    -20}, 0, {     0,      0}, {0x44, 0xad, 0xbe, 0x00}}},
-    {{{   108,     10,     36}, 0, {     0,      0}, {0x4c, 0xaf, 0x3c, 0x00}}},
-    {{{    42,    -11,    -33}, 0, {     0,      0}, {0xff, 0xb8, 0x98, 0x00}}},
-    {{{    76,     22,     61}, 0, {     0,      0}, {0x12, 0xdd, 0x78, 0x00}}},
-    {{{    41,    -18,     54}, 0, {     0,      0}, {0x04, 0xb4, 0x65, 0x00}}},
-    {{{   -36,     13,     39}, 0, {     0,      0}, {0xa0, 0xd0, 0x42, 0x00}}},
-    {{{   -13,     55,     49}, 0, {     0,      0}, {0xce, 0x07, 0x74, 0x00}}},
-    {{{   -41,     65,      9}, 0, {     0,      0}, {0x83, 0x15, 0x00, 0x00}}},
-    {{{   -14,     55,    -27}, 0, {     0,      0}, {0xcc, 0x02, 0x8d, 0x00}}},
-    {{{   -37,     12,    -16}, 0, {     0,      0}, {0xa1, 0xcf, 0xbd, 0x00}}},
-    {{{    25,    -34,     11}, 0, {     0,      0}, {0xdd, 0x87, 0xfb, 0x00}}},
-};
-
-// 0x04015A98 - 0x04015B60
-const Gfx mario_medium_poly_left_foot_shared_dl[] = {
-    gsSPVertex(mario_medium_poly_left_foot_shared_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
-    gsSP2Triangles( 3,  2,  4, 0x0,  5,  3,  4, 0x0),
-    gsSP2Triangles( 6,  5,  4, 0x0,  7,  8,  9, 0x0),
-    gsSP2Triangles(10, 11, 12, 0x0, 13,  7,  9, 0x0),
-    gsSP2Triangles(10, 12, 14, 0x0, 10, 14, 15, 0x0),
-    gsSPVertex(mario_medium_poly_left_foot_shared_dl_vertex_group2, 12, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  0,  3, 0x0),
-    gsSP2Triangles( 2,  4,  5, 0x0,  5,  0,  2, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  8,  9, 10, 0x0),
-    gsSP2Triangles(11,  3,  0, 0x0, 10,  3, 11, 0x0),
-    gsSP2Triangles( 0,  5, 11, 0x0, 11,  5,  6, 0x0),
-    gsSP2Triangles(11,  6, 10, 0x0,  6,  8, 10, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04015B60 - 0x04015B80
-const Gfx mario_medium_poly_left_foot[] = {
-    gsSPLight(&mario_brown1_lights_group.l, 1),
-    gsSPLight(&mario_brown1_lights_group.a, 2),
-    gsSPDisplayList(mario_medium_poly_left_foot_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04015B80
-static const Vtx mario_medium_poly_right_thigh_shared_dl_vertex[] = {
-    {{{    18,    -11,    -58}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
-    {{{    23,    -52,     -9}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
-    {{{    20,    -14,     41}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
-    {{{    97,     -3,     30}, 0, {     0,      0}, {0x69, 0xf1, 0x45, 0x00}}},
-    {{{    99,    -33,    -10}, 0, {     0,      0}, {0x40, 0x93, 0xfc, 0x00}}},
-    {{{    95,     -1,    -49}, 0, {     0,      0}, {0x71, 0xfb, 0xc7, 0x00}}},
-    {{{    18,    -11,    -58}, 0, {     0,      0}, {0x12, 0xe0, 0x87, 0x00}}},
-    {{{    91,     49,    -33}, 0, {     0,      0}, {0x34, 0x4e, 0xab, 0x00}}},
-    {{{    92,     48,     16}, 0, {     0,      0}, {0x47, 0x55, 0x3d, 0x00}}},
-    {{{    13,     52,    -37}, 0, {     0,      0}, {0x06, 0x76, 0xd3, 0x00}}},
-    {{{    20,    -14,     41}, 0, {     0,      0}, {0x16, 0xd9, 0x76, 0x00}}},
-    {{{    23,    -52,     -9}, 0, {     0,      0}, {0x1d, 0x85, 0xfd, 0x00}}},
-    {{{    14,     50,     24}, 0, {     0,      0}, {0x0a, 0x63, 0x4d, 0x00}}},
-    {{{    13,     52,    -37}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
-    {{{    14,     50,     24}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
-};
-
-// 0x04015C70 - 0x04015D00
-const Gfx mario_medium_poly_right_thigh_shared_dl[] = {
-    gsSPVertex(mario_medium_poly_right_thigh_shared_dl_vertex, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  5,  4, 0x0,  7,  5,  6, 0x0),
-    gsSP2Triangles( 8,  7,  9, 0x0, 10,  3,  8, 0x0),
-    gsSP2Triangles( 4,  3, 10, 0x0,  4, 10, 11, 0x0),
-    gsSP2Triangles( 8, 12, 10, 0x0,  8,  9, 12, 0x0),
-    gsSP2Triangles( 7,  6,  9, 0x0,  4, 11,  6, 0x0),
-    gsSP2Triangles( 5,  8,  3, 0x0,  5,  7,  8, 0x0),
-    gsSP2Triangles( 2, 13,  0, 0x0,  2, 14, 13, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04015D00 - 0x04015D20
-const Gfx mario_medium_poly_right_thigh[] = {
-    gsSPLight(&mario_blue_lights_group.l, 1),
-    gsSPLight(&mario_blue_lights_group.a, 2),
-    gsSPDisplayList(mario_medium_poly_right_thigh_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04015D20
-static const Vtx mario_medium_poly_right_leg_shared_dl_vertex[] = {
-    {{{     6,     -1,    -50}, 0, {     0,      0}, {0x8e, 0xf7, 0xca, 0x00}}},
-    {{{     5,    -34,    -11}, 0, {     0,      0}, {0xc9, 0x8e, 0xfe, 0x00}}},
-    {{{     7,     -4,     30}, 0, {     0,      0}, {0x9b, 0xed, 0x4a, 0x00}}},
-    {{{    67,     -9,     34}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
-    {{{    64,    -43,    -12}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
-    {{{    66,     -7,    -56}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
-    {{{    66,     -7,    -56}, 0, {     0,      0}, {0xf1, 0xde, 0x87, 0x00}}},
-    {{{    10,     48,    -33}, 0, {     0,      0}, {0xd6, 0x63, 0xbe, 0x00}}},
-    {{{    10,     46,     16}, 0, {     0,      0}, {0xb1, 0x3f, 0x4b, 0x00}}},
-    {{{    71,     47,     18}, 0, {     0,      0}, {0xfd, 0x73, 0x33, 0x00}}},
-    {{{    67,     -9,     34}, 0, {     0,      0}, {0xf4, 0xd8, 0x77, 0x00}}},
-    {{{    64,    -43,    -12}, 0, {     0,      0}, {0xec, 0x83, 0xfd, 0x00}}},
-    {{{    70,     49,    -37}, 0, {     0,      0}, {0xfa, 0x67, 0xb8, 0x00}}},
-    {{{    71,     47,     18}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
-    {{{    70,     49,    -37}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
-};
-
-// 0x04015E10 - 0x04015EA0
-const Gfx mario_medium_poly_right_leg_shared_dl[] = {
-    gsSPVertex(mario_medium_poly_right_leg_shared_dl_vertex, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 1,  0,  6, 0x0,  6,  0,  7, 0x0),
-    gsSP2Triangles( 7,  8,  9, 0x0,  8,  2, 10, 0x0),
-    gsSP2Triangles(10,  2,  1, 0x0, 11, 10,  1, 0x0),
-    gsSP2Triangles(10,  9,  8, 0x0,  9, 12,  7, 0x0),
-    gsSP2Triangles(12,  6,  7, 0x0,  6, 11,  1, 0x0),
-    gsSP2Triangles( 5, 13,  3, 0x0,  5, 14, 13, 0x0),
-    gsSP2Triangles( 2,  8,  0, 0x0,  8,  7,  0, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04015EA0
-static const Vtx mario_medium_poly_right_foot_dl_vertex_group1[] = {
-    {{{   -38,     12,     14}, 0, {     0,      0}, {0xa1, 0xcf, 0x43, 0x00}}},
-    {{{   -43,     65,    -12}, 0, {     0,      0}, {0x83, 0x13, 0xff, 0x00}}},
-    {{{   -36,     12,    -41}, 0, {     0,      0}, {0xa1, 0xce, 0xbe, 0x00}}},
-    {{{    25,    -34,    -11}, 0, {     0,      0}, {0xdf, 0x86, 0x07, 0x00}}},
-    {{{    41,    -18,    -55}, 0, {     0,      0}, {0x07, 0xb3, 0x9c, 0x00}}},
-    {{{    79,    -29,     -7}, 0, {     0,      0}, {0x36, 0x8e, 0x08, 0x00}}},
-    {{{    42,    -10,     32}, 0, {     0,      0}, {0xff, 0xba, 0x69, 0x00}}},
-    {{{   -15,     55,     24}, 0, {     0,      0}, {0xcb, 0x04, 0x73, 0x00}}},
-    {{{   -14,     54,    -51}, 0, {     0,      0}, {0xcf, 0x04, 0x8c, 0x00}}},
-    {{{   108,     11,    -36}, 0, {     0,      0}, {0x4e, 0xb0, 0xc6, 0x00}}},
-    {{{    76,     23,    -62}, 0, {     0,      0}, {0x14, 0xdb, 0x89, 0x00}}},
-    {{{   107,     12,     20}, 0, {     0,      0}, {0x45, 0xaf, 0x44, 0x00}}},
-    {{{    74,     24,     40}, 0, {     0,      0}, {0x08, 0xdc, 0x79, 0x00}}},
-    {{{   -15,     55,     24}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-    {{{   -14,     54,    -51}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-    {{{   -43,     65,    -12}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-};
-
-// 0x04015FA0
-static const Vtx mario_medium_poly_right_foot_dl_vertex_group2[] = {
-    {{{   -15,     55,     24}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-    {{{    76,     23,    -62}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-    {{{   -14,     54,    -51}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-    {{{    74,     24,     40}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-    {{{   108,     11,    -36}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-    {{{   107,     12,     20}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-};
-
-// 0x04016000 - 0x040160C8
-const Gfx mario_medium_poly_right_foot_dl[] = {
-    gsSPVertex(mario_medium_poly_right_foot_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
-    gsSP2Triangles( 2,  4,  3, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 3,  6,  0, 0x0,  5,  6,  3, 0x0),
-    gsSP2Triangles( 0,  7,  1, 0x0,  1,  8,  2, 0x0),
-    gsSP2Triangles( 9,  5,  4, 0x0,  4, 10,  9, 0x0),
-    gsSP2Triangles( 6,  5, 11, 0x0,  9, 11,  5, 0x0),
-    gsSP2Triangles(11, 12,  6, 0x0, 12,  7,  6, 0x0),
-    gsSP2Triangles( 8,  4,  2, 0x0,  7,  0,  6, 0x0),
-    gsSP2Triangles( 8, 10,  4, 0x0, 13, 14, 15, 0x0),
-    gsSPVertex(mario_medium_poly_right_foot_dl_vertex_group2, 6, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
-    gsSP2Triangles( 3,  4,  1, 0x0,  3,  5,  4, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040160C8 - 0x04016108
-const Gfx mario_medium_poly_right_foot[] = {
-    gsSPLight(&mario_brown1_lights_group.l, 1),
-    gsSPLight(&mario_brown1_lights_group.a, 2),
-    gsSPDisplayList(mario_medium_poly_right_foot_dl),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
-    gsDPSetEnvColor(255, 255, 255, 255),
-    gsDPSetAlphaCompare(G_AC_NONE),
-    gsSPEndDisplayList(),
-};
-
-// 0x04016108 - 0x04016148
-const Gfx mario_metal_medium_poly_right_foot[] = {
-    gsSPDisplayList(mario_medium_poly_right_foot_dl),
-    gsDPPipeSync(),
-    gsSPClearGeometryMode(G_TEXTURE_GEN),
-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPSetEnvColor(255, 255, 255, 255),
-    gsDPSetAlphaCompare(G_AC_NONE),
-    gsSPEndDisplayList(),
-};
-
-// 0x04016148
-static const Vtx mario_seg4_vertex_04016148[] = {
-    {{{    75,     24,    -60}, 0, {   -74,   -930}, {0x60, 0x27, 0xb8, 0xff}}},
-    {{{    36,     47,    -76}, 0, {  -174,    168}, {0x2e, 0x36, 0x98, 0xff}}},
-    {{{    44,     78,    -35}, 0, {   988,     92}, {0x45, 0x65, 0xe2, 0xff}}},
-    {{{   -26,     49,    -87}, 0, {  -538,   1590}, {0xc4, 0x29, 0x99, 0xff}}},
-    {{{     1,     87,    -53}, 0, {   638,   1164}, {0x0e, 0x74, 0xd1, 0xff}}},
-    {{{     1,     87,     54}, 0, {  2522,    702}, {0x11, 0x74, 0x2f, 0xff}}},
-    {{{     1,     87,     54}, 0, {   272,   1122}, {0x11, 0x74, 0x2f, 0xff}}},
-    {{{    44,     78,     37}, 0, {   -92,    108}, {0x47, 0x5f, 0x2a, 0xff}}},
-    {{{    44,     78,    -35}, 0, { -1398,   -128}, {0x45, 0x65, 0xe2, 0xff}}},
-    {{{   -26,     49,     88}, 0, {  1514,   1490}, {0xc4, 0x29, 0x67, 0xff}}},
-    {{{    36,     47,     77}, 0, {  1110,    130}, {0x2f, 0x37, 0x68, 0xff}}},
-    {{{    75,     24,     60}, 0, {   968,   -926}, {0x62, 0x27, 0x46, 0xff}}},
-};
-
-// 0x04016208
-static const Vtx mario_seg4_vertex_04016208[] = {
-    {{{    82,     37,     28}, 0, {     0,      0}, {0x71, 0x36, 0x0e, 0xff}}},
-    {{{    82,     37,    -28}, 0, {     0,      0}, {0x71, 0x35, 0xea, 0xff}}},
-    {{{    44,     78,    -35}, 0, {     0,      0}, {0x45, 0x65, 0xe2, 0xff}}},
-    {{{    44,     78,     37}, 0, {     0,      0}, {0x47, 0x5f, 0x2a, 0xff}}},
-    {{{    95,    -39,    -25}, 0, {     0,      0}, {0x79, 0xe6, 0xe8, 0xff}}},
-    {{{    95,    -39,     25}, 0, {     0,      0}, {0x75, 0xdb, 0x1d, 0xff}}},
-    {{{    54,    -68,      0}, 0, {     0,      0}, {0x2d, 0x8a, 0x00, 0xff}}},
-    {{{    56,     -4,     79}, 0, {     0,      0}, {0x39, 0x04, 0x71, 0xff}}},
-    {{{    75,     24,     60}, 0, {     0,      0}, {0x62, 0x27, 0x46, 0xff}}},
-    {{{    36,     47,     77}, 0, {     0,      0}, {0x2f, 0x37, 0x68, 0xff}}},
-    {{{     9,      0,     94}, 0, {     0,      0}, {0x0e, 0x03, 0x7e, 0xff}}},
-    {{{    22,    -41,     87}, 0, {     0,      0}, {0x1f, 0xc9, 0x6d, 0xff}}},
-    {{{    83,    -29,     58}, 0, {     0,      0}, {0x54, 0xc8, 0x4c, 0xff}}},
-    {{{    83,    -29,    -58}, 0, {     0,      0}, {0x52, 0xc9, 0xb2, 0xff}}},
-    {{{    40,    -66,    -47}, 0, {     0,      0}, {0x1d, 0x91, 0xcb, 0xff}}},
-    {{{    22,    -41,    -86}, 0, {     0,      0}, {0x1e, 0xca, 0x92, 0xff}}},
-};
-
-// 0x04016308
-static const Vtx mario_seg4_vertex_04016308[] = {
-    {{{    36,     47,    -76}, 0, {     0,      0}, {0x2e, 0x36, 0x98, 0xff}}},
-    {{{    75,     24,    -60}, 0, {     0,      0}, {0x60, 0x27, 0xb8, 0xff}}},
-    {{{    56,     -4,    -77}, 0, {     0,      0}, {0x38, 0x04, 0x8f, 0xff}}},
-    {{{     9,      0,    -93}, 0, {     0,      0}, {0x0e, 0x03, 0x82, 0xff}}},
-    {{{    83,    -29,    -58}, 0, {     0,      0}, {0x52, 0xc9, 0xb2, 0xff}}},
-    {{{    22,    -41,    -86}, 0, {     0,      0}, {0x1e, 0xca, 0x92, 0xff}}},
-    {{{    22,    -41,     87}, 0, {     0,      0}, {0x1f, 0xc9, 0x6d, 0xff}}},
-    {{{    40,    -66,     48}, 0, {     0,      0}, {0x1d, 0x91, 0x35, 0xff}}},
-    {{{    83,    -29,     58}, 0, {     0,      0}, {0x54, 0xc8, 0x4c, 0xff}}},
-};
-
-// 0x04016398
-static const Vtx mario_seg4_vertex_04016398[] = {
-    {{{    83,    -29,    -58}, 0, {     0,      0}, {0x52, 0xc9, 0xb2, 0xff}}},
-    {{{    95,    -39,    -25}, 0, {     0,      0}, {0x79, 0xe6, 0xe8, 0xff}}},
-    {{{    54,    -68,      0}, 0, {     0,      0}, {0x2d, 0x8a, 0x00, 0xff}}},
-    {{{    75,     24,    -60}, 0, {     0,      0}, {0x60, 0x27, 0xb8, 0xff}}},
-    {{{    82,     37,    -28}, 0, {     0,      0}, {0x71, 0x35, 0xea, 0xff}}},
-    {{{    40,    -66,    -47}, 0, {     0,      0}, {0x1d, 0x91, 0xcb, 0xff}}},
-    {{{    44,     78,    -35}, 0, {     0,      0}, {0x45, 0x65, 0xe2, 0xff}}},
-    {{{    75,     24,     60}, 0, {     0,      0}, {0x62, 0x27, 0x46, 0xff}}},
-    {{{    82,     37,     28}, 0, {     0,      0}, {0x71, 0x36, 0x0e, 0xff}}},
-    {{{    44,     78,     37}, 0, {     0,      0}, {0x47, 0x5f, 0x2a, 0xff}}},
-    {{{    83,    -29,     58}, 0, {     0,      0}, {0x54, 0xc8, 0x4c, 0xff}}},
-    {{{    95,    -39,     25}, 0, {     0,      0}, {0x75, 0xdb, 0x1d, 0xff}}},
-    {{{    40,    -66,     48}, 0, {     0,      0}, {0x1d, 0x91, 0x35, 0xff}}},
-    {{{     1,     87,    -53}, 0, {     0,      0}, {0x0e, 0x74, 0xd1, 0xff}}},
-    {{{   -30,     88,     42}, 0, {     0,      0}, {0xd3, 0x72, 0x1f, 0xff}}},
-    {{{     1,     87,     54}, 0, {     0,      0}, {0x11, 0x74, 0x2f, 0xff}}},
-};
-
-// 0x04016498
-static const Vtx mario_seg4_vertex_04016498[] = {
-    {{{     1,     87,    -53}, 0, {     0,      0}, {0x0e, 0x74, 0xd1, 0xff}}},
-    {{{   -30,     88,    -41}, 0, {     0,      0}, {0xc7, 0x6a, 0xda, 0xff}}},
-    {{{   -30,     88,     42}, 0, {     0,      0}, {0xd3, 0x72, 0x1f, 0xff}}},
-    {{{   -26,     49,    -87}, 0, {     0,      0}, {0xc4, 0x29, 0x99, 0xff}}},
-    {{{   -71,     56,      0}, 0, {     0,      0}, {0x89, 0x2b, 0x00, 0xff}}},
-    {{{   -26,     49,     88}, 0, {     0,      0}, {0xc4, 0x29, 0x67, 0xff}}},
-    {{{     1,     87,     54}, 0, {     0,      0}, {0x11, 0x74, 0x2f, 0xff}}},
-    {{{   -59,    -44,      0}, 0, {     0,      0}, {0x88, 0xd8, 0x00, 0xff}}},
-    {{{   -26,    -72,    -38}, 0, {     0,      0}, {0xda, 0x8b, 0xe5, 0xff}}},
-    {{{   -26,    -72,     39}, 0, {     0,      0}, {0xda, 0x8b, 0x1b, 0xff}}},
-    {{{   -26,    -41,     85}, 0, {     0,      0}, {0xcc, 0xc2, 0x61, 0xff}}},
-    {{{   -26,    -41,    -84}, 0, {     0,      0}, {0xcc, 0xc2, 0x9f, 0xff}}},
-    {{{    40,    -66,     48}, 0, {     0,      0}, {0x1d, 0x91, 0x35, 0xff}}},
-    {{{    22,    -41,     87}, 0, {     0,      0}, {0x1f, 0xc9, 0x6d, 0xff}}},
-    {{{     9,      0,     94}, 0, {     0,      0}, {0x0e, 0x03, 0x7e, 0xff}}},
-    {{{    54,    -68,      0}, 0, {     0,      0}, {0x2d, 0x8a, 0x00, 0xff}}},
-};
-
-// 0x04016598
-static const Vtx mario_seg4_vertex_04016598[] = {
-    {{{   -26,     49,     88}, 0, {     0,      0}, {0xc4, 0x29, 0x67, 0xff}}},
-    {{{     9,      0,     94}, 0, {     0,      0}, {0x0e, 0x03, 0x7e, 0xff}}},
-    {{{    36,     47,     77}, 0, {     0,      0}, {0x2f, 0x37, 0x68, 0xff}}},
-    {{{     9,      0,    -93}, 0, {     0,      0}, {0x0e, 0x03, 0x82, 0xff}}},
-    {{{   -26,     49,    -87}, 0, {     0,      0}, {0xc4, 0x29, 0x99, 0xff}}},
-    {{{    36,     47,    -76}, 0, {     0,      0}, {0x2e, 0x36, 0x98, 0xff}}},
-    {{{   -26,    -41,    -84}, 0, {     0,      0}, {0xcc, 0xc2, 0x9f, 0xff}}},
-    {{{    22,    -41,    -86}, 0, {     0,      0}, {0x1e, 0xca, 0x92, 0xff}}},
-    {{{    40,    -66,    -47}, 0, {     0,      0}, {0x1d, 0x91, 0xcb, 0xff}}},
-    {{{   -26,    -72,    -38}, 0, {     0,      0}, {0xda, 0x8b, 0xe5, 0xff}}},
-    {{{    54,    -68,      0}, 0, {     0,      0}, {0x2d, 0x8a, 0x00, 0xff}}},
-    {{{   -26,    -72,     39}, 0, {     0,      0}, {0xda, 0x8b, 0x1b, 0xff}}},
-    {{{    40,    -66,     48}, 0, {     0,      0}, {0x1d, 0x91, 0x35, 0xff}}},
-};
-
-// 0x04016668 - 0x040166B8
-const Gfx mario_medium_poly_yellow_button_dl[] = {
-    gsSPVertex(mario_seg4_vertex_04016148, 12, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
-    gsSP2Triangles( 2,  1,  4, 0x0,  4,  5,  2, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10,  6, 0x0),
-    gsSP2Triangles( 6, 10,  7, 0x0,  7, 10, 11, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040166B8 - 0x04016800
-const Gfx mario_medium_poly_pants_overalls_shared_dl[] = {
-    gsSPVertex(mario_seg4_vertex_04016398, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  0,  3, 0x0),
-    gsSP2Triangles( 3,  4,  1, 0x0,  2,  5,  0, 0x0),
-    gsSP2Triangles( 4,  3,  6, 0x0,  7,  8,  9, 0x0),
-    gsSP2Triangles( 7, 10, 11, 0x0,  8,  7, 11, 0x0),
-    gsSP2Triangles(11, 10,  2, 0x0, 10, 12,  2, 0x0),
-    gsSP1Triangle(13, 14, 15, 0x0),
-    gsSPVertex(mario_seg4_vertex_04016498, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
-    gsSP2Triangles( 4,  2,  1, 0x0,  1,  3,  4, 0x0),
-    gsSP2Triangles( 5,  2,  4, 0x0,  6,  2,  5, 0x0),
-    gsSP2Triangles( 4,  3,  7, 0x0,  8,  9,  7, 0x0),
-    gsSP2Triangles( 5,  4,  7, 0x0,  9, 10,  7, 0x0),
-    gsSP2Triangles(11,  8,  7, 0x0,  3, 11,  7, 0x0),
-    gsSP2Triangles( 7, 10,  5, 0x0, 10,  9, 12, 0x0),
-    gsSP2Triangles(10, 13, 14, 0x0, 12, 13, 10, 0x0),
-    gsSP2Triangles( 5, 10, 14, 0x0,  9,  8, 15, 0x0),
-    gsSPVertex(mario_seg4_vertex_04016598, 13, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  4,  3, 0x0,  6,  3,  7, 0x0),
-    gsSP2Triangles( 8,  9,  6, 0x0,  6,  7,  8, 0x0),
-    gsSP2Triangles( 9,  8, 10, 0x0, 11, 10, 12, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04016800 - 0x040168A0
-const Gfx mario_medium_poly_tshirt_shared_dl[] = {
-    gsSPVertex(mario_seg4_vertex_04016208, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
-    gsSP2Triangles( 1,  0,  4, 0x0,  0,  5,  4, 0x0),
-    gsSP2Triangles( 6,  4,  5, 0x0,  7,  8,  9, 0x0),
-    gsSP2Triangles( 9, 10,  7, 0x0,  7, 10, 11, 0x0),
-    gsSP2Triangles( 7, 12,  8, 0x0, 11, 12,  7, 0x0),
-    gsSP1Triangle(13, 14, 15, 0x0),
-    gsSPVertex(mario_seg4_vertex_04016308, 9, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
-    gsSP2Triangles( 1,  4,  2, 0x0,  2,  4,  5, 0x0),
-    gsSP2Triangles( 5,  3,  2, 0x0,  6,  7,  8, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040168A0 - 0x040168C8
-const Gfx mario_medium_poly_torso_dl[] = {
-    gsSPDisplayList(mario_medium_poly_pants_overalls_shared_dl),
-    gsSPLight(&mario_red_lights_group.l, 1),
-    gsSPLight(&mario_red_lights_group.a, 2),
-    gsSPDisplayList(mario_medium_poly_tshirt_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x040168C8 - 0x04016948
-const Gfx mario_medium_poly_torso[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_yellow_button),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_medium_poly_yellow_button_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_medium_poly_torso_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04016948 - 0x04016968
-const Gfx mario_metal_medium_poly_torso[] = {
-    gsSPDisplayList(mario_medium_poly_yellow_button_dl),
-    gsSPDisplayList(mario_medium_poly_pants_overalls_shared_dl),
-    gsSPDisplayList(mario_medium_poly_tshirt_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04016968
-static const Vtx mario_low_poly_butt_dl_vertex[] = {
-    {{{   -37,    -37,      0}, 0, {     0,      0}, {0x82, 0xf5, 0x00, 0x00}}},
-    {{{    -2,     52,     92}, 0, {     0,      0}, {0xb1, 0x3c, 0x4e, 0x00}}},
-    {{{   -35,     55,      0}, 0, {     0,      0}, {0x97, 0x45, 0x00, 0x00}}},
-    {{{    -7,    -86,     85}, 0, {     0,      0}, {0xbf, 0xc4, 0x5a, 0x00}}},
-    {{{    49,     46,     96}, 0, {     0,      0}, {0x4b, 0x1d, 0x61, 0x00}}},
-    {{{    -7,    -86,    -85}, 0, {     0,      0}, {0xcf, 0xaa, 0xb2, 0x00}}},
-    {{{    -2,     52,    -92}, 0, {     0,      0}, {0xb0, 0x3b, 0xb2, 0x00}}},
-    {{{    48,     44,    -98}, 0, {     0,      0}, {0x29, 0x22, 0x8e, 0x00}}},
-    {{{    46,    -71,    -89}, 0, {     0,      0}, {0x73, 0xd9, 0xdd, 0x00}}},
-    {{{    46,    -71,     89}, 0, {     0,      0}, {0x44, 0xa1, 0x2f, 0x00}}},
-    {{{    49,     96,      0}, 0, {     0,      0}, {0x2b, 0x77, 0x00, 0x00}}},
-};
-
-// 0x04016A18 - 0x04016AB8
-const Gfx mario_low_poly_butt_dl[] = {
-    gsSPVertex(mario_low_poly_butt_dl_vertex, 11, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  4, 0x0),
-    gsSP2Triangles( 5,  6,  7, 0x0,  0,  2,  6, 0x0),
-    gsSP2Triangles( 6,  5,  0, 0x0,  0,  3,  1, 0x0),
-    gsSP2Triangles( 7,  8,  5, 0x0,  3,  9,  4, 0x0),
-    gsSP2Triangles( 8,  7, 10, 0x0,  4,  9,  8, 0x0),
-    gsSP2Triangles( 5,  9,  3, 0x0,  3,  0,  5, 0x0),
-    gsSP2Triangles( 5,  8,  9, 0x0, 10,  7,  6, 0x0),
-    gsSP2Triangles(10,  4,  8, 0x0,  2,  1, 10, 0x0),
-    gsSP2Triangles( 6,  2, 10, 0x0,  1,  4, 10, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04016AB8 - 0x04016AE8
-const Gfx mario_low_poly_butt[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPLight(&mario_blue_lights_group.l, 1),
-    gsSPLight(&mario_blue_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_butt_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04016AE8 - 0x04016B60
-const Gfx mario_metal_low_poly_butt[] = {
-    gsDPPipeSync(),
-    gsSPSetGeometryMode(G_TEXTURE_GEN),
-    gsDPSetCombineMode(G_CC_DECALFADE, G_CC_DECALFADE),
-    gsDPLoadTextureBlock(mario_texture_metal, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_ON),
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_butt_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04016B60
-static const Vtx mario_low_poly_left_arm_shared_dl_vertex[] = {
-    {{{    -6,     28,     10}, 0, {     0,      0}, {0x09, 0x65, 0xb5, 0x00}}},
-    {{{    72,     21,      8}, 0, {     0,      0}, {0x44, 0x4d, 0x48, 0x00}}},
-    {{{    71,    -11,    -34}, 0, {     0,      0}, {0x3f, 0x57, 0xbe, 0x00}}},
-    {{{    -8,    -30,     31}, 0, {     0,      0}, {0x09, 0x26, 0x78, 0x00}}},
-    {{{    71,    -30,     23}, 0, {     0,      0}, {0x5e, 0x15, 0x51, 0x00}}},
-    {{{    -6,     28,     10}, 0, {     0,      0}, {0x07, 0x29, 0x77, 0x00}}},
-    {{{    -8,     -7,    -41}, 0, {     0,      0}, {0x0b, 0x67, 0xb8, 0x00}}},
-    {{{    -8,    -30,     31}, 0, {     0,      0}, {0xa4, 0xad, 0xe5, 0x00}}},
-    {{{    -6,     28,     10}, 0, {     0,      0}, {0x81, 0x02, 0x00, 0x00}}},
-    {{{    -8,     -7,    -41}, 0, {     0,      0}, {0xa4, 0xad, 0xe5, 0x00}}},
-    {{{    71,    -11,    -34}, 0, {     0,      0}, {0xfd, 0x88, 0xd9, 0x00}}},
-    {{{    71,    -30,     23}, 0, {     0,      0}, {0xfd, 0x88, 0xd9, 0x00}}},
-};
-
-// 0x04016C20 - 0x04016C70
-const Gfx mario_low_poly_left_arm_shared_dl[] = {
-    gsSPVertex(mario_low_poly_left_arm_shared_dl_vertex, 12, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
-    gsSP2Triangles( 5,  3,  1, 0x0,  6,  0,  2, 0x0),
-    gsSP2Triangles( 7,  8,  9, 0x0,  2,  1,  4, 0x0),
-    gsSP2Triangles( 7,  9, 10, 0x0,  7, 10, 11, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04016C70 - 0x04016C90
-const Gfx mario_low_poly_left_arm[] = {
-    gsSPLight(&mario_red_lights_group.l, 1),
-    gsSPLight(&mario_red_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_left_arm_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04016C90
-static const Vtx mario_low_poly_left_forearm_shared_dl_vertex[] = {
-    {{{    -5,     20,      6}, 0, {     0,      0}, {0x05, 0x62, 0xb0, 0x00}}},
-    {{{    67,     16,      5}, 0, {     0,      0}, {0x43, 0x4b, 0x4c, 0x00}}},
-    {{{    67,    -14,    -31}, 0, {     0,      0}, {0x3c, 0x55, 0xba, 0x00}}},
-    {{{    -5,    -30,     21}, 0, {     0,      0}, {0x05, 0x20, 0x7a, 0x00}}},
-    {{{    67,    -30,     17}, 0, {     0,      0}, {0x5c, 0x14, 0x54, 0x00}}},
-    {{{    -5,     20,      6}, 0, {     0,      0}, {0x04, 0x22, 0x7a, 0x00}}},
-    {{{    -5,    -12,    -35}, 0, {     0,      0}, {0x07, 0x63, 0xb2, 0x00}}},
-    {{{    -5,    -30,     21}, 0, {     0,      0}, {0xa5, 0xad, 0xe5, 0x00}}},
-    {{{    -5,     20,      6}, 0, {     0,      0}, {0x81, 0x01, 0x00, 0x00}}},
-    {{{    -5,    -12,    -35}, 0, {     0,      0}, {0xa5, 0xad, 0xe5, 0x00}}},
-    {{{    67,    -30,     17}, 0, {     0,      0}, {0xfe, 0x88, 0xd9, 0x00}}},
-    {{{    67,    -14,    -31}, 0, {     0,      0}, {0xfe, 0x88, 0xd9, 0x00}}},
-};
-
-// 0x04016D50 - 0x04016DA0
-const Gfx mario_low_poly_left_forearm_shared_dl[] = {
-    gsSPVertex(mario_low_poly_left_forearm_shared_dl_vertex, 12, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
-    gsSP2Triangles( 5,  3,  1, 0x0,  6,  0,  2, 0x0),
-    gsSP2Triangles( 7,  8,  9, 0x0,  2,  1,  4, 0x0),
-    gsSP2Triangles(10,  7,  9, 0x0, 10,  9, 11, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04016DA0
-static const Vtx mario_low_poly_left_hand_closed_shared_dl_vertex[] = {
-    {{{    -6,     34,    -25}, 0, {     0,      0}, {0xa0, 0x13, 0xb0, 0x00}}},
-    {{{    -9,     39,     24}, 0, {     0,      0}, {0xb3, 0x43, 0x4a, 0x00}}},
-    {{{    91,     80,    -34}, 0, {     0,      0}, {0x13, 0x7c, 0xee, 0x00}}},
-    {{{    90,     35,     33}, 0, {     0,      0}, {0x41, 0x14, 0x6b, 0x00}}},
-    {{{    20,    -34,     21}, 0, {     0,      0}, {0xd4, 0x9a, 0x3c, 0x00}}},
-    {{{   122,      4,    -45}, 0, {     0,      0}, {0x63, 0xbb, 0x25, 0x00}}},
-    {{{   122,      4,    -45}, 0, {     0,      0}, {0xf2, 0x15, 0x84, 0x00}}},
-    {{{    20,    -31,    -44}, 0, {     0,      0}, {0xcb, 0xae, 0xb1, 0x00}}},
-};
-
-// 0x04016E20 - 0x04016E80
-const Gfx mario_low_poly_left_hand_closed_shared_dl[] = {
-    gsSPVertex(mario_low_poly_left_hand_closed_shared_dl_vertex, 8, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  2, 0x0),
-    gsSP2Triangles( 4,  5,  3, 0x0,  0,  6,  7, 0x0),
-    gsSP2Triangles( 0,  2,  6, 0x0,  4,  7,  5, 0x0),
-    gsSP2Triangles( 3,  1,  4, 0x0,  2,  3,  5, 0x0),
-    gsSP2Triangles( 0,  7,  4, 0x0,  4,  1,  0, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04016E80 - 0x04016EA0
-const Gfx mario_low_poly_left_hand_closed[] = {
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_left_hand_closed_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04016EA0
-static const Vtx mario_low_poly_right_arm_shared_dl_vertex[] = {
-    {{{    65,     30,     23}, 0, {     0,      0}, {0x5e, 0xeb, 0x51, 0x00}}},
-    {{{    66,    -21,      8}, 0, {     0,      0}, {0x45, 0xb3, 0x49, 0x00}}},
-    {{{    65,     11,    -34}, 0, {     0,      0}, {0x40, 0xa9, 0xbf, 0x00}}},
-    {{{   -10,      7,    -41}, 0, {     0,      0}, {0xa4, 0x52, 0xe5, 0x00}}},
-    {{{    -9,    -28,     10}, 0, {     0,      0}, {0x81, 0xfe, 0x00, 0x00}}},
-    {{{   -10,     30,     30}, 0, {     0,      0}, {0xa4, 0x52, 0xe5, 0x00}}},
-    {{{    -9,    -28,     10}, 0, {     0,      0}, {0x09, 0x9a, 0xb6, 0x00}}},
-    {{{   -10,      7,    -41}, 0, {     0,      0}, {0x0c, 0x99, 0xb8, 0x00}}},
-    {{{   -10,     30,     30}, 0, {     0,      0}, {0x0a, 0xdb, 0x78, 0x00}}},
-    {{{    -9,    -28,     10}, 0, {     0,      0}, {0x07, 0xd8, 0x78, 0x00}}},
-    {{{    65,     30,     23}, 0, {     0,      0}, {0xfc, 0x78, 0xd9, 0x00}}},
-    {{{    65,     11,    -34}, 0, {     0,      0}, {0xfc, 0x78, 0xd9, 0x00}}},
-};
-
-// 0x04016F60 - 0x04016FB0
-const Gfx mario_low_poly_right_arm_shared_dl[] = {
-    gsSPVertex(mario_low_poly_right_arm_shared_dl_vertex, 12, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 2,  6,  7, 0x0,  1,  8,  9, 0x0),
-    gsSP2Triangles( 1,  0,  8, 0x0,  2,  1,  6, 0x0),
-    gsSP2Triangles( 5, 10, 11, 0x0,  5, 11,  3, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04016FB0 - 0x04016FD0
-const Gfx mario_low_poly_right_arm[] = {
-    gsSPLight(&mario_red_lights_group.l, 1),
-    gsSPLight(&mario_red_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_right_arm_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04016FD0
-static const Vtx mario_low_poly_right_forearm_shared_dl_vertex[] = {
-    {{{   -13,     12,    -35}, 0, {     0,      0}, {0xa5, 0x53, 0xe5, 0x00}}},
-    {{{   -13,    -20,      6}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
-    {{{   -13,     30,     21}, 0, {     0,      0}, {0xa5, 0x53, 0xe5, 0x00}}},
-    {{{    54,     14,    -31}, 0, {     0,      0}, {0x3d, 0xaa, 0xba, 0x00}}},
-    {{{   -13,    -20,      6}, 0, {     0,      0}, {0x05, 0x9e, 0xb1, 0x00}}},
-    {{{   -13,     12,    -35}, 0, {     0,      0}, {0x07, 0x9c, 0xb3, 0x00}}},
-    {{{    55,    -16,      5}, 0, {     0,      0}, {0x43, 0xb5, 0x4c, 0x00}}},
-    {{{   -13,     30,     21}, 0, {     0,      0}, {0x05, 0xe0, 0x7a, 0x00}}},
-    {{{   -13,    -20,      6}, 0, {     0,      0}, {0x04, 0xde, 0x7a, 0x00}}},
-    {{{    54,     30,     17}, 0, {     0,      0}, {0x5c, 0xed, 0x54, 0x00}}},
-    {{{    54,     30,     17}, 0, {     0,      0}, {0xfe, 0x78, 0xd8, 0x00}}},
-    {{{    54,     14,    -31}, 0, {     0,      0}, {0xfe, 0x78, 0xd8, 0x00}}},
-};
-
-// 0x04017090 - 0x040170E0
-const Gfx mario_low_poly_right_forearm_shared_dl[] = {
-    gsSPVertex(mario_low_poly_right_forearm_shared_dl_vertex, 12, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  6,  9,  7, 0x0),
-    gsSP2Triangles( 3,  6,  4, 0x0,  2, 10, 11, 0x0),
-    gsSP2Triangles( 2, 11,  0, 0x0,  9,  6,  3, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040170E0
-static const Vtx mario_low_poly_right_hand_closed_dl_vertex[] = {
-    {{{    85,    -38,    -32}, 0, {     0,      0}, {0x3d, 0xe3, 0x96, 0x00}}},
-    {{{   -15,    -35,    -22}, 0, {     0,      0}, {0x99, 0xdc, 0xc1, 0x00}}},
-    {{{    17,     37,    -22}, 0, {     0,      0}, {0xfe, 0x69, 0xb9, 0x00}}},
-    {{{   116,    -10,     36}, 0, {     0,      0}, {0x66, 0x47, 0x16, 0x00}}},
-    {{{    82,    -85,     44}, 0, {     0,      0}, {0x13, 0x8a, 0xd8, 0x00}}},
-    {{{   -15,    -35,     43}, 0, {     0,      0}, {0x9d, 0xec, 0x4c, 0x00}}},
-    {{{    82,    -85,     44}, 0, {     0,      0}, {0x02, 0x15, 0x7d, 0x00}}},
-    {{{    14,     30,     26}, 0, {     0,      0}, {0xca, 0x50, 0x51, 0x00}}},
-};
-
-// 0x04017160 - 0x040171C0
-const Gfx mario_low_poly_right_hand_closed_dl[] = {
-    gsSPVertex(mario_low_poly_right_hand_closed_dl_vertex, 8, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
-    gsSP2Triangles( 4,  0,  3, 0x0,  4,  5,  1, 0x0),
-    gsSP2Triangles( 6,  3,  7, 0x0,  5,  6,  7, 0x0),
-    gsSP2Triangles( 0,  4,  1, 0x0,  3,  2,  7, 0x0),
-    gsSP2Triangles( 1,  5,  7, 0x0,  7,  2,  1, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040171C0 - 0x040171E0
-const Gfx mario_low_poly_right_hand_closed[] = {
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_right_hand_closed_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x040171E0 - 0x04017210
-const Gfx mario_metal_low_poly_right_hand_closed[] = {
-    gsSPDisplayList(mario_low_poly_right_hand_closed_dl),
-    gsDPPipeSync(),
-    gsSPClearGeometryMode(G_TEXTURE_GEN),
-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
-    gsSPEndDisplayList(),
-};
-
-// 0x04017210
-static const Vtx mario_low_poly_left_thigh_dl_vertex[] = {
-    {{{    10,     51,     45}, 0, {     0,      0}, {0x08, 0x73, 0x34, 0x00}}},
-    {{{    17,    -44,     58}, 0, {     0,      0}, {0x0a, 0x11, 0x7d, 0x00}}},
-    {{{    94,     48,     38}, 0, {     0,      0}, {0x38, 0x40, 0x5d, 0x00}}},
-    {{{    11,     51,    -27}, 0, {     0,      0}, {0x0b, 0x5e, 0xad, 0x00}}},
-    {{{    95,     48,    -19}, 0, {     0,      0}, {0x4a, 0x4f, 0xbf, 0x00}}},
-    {{{    18,    -45,    -38}, 0, {     0,      0}, {0x0c, 0x0f, 0x83, 0x00}}},
-    {{{   101,    -28,    -28}, 0, {     0,      0}, {0x5b, 0xca, 0xbc, 0x00}}},
-    {{{   100,    -28,     48}, 0, {     0,      0}, {0x63, 0xbd, 0x29, 0x00}}},
-    {{{    17,    -44,     58}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
-    {{{    10,     51,     45}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
-    {{{    18,    -45,    -38}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
-    {{{    11,     51,    -27}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
-    {{{    18,    -45,    -38}, 0, {     0,      0}, {0x18, 0x84, 0x01, 0x00}}},
-    {{{    17,    -44,     58}, 0, {     0,      0}, {0x18, 0x84, 0x01, 0x00}}},
-};
-
-// 0x040172F0 - 0x04017360
-const Gfx mario_low_poly_left_thigh_dl[] = {
-    gsSPVertex(mario_low_poly_left_thigh_dl_vertex, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  4, 0x0),
-    gsSP2Triangles( 5,  3,  4, 0x0,  4,  6,  5, 0x0),
-    gsSP2Triangles( 0,  2,  4, 0x0,  1,  7,  2, 0x0),
-    gsSP2Triangles( 8,  9, 10, 0x0,  9, 11, 10, 0x0),
-    gsSP2Triangles( 6,  4,  7, 0x0,  4,  2,  7, 0x0),
-    gsSP2Triangles(12,  7, 13, 0x0, 12,  6,  7, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04017360 - 0x04017390
-const Gfx mario_low_poly_left_thigh[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPLight(&mario_blue_lights_group.l, 1),
-    gsSPLight(&mario_blue_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_left_thigh_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04017390 - 0x04017408
-const Gfx mario_metal_low_poly_left_thigh[] = {
-    gsDPPipeSync(),
-    gsSPSetGeometryMode(G_TEXTURE_GEN),
-    gsDPSetCombineMode(G_CC_DECALFADE, G_CC_DECALFADE),
-    gsDPLoadTextureBlock(mario_texture_metal, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_ON),
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_left_thigh_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04017408
-static const Vtx mario_low_poly_left_leg_shared_dl_vertex[] = {
-    {{{     7,     47,     38}, 0, {     0,      0}, {0xcf, 0x59, 0x4b, 0x00}}},
-    {{{    70,    -39,     53}, 0, {     0,      0}, {0xf8, 0x10, 0x7d, 0x00}}},
-    {{{    75,     52,     42}, 0, {     0,      0}, {0xf4, 0x5e, 0x53, 0x00}}},
-    {{{    75,     52,    -23}, 0, {     0,      0}, {0xf5, 0x72, 0xca, 0x00}}},
-    {{{     7,     47,    -20}, 0, {     0,      0}, {0xab, 0x34, 0xb2, 0x00}}},
-    {{{    71,    -39,    -34}, 0, {     0,      0}, {0xfa, 0x0f, 0x83, 0x00}}},
-    {{{     3,    -29,    -29}, 0, {     0,      0}, {0xbb, 0xa4, 0xcd, 0x00}}},
-    {{{     2,    -29,     48}, 0, {     0,      0}, {0x92, 0xdb, 0x31, 0x00}}},
-    {{{    71,    -39,    -34}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
-    {{{    75,     52,    -23}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
-    {{{    70,    -39,     53}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
-    {{{    75,     52,     42}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
-    {{{    71,    -39,    -34}, 0, {     0,      0}, {0xed, 0x83, 0x00, 0x00}}},
-    {{{    70,    -39,     53}, 0, {     0,      0}, {0xed, 0x83, 0x00, 0x00}}},
-};
-
-// 0x040174E8 - 0x04017558
-const Gfx mario_low_poly_left_leg_shared_dl[] = {
-    gsSPVertex(mario_low_poly_left_leg_shared_dl_vertex, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
-    gsSP2Triangles( 4,  3,  5, 0x0,  5,  6,  4, 0x0),
-    gsSP2Triangles( 3,  4,  0, 0x0,  0,  7,  1, 0x0),
-    gsSP2Triangles( 7,  4,  6, 0x0,  7,  0,  4, 0x0),
-    gsSP2Triangles( 8,  9, 10, 0x0,  9, 11, 10, 0x0),
-    gsSP2Triangles( 6, 12, 13, 0x0, 13,  7,  6, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04017558
-static const Vtx mario_low_poly_left_foot_shared_dl_vertex[] = {
-    {{{   110,     11,     56}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{   109,     10,    -33}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{   -50,     69,    -36}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{   -49,     70,     63}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
-    {{{    74,    -39,     51}, 0, {     0,      0}, {0x13, 0xb0, 0x60, 0x00}}},
-    {{{   110,     11,     56}, 0, {     0,      0}, {0x5b, 0xbb, 0x36, 0x00}}},
-    {{{   -49,     70,     63}, 0, {     0,      0}, {0x00, 0xf4, 0x7e, 0x00}}},
-    {{{    73,    -40,    -25}, 0, {     0,      0}, {0x18, 0x96, 0xc0, 0x00}}},
-    {{{   -56,     20,    -30}, 0, {     0,      0}, {0xa4, 0xc5, 0xc2, 0x00}}},
-    {{{   -50,     69,    -36}, 0, {     0,      0}, {0xfe, 0xf0, 0x83, 0x00}}},
-    {{{   -54,     20,     58}, 0, {     0,      0}, {0x99, 0xc2, 0x26, 0x00}}},
-    {{{   109,     10,    -33}, 0, {     0,      0}, {0x44, 0xc2, 0xaa, 0x00}}},
-    {{{   -50,     69,    -36}, 0, {     0,      0}, {0x82, 0x0e, 0x01, 0x00}}},
-    {{{   -49,     70,     63}, 0, {     0,      0}, {0x82, 0x0e, 0x01, 0x00}}},
-};
-
-// 0x04017638 - 0x040176A8
-const Gfx mario_low_poly_left_foot_shared_dl[] = {
-    gsSPVertex(mario_low_poly_left_foot_shared_dl_vertex, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  8,  9, 0x0),
-    gsSP2Triangles(10,  4,  6, 0x0,  7,  9, 11, 0x0),
-    gsSP2Triangles(12, 10, 13, 0x0,  7, 10,  8, 0x0),
-    gsSP2Triangles( 7, 11,  5, 0x0,  5,  4,  7, 0x0),
-    gsSP2Triangles( 7,  4, 10, 0x0, 12,  8, 10, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040176A8 - 0x040176C8
-const Gfx mario_low_poly_left_foot[] = {
-    gsSPLight(&mario_brown1_lights_group.l, 1),
-    gsSPLight(&mario_brown1_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_left_foot_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x040176C8
-static const Vtx mario_low_poly_right_thigh_shared_dl_vertex[] = {
-    {{{   102,    -25,    -48}, 0, {     0,      0}, {0x64, 0xbf, 0xd5, 0x00}}},
-    {{{   103,    -27,     25}, 0, {     0,      0}, {0x5c, 0xc9, 0x42, 0x00}}},
-    {{{    25,    -45,     35}, 0, {     0,      0}, {0x1b, 0x85, 0xfd, 0x00}}},
-    {{{    24,    -42,    -56}, 0, {     0,      0}, {0x1b, 0x85, 0xfd, 0x00}}},
-    {{{    95,     50,    -36}, 0, {     0,      0}, {0x37, 0x42, 0xa3, 0x00}}},
-    {{{    96,     49,     18}, 0, {     0,      0}, {0x4a, 0x4e, 0x41, 0x00}}},
-    {{{    25,    -45,     35}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
-    {{{    17,     51,     27}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
-    {{{    15,     53,    -42}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
-    {{{    24,    -42,    -56}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
-    {{{    24,    -42,    -56}, 0, {     0,      0}, {0x09, 0x13, 0x83, 0x00}}},
-    {{{    15,     53,    -42}, 0, {     0,      0}, {0x07, 0x74, 0xce, 0x00}}},
-    {{{    25,    -45,     35}, 0, {     0,      0}, {0x0d, 0x0c, 0x7d, 0x00}}},
-    {{{    17,     51,     27}, 0, {     0,      0}, {0x0b, 0x5c, 0x55, 0x00}}},
-};
-
-// 0x040177A8 - 0x04017818
-const Gfx mario_low_poly_right_thigh_shared_dl[] = {
-    gsSPVertex(mario_low_poly_right_thigh_shared_dl_vertex, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
-    gsSP2Triangles( 0,  4,  5, 0x0,  0,  5,  1, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  6,  8,  9, 0x0),
-    gsSP2Triangles( 4,  0, 10, 0x0,  5,  4, 11, 0x0),
-    gsSP2Triangles(12,  1,  5, 0x0,  5, 13, 12, 0x0),
-    gsSP2Triangles( 5, 11, 13, 0x0,  4, 10, 11, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04017818 - 0x04017838
-const Gfx mario_low_poly_right_thigh[] = {
-    gsSPLight(&mario_blue_lights_group.l, 1),
-    gsSPLight(&mario_blue_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_right_thigh_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04017838
-static const Vtx mario_low_poly_right_leg_shared_dl_vertex[] = {
-    {{{     2,    -29,     27}, 0, {     0,      0}, {0xba, 0xa3, 0x31, 0x00}}},
-    {{{     1,    -26,    -50}, 0, {     0,      0}, {0x91, 0xdd, 0xcf, 0x00}}},
-    {{{    68,    -37,    -56}, 0, {     0,      0}, {0xec, 0x83, 0xfd, 0x00}}},
-    {{{    70,    -40,     30}, 0, {     0,      0}, {0xec, 0x83, 0xfd, 0x00}}},
-    {{{    68,    -37,    -56}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
-    {{{    74,     54,    -43}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
-    {{{    75,     52,     21}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
-    {{{    70,    -40,     30}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
-    {{{     6,     47,     19}, 0, {     0,      0}, {0xad, 0x33, 0x50, 0x00}}},
-    {{{     6,     49,    -38}, 0, {     0,      0}, {0xcf, 0x5b, 0xb7, 0x00}}},
-    {{{    68,    -37,    -56}, 0, {     0,      0}, {0xf8, 0x13, 0x83, 0x00}}},
-    {{{    75,     52,     21}, 0, {     0,      0}, {0xf7, 0x71, 0x38, 0x00}}},
-    {{{    70,    -40,     30}, 0, {     0,      0}, {0xfb, 0x0c, 0x7e, 0x00}}},
-    {{{    74,     54,    -43}, 0, {     0,      0}, {0xf4, 0x60, 0xaf, 0x00}}},
-};
-
-// 0x04017918 - 0x04017988
-const Gfx mario_low_poly_right_leg_shared_dl[] = {
-    gsSPVertex(mario_low_poly_right_leg_shared_dl_vertex, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  4,  6,  7, 0x0),
-    gsSP2Triangles( 8,  9,  1, 0x0,  0,  8,  1, 0x0),
-    gsSP2Triangles(10,  1,  9, 0x0,  9,  8, 11, 0x0),
-    gsSP2Triangles( 8,  0, 12, 0x0, 12, 11,  8, 0x0),
-    gsSP2Triangles(11, 13,  9, 0x0, 13, 10,  9, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04017988
-static const Vtx mario_low_poly_right_foot_dl_vertex[] = {
-    {{{   -55,     19,    -59}, 0, {     0,      0}, {0x9a, 0xc0, 0xda, 0x00}}},
-    {{{   -57,     20,     28}, 0, {     0,      0}, {0xa4, 0xc5, 0x3e, 0x00}}},
-    {{{   -52,     69,     34}, 0, {     0,      0}, {0x82, 0x0c, 0xfd, 0x00}}},
-    {{{    73,    -38,    -50}, 0, {     0,      0}, {0x15, 0xae, 0xa2, 0x00}}},
-    {{{    71,    -37,     25}, 0, {     0,      0}, {0x19, 0x98, 0x42, 0x00}}},
-    {{{   108,     12,    -55}, 0, {     0,      0}, {0x5c, 0xbc, 0xcc, 0x00}}},
-    {{{   106,     13,     33}, 0, {     0,      0}, {0x44, 0xc5, 0x58, 0x00}}},
-    {{{   -50,     68,    -65}, 0, {     0,      0}, {0x82, 0x0c, 0xfd, 0x00}}},
-    {{{   -52,     69,     34}, 0, {     0,      0}, {0xfd, 0xf2, 0x7e, 0x00}}},
-    {{{   -50,     68,    -65}, 0, {     0,      0}, {0x02, 0xf2, 0x82, 0x00}}},
-    {{{   -52,     69,     34}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-    {{{   108,     12,    -55}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-    {{{   -50,     68,    -65}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-    {{{   106,     13,     33}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
-};
-
-// 0x04017A68 - 0x04017AD8
-const Gfx mario_low_poly_right_foot_dl[] = {
-    gsSPVertex(mario_low_poly_right_foot_dl_vertex, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  4, 0x0),
-    gsSP2Triangles( 4,  3,  5, 0x0,  5,  6,  4, 0x0),
-    gsSP2Triangles( 1,  0,  4, 0x0,  7,  0,  2, 0x0),
-    gsSP2Triangles( 6,  8,  4, 0x0,  9,  3,  0, 0x0),
-    gsSP2Triangles( 8,  1,  4, 0x0,  9,  5,  3, 0x0),
-    gsSP2Triangles(10, 11, 12, 0x0, 10, 13, 11, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04017AD8 - 0x04017B18
-const Gfx mario_low_poly_right_foot[] = {
-    gsSPLight(&mario_brown1_lights_group.l, 1),
-    gsSPLight(&mario_brown1_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_right_foot_dl),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
-    gsDPSetEnvColor(255, 255, 255, 255),
-    gsDPSetAlphaCompare(G_AC_NONE),
-    gsSPEndDisplayList(),
-};
-
-// 0x04017B18 - 0x04017B58
-const Gfx mario_metal_low_poly_right_foot[] = {
-    gsSPDisplayList(mario_low_poly_right_foot_dl),
-    gsDPPipeSync(),
-    gsSPClearGeometryMode(G_TEXTURE_GEN),
-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPSetEnvColor(255, 255, 255, 255),
-    gsDPSetAlphaCompare(G_AC_NONE),
-    gsSPEndDisplayList(),
-};
-
-// 0x04017B58
-static const Vtx mario_seg4_vertex_04017B58[] = {
-    {{{   -28,     41,    -88}, 0, {  -396,   1646}, {0xb7, 0x31, 0xa5, 0xff}}},
-    {{{     0,     98,      0}, 0, {  1968,    722}, {0xf0, 0x7d, 0x00, 0xff}}},
-    {{{    35,     64,    -82}, 0, {  -390,    132}, {0x29, 0x4b, 0xa3, 0xff}}},
-    {{{    39,     90,      0}, 0, {  1698,   -280}, {0x4a, 0x67, 0x00, 0xff}}},
-    {{{   -28,     41,     89}, 0, {  1610,   1512}, {0xd1, 0x37, 0x67, 0xff}}},
-    {{{    35,     64,     83}, 0, {  1070,    -68}, {0x29, 0x4b, 0x5d, 0xff}}},
-    {{{     0,     98,      0}, 0, { -1064,    968}, {0xf0, 0x7d, 0x00, 0xff}}},
-    {{{    39,     90,      0}, 0, { -1146,   -124}, {0x4a, 0x67, 0x00, 0xff}}},
-};
-
-// 0x04017BD8
-static const Vtx mario_seg4_vertex_04017BD8[] = {
-    {{{   -28,    -71,     81}, 0, {     0,      0}, {0x9a, 0xbd, 0x20, 0xff}}},
-    {{{   -28,     41,    -88}, 0, {     0,      0}, {0xb7, 0x31, 0xa5, 0xff}}},
-    {{{   -28,    -71,    -80}, 0, {     0,      0}, {0xb7, 0xb5, 0xba, 0xff}}},
-    {{{    39,    -79,    -73}, 0, {     0,      0}, {0x27, 0xb3, 0xa4, 0xff}}},
-    {{{   -28,     41,     89}, 0, {     0,      0}, {0xd1, 0x37, 0x67, 0xff}}},
-    {{{   -28,     89,      0}, 0, {     0,      0}, {0x97, 0x46, 0x00, 0xff}}},
-    {{{    39,    -79,     74}, 0, {     0,      0}, {0x37, 0xba, 0x59, 0xff}}},
-    {{{    35,     64,     83}, 0, {     0,      0}, {0x29, 0x4b, 0x5d, 0xff}}},
-    {{{     0,     98,      0}, 0, {     0,      0}, {0xf0, 0x7d, 0x00, 0xff}}},
-    {{{    35,     64,    -82}, 0, {     0,      0}, {0x29, 0x4b, 0xa3, 0xff}}},
-    {{{    89,    -45,    -42}, 0, {     0,      0}, {0x70, 0xd0, 0xdf, 0xff}}},
-    {{{    89,    -45,     43}, 0, {     0,      0}, {0x75, 0xe4, 0x28, 0xff}}},
-    {{{    74,     26,    -59}, 0, {     0,      0}, {0x61, 0x25, 0xb9, 0xff}}},
-    {{{    39,     90,      0}, 0, {     0,      0}, {0x4a, 0x67, 0x00, 0xff}}},
-    {{{    74,     26,     60}, 0, {     0,      0}, {0x61, 0x25, 0x47, 0xff}}},
-};
-
-// 0x04017CC8
-static const Vtx mario_seg4_vertex_04017CC8[] = {
-    {{{    74,     26,     60}, 0, {     0,      0}, {0x61, 0x25, 0x47, 0xff}}},
-    {{{    87,     42,      0}, 0, {     0,      0}, {0x76, 0x2d, 0x00, 0xff}}},
-    {{{    39,     90,      0}, 0, {     0,      0}, {0x4a, 0x67, 0x00, 0xff}}},
-    {{{    39,    -79,    -73}, 0, {     0,      0}, {0x27, 0xb3, 0xa4, 0xff}}},
-    {{{    35,     64,    -82}, 0, {     0,      0}, {0x29, 0x4b, 0xa3, 0xff}}},
-    {{{    74,     26,    -59}, 0, {     0,      0}, {0x61, 0x25, 0xb9, 0xff}}},
-    {{{    89,    -45,    -42}, 0, {     0,      0}, {0x70, 0xd0, 0xdf, 0xff}}},
-    {{{    39,    -79,     74}, 0, {     0,      0}, {0x37, 0xba, 0x59, 0xff}}},
-    {{{    89,    -45,     43}, 0, {     0,      0}, {0x75, 0xe4, 0x28, 0xff}}},
-    {{{    35,     64,     83}, 0, {     0,      0}, {0x29, 0x4b, 0x5d, 0xff}}},
-};
-
-// 0x04017D68 - 0x04017D98
-const Gfx mario_low_poly_yellow_button_dl[] = {
-    gsSPVertex(mario_seg4_vertex_04017B58, 8, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  2,  1, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  6,  5,  7, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04017D98 - 0x04017E20
-const Gfx mario_low_poly_pants_overalls_shared_dl[] = {
-    gsSPVertex(mario_seg4_vertex_04017BD8, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
-    gsSP2Triangles( 0,  4,  5, 0x0,  3,  6,  0, 0x0),
-    gsSP2Triangles( 4,  0,  6, 0x0,  0,  5,  1, 0x0),
-    gsSP2Triangles( 7,  4,  6, 0x0,  5,  4,  8, 0x0),
-    gsSP2Triangles( 8,  1,  5, 0x0,  3,  1,  9, 0x0),
-    gsSP2Triangles( 3,  2,  1, 0x0,  6,  3, 10, 0x0),
-    gsSP2Triangles(10, 11,  6, 0x0, 12,  9, 13, 0x0),
-    gsSP1Triangle(13,  7, 14, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04017E20 - 0x04017E78
-const Gfx mario_low_poly_tshirt_shared_dl[] = {
-    gsSPVertex(mario_seg4_vertex_04017CC8, 10, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 5,  6,  3, 0x0,  2,  1,  5, 0x0),
-    gsSP2Triangles( 6,  5,  1, 0x0,  7,  8,  0, 0x0),
-    gsSP2Triangles( 7,  0,  9, 0x0,  8,  6,  1, 0x0),
-    gsSP1Triangle( 1,  0,  8, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04017E78 - 0x04017EA0
-const Gfx mario_low_poly_torso_dl[] = {
-    gsSPDisplayList(mario_low_poly_pants_overalls_shared_dl),
-    gsSPLight(&mario_red_lights_group.l, 1),
-    gsSPLight(&mario_red_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_tshirt_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04017EA0 - 0x04017F20
-const Gfx mario_low_poly_torso[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_yellow_button),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_yellow_button_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_low_poly_torso_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04017F20 - 0x04017F40
-const Gfx mario_metal_low_poly_torso[] = {
-    gsSPDisplayList(mario_low_poly_yellow_button_dl),
-    gsSPDisplayList(mario_low_poly_pants_overalls_shared_dl),
-    gsSPDisplayList(mario_low_poly_tshirt_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04017F40
-static const Vtx mario_low_poly_mario_m_logo_dl_vertex[] = {
-    {{{   272,     48,     53}, 0, {   904,      0}, {0x42, 0x51, 0x47, 0xff}}},
-    {{{   174,     79,     -9}, 0, {   452,    816}, {0x51, 0x61, 0xfa, 0xff}}},
-    {{{   146,     27,     92}, 0, {  1238,    962}, {0x03, 0x3a, 0x70, 0xff}}},
-    {{{   272,     48,    -52}, 0, {    -2,      0}, {0x62, 0x27, 0xba, 0xff}}},
-    {{{   146,     27,    -91}, 0, {  -334,    962}, {0x03, 0x39, 0x8f, 0xff}}},
-};
-
-// 0x04017F90
-static const Vtx mario_low_poly_eyes_cap_on_dl_vertex[] = {
-    {{{   146,     27,     92}, 0, {  1316,    212}, {0x03, 0x3a, 0x70, 0xff}}},
-    {{{   168,     79,      0}, 0, {   458,     68}, {0xd9, 0x78, 0x00, 0xff}}},
-    {{{    88,    101,     33}, 0, {   762,    990}, {0x38, 0x55, 0x4b, 0xff}}},
-    {{{    88,    101,    -32}, 0, {   154,    990}, {0x1e, 0x5d, 0xb1, 0xff}}},
-    {{{   146,     27,    -91}, 0, {  -398,    212}, {0x03, 0x39, 0x8f, 0xff}}},
-};
-
-// 0x04017FE0
-static const Vtx mario_low_poly_mustache_cap_on_dl_vertex[] = {
-    {{{    88,    101,    -32}, 0, {   398,    214}, {0x1e, 0x5d, 0xb1, 0xff}}},
-    {{{   146,     27,    -91}, 0, {  1408,   -550}, {0x03, 0x39, 0x8f, 0xff}}},
-    {{{    34,     39,    -98}, 0, {  1306,    732}, {0xcd, 0x40, 0xa0, 0xff}}},
-    {{{    44,    113,      0}, 0, {    10,    800}, {0x9c, 0x4d, 0x00, 0xff}}},
-    {{{    -5,     58,      0}, 0, {   300,   1456}, {0x88, 0x28, 0x00, 0xff}}},
-    {{{    88,    101,     33}, 0, {   294,    258}, {0x38, 0x55, 0x4b, 0xff}}},
-    {{{    44,    113,      0}, 0, {    34,    840}, {0x9c, 0x4d, 0x00, 0xff}}},
-    {{{    34,     39,     99}, 0, {  1314,    634}, {0xcd, 0x40, 0x60, 0xff}}},
-    {{{   146,     27,     92}, 0, {  1132,   -556}, {0x03, 0x3a, 0x70, 0xff}}},
-    {{{    -5,     58,      0}, 0, {   470,   1412}, {0x88, 0x28, 0x00, 0xff}}},
-};
-
-// 0x04018080
-static const Vtx mario_low_poly_face_cap_dl_vertex[] = {
-    {{{   272,     48,    -52}, 0, {     0,      0}, {0x62, 0x27, 0xba, 0xff}}},
-    {{{   272,     48,     53}, 0, {     0,      0}, {0x42, 0x51, 0x47, 0xff}}},
-    {{{   149,    -87,    138}, 0, {     0,      0}, {0x43, 0xb6, 0x4d, 0xff}}},
-    {{{   146,     27,    -91}, 0, {     0,      0}, {0x03, 0x39, 0x8f, 0xff}}},
-    {{{   149,    -87,   -137}, 0, {     0,      0}, {0x33, 0xc2, 0x9f, 0xff}}},
-    {{{   146,     27,     92}, 0, {     0,      0}, {0x03, 0x3a, 0x70, 0xff}}},
-    {{{    58,   -114,     81}, 0, {     0,      0}, {0xba, 0xad, 0x40, 0xff}}},
-    {{{    98,   -165,      0}, 0, {     0,      0}, {0xfd, 0x82, 0x00, 0xff}}},
-    {{{    58,   -114,    -80}, 0, {     0,      0}, {0xbc, 0xb8, 0xb2, 0xff}}},
-    {{{   168,     79,      0}, 0, {     0,      0}, {0xd9, 0x78, 0x00, 0xff}}},
-    {{{   175,    154,      0}, 0, {     0,      0}, {0xe1, 0x6c, 0xc6, 0xff}}},
-    {{{   174,     79,     -9}, 0, {     0,      0}, {0x51, 0x61, 0xfa, 0xff}}},
-};
-
-// 0x04018140
-static const Vtx mario_low_poly_face_part_cap_on_dl_vertex[] = {
-    {{{    94,    146,     33}, 0, {     0,      0}, {0xff, 0x44, 0x6b, 0xff}}},
-    {{{    50,    153,      0}, 0, {     0,      0}, {0xad, 0x5f, 0x00, 0xff}}},
-    {{{    44,    113,      0}, 0, {     0,      0}, {0x9c, 0x4d, 0x00, 0xff}}},
-    {{{    88,    101,     33}, 0, {     0,      0}, {0x38, 0x55, 0x4b, 0xff}}},
-    {{{    94,    146,    -32}, 0, {     0,      0}, {0x3b, 0x35, 0x9e, 0xff}}},
-    {{{    88,    101,    -32}, 0, {     0,      0}, {0x1e, 0x5d, 0xb1, 0xff}}},
-    {{{    34,     39,     99}, 0, {     0,      0}, {0xcd, 0x40, 0x60, 0xff}}},
-    {{{    -5,     58,      0}, 0, {     0,      0}, {0x88, 0x28, 0x00, 0xff}}},
-    {{{     7,    -85,     79}, 0, {     0,      0}, {0xaa, 0xdc, 0x54, 0xff}}},
-    {{{   146,     27,     92}, 0, {     0,      0}, {0x03, 0x3a, 0x70, 0xff}}},
-    {{{     7,    -85,    -78}, 0, {     0,      0}, {0xa9, 0xc7, 0xb9, 0xff}}},
-    {{{    34,     39,    -98}, 0, {     0,      0}, {0xcd, 0x40, 0xa0, 0xff}}},
-    {{{   146,     27,    -91}, 0, {     0,      0}, {0x03, 0x39, 0x8f, 0xff}}},
-};
-
-// 0x04018210
-static const Vtx mario_low_poly_face_back_hair_cap_on_dl_vertex[] = {
-    {{{    58,   -114,     81}, 0, {     0,      0}, {0xba, 0xad, 0x40, 0xff}}},
-    {{{     7,    -85,     79}, 0, {     0,      0}, {0xaa, 0xdc, 0x54, 0xff}}},
-    {{{     7,    -85,    -78}, 0, {     0,      0}, {0xa9, 0xc7, 0xb9, 0xff}}},
-    {{{    58,   -114,    -80}, 0, {     0,      0}, {0xbc, 0xb8, 0xb2, 0xff}}},
-    {{{   146,     27,     92}, 0, {     0,      0}, {0x03, 0x3a, 0x70, 0xff}}},
-    {{{   146,     27,    -91}, 0, {     0,      0}, {0x03, 0x39, 0x8f, 0xff}}},
-};
-
-// 0x04018270 - 0x04018298
-const Gfx mario_low_poly_mario_m_logo_dl[] = {
-    gsSPVertex(mario_low_poly_mario_m_logo_dl_vertex, 5, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
-    gsSP1Triangle( 3,  1,  0, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04018298 - 0x040182C0
-const Gfx mario_low_poly_eyes_cap_on_dl[] = {
-    gsSPVertex(mario_low_poly_eyes_cap_on_dl_vertex, 5, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  4, 0x0),
-    gsSP1Triangle( 3,  2,  1, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040182C0 - 0x04018300
-const Gfx mario_low_poly_mustache_cap_on_dl[] = {
-    gsSPVertex(mario_low_poly_mustache_cap_on_dl_vertex, 10, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
-    gsSP2Triangles( 2,  4,  3, 0x0,  5,  6,  7, 0x0),
-    gsSP2Triangles( 7,  8,  5, 0x0,  6,  9,  7, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04018300 - 0x04018370
-const Gfx mario_low_poly_face_part_cap_on_dl[] = {
-    gsSPVertex(mario_low_poly_face_part_cap_on_dl_vertex, 13, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
-    gsSP2Triangles( 2,  1,  4, 0x0,  2,  4,  5, 0x0),
-    gsSP2Triangles( 4,  1,  0, 0x0,  4,  0,  3, 0x0),
-    gsSP2Triangles( 5,  4,  3, 0x0,  6,  7,  8, 0x0),
-    gsSP2Triangles( 9,  6,  8, 0x0,  8,  7, 10, 0x0),
-    gsSP2Triangles(10,  7, 11, 0x0, 10, 11, 12, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04018370 - 0x040183F0
-const Gfx mario_low_poly_face_cap_dl[] = {
-    gsSPVertex(mario_low_poly_face_cap_dl_vertex, 12, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  4, 0x0),
-    gsSP2Triangles( 4,  0,  2, 0x0,  2,  1,  5, 0x0),
-    gsSP2Triangles( 6,  2,  5, 0x0,  6,  7,  2, 0x0),
-    gsSP2Triangles( 7,  4,  2, 0x0,  3,  4,  8, 0x0),
-    gsSP2Triangles( 4,  7,  8, 0x0,  9, 10,  3, 0x0),
-    gsSP2Triangles(10, 11,  3, 0x0,  8,  7,  6, 0x0),
-    gsSP2Triangles(10,  5, 11, 0x0, 10,  9,  5, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x040183F0 - 0x04018420
-const Gfx mario_low_poly_face_back_hair_cap_on_dl[] = {
-    gsSPVertex(mario_low_poly_face_back_hair_cap_on_dl_vertex, 6, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
-    gsSP2Triangles( 4,  1,  0, 0x0,  3,  2,  5, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04018420 - 0x04018460
-const Gfx mario_low_poly_face_cap_on_dl[] = {
-    gsSPDisplayList(mario_low_poly_face_part_cap_on_dl),
-    gsSPLight(&mario_red_lights_group.l, 1),
-    gsSPLight(&mario_red_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_face_cap_dl),
-    gsSPLight(&mario_brown2_lights_group.l, 1),
-    gsSPLight(&mario_brown2_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_face_back_hair_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04018460 - 0x04018530
-const Gfx mario_low_poly_cap_on_eyes_front[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_front),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_low_poly_face_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04018530 - 0x04018600
-const Gfx mario_low_poly_cap_on_eyes_half_closed[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_half_closed),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_low_poly_face_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04018600 - 0x040186D0
-const Gfx mario_low_poly_cap_on_eyes_closed[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_closed),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_low_poly_face_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x040186D0 - 0x040187A0
-const Gfx mario_low_poly_cap_on_eyes_right[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_right),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_low_poly_face_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x040187A0 - 0x04018870
-const Gfx mario_low_poly_cap_on_eyes_left[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_left),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_low_poly_face_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04018870 - 0x04018940
-const Gfx mario_low_poly_cap_on_eyes_up[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_up),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_low_poly_face_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04018940 - 0x04018A10
-const Gfx mario_low_poly_cap_on_eyes_down[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_down),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_low_poly_face_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04018A10 - 0x04018AE0
-const Gfx mario_low_poly_cap_on_eyes_dead[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_dead),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_low_poly_face_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04018AE0 - 0x04018B18
-const Gfx mario_metal_low_poly_cap_on[] = {
-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
-    gsSPDisplayList(mario_low_poly_face_part_cap_on_dl),
-    gsSPDisplayList(mario_low_poly_face_cap_dl),
-    gsSPDisplayList(mario_low_poly_face_back_hair_cap_on_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04018B18
-static const Vtx mario_low_poly_mario_eyes_cap_off_dl_vertex[] = {
-    {{{   146,     27,     92}, 0, {  1316,    212}, {0x16, 0x25, 0x77, 0xff}}},
-    {{{   168,     79,      0}, 0, {   458,     68}, {0x27, 0x78, 0x00, 0xff}}},
-    {{{    88,    101,     33}, 0, {   762,    990}, {0x38, 0x55, 0x4b, 0xff}}},
-    {{{    88,    101,    -32}, 0, {   154,    990}, {0x1e, 0x5d, 0xb1, 0xff}}},
-    {{{   146,     27,    -91}, 0, {  -398,    212}, {0x14, 0x26, 0x89, 0xff}}},
-};
-
-// 0x04018B68
-static const Vtx mario_low_poly_mustache_cap_off_dl_vertex[] = {
-    {{{    34,     39,    -98}, 0, {  1306,    732}, {0xcd, 0x40, 0xa0, 0xff}}},
-    {{{    44,    113,      0}, 0, {    10,    800}, {0x9c, 0x4d, 0x00, 0xff}}},
-    {{{    88,    101,    -32}, 0, {   398,    214}, {0x1e, 0x5d, 0xb1, 0xff}}},
-    {{{    -5,     58,      0}, 0, {   300,   1456}, {0x88, 0x28, 0x00, 0xff}}},
-    {{{   146,     27,    -91}, 0, {  1408,   -550}, {0x14, 0x26, 0x89, 0xff}}},
-    {{{    88,    101,     33}, 0, {   294,    258}, {0x38, 0x55, 0x4b, 0xff}}},
-    {{{    44,    113,      0}, 0, {    34,    840}, {0x9c, 0x4d, 0x00, 0xff}}},
-    {{{    34,     39,     99}, 0, {  1314,    634}, {0xcd, 0x40, 0x60, 0xff}}},
-    {{{    -5,     58,      0}, 0, {   470,   1412}, {0x88, 0x28, 0x00, 0xff}}},
-    {{{   146,     27,     92}, 0, {  1132,   -556}, {0x16, 0x25, 0x77, 0xff}}},
-};
-
-// 0x04018C08
-static const Vtx mario_low_poly_face_part_cap_off_dl_vertex[] = {
-    {{{    44,    113,      0}, 0, {     0,      0}, {0x9c, 0x4d, 0x00, 0xff}}},
-    {{{    94,    146,    -32}, 0, {     0,      0}, {0x3b, 0x35, 0x9e, 0xff}}},
-    {{{    88,    101,    -32}, 0, {     0,      0}, {0x1e, 0x5d, 0xb1, 0xff}}},
-    {{{    50,    153,      0}, 0, {     0,      0}, {0xad, 0x5f, 0x00, 0xff}}},
-    {{{    88,    101,     33}, 0, {     0,      0}, {0x38, 0x55, 0x4b, 0xff}}},
-    {{{    94,    146,     33}, 0, {     0,      0}, {0xff, 0x44, 0x6b, 0xff}}},
-    {{{   146,     27,     92}, 0, {     0,      0}, {0x16, 0x25, 0x77, 0xff}}},
-    {{{    34,     39,     99}, 0, {     0,      0}, {0xcd, 0x40, 0x60, 0xff}}},
-    {{{     7,    -85,     79}, 0, {     0,      0}, {0xaa, 0xdc, 0x54, 0xff}}},
-    {{{    -5,     58,      0}, 0, {     0,      0}, {0x88, 0x28, 0x00, 0xff}}},
-    {{{     7,    -85,    -78}, 0, {     0,      0}, {0xa9, 0xc7, 0xb9, 0xff}}},
-    {{{    34,     39,    -98}, 0, {     0,      0}, {0xcd, 0x40, 0xa0, 0xff}}},
-    {{{   146,     27,    -91}, 0, {     0,      0}, {0x14, 0x26, 0x89, 0xff}}},
-};
-
-// 0x04018CD8
-static const Vtx mario_low_poly_face_hair_cap_off_dl_vertex[] = {
-    {{{    58,   -114,     81}, 0, {     0,      0}, {0xd3, 0x9b, 0x3d, 0xff}}},
-    {{{     7,    -85,     79}, 0, {     0,      0}, {0xaa, 0xdc, 0x54, 0xff}}},
-    {{{     7,    -85,    -78}, 0, {     0,      0}, {0xa9, 0xc7, 0xb9, 0xff}}},
-    {{{   146,     27,     92}, 0, {     0,      0}, {0x16, 0x25, 0x77, 0xff}}},
-    {{{   167,   -121,     77}, 0, {     0,      0}, {0x3c, 0xad, 0x4a, 0xff}}},
-    {{{    58,   -114,    -80}, 0, {     0,      0}, {0xd8, 0xa3, 0xb5, 0xff}}},
-    {{{    90,   -136,      0}, 0, {     0,      0}, {0xf0, 0x83, 0x00, 0xff}}},
-    {{{   146,     27,    -91}, 0, {     0,      0}, {0x14, 0x26, 0x89, 0xff}}},
-    {{{   167,   -121,    -81}, 0, {     0,      0}, {0x3a, 0xad, 0xb5, 0xff}}},
-    {{{   218,     48,    -52}, 0, {     0,      0}, {0x5f, 0x3b, 0xc6, 0xff}}},
-    {{{   168,     79,      0}, 0, {     0,      0}, {0x27, 0x78, 0x00, 0xff}}},
-    {{{   192,    -28,    -80}, 0, {     0,      0}, {0x55, 0xf7, 0xa3, 0xff}}},
-    {{{   223,    -38,     -1}, 0, {     0,      0}, {0x7b, 0xe2, 0x00, 0xff}}},
-    {{{   218,     48,     53}, 0, {     0,      0}, {0x60, 0x39, 0x3a, 0xff}}},
-    {{{   192,    -28,     78}, 0, {     0,      0}, {0x56, 0xf4, 0x5c, 0xff}}},
-};
-
-// 0x04018DC8 - 0x04018DF0
-const Gfx mario_low_poly_mario_eyes_cap_off_dl[] = {
-    gsSPVertex(mario_low_poly_mario_eyes_cap_off_dl_vertex, 5, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  4, 0x0),
-    gsSP1Triangle( 3,  2,  1, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04018DF0 - 0x04018E30
-const Gfx mario_low_poly_mustache_cap_off_dl[] = {
-    gsSPVertex(mario_low_poly_mustache_cap_off_dl_vertex, 10, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
-    gsSP2Triangles( 2,  4,  0, 0x0,  5,  6,  7, 0x0),
-    gsSP2Triangles( 6,  8,  7, 0x0,  7,  9,  5, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04018E30 - 0x04018EA0
-const Gfx mario_low_poly_face_part_cap_off_dl[] = {
-    gsSPVertex(mario_low_poly_face_part_cap_off_dl_vertex, 13, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
-    gsSP2Triangles( 4,  5,  0, 0x0,  5,  3,  0, 0x0),
-    gsSP2Triangles( 1,  3,  5, 0x0,  2,  1,  4, 0x0),
-    gsSP2Triangles( 1,  5,  4, 0x0,  6,  7,  8, 0x0),
-    gsSP2Triangles( 7,  9,  8, 0x0,  8,  9, 10, 0x0),
-    gsSP2Triangles(10,  9, 11, 0x0, 10, 11, 12, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04018EA0 - 0x04018F68
-const Gfx mario_low_poly_face_hair_cap_off_dl[] = {
-    gsSPVertex(mario_low_poly_face_hair_cap_off_dl_vertex, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
-    gsSP2Triangles( 0,  4,  3, 0x0,  0,  2,  5, 0x0),
-    gsSP2Triangles( 5,  6,  0, 0x0,  0,  6,  4, 0x0),
-    gsSP2Triangles( 5,  2,  7, 0x0,  7,  8,  5, 0x0),
-    gsSP2Triangles( 8,  6,  5, 0x0,  9,  7, 10, 0x0),
-    gsSP2Triangles( 7,  9, 11, 0x0,  7, 11,  8, 0x0),
-    gsSP2Triangles( 6,  8,  4, 0x0,  8, 11, 12, 0x0),
-    gsSP2Triangles( 4,  8, 12, 0x0, 11,  9, 12, 0x0),
-    gsSP2Triangles(13, 14, 12, 0x0, 14,  4, 12, 0x0),
-    gsSP2Triangles( 4, 14,  3, 0x0, 13, 10,  3, 0x0),
-    gsSP2Triangles(14, 13,  3, 0x0,  9, 10, 13, 0x0),
-    gsSP1Triangle( 9, 13, 12, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04018F68 - 0x04018F90
-const Gfx mario_low_poly_face_cap_off_dl[] = {
-    gsSPDisplayList(mario_low_poly_face_part_cap_off_dl),
-    gsSPLight(&mario_brown2_lights_group.l, 1),
-    gsSPLight(&mario_brown2_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_face_hair_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04018F90 - 0x04019040
-const Gfx mario_low_poly_cap_off_eyes_front[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_front),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_low_poly_face_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04019040 - 0x040190F0
-const Gfx mario_low_poly_cap_off_eyes_half_closed[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_half_closed),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_low_poly_face_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x040190F0 - 0x040191A0
-const Gfx mario_low_poly_cap_off_eyes_closed[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_closed),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_low_poly_face_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x040191A0 - 0x04019250
-const Gfx mario_low_poly_cap_off_eyes_right[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_right),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_low_poly_face_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04019250 - 0x04019300
-const Gfx mario_low_poly_cap_off_eyes_left[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_left),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_low_poly_face_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04019300 - 0x040193B0
-const Gfx mario_low_poly_cap_off_eyes_up[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_up),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_low_poly_face_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x040193B0 - 0x04019460
-const Gfx mario_low_poly_cap_off_eyes_down[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_down),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_low_poly_face_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04019460 - 0x04019510
-const Gfx mario_low_poly_cap_off_eyes_dead[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_dead),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_beige_lights_group.l, 1),
-    gsSPLight(&mario_beige_lights_group.a, 2),
-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_low_poly_face_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04019510 - 0x04019538
-const Gfx mario_metal_low_poly_cap_off[] = {
-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
-    gsSPDisplayList(mario_low_poly_face_part_cap_off_dl),
-    gsSPDisplayList(mario_low_poly_face_hair_cap_off_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04019538
-static const Vtx mario_left_hand_open_shared_dl_vertex_group1[] = {
-    {{{   121,     73,    -21}, 0, {     0,      0}, {0x47, 0x60, 0x2b, 0x00}}},
-    {{{    70,     89,    -20}, 0, {     0,      0}, {0xec, 0x7c, 0xf6, 0x00}}},
-    {{{    77,     41,     21}, 0, {     0,      0}, {0x1d, 0x2a, 0x74, 0x00}}},
-    {{{   141,     34,     -7}, 0, {     0,      0}, {0x77, 0x0c, 0x29, 0x00}}},
-    {{{    78,     59,    -34}, 0, {     0,      0}, {0xfe, 0x0b, 0x82, 0x00}}},
-    {{{   119,     70,    -42}, 0, {     0,      0}, {0x3d, 0x44, 0xa9, 0x00}}},
-    {{{   133,     28,    -40}, 0, {     0,      0}, {0x45, 0xc9, 0xa6, 0x00}}},
-    {{{    83,    -17,     10}, 0, {     0,      0}, {0x4d, 0xbd, 0x4a, 0x00}}},
-    {{{    26,    -32,      6}, 0, {     0,      0}, {0x34, 0xa6, 0x47, 0x00}}},
-    {{{    45,    -34,     10}, 0, {     0,      0}, {0xfe, 0x9a, 0x4a, 0x00}}},
-    {{{    26,     16,     28}, 0, {     0,      0}, {0xda, 0x0c, 0x78, 0x00}}},
-    {{{    41,    -37,    -36}, 0, {     0,      0}, {0xd8, 0x9b, 0xbf, 0x00}}},
-    {{{    20,    -27,    -27}, 0, {     0,      0}, {0x09, 0xbf, 0x94, 0x00}}},
-    {{{    25,     -1,    -44}, 0, {     0,      0}, {0xe4, 0xe0, 0x89, 0x00}}},
-};
-
-// 0x04019618
-static const Vtx mario_left_hand_open_shared_dl_vertex_group2[] = {
-    {{{    -3,     35,     -9}, 0, {     0,      0}, {0xcd, 0x72, 0x13, 0x00}}},
-    {{{     6,     53,     -9}, 0, {     0,      0}, {0xaf, 0x61, 0x00, 0x00}}},
-    {{{    11,     29,    -52}, 0, {     0,      0}, {0xba, 0x2a, 0xa0, 0x00}}},
-    {{{    26,     16,     28}, 0, {     0,      0}, {0xda, 0x0c, 0x78, 0x00}}},
-    {{{     1,    -33,    -23}, 0, {     0,      0}, {0x9c, 0xbb, 0xe0, 0x00}}},
-    {{{     6,    -38,      7}, 0, {     0,      0}, {0xae, 0xab, 0x2b, 0x00}}},
-    {{{    -6,     -3,     17}, 0, {     0,      0}, {0x90, 0xda, 0x2d, 0x00}}},
-    {{{     2,      3,     26}, 0, {     0,      0}, {0xf5, 0x17, 0x7c, 0x00}}},
-    {{{    20,    -46,     12}, 0, {     0,      0}, {0x26, 0x9e, 0x45, 0x00}}},
-    {{{    26,    -32,      6}, 0, {     0,      0}, {0x34, 0xa6, 0x47, 0x00}}},
-    {{{   -17,     40,     -8}, 0, {     0,      0}, {0xbc, 0x68, 0x16, 0x00}}},
-    {{{   -10,     14,    -43}, 0, {     0,      0}, {0xd3, 0x19, 0x8d, 0x00}}},
-    {{{    20,    -27,    -27}, 0, {     0,      0}, {0x09, 0xbf, 0x94, 0x00}}},
-    {{{    13,    -39,    -31}, 0, {     0,      0}, {0x18, 0x9a, 0xba, 0x00}}},
-    {{{   -20,     22,     -7}, 0, {     0,      0}, {0x83, 0x06, 0x14, 0x00}}},
-    {{{    70,     89,    -20}, 0, {     0,      0}, {0xec, 0x7c, 0xf6, 0x00}}},
-};
-
-// 0x04019718
-static const Vtx mario_left_hand_open_shared_dl_vertex_group3[] = {
-    {{{    45,    -34,     10}, 0, {     0,      0}, {0xfe, 0x9a, 0x4a, 0x00}}},
-    {{{    83,    -17,     10}, 0, {     0,      0}, {0x4d, 0xbd, 0x4a, 0x00}}},
-    {{{    26,     16,     28}, 0, {     0,      0}, {0xda, 0x0c, 0x78, 0x00}}},
-    {{{    89,    -47,    -37}, 0, {     0,      0}, {0x56, 0xaa, 0xdf, 0x00}}},
-    {{{    76,    -18,    -48}, 0, {     0,      0}, {0x27, 0x0a, 0x88, 0x00}}},
-    {{{    89,     -6,    -27}, 0, {     0,      0}, {0x5c, 0xf5, 0xab, 0x00}}},
-    {{{     6,     53,     -9}, 0, {     0,      0}, {0xaf, 0x61, 0x00, 0x00}}},
-    {{{    26,     41,    -41}, 0, {     0,      0}, {0x05, 0x34, 0x8d, 0x00}}},
-    {{{    11,     29,    -52}, 0, {     0,      0}, {0xba, 0x2a, 0xa0, 0x00}}},
-    {{{   141,     34,     -7}, 0, {     0,      0}, {0x77, 0x0c, 0x29, 0x00}}},
-    {{{    77,     41,     21}, 0, {     0,      0}, {0x1d, 0x2a, 0x74, 0x00}}},
-    {{{   133,     28,    -40}, 0, {     0,      0}, {0x45, 0xc9, 0xa6, 0x00}}},
-    {{{    69,     10,    -36}, 0, {     0,      0}, {0x35, 0x1c, 0x91, 0x00}}},
-    {{{    78,     59,    -34}, 0, {     0,      0}, {0xfe, 0x0b, 0x82, 0x00}}},
-    {{{   121,     73,    -21}, 0, {     0,      0}, {0x47, 0x60, 0x2b, 0x00}}},
-    {{{   119,     70,    -42}, 0, {     0,      0}, {0x3d, 0x44, 0xa9, 0x00}}},
-};
-
-// 0x04019818
-static const Vtx mario_left_hand_open_shared_dl_vertex_group4[] = {
-    {{{    25,     -1,    -44}, 0, {     0,      0}, {0xe4, 0xe0, 0x89, 0x00}}},
-    {{{    11,     29,    -52}, 0, {     0,      0}, {0xba, 0x2a, 0xa0, 0x00}}},
-    {{{    26,     41,    -41}, 0, {     0,      0}, {0x05, 0x34, 0x8d, 0x00}}},
-    {{{    78,     59,    -34}, 0, {     0,      0}, {0xfe, 0x0b, 0x82, 0x00}}},
-    {{{    69,     10,    -36}, 0, {     0,      0}, {0x35, 0x1c, 0x91, 0x00}}},
-    {{{    89,    -47,    -37}, 0, {     0,      0}, {0x56, 0xaa, 0xdf, 0x00}}},
-    {{{    41,    -37,    -36}, 0, {     0,      0}, {0xd8, 0x9b, 0xbf, 0x00}}},
-    {{{    76,    -18,    -48}, 0, {     0,      0}, {0x27, 0x0a, 0x88, 0x00}}},
-    {{{    45,    -34,     10}, 0, {     0,      0}, {0xfe, 0x9a, 0x4a, 0x00}}},
-    {{{    89,     -6,    -27}, 0, {     0,      0}, {0x5c, 0xf5, 0xab, 0x00}}},
-    {{{    83,    -17,     10}, 0, {     0,      0}, {0x4d, 0xbd, 0x4a, 0x00}}},
-    {{{    70,     89,    -20}, 0, {     0,      0}, {0xec, 0x7c, 0xf6, 0x00}}},
-    {{{     6,     53,     -9}, 0, {     0,      0}, {0xaf, 0x61, 0x00, 0x00}}},
-    {{{   133,     28,    -40}, 0, {     0,      0}, {0x45, 0xc9, 0xa6, 0x00}}},
-    {{{    77,     41,     21}, 0, {     0,      0}, {0x1d, 0x2a, 0x74, 0x00}}},
-    {{{    26,     16,     28}, 0, {     0,      0}, {0xda, 0x0c, 0x78, 0x00}}},
-};
-
-// 0x04019918
-static const Vtx mario_left_hand_open_shared_dl_vertex_group5[] = {
-    {{{     6,    -38,      7}, 0, {     0,      0}, {0xae, 0xab, 0x2b, 0x00}}},
-    {{{     1,    -33,    -23}, 0, {     0,      0}, {0x9c, 0xbb, 0xe0, 0x00}}},
-    {{{    13,    -39,    -31}, 0, {     0,      0}, {0x18, 0x9a, 0xba, 0x00}}},
-    {{{   -15,      4,    -32}, 0, {     0,      0}, {0x89, 0xdd, 0xe7, 0x00}}},
-    {{{   -10,     14,    -43}, 0, {     0,      0}, {0xd3, 0x19, 0x8d, 0x00}}},
-    {{{   -20,     22,     -7}, 0, {     0,      0}, {0x83, 0x06, 0x14, 0x00}}},
-    {{{    -6,     -3,     17}, 0, {     0,      0}, {0x90, 0xda, 0x2d, 0x00}}},
-    {{{     2,      3,     26}, 0, {     0,      0}, {0xf5, 0x17, 0x7c, 0x00}}},
-    {{{    20,    -27,    -27}, 0, {     0,      0}, {0x09, 0xbf, 0x94, 0x00}}},
-    {{{    26,    -32,      6}, 0, {     0,      0}, {0x34, 0xa6, 0x47, 0x00}}},
-    {{{     1,     15,    -37}, 0, {     0,      0}, {0xd2, 0x09, 0x8b, 0x00}}},
-    {{{    -3,     35,     -9}, 0, {     0,      0}, {0xcd, 0x72, 0x13, 0x00}}},
-    {{{    11,      5,     17}, 0, {     0,      0}, {0xff, 0x1b, 0x7c, 0x00}}},
-    {{{    26,     16,     28}, 0, {     0,      0}, {0xda, 0x0c, 0x78, 0x00}}},
-    {{{    11,     29,    -52}, 0, {     0,      0}, {0xba, 0x2a, 0xa0, 0x00}}},
-    {{{    25,     -1,    -44}, 0, {     0,      0}, {0xe4, 0xe0, 0x89, 0x00}}},
-};
-
-// 0x04019A18
-static const Vtx mario_left_hand_open_shared_dl_vertex_group6[] = {
-    {{{    26,    -32,      6}, 0, {     0,      0}, {0x34, 0xa6, 0x47, 0x00}}},
-    {{{    20,    -27,    -27}, 0, {     0,      0}, {0x09, 0xbf, 0x94, 0x00}}},
-    {{{    41,    -37,    -36}, 0, {     0,      0}, {0xd8, 0x9b, 0xbf, 0x00}}},
-    {{{    26,     16,     28}, 0, {     0,      0}, {0xda, 0x0c, 0x78, 0x00}}},
-    {{{    11,      5,     17}, 0, {     0,      0}, {0xff, 0x1b, 0x7c, 0x00}}},
-};
-
-// 0x04019A68 - 0x04019CA0
-const Gfx mario_left_hand_open_shared_dl[] = {
-    gsSPVertex(mario_left_hand_open_shared_dl_vertex_group1, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  6,  3,  7, 0x0),
-    gsSP2Triangles( 1,  0,  5, 0x0,  5,  4,  1, 0x0),
-    gsSP2Triangles( 5,  3,  6, 0x0,  8,  9, 10, 0x0),
-    gsSP2Triangles( 8, 11,  9, 0x0, 12, 13, 11, 0x0),
-    gsSPVertex(mario_left_hand_open_shared_dl_vertex_group2, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  8,  9, 0x0),
-    gsSP2Triangles( 0, 10,  7, 0x0, 11, 10,  0, 0x0),
-    gsSP2Triangles(12, 13, 11, 0x0,  9,  8, 13, 0x0),
-    gsSP2Triangles( 7,  5,  8, 0x0, 10, 14,  7, 0x0),
-    gsSP2Triangles(11, 14, 10, 0x0, 13,  4, 11, 0x0),
-    gsSP2Triangles( 8,  5, 13, 0x0,  3, 15,  1, 0x0),
-    gsSPVertex(mario_left_hand_open_shared_dl_vertex_group3, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
-    gsSP2Triangles( 4,  5,  3, 0x0,  6,  7,  8, 0x0),
-    gsSP2Triangles( 1,  9, 10, 0x0,  5, 11,  1, 0x0),
-    gsSP2Triangles(12, 13,  5, 0x0, 14,  9, 15, 0x0),
-    gsSP1Triangle( 4,  7, 12, 0x0),
-    gsSPVertex(mario_left_hand_open_shared_dl_vertex_group4, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  4, 0x0),
-    gsSP2Triangles( 5,  6,  7, 0x0,  7,  0,  2, 0x0),
-    gsSP2Triangles( 8,  6,  5, 0x0,  5,  9, 10, 0x0),
-    gsSP2Triangles(11,  3,  2, 0x0,  2, 12, 11, 0x0),
-    gsSP2Triangles( 3, 13,  9, 0x0,  6,  0,  7, 0x0),
-    gsSP2Triangles( 7,  4,  9, 0x0, 10, 14, 15, 0x0),
-    gsSP1Triangle(15, 14, 11, 0x0),
-    gsSPVertex(mario_left_hand_open_shared_dl_vertex_group5, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  4, 0x0),
-    gsSP2Triangles( 4,  3,  5, 0x0,  5,  6,  7, 0x0),
-    gsSP2Triangles( 7,  6,  0, 0x0,  2,  8,  9, 0x0),
-    gsSP2Triangles( 4, 10,  8, 0x0, 11, 10,  4, 0x0),
-    gsSP2Triangles( 7, 12, 11, 0x0,  9, 12,  7, 0x0),
-    gsSP2Triangles( 6,  3,  1, 0x0,  6,  5,  3, 0x0),
-    gsSP2Triangles(11, 12, 13, 0x0, 14, 10, 11, 0x0),
-    gsSP2Triangles( 8, 10, 15, 0x0, 10, 14, 15, 0x0),
-    gsSPVertex(mario_left_hand_open_shared_dl_vertex_group6, 5, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  0, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x04019CA0 - 0x04019CC0
-const Gfx mario_left_hand_open[] = {
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPDisplayList(mario_left_hand_open_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x04019CC0
-static const Vtx mario_right_hand_open_dl_vertex_group1[] = {
-    {{{    81,     37,    -28}, 0, {     0,      0}, {0x18, 0x20, 0x88, 0x00}}},
-    {{{    76,     88,      9}, 0, {     0,      0}, {0xef, 0x7d, 0x00, 0x00}}},
-    {{{   125,     71,      9}, 0, {     0,      0}, {0x47, 0x5a, 0xcb, 0x00}}},
-    {{{   143,     31,     -1}, 0, {     0,      0}, {0x75, 0x06, 0xd2, 0x00}}},
-    {{{   136,     28,     31}, 0, {     0,      0}, {0x4a, 0xcf, 0x5a, 0x00}}},
-    {{{   124,     69,     30}, 0, {     0,      0}, {0x44, 0x49, 0x4d, 0x00}}},
-    {{{    84,     59,     25}, 0, {     0,      0}, {0x04, 0x15, 0x7c, 0x00}}},
-    {{{    86,    -19,    -13}, 0, {     0,      0}, {0x49, 0xb6, 0xb8, 0x00}}},
-    {{{    30,     13,    -30}, 0, {     0,      0}, {0xd3, 0x03, 0x8a, 0x00}}},
-    {{{    48,    -35,     -9}, 0, {     0,      0}, {0xf7, 0x94, 0xbe, 0x00}}},
-    {{{    30,    -32,     -4}, 0, {     0,      0}, {0x2f, 0x9f, 0xbe, 0x00}}},
-    {{{    46,    -35,     37}, 0, {     0,      0}, {0xd8, 0xa2, 0x4a, 0x00}}},
-    {{{    32,      2,     43}, 0, {     0,      0}, {0xe9, 0xeb, 0x7a, 0x00}}},
-    {{{    26,    -24,     28}, 0, {     0,      0}, {0x0d, 0xc8, 0x70, 0x00}}},
-};
-
-// 0x04019DA0
-static const Vtx mario_right_hand_open_dl_vertex_group2[] = {
-    {{{    20,     33,     48}, 0, {     0,      0}, {0xbf, 0x32, 0x60, 0x00}}},
-    {{{    13,     53,      5}, 0, {     0,      0}, {0xb0, 0x62, 0xfc, 0x00}}},
-    {{{     3,     36,      6}, 0, {     0,      0}, {0xce, 0x71, 0xe6, 0x00}}},
-    {{{    30,     13,    -30}, 0, {     0,      0}, {0xd3, 0x03, 0x8a, 0x00}}},
-    {{{     0,     -4,    -15}, 0, {     0,      0}, {0x8d, 0xda, 0xdc, 0x00}}},
-    {{{    11,    -38,     -3}, 0, {     0,      0}, {0xa9, 0xaa, 0xe0, 0x00}}},
-    {{{     7,    -30,     26}, 0, {     0,      0}, {0x9b, 0xc0, 0x29, 0x00}}},
-    {{{    30,    -32,     -4}, 0, {     0,      0}, {0x2f, 0x9f, 0xbe, 0x00}}},
-    {{{    25,    -46,     -9}, 0, {     0,      0}, {0x21, 0x97, 0xc1, 0x00}}},
-    {{{     7,      1,    -26}, 0, {     0,      0}, {0xee, 0x0d, 0x84, 0x00}}},
-    {{{    -9,     41,      5}, 0, {     0,      0}, {0xbc, 0x66, 0xe5, 0x00}}},
-    {{{    -1,     18,     42}, 0, {     0,      0}, {0xd9, 0x23, 0x73, 0x00}}},
-    {{{    19,    -36,     33}, 0, {     0,      0}, {0x1a, 0xa0, 0x4d, 0x00}}},
-    {{{    26,    -24,     28}, 0, {     0,      0}, {0x0d, 0xc8, 0x70, 0x00}}},
-    {{{   -12,     23,      6}, 0, {     0,      0}, {0x83, 0x07, 0xf1, 0x00}}},
-    {{{    76,     88,      9}, 0, {     0,      0}, {0xef, 0x7d, 0x00, 0x00}}},
-};
-
-// 0x04019EA0
-static const Vtx mario_right_hand_open_dl_vertex_group3[] = {
-    {{{    30,     13,    -30}, 0, {     0,      0}, {0xd3, 0x03, 0x8a, 0x00}}},
-    {{{    86,    -19,    -13}, 0, {     0,      0}, {0x49, 0xb6, 0xb8, 0x00}}},
-    {{{    48,    -35,     -9}, 0, {     0,      0}, {0xf7, 0x94, 0xbe, 0x00}}},
-    {{{    93,    -45,     36}, 0, {     0,      0}, {0x57, 0xac, 0x23, 0x00}}},
-    {{{    93,     -5,     22}, 0, {     0,      0}, {0x61, 0xfa, 0x50, 0x00}}},
-    {{{    81,    -15,     45}, 0, {     0,      0}, {0x2f, 0x13, 0x74, 0x00}}},
-    {{{    20,     33,     48}, 0, {     0,      0}, {0xbf, 0x32, 0x60, 0x00}}},
-    {{{    34,     43,     36}, 0, {     0,      0}, {0x0c, 0x3d, 0x6e, 0x00}}},
-    {{{    13,     53,      5}, 0, {     0,      0}, {0xb0, 0x62, 0xfc, 0x00}}},
-    {{{    81,     37,    -28}, 0, {     0,      0}, {0x18, 0x20, 0x88, 0x00}}},
-    {{{   143,     31,     -1}, 0, {     0,      0}, {0x75, 0x06, 0xd2, 0x00}}},
-    {{{   136,     28,     31}, 0, {     0,      0}, {0x4a, 0xcf, 0x5a, 0x00}}},
-    {{{    84,     59,     25}, 0, {     0,      0}, {0x04, 0x15, 0x7c, 0x00}}},
-    {{{    75,     11,     32}, 0, {     0,      0}, {0x3c, 0x23, 0x69, 0x00}}},
-    {{{   124,     69,     30}, 0, {     0,      0}, {0x44, 0x49, 0x4d, 0x00}}},
-    {{{   125,     71,      9}, 0, {     0,      0}, {0x47, 0x5a, 0xcb, 0x00}}},
-};
-
-// 0x04019FA0
-static const Vtx mario_right_hand_open_dl_vertex_group4[] = {
-    {{{    34,     43,     36}, 0, {     0,      0}, {0x0c, 0x3d, 0x6e, 0x00}}},
-    {{{    20,     33,     48}, 0, {     0,      0}, {0xbf, 0x32, 0x60, 0x00}}},
-    {{{    32,      2,     43}, 0, {     0,      0}, {0xe9, 0xeb, 0x7a, 0x00}}},
-    {{{    75,     11,     32}, 0, {     0,      0}, {0x3c, 0x23, 0x69, 0x00}}},
-    {{{    84,     59,     25}, 0, {     0,      0}, {0x04, 0x15, 0x7c, 0x00}}},
-    {{{    81,    -15,     45}, 0, {     0,      0}, {0x2f, 0x13, 0x74, 0x00}}},
-    {{{    46,    -35,     37}, 0, {     0,      0}, {0xd8, 0xa2, 0x4a, 0x00}}},
-    {{{    93,    -45,     36}, 0, {     0,      0}, {0x57, 0xac, 0x23, 0x00}}},
-    {{{    48,    -35,     -9}, 0, {     0,      0}, {0xf7, 0x94, 0xbe, 0x00}}},
-    {{{    86,    -19,    -13}, 0, {     0,      0}, {0x49, 0xb6, 0xb8, 0x00}}},
-    {{{    93,     -5,     22}, 0, {     0,      0}, {0x61, 0xfa, 0x50, 0x00}}},
-    {{{    76,     88,      9}, 0, {     0,      0}, {0xef, 0x7d, 0x00, 0x00}}},
-    {{{    13,     53,      5}, 0, {     0,      0}, {0xb0, 0x62, 0xfc, 0x00}}},
-    {{{   136,     28,     31}, 0, {     0,      0}, {0x4a, 0xcf, 0x5a, 0x00}}},
-    {{{    30,     13,    -30}, 0, {     0,      0}, {0xd3, 0x03, 0x8a, 0x00}}},
-    {{{    81,     37,    -28}, 0, {     0,      0}, {0x18, 0x20, 0x88, 0x00}}},
-};
-
-// 0x0401A0A0
-static const Vtx mario_right_hand_open_dl_vertex_group5[] = {
-    {{{    19,    -36,     33}, 0, {     0,      0}, {0x1a, 0xa0, 0x4d, 0x00}}},
-    {{{     7,    -30,     26}, 0, {     0,      0}, {0x9b, 0xc0, 0x29, 0x00}}},
-    {{{    11,    -38,     -3}, 0, {     0,      0}, {0xa9, 0xaa, 0xe0, 0x00}}},
-    {{{    -1,     18,     42}, 0, {     0,      0}, {0xd9, 0x23, 0x73, 0x00}}},
-    {{{    -7,      7,     32}, 0, {     0,      0}, {0x8a, 0xe2, 0x20, 0x00}}},
-    {{{   -12,     23,      6}, 0, {     0,      0}, {0x83, 0x07, 0xf1, 0x00}}},
-    {{{     7,      1,    -26}, 0, {     0,      0}, {0xee, 0x0d, 0x84, 0x00}}},
-    {{{     0,     -4,    -15}, 0, {     0,      0}, {0x8d, 0xda, 0xdc, 0x00}}},
-    {{{    30,    -32,     -4}, 0, {     0,      0}, {0x2f, 0x9f, 0xbe, 0x00}}},
-    {{{    26,    -24,     28}, 0, {     0,      0}, {0x0d, 0xc8, 0x70, 0x00}}},
-    {{{     9,     18,     35}, 0, {     0,      0}, {0xd8, 0x13, 0x76, 0x00}}},
-    {{{     3,     36,      6}, 0, {     0,      0}, {0xce, 0x71, 0xe6, 0x00}}},
-    {{{    16,      4,    -17}, 0, {     0,      0}, {0xf9, 0x11, 0x83, 0x00}}},
-    {{{    30,     13,    -30}, 0, {     0,      0}, {0xd3, 0x03, 0x8a, 0x00}}},
-    {{{    20,     33,     48}, 0, {     0,      0}, {0xbf, 0x32, 0x60, 0x00}}},
-    {{{    32,      2,     43}, 0, {     0,      0}, {0xe9, 0xeb, 0x7a, 0x00}}},
-};
-
-// 0x0401A1A0
-static const Vtx mario_right_hand_open_dl_vertex_group6[] = {
-    {{{    46,    -35,     37}, 0, {     0,      0}, {0xd8, 0xa2, 0x4a, 0x00}}},
-    {{{    26,    -24,     28}, 0, {     0,      0}, {0x0d, 0xc8, 0x70, 0x00}}},
-    {{{    30,    -32,     -4}, 0, {     0,      0}, {0x2f, 0x9f, 0xbe, 0x00}}},
-    {{{    16,      4,    -17}, 0, {     0,      0}, {0xf9, 0x11, 0x83, 0x00}}},
-    {{{    30,     13,    -30}, 0, {     0,      0}, {0xd3, 0x03, 0x8a, 0x00}}},
-};
-
-// 0x0401A1F0 - 0x0401A428
-const Gfx mario_right_hand_open_dl[] = {
-    gsSPVertex(mario_right_hand_open_dl_vertex_group1, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  3,  4, 0x0),
-    gsSP2Triangles( 5,  2,  1, 0x0,  1,  6,  5, 0x0),
-    gsSP2Triangles( 4,  3,  5, 0x0,  8,  9, 10, 0x0),
-    gsSP2Triangles( 9, 11, 10, 0x0, 11, 12, 13, 0x0),
-    gsSPVertex(mario_right_hand_open_dl_vertex_group2, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  2, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  8,  9, 0x0),
-    gsSP2Triangles( 9, 10,  2, 0x0,  2, 10, 11, 0x0),
-    gsSP2Triangles(11, 12, 13, 0x0, 12,  8,  7, 0x0),
-    gsSP2Triangles( 8,  5,  9, 0x0,  9, 14, 10, 0x0),
-    gsSP2Triangles(10, 14, 11, 0x0, 11,  6, 12, 0x0),
-    gsSP2Triangles(12,  5,  8, 0x0,  1, 15,  3, 0x0),
-    gsSPVertex(mario_right_hand_open_dl_vertex_group3, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
-    gsSP2Triangles( 3,  4,  5, 0x0,  6,  7,  8, 0x0),
-    gsSP2Triangles( 9, 10,  1, 0x0,  1, 11,  4, 0x0),
-    gsSP2Triangles( 4, 12, 13, 0x0, 14, 10, 15, 0x0),
-    gsSP1Triangle(13,  7,  5, 0x0),
-    gsSPVertex(mario_right_hand_open_dl_vertex_group4, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  0, 0x0),
-    gsSP2Triangles( 5,  6,  7, 0x0,  0,  2,  5, 0x0),
-    gsSP2Triangles( 7,  6,  8, 0x0,  9, 10,  7, 0x0),
-    gsSP2Triangles( 0,  4, 11, 0x0, 11, 12,  0, 0x0),
-    gsSP2Triangles(10, 13,  4, 0x0,  5,  2,  6, 0x0),
-    gsSP2Triangles(10,  3,  5, 0x0, 14, 15,  9, 0x0),
-    gsSP1Triangle(11, 15, 14, 0x0),
-    gsSPVertex(mario_right_hand_open_dl_vertex_group5, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
-    gsSP2Triangles( 5,  4,  3, 0x0,  6,  7,  5, 0x0),
-    gsSP2Triangles( 2,  7,  6, 0x0,  8,  9,  0, 0x0),
-    gsSP2Triangles( 9, 10,  3, 0x0,  3, 10, 11, 0x0),
-    gsSP2Triangles(11, 12,  6, 0x0,  6, 12,  8, 0x0),
-    gsSP2Triangles( 1,  4,  7, 0x0,  4,  5,  7, 0x0),
-    gsSP2Triangles(13, 12, 11, 0x0, 11, 10, 14, 0x0),
-    gsSP2Triangles(15, 10,  9, 0x0, 15, 14, 10, 0x0),
-    gsSPVertex(mario_right_hand_open_dl_vertex_group6, 5, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  4, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401A428 - 0x0401A448
-const Gfx mario_right_hand_open[] = {
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPDisplayList(mario_right_hand_open_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401A448 - 0x0401A478
-const Gfx mario_metal_right_hand_open[] = {
-    gsSPDisplayList(mario_right_hand_open_dl),
-    gsDPPipeSync(),
-    gsSPClearGeometryMode(G_TEXTURE_GEN),
-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401A478
-static const Vtx mario_right_hand_cap_m_logo_dl_vertex[] = {
-    {{{   131,     47,     -1}, 0, {  1104,    228}, {0xd7, 0x60, 0xb8, 0xff}}},
-    {{{   107,    -19,    -33}, 0, {   474,     32}, {0xd1, 0x0e, 0x8c, 0xff}}},
-    {{{    78,     11,     40}, 0, {   772,    818}, {0xd0, 0x3e, 0x9d, 0xff}}},
-    {{{    70,    -52,     35}, 0, {   196,    800}, {0xc5, 0xde, 0x96, 0xff}}},
-    {{{   114,    -92,    -11}, 0, {  -148,    188}, {0xc4, 0xb8, 0xac, 0xff}}},
-};
-
-// 0x0401A4C8
-static const Vtx mario_right_hand_cap_hand_position_dl_vertex_group1[] = {
-    {{{     1,     24,     35}, 0, {     0,      0}, {0xd4, 0x3c, 0x66, 0xff}}},
-    {{{    29,      7,     48}, 0, {     0,      0}, {0xc3, 0xfa, 0x6e, 0xff}}},
-    {{{    29,     62,     34}, 0, {     0,      0}, {0xcd, 0x4c, 0x57, 0xff}}},
-    {{{    11,     60,     -3}, 0, {     0,      0}, {0xab, 0x59, 0xe6, 0xff}}},
-    {{{    56,     11,     65}, 0, {     0,      0}, {0xfc, 0x1b, 0x7b, 0xff}}},
-    {{{    54,     54,     44}, 0, {     0,      0}, {0x1f, 0x50, 0x5c, 0xff}}},
-    {{{    58,     81,      0}, 0, {     0,      0}, {0x13, 0x7a, 0xe8, 0xff}}},
-    {{{    -2,     41,      0}, 0, {     0,      0}, {0xee, 0x71, 0xca, 0xff}}},
-    {{{    35,      9,    -36}, 0, {     0,      0}, {0xe4, 0xf4, 0x85, 0xff}}},
-    {{{   -13,     26,     41}, 0, {     0,      0}, {0xee, 0x3c, 0x6e, 0xff}}},
-    {{{    23,    -25,     35}, 0, {     0,      0}, {0x04, 0xc2, 0x6e, 0xff}}},
-    {{{    75,    -32,     65}, 0, {     0,      0}, {0x08, 0xae, 0x60, 0xff}}},
-    {{{    16,      1,    -22}, 0, {     0,      0}, {0x04, 0x00, 0x82, 0xff}}},
-    {{{     4,     -3,    -32}, 0, {     0,      0}, {0x11, 0x06, 0x83, 0xff}}},
-    {{{   -19,     47,     -4}, 0, {     0,      0}, {0xad, 0x54, 0xd3, 0xff}}},
-};
-
-// 0x0401A5B8
-static const Vtx mario_right_hand_cap_hand_position_dl_vertex_group2[] = {
-    {{{   103,    -25,      1}, 0, {     0,      0}, {0x67, 0xc4, 0xd6, 0xff}}},
-    {{{    95,     -8,     52}, 0, {     0,      0}, {0x60, 0x06, 0x52, 0xff}}},
-    {{{    75,    -32,     65}, 0, {     0,      0}, {0x08, 0xae, 0x60, 0xff}}},
-    {{{    31,    -39,      0}, 0, {     0,      0}, {0x42, 0xa3, 0xca, 0xff}}},
-    {{{    23,    -25,     35}, 0, {     0,      0}, {0x04, 0xc2, 0x6e, 0xff}}},
-    {{{    13,    -37,     41}, 0, {     0,      0}, {0x12, 0xb1, 0x61, 0xff}}},
-    {{{    55,    -43,     -3}, 0, {     0,      0}, {0x00, 0x86, 0xe0, 0xff}}},
-    {{{   -13,     26,     41}, 0, {     0,      0}, {0xee, 0x3c, 0x6e, 0xff}}},
-    {{{     4,     -3,    -32}, 0, {     0,      0}, {0x11, 0x06, 0x83, 0xff}}},
-    {{{    16,      1,    -22}, 0, {     0,      0}, {0x04, 0x00, 0x82, 0xff}}},
-    {{{    35,      9,    -36}, 0, {     0,      0}, {0xe4, 0xf4, 0x85, 0xff}}},
-    {{{    24,    -55,     -4}, 0, {     0,      0}, {0x04, 0x8b, 0xd1, 0xff}}},
-    {{{    56,     11,     65}, 0, {     0,      0}, {0xfc, 0x1b, 0x7b, 0xff}}},
-    {{{   -15,    -12,      7}, 0, {     0,      0}, {0x8c, 0xcf, 0xf8, 0xff}}},
-    {{{    85,     15,     52}, 0, {     0,      0}, {0x40, 0x30, 0x62, 0xff}}},
-    {{{    54,     54,     44}, 0, {     0,      0}, {0x1f, 0x50, 0x5c, 0xff}}},
-};
-
-// 0x0401A6B8
-static const Vtx mario_right_hand_cap_hand_position_dl_vertex_group3[] = {
-    {{{    35,      9,    -36}, 0, {     0,      0}, {0xe4, 0xf4, 0x85, 0xff}}},
-    {{{    85,     30,    -32}, 0, {     0,      0}, {0x4f, 0x21, 0xa3, 0xff}}},
-    {{{   103,    -25,      1}, 0, {     0,      0}, {0x67, 0xc4, 0xd6, 0xff}}},
-    {{{    58,     81,      0}, 0, {     0,      0}, {0x13, 0x7a, 0xe8, 0xff}}},
-    {{{    24,    -55,     -4}, 0, {     0,      0}, {0x04, 0x8b, 0xd1, 0xff}}},
-    {{{   -15,    -12,      7}, 0, {     0,      0}, {0x8c, 0xcf, 0xf8, 0xff}}},
-    {{{     4,     -3,    -32}, 0, {     0,      0}, {0x11, 0x06, 0x83, 0xff}}},
-    {{{   -19,     47,     -4}, 0, {     0,      0}, {0xad, 0x54, 0xd3, 0xff}}},
-    {{{   -13,     26,     41}, 0, {     0,      0}, {0xee, 0x3c, 0x6e, 0xff}}},
-    {{{    13,    -37,     41}, 0, {     0,      0}, {0x12, 0xb1, 0x61, 0xff}}},
-    {{{    96,     39,     24}, 0, {     0,      0}, {0x6b, 0x39, 0x21, 0xff}}},
-    {{{    54,     54,     44}, 0, {     0,      0}, {0x1f, 0x50, 0x5c, 0xff}}},
-    {{{    95,     -8,     52}, 0, {     0,      0}, {0x60, 0x06, 0x52, 0xff}}},
-    {{{    85,     15,     52}, 0, {     0,      0}, {0x40, 0x30, 0x62, 0xff}}},
-};
-
-// 0x0401A798
-static const Vtx mario_right_hand_cap_top_dl_vertex_group1[] = {
-    {{{    29,    -82,     43}, 0, {     0,      0}, {0x95, 0xbd, 0x00, 0xff}}},
-    {{{    70,    -52,     35}, 0, {     0,      0}, {0xc5, 0xde, 0x96, 0xff}}},
-    {{{   106,   -124,     90}, 0, {     0,      0}, {0x9d, 0xb2, 0x09, 0xff}}},
-    {{{    65,    -53,     55}, 0, {     0,      0}, {0xb7, 0x01, 0x67, 0xff}}},
-    {{{   151,   -168,     67}, 0, {     0,      0}, {0xf4, 0x87, 0xdc, 0xff}}},
-    {{{   137,   -137,    134}, 0, {     0,      0}, {0x9f, 0xdf, 0x49, 0xff}}},
-    {{{   114,    -92,    -11}, 0, {     0,      0}, {0xc4, 0xb8, 0xac, 0xff}}},
-    {{{   228,   -121,    117}, 0, {     0,      0}, {0x66, 0xcd, 0xcb, 0xff}}},
-    {{{   182,    -72,     -8}, 0, {     0,      0}, {0x4d, 0xd9, 0xa4, 0xff}}},
-    {{{   181,   -167,    138}, 0, {     0,      0}, {0x06, 0x88, 0x26, 0xff}}},
-    {{{   171,   -129,    178}, 0, {     0,      0}, {0xb3, 0xd1, 0x58, 0xff}}},
-    {{{   160,     65,    148}, 0, {     0,      0}, {0xb3, 0x47, 0x47, 0xff}}},
-    {{{   211,     81,    156}, 0, {     0,      0}, {0x22, 0x6c, 0x37, 0xff}}},
-    {{{   183,    100,     86}, 0, {     0,      0}, {0x11, 0x7c, 0xed, 0xff}}},
-    {{{   129,     65,    103}, 0, {     0,      0}, {0xa7, 0x50, 0x27, 0xff}}},
-};
-
-// 0x0401A888
-static const Vtx mario_right_hand_cap_top_dl_vertex_group2[] = {
-    {{{    78,     11,     40}, 0, {     0,      0}, {0xd0, 0x3e, 0x9d, 0xff}}},
-    {{{   129,     65,    103}, 0, {     0,      0}, {0xa7, 0x50, 0x27, 0xff}}},
-    {{{   131,     47,     -1}, 0, {     0,      0}, {0xd7, 0x60, 0xb8, 0xff}}},
-    {{{    45,     49,     53}, 0, {     0,      0}, {0xa8, 0x5a, 0x0a, 0xff}}},
-    {{{    73,     11,     60}, 0, {     0,      0}, {0xbb, 0xfb, 0x6a, 0xff}}},
-    {{{   183,    100,     86}, 0, {     0,      0}, {0x11, 0x7c, 0xed, 0xff}}},
-    {{{   192,     42,    190}, 0, {     0,      0}, {0xb3, 0x23, 0x5d, 0xff}}},
-    {{{   211,     81,    156}, 0, {     0,      0}, {0x22, 0x6c, 0x37, 0xff}}},
-    {{{   160,     65,    148}, 0, {     0,      0}, {0xb3, 0x47, 0x47, 0xff}}},
-    {{{    18,    -13,     33}, 0, {     0,      0}, {0x84, 0x10, 0xed, 0xff}}},
-    {{{    70,    -52,     35}, 0, {     0,      0}, {0xc5, 0xde, 0x96, 0xff}}},
-    {{{   192,     11,     -2}, 0, {     0,      0}, {0x4b, 0x29, 0xa3, 0xff}}},
-    {{{   107,    -19,    -33}, 0, {     0,      0}, {0xd1, 0x0e, 0x8c, 0xff}}},
-    {{{   228,   -121,    117}, 0, {     0,      0}, {0x66, 0xcd, 0xcb, 0xff}}},
-    {{{   246,     29,    128}, 0, {     0,      0}, {0x72, 0x20, 0xd4, 0xff}}},
-    {{{   285,     -6,    196}, 0, {     0,      0}, {0x79, 0x23, 0x0b, 0xff}}},
-};
-
-// 0x0401A988
-static const Vtx mario_right_hand_cap_top_dl_vertex_group3[] = {
-    {{{    65,    -53,     55}, 0, {     0,      0}, {0xb7, 0x01, 0x67, 0xff}}},
-    {{{    18,    -13,     33}, 0, {     0,      0}, {0x84, 0x10, 0xed, 0xff}}},
-    {{{    29,    -82,     43}, 0, {     0,      0}, {0x95, 0xbd, 0x00, 0xff}}},
-    {{{    70,    -52,     35}, 0, {     0,      0}, {0xc5, 0xde, 0x96, 0xff}}},
-    {{{    73,     11,     60}, 0, {     0,      0}, {0xbb, 0xfb, 0x6a, 0xff}}},
-    {{{   114,    -92,    -11}, 0, {     0,      0}, {0xc4, 0xb8, 0xac, 0xff}}},
-    {{{   107,    -19,    -33}, 0, {     0,      0}, {0xd1, 0x0e, 0x8c, 0xff}}},
-    {{{   182,    -72,     -8}, 0, {     0,      0}, {0x4d, 0xd9, 0xa4, 0xff}}},
-    {{{   192,     11,     -2}, 0, {     0,      0}, {0x4b, 0x29, 0xa3, 0xff}}},
-    {{{   246,     29,    128}, 0, {     0,      0}, {0x72, 0x20, 0xd4, 0xff}}},
-    {{{   228,   -121,    117}, 0, {     0,      0}, {0x66, 0xcd, 0xcb, 0xff}}},
-    {{{   211,     81,    156}, 0, {     0,      0}, {0x22, 0x6c, 0x37, 0xff}}},
-    {{{   285,     -6,    196}, 0, {     0,      0}, {0x79, 0x23, 0x0b, 0xff}}},
-    {{{   273,   -105,    188}, 0, {     0,      0}, {0x5f, 0xbf, 0x34, 0xff}}},
-    {{{   181,   -167,    138}, 0, {     0,      0}, {0x06, 0x88, 0x26, 0xff}}},
-    {{{   228,      1,    228}, 0, {     0,      0}, {0x14, 0x22, 0x78, 0xff}}},
-};
-
-// 0x0401AA88
-static const Vtx mario_right_hand_cap_top_dl_vertex_group4[] = {
-    {{{   181,   -167,    138}, 0, {     0,      0}, {0x06, 0x88, 0x26, 0xff}}},
-    {{{   273,   -105,    188}, 0, {     0,      0}, {0x5f, 0xbf, 0x34, 0xff}}},
-    {{{   216,   -104,    220}, 0, {     0,      0}, {0xe5, 0xcc, 0x70, 0xff}}},
-    {{{   228,      1,    228}, 0, {     0,      0}, {0x14, 0x22, 0x78, 0xff}}},
-    {{{   285,     -6,    196}, 0, {     0,      0}, {0x79, 0x23, 0x0b, 0xff}}},
-    {{{   211,     81,    156}, 0, {     0,      0}, {0x22, 0x6c, 0x37, 0xff}}},
-    {{{   192,     42,    190}, 0, {     0,      0}, {0xb3, 0x23, 0x5d, 0xff}}},
-    {{{   171,   -129,    178}, 0, {     0,      0}, {0xb3, 0xd1, 0x58, 0xff}}},
-};
-
-// 0x0401AB08
-static const Vtx mario_right_hand_cap_bottom_dl_vertex[] = {
-    {{{    65,    -53,     55}, 0, {     0,      0}, {0xb7, 0x01, 0x67, 0xff}}},
-    {{{   106,   -124,     90}, 0, {     0,      0}, {0x9d, 0xb2, 0x09, 0xff}}},
-    {{{   137,   -137,    134}, 0, {     0,      0}, {0x9f, 0xdf, 0x49, 0xff}}},
-    {{{    73,     11,     60}, 0, {     0,      0}, {0xbb, 0xfb, 0x6a, 0xff}}},
-    {{{   129,     65,    103}, 0, {     0,      0}, {0xa7, 0x50, 0x27, 0xff}}},
-    {{{   160,     65,    148}, 0, {     0,      0}, {0xb3, 0x47, 0x47, 0xff}}},
-    {{{   192,     42,    190}, 0, {     0,      0}, {0xb3, 0x23, 0x5d, 0xff}}},
-    {{{   171,   -129,    178}, 0, {     0,      0}, {0xb3, 0xd1, 0x58, 0xff}}},
-    {{{   216,   -104,    220}, 0, {     0,      0}, {0xe5, 0xcc, 0x70, 0xff}}},
-    {{{   228,      1,    228}, 0, {     0,      0}, {0x14, 0x22, 0x78, 0xff}}},
-};
-
-// 0x0401ABA8 - 0x0401ABD0
-const Gfx mario_right_hand_cap_m_logo_dl[] = {
-    gsSPVertex(mario_right_hand_cap_m_logo_dl_vertex, 5, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  2, 0x0),
-    gsSP1Triangle( 1,  4,  3, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401ABD0 - 0x0401AD40
-const Gfx mario_right_hand_cap_top_dl[] = {
-    gsSPVertex(mario_right_hand_cap_top_dl_vertex_group1, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
-    gsSP2Triangles( 2,  4,  5, 0x0,  6,  2,  1, 0x0),
-    gsSP2Triangles( 2,  6,  4, 0x0,  7,  4,  8, 0x0),
-    gsSP2Triangles( 8,  4,  6, 0x0,  4,  9,  5, 0x0),
-    gsSP2Triangles( 4,  7,  9, 0x0,  5,  9, 10, 0x0),
-    gsSP2Triangles(11, 12, 13, 0x0, 13, 14, 11, 0x0),
-    gsSPVertex(mario_right_hand_cap_top_dl_vertex_group2, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  4, 0x0),
-    gsSP2Triangles( 0,  3,  1, 0x0,  5,  2,  1, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  0,  9,  3, 0x0),
-    gsSP2Triangles(10,  9,  0, 0x0, 11, 12,  2, 0x0),
-    gsSP2Triangles( 2,  5, 11, 0x0,  3,  9,  4, 0x0),
-    gsSP2Triangles(13, 14, 15, 0x0, 11,  5, 14, 0x0),
-    gsSP1Triangle( 7, 14,  5, 0x0),
-    gsSPVertex(mario_right_hand_cap_top_dl_vertex_group3, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
-    gsSP2Triangles( 0,  4,  1, 0x0,  5,  6,  7, 0x0),
-    gsSP2Triangles( 7,  8,  9, 0x0,  7,  6,  8, 0x0),
-    gsSP2Triangles(10,  7,  9, 0x0, 11, 12,  9, 0x0),
-    gsSP2Triangles(10, 13, 14, 0x0, 12, 13, 10, 0x0),
-    gsSP1Triangle(13, 12, 15, 0x0),
-    gsSPVertex(mario_right_hand_cap_top_dl_vertex_group4, 8, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
-    gsSP2Triangles( 3,  4,  5, 0x0,  3,  5,  6, 0x0),
-    gsSP1Triangle( 7,  0,  2, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401AD40 - 0x0401AED0
-const Gfx mario_right_hand_cap_hand_position_dl[] = {
-    gsSPVertex(mario_right_hand_cap_hand_position_dl_vertex_group1, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
-    gsSP2Triangles( 2,  1,  4, 0x0,  2,  5,  6, 0x0),
-    gsSP2Triangles( 6,  3,  2, 0x0,  5,  2,  4, 0x0),
-    gsSP2Triangles( 3,  7,  0, 0x0,  3,  6,  8, 0x0),
-    gsSP2Triangles( 3,  8,  7, 0x0,  9,  0,  7, 0x0),
-    gsSP2Triangles(10,  0,  9, 0x0,  1,  0, 10, 0x0),
-    gsSP2Triangles(11,  1, 10, 0x0, 11,  4,  1, 0x0),
-    gsSP2Triangles( 7, 12, 13, 0x0,  8, 12,  7, 0x0),
-    gsSP2Triangles(13, 14,  7, 0x0,  7, 14,  9, 0x0),
-    gsSPVertex(mario_right_hand_cap_hand_position_dl_vertex_group2, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 4,  3,  6, 0x0,  6,  2,  4, 0x0),
-    gsSP2Triangles( 7,  5,  4, 0x0,  8,  9,  3, 0x0),
-    gsSP2Triangles( 3,  9, 10, 0x0, 10,  6,  3, 0x0),
-    gsSP2Triangles( 5, 11,  3, 0x0,  3, 11,  8, 0x0),
-    gsSP2Triangles(10,  0,  6, 0x0,  6,  0,  2, 0x0),
-    gsSP2Triangles( 2,  1, 12, 0x0,  5, 13, 11, 0x0),
-    gsSP2Triangles( 1, 14, 12, 0x0, 14, 15, 12, 0x0),
-    gsSPVertex(mario_right_hand_cap_hand_position_dl_vertex_group3, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  6,  5,  7, 0x0),
-    gsSP2Triangles( 7,  5,  8, 0x0,  8,  5,  9, 0x0),
-    gsSP2Triangles( 3, 10,  1, 0x0, 11, 10,  3, 0x0),
-    gsSP2Triangles( 1, 10,  2, 0x0,  2, 10, 12, 0x0),
-    gsSP2Triangles(12, 10, 13, 0x0, 10, 11, 13, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401AED0 - 0x0401AF20
-const Gfx mario_right_hand_cap_bottom_dl[] = {
-    gsSPVertex(mario_right_hand_cap_bottom_dl_vertex, 10, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
-    gsSP2Triangles( 4,  3,  2, 0x0,  5,  4,  2, 0x0),
-    gsSP2Triangles( 6,  5,  2, 0x0,  6,  2,  7, 0x0),
-    gsSP2Triangles( 8,  9,  6, 0x0,  6,  7,  8, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401AF20 - 0x0401AF60
-const Gfx mario_right_hand_cap_dl[] = {
-    gsSPDisplayList(mario_right_hand_cap_top_dl),
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPDisplayList(mario_right_hand_cap_hand_position_dl),
-    gsSPLight(&mario_brown2_lights_group.l, 1),
-    gsSPLight(&mario_brown2_lights_group.a, 2),
-    gsSPDisplayList(mario_right_hand_cap_bottom_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401AF60
-static const Vtx mario_right_hand_cap_wings_half_1_dl_vertex[] = {
-    {{{   368,    146,      7}, 0, {   990,      0}, {0xbe, 0x65, 0xda, 0xff}}},
-    {{{   166,     37,     68}, 0, {     0,   2012}, {0xbe, 0x65, 0xda, 0xff}}},
-    {{{   212,     96,    143}, 0, {   990,   2012}, {0xbe, 0x65, 0xda, 0xff}}},
-    {{{   368,    146,      7}, 0, {   990,      0}, {0xbe, 0x64, 0xd9, 0xff}}},
-    {{{   322,     87,    -67}, 0, {     0,      0}, {0xbe, 0x64, 0xd9, 0xff}}},
-    {{{   166,     37,     68}, 0, {     0,   2012}, {0xbe, 0x64, 0xd9, 0xff}}},
-    {{{   178,   -177,    128}, 0, {   990,   2012}, {0xa8, 0xb4, 0xcf, 0xff}}},
-    {{{   149,   -100,     60}, 0, {     0,   2012}, {0xa8, 0xb4, 0xcf, 0xff}}},
-    {{{   319,   -248,    -14}, 0, {   990,      0}, {0xa8, 0xb4, 0xcf, 0xff}}},
-    {{{   290,   -171,    -81}, 0, {     0,      0}, {0xa8, 0xb4, 0xcf, 0xff}}},
-};
-
-// 0x0401B000
-static const Vtx mario_right_hand_cap_wings_half_2_dl_vertex[] = {
-    {{{   414,    206,     82}, 0, {   990,      0}, {0xbe, 0x64, 0xd9, 0xff}}},
-    {{{   212,     96,    143}, 0, {     0,   2012}, {0xbe, 0x64, 0xd9, 0xff}}},
-    {{{   258,    156,    218}, 0, {   990,   2012}, {0xbe, 0x64, 0xd9, 0xff}}},
-    {{{   368,    146,      7}, 0, {     0,      0}, {0xbe, 0x64, 0xd9, 0xff}}},
-    {{{   178,   -177,    128}, 0, {     0,   2012}, {0xa8, 0xb3, 0xcf, 0xff}}},
-    {{{   319,   -248,    -14}, 0, {     0,      0}, {0xa8, 0xb3, 0xcf, 0xff}}},
-    {{{   349,   -325,     53}, 0, {   990,      0}, {0xa8, 0xb3, 0xcf, 0xff}}},
-    {{{   207,   -253,    195}, 0, {   990,   2012}, {0xa8, 0xb3, 0xcf, 0xff}}},
-};
-
-// 0x0401B080 - 0x0401B0B0
-const Gfx mario_right_hand_cap_wings_half_1_dl[] = {
-    gsSPVertex(mario_right_hand_cap_wings_half_1_dl_vertex, 10, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  7,  9,  8, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401B0B0 - 0x0401B0E0
-const Gfx mario_right_hand_cap_wings_half_2_dl[] = {
-    gsSPVertex(mario_right_hand_cap_wings_half_2_dl_vertex, 8, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  4,  6, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401B0E0 - 0x0401B138
-const Gfx mario_right_hand_cap_wings_intial_dl[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_MODULATERGBFADEA, G_CC_MODULATERGBFADEA),
-    gsSPClearGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 6, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (64 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401B138 - 0x0401B158
-const Gfx mario_right_hand_cap_wings_end_dl[] = {
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsSPSetGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401B158 - 0x0401B1D8
-const Gfx mario_right_hand_cap[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_right_hand_cap_m_logo_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPDisplayList(mario_right_hand_cap_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401B1D8 - 0x0401B230
-const Gfx mario_right_hand_cap_wings[] = {
-    gsSPDisplayList(mario_right_hand_cap_wings_intial_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_wings_half_1),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_right_hand_cap_wings_half_1_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_wings_half_2),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_right_hand_cap_wings_half_2_dl),
-    gsSPDisplayList(mario_right_hand_cap_wings_end_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401B230 - 0x0401B278
-const Gfx mario_metal_right_hand_cap_shared_dl[] = {
-    gsSPDisplayList(mario_right_hand_cap_m_logo_dl),
-    gsSPDisplayList(mario_right_hand_cap_top_dl),
-    gsSPDisplayList(mario_right_hand_cap_hand_position_dl),
-    gsSPDisplayList(mario_right_hand_cap_bottom_dl),
-    gsDPPipeSync(),
-    gsSPClearGeometryMode(G_TEXTURE_GEN),
-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401B278 - 0x0401B2D0
-const Gfx mario_metal_right_hand_cap_shared_dl_wings[] = {
-    gsSPDisplayList(mario_right_hand_cap_wings_intial_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_metal_wings_half_1),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_right_hand_cap_wings_half_1_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_metal_wings_half_2),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_right_hand_cap_wings_half_2_dl),
-    gsSPDisplayList(mario_right_hand_cap_wings_end_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401B2D0
-static const Vtx mario_right_hand_peace_shared_dl_vertex_group1[] = {
-    {{{   -21,      9,     33}, 0, {     0,      0}, {0x8a, 0xe1, 0x1f, 0x00}}},
-    {{{   -25,     24,      0}, 0, {     0,      0}, {0x84, 0xf8, 0xea, 0x00}}},
-    {{{    -8,    -12,    -20}, 0, {     0,      0}, {0x93, 0xcf, 0xd7, 0x00}}},
-    {{{     0,    -35,     32}, 0, {     0,      0}, {0x9d, 0xba, 0x22, 0xff}}},
-    {{{     6,    -49,      0}, 0, {     0,      0}, {0xa9, 0xa7, 0xec, 0xff}}},
-    {{{    88,    -34,     39}, 0, {     0,      0}, {0x38, 0xa1, 0x3d, 0xff}}},
-    {{{    90,     -3,     52}, 0, {     0,      0}, {0x50, 0x07, 0x61, 0xff}}},
-    {{{    45,    -29,     52}, 0, {     0,      0}, {0xeb, 0xb9, 0x66, 0xff}}},
-    {{{    23,    -29,     36}, 0, {     0,      0}, {0x12, 0xec, 0x7b, 0xff}}},
-    {{{    18,     30,     41}, 0, {     0,      0}, {0xc1, 0x2b, 0x64, 0xff}}},
-    {{{    46,     49,     45}, 0, {     0,      0}, {0xf8, 0x44, 0x6a, 0xff}}},
-    {{{     0,     21,     37}, 0, {     0,      0}, {0xfe, 0x44, 0x6a, 0xff}}},
-    {{{    56,    -47,     -5}, 0, {     0,      0}, {0x0c, 0x87, 0xde, 0xff}}},
-    {{{    56,     80,      1}, 0, {     0,      0}, {0x1a, 0x6a, 0x40, 0xff}}},
-    {{{     8,     58,     -2}, 0, {     0,      0}, {0xbc, 0x55, 0x40, 0xff}}},
-    {{{    84,     48,     24}, 0, {     0,      0}, {0x32, 0x3d, 0x62, 0xff}}},
-};
-
-// 0x0401B3D0
-static const Vtx mario_right_hand_peace_shared_dl_vertex_group2[] = {
-    {{{    33,      7,    -37}, 0, {     0,      0}, {0xde, 0xf5, 0x87, 0xff}}},
-    {{{    56,    -47,     -5}, 0, {     0,      0}, {0x0c, 0x87, 0xde, 0x00}}},
-    {{{    32,    -43,      0}, 0, {     0,      0}, {0xdd, 0xba, 0x9d, 0x00}}},
-    {{{    45,    -29,     52}, 0, {     0,      0}, {0xeb, 0xb9, 0x66, 0xff}}},
-    {{{    32,    -43,      0}, 0, {     0,      0}, {0xeb, 0x89, 0x24, 0xff}}},
-    {{{    18,     30,     41}, 0, {     0,      0}, {0xc1, 0x2b, 0x64, 0xff}}},
-    {{{     8,     58,     -2}, 0, {     0,      0}, {0xbc, 0x55, 0x40, 0xff}}},
-    {{{    -4,     38,      0}, 0, {     0,      0}, {0xd3, 0x66, 0x3c, 0xff}}},
-    {{{     8,     58,     -2}, 0, {     0,      0}, {0xd0, 0x30, 0x96, 0xff}}},
-    {{{    -4,     38,      0}, 0, {     0,      0}, {0xb3, 0x18, 0x9f, 0xff}}},
-    {{{    24,    -59,     -3}, 0, {     0,      0}, {0xc4, 0xb9, 0xab, 0xff}}},
-    {{{     6,    -49,      0}, 0, {     0,      0}, {0xa9, 0xa7, 0xec, 0xff}}},
-    {{{    -8,    -12,    -20}, 0, {     0,      0}, {0x93, 0xcf, 0xd7, 0xff}}},
-    {{{     2,     -5,    -33}, 0, {     0,      0}, {0xad, 0xda, 0xa9, 0xff}}},
-};
-
-// 0x0401B4B0
-static const Vtx mario_right_hand_peace_shared_dl_vertex_group3[] = {
-    {{{   -22,     43,     -3}, 0, {     0,      0}, {0x31, 0x4d, 0xa8, 0xff}}},
-    {{{    -4,     38,      0}, 0, {     0,      0}, {0x31, 0x4d, 0xa8, 0x00}}},
-    {{{    14,     -1,    -22}, 0, {     0,      0}, {0x47, 0x20, 0x9d, 0x00}}},
-    {{{     2,     -5,    -33}, 0, {     0,      0}, {0x47, 0x20, 0x9d, 0xff}}},
-    {{{   -22,     43,     -3}, 0, {     0,      0}, {0x86, 0x10, 0xe4, 0xff}}},
-    {{{   -25,     24,      0}, 0, {     0,      0}, {0x84, 0xf8, 0xea, 0xff}}},
-    {{{   -21,      9,     33}, 0, {     0,      0}, {0x8a, 0xe1, 0x1f, 0xff}}},
-    {{{   -15,     23,     43}, 0, {     0,      0}, {0xd6, 0x31, 0x6c, 0xff}}},
-    {{{     0,    -35,     32}, 0, {     0,      0}, {0x9d, 0xba, 0x22, 0xff}}},
-    {{{    15,    -39,     42}, 0, {     0,      0}, {0x0c, 0xbe, 0x6b, 0xff}}},
-    {{{     6,    -49,      0}, 0, {     0,      0}, {0xa9, 0xa7, 0xec, 0xff}}},
-    {{{    24,    -59,     -3}, 0, {     0,      0}, {0xce, 0x92, 0x24, 0xff}}},
-    {{{     8,     58,     -2}, 0, {     0,      0}, {0xd0, 0x30, 0x96, 0xff}}},
-    {{{    56,     80,      1}, 0, {     0,      0}, {0xfe, 0x41, 0x94, 0xff}}},
-    {{{    33,      7,    -37}, 0, {     0,      0}, {0xde, 0xf5, 0x87, 0xff}}},
-};
-
-// 0x0401B5A0
-static const Vtx mario_right_hand_peace_shared_dl_vertex_group4[] = {
-    {{{   101,    -29,     15}, 0, {     0,      0}, {0x53, 0xa3, 0x15, 0xff}}},
-    {{{    88,    -34,     39}, 0, {     0,      0}, {0x38, 0xa1, 0x3d, 0x00}}},
-    {{{    56,    -47,     -5}, 0, {     0,      0}, {0x0c, 0x87, 0xde, 0x00}}},
-    {{{    56,     80,      1}, 0, {     0,      0}, {0xfe, 0x41, 0x94, 0xff}}},
-    {{{    84,     60,     -7}, 0, {     0,      0}, {0xfb, 0x44, 0x96, 0xff}}},
-    {{{    89,     18,    -34}, 0, {     0,      0}, {0x0a, 0x1b, 0x85, 0xff}}},
-    {{{   105,     17,      3}, 0, {     0,      0}, {0x0a, 0x7c, 0x14, 0xff}}},
-    {{{    98,     10,     29}, 0, {     0,      0}, {0x0a, 0x7a, 0x21, 0xff}}},
-    {{{   153,      7,     24}, 0, {     0,      0}, {0x0c, 0x7a, 0x1e, 0xff}}},
-    {{{    46,     49,     45}, 0, {     0,      0}, {0xf8, 0x44, 0x6a, 0xff}}},
-    {{{    84,     48,     24}, 0, {     0,      0}, {0x32, 0x3d, 0x62, 0xff}}},
-    {{{    56,     80,      1}, 0, {     0,      0}, {0x1a, 0x6a, 0x40, 0xff}}},
-    {{{    33,      7,    -37}, 0, {     0,      0}, {0xde, 0xf5, 0x87, 0xff}}},
-    {{{    94,    -22,    -18}, 0, {     0,      0}, {0x07, 0xcd, 0x8d, 0xff}}},
-    {{{    14,     -1,    -22}, 0, {     0,      0}, {0xbe, 0xe5, 0x98, 0xff}}},
-    {{{    -4,     38,      0}, 0, {     0,      0}, {0xb3, 0x18, 0x9f, 0xff}}},
-};
-
-// 0x0401B6A0
-static const Vtx mario_right_hand_peace_shared_dl_vertex_group5[] = {
-    {{{    -4,     38,      0}, 0, {     0,      0}, {0xd3, 0x66, 0x3c, 0xff}}},
-    {{{     0,     21,     37}, 0, {     0,      0}, {0xfe, 0x44, 0x6a, 0x00}}},
-    {{{    18,     30,     41}, 0, {     0,      0}, {0xc1, 0x2b, 0x64, 0x00}}},
-    {{{    45,    -29,     52}, 0, {     0,      0}, {0xeb, 0xb9, 0x66, 0xff}}},
-    {{{    23,    -29,     36}, 0, {     0,      0}, {0xe3, 0x8b, 0x25, 0xff}}},
-    {{{    32,    -43,      0}, 0, {     0,      0}, {0xeb, 0x89, 0x24, 0xff}}},
-    {{{    32,    -43,      0}, 0, {     0,      0}, {0xdd, 0xba, 0x9d, 0xff}}},
-    {{{    14,     -1,    -22}, 0, {     0,      0}, {0xbe, 0xe5, 0x98, 0xff}}},
-    {{{    33,      7,    -37}, 0, {     0,      0}, {0xde, 0xf5, 0x87, 0xff}}},
-    {{{   166,    -13,    -17}, 0, {     0,      0}, {0x7a, 0x08, 0x21, 0xff}}},
-    {{{   162,     14,    -11}, 0, {     0,      0}, {0x79, 0x01, 0x25, 0xff}}},
-    {{{   153,      7,     24}, 0, {     0,      0}, {0x7a, 0x08, 0x21, 0xff}}},
-    {{{   155,    -15,     21}, 0, {     0,      0}, {0x79, 0x06, 0x23, 0xff}}},
-    {{{    84,     60,     -7}, 0, {     0,      0}, {0xc2, 0x66, 0x28, 0xff}}},
-    {{{    84,     48,     24}, 0, {     0,      0}, {0xc2, 0x66, 0x28, 0xff}}},
-    {{{   126,     84,     -3}, 0, {     0,      0}, {0xc2, 0x66, 0x28, 0xff}}},
-};
-
-// 0x0401B7A0
-static const Vtx mario_right_hand_peace_shared_dl_vertex_group6[] = {
-    {{{   146,     59,     -8}, 0, {     0,      0}, {0x5d, 0x4d, 0x26, 0xff}}},
-    {{{   126,     84,     -3}, 0, {     0,      0}, {0x5f, 0x47, 0x2a, 0x00}}},
-    {{{   123,     72,     21}, 0, {     0,      0}, {0x5d, 0x4d, 0x26, 0x00}}},
-    {{{   126,     84,     -3}, 0, {     0,      0}, {0xfd, 0x37, 0x8e, 0xff}}},
-    {{{    89,     18,    -34}, 0, {     0,      0}, {0x0a, 0x1b, 0x85, 0xff}}},
-    {{{    84,     60,     -7}, 0, {     0,      0}, {0xfb, 0x44, 0x96, 0xff}}},
-    {{{   146,     59,     -8}, 0, {     0,      0}, {0x15, 0x2a, 0x8b, 0xff}}},
-    {{{   162,     14,    -11}, 0, {     0,      0}, {0x0a, 0x7d, 0x0d, 0xff}}},
-    {{{    89,     18,    -34}, 0, {     0,      0}, {0x06, 0x7e, 0xff, 0xff}}},
-    {{{   105,     17,      3}, 0, {     0,      0}, {0x0a, 0x7c, 0x14, 0xff}}},
-    {{{   162,     14,    -11}, 0, {     0,      0}, {0x26, 0x1e, 0x8b, 0xff}}},
-    {{{   166,    -13,    -17}, 0, {     0,      0}, {0x18, 0xf9, 0x84, 0xff}}},
-    {{{    56,     80,      1}, 0, {     0,      0}, {0x1a, 0x6a, 0x40, 0xff}}},
-    {{{    84,     48,     24}, 0, {     0,      0}, {0x32, 0x3d, 0x62, 0xff}}},
-    {{{    84,     60,     -7}, 0, {     0,      0}, {0x4d, 0x5d, 0x24, 0xff}}},
-};
-
-// 0x0401B890
-static const Vtx mario_right_hand_peace_shared_dl_vertex_group7[] = {
-    {{{   139,     53,     25}, 0, {     0,      0}, {0x5b, 0xa8, 0x02, 0xff}}},
-    {{{   105,     17,      3}, 0, {     0,      0}, {0x59, 0xa6, 0xf7, 0x00}}},
-    {{{   146,     59,     -8}, 0, {     0,      0}, {0x57, 0xa6, 0xf0, 0x00}}},
-    {{{    33,      7,    -37}, 0, {     0,      0}, {0xde, 0xf5, 0x87, 0xff}}},
-    {{{    89,     18,    -34}, 0, {     0,      0}, {0x0a, 0x1b, 0x85, 0xff}}},
-    {{{    94,    -22,    -18}, 0, {     0,      0}, {0x07, 0xcd, 0x8d, 0xff}}},
-    {{{    88,    -34,     39}, 0, {     0,      0}, {0x38, 0xa1, 0x3d, 0xff}}},
-    {{{   101,    -29,     15}, 0, {     0,      0}, {0x53, 0xa3, 0x15, 0xff}}},
-    {{{    90,     -3,     52}, 0, {     0,      0}, {0x50, 0x07, 0x61, 0xff}}},
-    {{{    94,    -22,    -18}, 0, {     0,      0}, {0x1c, 0x85, 0x00, 0xff}}},
-    {{{   155,    -15,     21}, 0, {     0,      0}, {0x19, 0x85, 0xf1, 0xff}}},
-    {{{   166,    -13,    -17}, 0, {     0,      0}, {0x10, 0x83, 0x00, 0xff}}},
-    {{{   101,    -29,     15}, 0, {     0,      0}, {0xff, 0xe2, 0x7b, 0xff}}},
-    {{{   153,      7,     24}, 0, {     0,      0}, {0xff, 0xe2, 0x7b, 0xff}}},
-    {{{    98,     10,     29}, 0, {     0,      0}, {0x07, 0xd6, 0x77, 0xff}}},
-};
-
-// 0x0401B980
-static const Vtx mario_right_hand_peace_shared_dl_vertex_group8[] = {
-    {{{   139,     53,     25}, 0, {     0,      0}, {0xfc, 0x13, 0x7d, 0xff}}},
-    {{{   123,     72,     21}, 0, {     0,      0}, {0xfc, 0x15, 0x7d, 0x00}}},
-    {{{    84,     48,     24}, 0, {     0,      0}, {0x32, 0x3d, 0x62, 0x00}}},
-    {{{    98,     10,     29}, 0, {     0,      0}, {0x55, 0x16, 0x5b, 0xff}}},
-    {{{   101,    -29,     15}, 0, {     0,      0}, {0xff, 0xe2, 0x7b, 0xff}}},
-    {{{   155,    -15,     21}, 0, {     0,      0}, {0xf5, 0xef, 0x7d, 0xff}}},
-    {{{   153,      7,     24}, 0, {     0,      0}, {0xff, 0xe2, 0x7b, 0xff}}},
-    {{{    90,     -3,     52}, 0, {     0,      0}, {0x50, 0x07, 0x61, 0xff}}},
-    {{{   101,    -29,     15}, 0, {     0,      0}, {0x53, 0xa3, 0x15, 0xff}}},
-    {{{   146,     59,     -8}, 0, {     0,      0}, {0x57, 0xa6, 0xf0, 0xff}}},
-    {{{   105,     17,      3}, 0, {     0,      0}, {0x59, 0xa6, 0xf7, 0xff}}},
-    {{{    89,     18,    -34}, 0, {     0,      0}, {0x51, 0xa6, 0xdd, 0xff}}},
-    {{{   166,    -13,    -17}, 0, {     0,      0}, {0x18, 0xf9, 0x84, 0xff}}},
-    {{{    94,    -22,    -18}, 0, {     0,      0}, {0x07, 0xcd, 0x8d, 0xff}}},
-    {{{    89,     18,    -34}, 0, {     0,      0}, {0x0a, 0x1b, 0x85, 0xff}}},
-};
-
-// 0x0401BA70
-static const Vtx mario_right_hand_peace_shared_dl_vertex_group9[] = {
-    {{{    84,     48,     24}, 0, {     0,      0}, {0xc2, 0x66, 0x28, 0xff}}},
-    {{{   123,     72,     21}, 0, {     0,      0}, {0xc3, 0x66, 0x29, 0x00}}},
-    {{{   126,     84,     -3}, 0, {     0,      0}, {0xc2, 0x66, 0x28, 0x00}}},
-    {{{   139,     53,     25}, 0, {     0,      0}, {0x5b, 0xa8, 0x02, 0xff}}},
-    {{{    98,     10,     29}, 0, {     0,      0}, {0x5b, 0xa8, 0x02, 0xff}}},
-    {{{   105,     17,      3}, 0, {     0,      0}, {0x59, 0xa6, 0xf7, 0xff}}},
-    {{{   105,     17,      3}, 0, {     0,      0}, {0x0a, 0x7c, 0x14, 0xff}}},
-    {{{   153,      7,     24}, 0, {     0,      0}, {0x0c, 0x7a, 0x1e, 0xff}}},
-    {{{   162,     14,    -11}, 0, {     0,      0}, {0x0a, 0x7d, 0x0d, 0xff}}},
-    {{{   123,     72,     21}, 0, {     0,      0}, {0x5d, 0x4d, 0x26, 0xff}}},
-    {{{   139,     53,     25}, 0, {     0,      0}, {0x5a, 0x52, 0x21, 0xff}}},
-    {{{   146,     59,     -8}, 0, {     0,      0}, {0x5d, 0x4d, 0x26, 0xff}}},
-    {{{    24,    -59,     -3}, 0, {     0,      0}, {0x68, 0xc7, 0x2c, 0xff}}},
-    {{{    32,    -43,      0}, 0, {     0,      0}, {0x68, 0xc7, 0x2c, 0xff}}},
-    {{{    23,    -29,     36}, 0, {     0,      0}, {0x12, 0xec, 0x7b, 0xff}}},
-    {{{    15,    -39,     42}, 0, {     0,      0}, {0x0c, 0xbe, 0x6b, 0xff}}},
-};
-
-// 0x0401BB70
-static const Vtx mario_right_hand_peace_shared_dl_vertex_group10[] = {
-    {{{     2,     -5,    -33}, 0, {     0,      0}, {0x47, 0x20, 0x9d, 0xff}}},
-    {{{    14,     -1,    -22}, 0, {     0,      0}, {0x47, 0x20, 0x9d, 0x00}}},
-    {{{    32,    -43,      0}, 0, {     0,      0}, {0x52, 0xee, 0xa2, 0x00}}},
-    {{{    24,    -59,     -3}, 0, {     0,      0}, {0x52, 0xee, 0xa2, 0xff}}},
-    {{{     2,     -5,    -33}, 0, {     0,      0}, {0xad, 0xda, 0xa9, 0xff}}},
-    {{{    -8,    -12,    -20}, 0, {     0,      0}, {0x93, 0xcf, 0xd7, 0xff}}},
-    {{{   -25,     24,      0}, 0, {     0,      0}, {0x84, 0xf8, 0xea, 0xff}}},
-    {{{   -22,     43,     -3}, 0, {     0,      0}, {0x86, 0x10, 0xe4, 0xff}}},
-    {{{   -15,     23,     43}, 0, {     0,      0}, {0xd6, 0x31, 0x6c, 0xff}}},
-    {{{     0,     21,     37}, 0, {     0,      0}, {0xfe, 0x44, 0x6a, 0xff}}},
-    {{{    -4,     38,      0}, 0, {     0,      0}, {0xd3, 0x66, 0x3c, 0xff}}},
-    {{{   -22,     43,     -3}, 0, {     0,      0}, {0x1a, 0x72, 0x2f, 0xff}}},
-    {{{    15,    -39,     42}, 0, {     0,      0}, {0x0c, 0xbe, 0x6b, 0xff}}},
-    {{{    23,    -29,     36}, 0, {     0,      0}, {0x12, 0xec, 0x7b, 0xff}}},
-};
-
-// 0x0401BC50
-static const Vtx mario_right_hand_peace_shared_dl_vertex_group11[] = {
-    {{{   101,    -29,     15}, 0, {     0,      0}, {0x53, 0xa3, 0x15, 0xff}}},
-    {{{    56,    -47,     -5}, 0, {     0,      0}, {0x0c, 0x87, 0xde, 0x00}}},
-    {{{    94,    -22,    -18}, 0, {     0,      0}, {0x1c, 0x85, 0x00, 0x00}}},
-};
-
-// 0x0401BC80 - 0x0401BF30
-const Gfx mario_right_hand_peace_shared_dl[] = {
-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
-    gsSP2Triangles( 2,  4,  3, 0x0,  5,  6,  7, 0x0),
-    gsSP2Triangles( 8,  7,  9, 0x0,  7,  6, 10, 0x0),
-    gsSP2Triangles( 7, 10,  9, 0x0, 11,  8,  9, 0x0),
-    gsSP2Triangles( 7, 12,  5, 0x0, 10, 13, 14, 0x0),
-    gsSP2Triangles( 6, 15, 10, 0x0, 10, 14,  9, 0x0),
-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group2, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  4, 0x0),
-    gsSP2Triangles( 5,  6,  7, 0x0,  8,  0,  9, 0x0),
-    gsSP2Triangles(10, 11, 12, 0x0, 10, 12, 13, 0x0),
-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group3, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  4,  6,  7, 0x0),
-    gsSP2Triangles( 7,  6,  8, 0x0,  7,  8,  9, 0x0),
-    gsSP2Triangles( 9,  8, 10, 0x0,  9, 10, 11, 0x0),
-    gsSP1Triangle(12, 13, 14, 0x0),
-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group4, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10, 11, 0x0),
-    gsSP2Triangles( 2, 12, 13, 0x0,  3,  5, 12, 0x0),
-    gsSP1Triangle(12, 14, 15, 0x0),
-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group5, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10, 11, 0x0),
-    gsSP2Triangles( 9, 11, 12, 0x0, 13, 14, 15, 0x0),
-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group6, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 4,  3,  6, 0x0,  7,  8,  9, 0x0),
-    gsSP2Triangles( 4, 10, 11, 0x0, 12, 13, 14, 0x0),
-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group7, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10,  7, 0x0),
-    gsSP2Triangles(10,  9, 11, 0x0, 12, 13, 14, 0x0),
-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group8, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  3,  2,  7, 0x0),
-    gsSP2Triangles( 8,  3,  7, 0x0,  9, 10, 11, 0x0),
-    gsSP1Triangle(12, 13, 14, 0x0),
-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group9, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10, 11, 0x0),
-    gsSP2Triangles(12, 13, 14, 0x0, 12, 14, 15, 0x0),
-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group10, 14, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  4,  6,  7, 0x0),
-    gsSP2Triangles( 8,  9, 10, 0x0,  8, 10, 11, 0x0),
-    gsSP2Triangles(12, 13,  9, 0x0, 12,  9,  8, 0x0),
-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group11, 3, 0),
-    gsSP1Triangle( 0,  1,  2, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401BF30 - 0x0401BF50
-const Gfx mario_right_hand_peace[] = {
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPDisplayList(mario_right_hand_peace_shared_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401BF50
-static const Vtx mario_cap_unused_m_logo_dl_vertex[] = {
-    {{{    33,     35,    118}, 0, {   728,    758}, {0x30, 0x26, 0x6e, 0xff}}},
-    {{{    96,     22,     45}, 0, {  1240,    876}, {0x48, 0xa4, 0x31, 0xff}}},
-    {{{    71,    101,    113}, 0, {  1028,    148}, {0x55, 0x16, 0x5b, 0xff}}},
-    {{{     0,    110,    143}, 0, {   460,     68}, {0x00, 0x34, 0x73, 0xff}}},
-    {{{   -31,     35,    118}, 0, {   206,    762}, {0xd0, 0x26, 0x6f, 0xff}}},
-    {{{   -70,    101,    113}, 0, {  -106,    158}, {0xab, 0x16, 0x5b, 0xff}}},
-    {{{   -95,     22,     46}, 0, {  -302,    890}, {0xa8, 0xb9, 0x38, 0xff}}},
-};
-
-// 0x0401BFC0
-static const Vtx mario_cap_unused_base_top_dl_vertex_group1[] = {
-    {{{   -66,      2,    139}, 0, {     0,      0}, {0xb0, 0xbb, 0x45, 0xff}}},
-    {{{     0,      0,    163}, 0, {     0,      0}, {0x00, 0xba, 0x69, 0xff}}},
-    {{{   -31,     35,    118}, 0, {     0,      0}, {0xd0, 0x26, 0x6f, 0xff}}},
-    {{{   -32,     17,    109}, 0, {     0,      0}, {0x00, 0x83, 0xf0, 0xff}}},
-    {{{    33,     17,    109}, 0, {     0,      0}, {0xfb, 0x84, 0xea, 0xff}}},
-    {{{   -95,     22,     46}, 0, {     0,      0}, {0xa8, 0xb9, 0x38, 0xff}}},
-    {{{  -101,     10,     -7}, 0, {     0,      0}, {0xd8, 0x89, 0x11, 0xff}}},
-    {{{   -70,    101,    113}, 0, {     0,      0}, {0xab, 0x16, 0x5b, 0xff}}},
-    {{{  -135,     70,     23}, 0, {     0,      0}, {0x84, 0x15, 0x10, 0xff}}},
-    {{{  -125,     38,    -45}, 0, {     0,      0}, {0x8d, 0xec, 0xd1, 0xff}}},
-    {{{   -86,      1,    -60}, 0, {     0,      0}, {0xce, 0x8c, 0xf6, 0xff}}},
-    {{{   -41,    144,     64}, 0, {     0,      0}, {0xdc, 0x79, 0x00, 0xff}}},
-    {{{   -76,     84,    -60}, 0, {     0,      0}, {0xd5, 0x6e, 0xd3, 0xff}}},
-    {{{   136,     70,     22}, 0, {     0,      0}, {0x7b, 0x16, 0x10, 0xff}}},
-    {{{    71,    101,    113}, 0, {     0,      0}, {0x55, 0x16, 0x5b, 0xff}}},
-    {{{    96,     22,     45}, 0, {     0,      0}, {0x48, 0xa4, 0x31, 0xff}}},
-};
-
-// 0x0401C0C0
-static const Vtx mario_cap_unused_base_top_dl_vertex_group2[] = {
-    {{{    42,    144,     64}, 0, {     0,      0}, {0x2b, 0x76, 0x0d, 0xff}}},
-    {{{   136,     70,     22}, 0, {     0,      0}, {0x7b, 0x16, 0x10, 0xff}}},
-    {{{    76,     84,    -60}, 0, {     0,      0}, {0x2a, 0x6c, 0xcf, 0xff}}},
-    {{{   103,     10,     -6}, 0, {     0,      0}, {0x42, 0x96, 0x12, 0xff}}},
-    {{{   126,     38,    -46}, 0, {     0,      0}, {0x73, 0xec, 0xd0, 0xff}}},
-    {{{    71,    101,    113}, 0, {     0,      0}, {0x55, 0x16, 0x5b, 0xff}}},
-    {{{    96,     22,     45}, 0, {     0,      0}, {0x48, 0xa4, 0x31, 0xff}}},
-    {{{    67,      2,    139}, 0, {     0,      0}, {0x50, 0xba, 0x44, 0xff}}},
-    {{{    33,     17,    109}, 0, {     0,      0}, {0xfb, 0x84, 0xea, 0xff}}},
-    {{{    33,     35,    118}, 0, {     0,      0}, {0x30, 0x26, 0x6e, 0xff}}},
-    {{{    86,      1,    -60}, 0, {     0,      0}, {0x20, 0x86, 0xfe, 0xff}}},
-    {{{     0,      0,    163}, 0, {     0,      0}, {0x00, 0xba, 0x69, 0xff}}},
-    {{{   -31,     35,    118}, 0, {     0,      0}, {0xd0, 0x26, 0x6f, 0xff}}},
-    {{{    53,      0,   -118}, 0, {     0,      0}, {0x2c, 0xb5, 0xa5, 0xff}}},
-    {{{    49,     62,   -139}, 0, {     0,      0}, {0x32, 0x49, 0xa6, 0xff}}},
-};
-
-// 0x0401C1B0
-static const Vtx mario_cap_unused_base_top_dl_vertex_group3[] = {
-    {{{   -76,     84,    -60}, 0, {     0,      0}, {0xd5, 0x6e, 0xd3, 0xff}}},
-    {{{   -41,    144,     64}, 0, {     0,      0}, {0xdc, 0x79, 0x00, 0xff}}},
-    {{{    76,     84,    -60}, 0, {     0,      0}, {0x2a, 0x6c, 0xcf, 0xff}}},
-    {{{     0,    110,    143}, 0, {     0,      0}, {0x00, 0x34, 0x73, 0xff}}},
-    {{{    42,    144,     64}, 0, {     0,      0}, {0x2b, 0x76, 0x0d, 0xff}}},
-    {{{   -70,    101,    113}, 0, {     0,      0}, {0xab, 0x16, 0x5b, 0xff}}},
-    {{{    71,    101,    113}, 0, {     0,      0}, {0x55, 0x16, 0x5b, 0xff}}},
-    {{{    49,     62,   -139}, 0, {     0,      0}, {0x32, 0x49, 0xa6, 0xff}}},
-    {{{   126,     38,    -46}, 0, {     0,      0}, {0x73, 0xec, 0xd0, 0xff}}},
-    {{{   -52,      0,   -118}, 0, {     0,      0}, {0xd2, 0x9d, 0xc1, 0xff}}},
-    {{{   -49,     62,   -138}, 0, {     0,      0}, {0xce, 0x1a, 0x8f, 0xff}}},
-    {{{    53,      0,   -118}, 0, {     0,      0}, {0x2c, 0xb5, 0xa5, 0xff}}},
-    {{{  -125,     38,    -45}, 0, {     0,      0}, {0x8d, 0xec, 0xd1, 0xff}}},
-    {{{    86,      1,    -60}, 0, {     0,      0}, {0x20, 0x86, 0xfe, 0xff}}},
-    {{{   -86,      1,    -60}, 0, {     0,      0}, {0xce, 0x8c, 0xf6, 0xff}}},
-};
-
-// 0x0401C2A0
-static const Vtx mario_cap_unused_base_bottom_dl_vertex[] = {
-    {{{    86,      1,    -60}, 0, {     0,      0}, {0x20, 0x86, 0xfe, 0xff}}},
-    {{{   -86,      1,    -60}, 0, {     0,      0}, {0xce, 0x8c, 0xf6, 0xff}}},
-    {{{   -52,      0,   -118}, 0, {     0,      0}, {0xd2, 0x9d, 0xc1, 0xff}}},
-    {{{    33,     17,    109}, 0, {     0,      0}, {0xfb, 0x84, 0xea, 0xff}}},
-    {{{   -32,     17,    109}, 0, {     0,      0}, {0x00, 0x83, 0xf0, 0xff}}},
-    {{{  -101,     10,     -7}, 0, {     0,      0}, {0xd8, 0x89, 0x11, 0xff}}},
-    {{{    96,     22,     45}, 0, {     0,      0}, {0x48, 0xa4, 0x31, 0xff}}},
-    {{{   103,     10,     -6}, 0, {     0,      0}, {0x42, 0x96, 0x12, 0xff}}},
-    {{{    53,      0,   -118}, 0, {     0,      0}, {0x2c, 0xb5, 0xa5, 0xff}}},
-};
-
-// 0x0401C330 - 0x0401C368
-const Gfx mario_cap_unused_m_logo_dl[] = {
-    gsSPVertex(mario_cap_unused_m_logo_dl_vertex, 7, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  0, 0x0),
-    gsSP2Triangles( 3,  5,  4, 0x0,  2,  3,  0, 0x0),
-    gsSP1Triangle( 5,  6,  4, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401C368 - 0x0401C4C8
-const Gfx mario_cap_unused_base_top_dl[] = {
-    gsSPVertex(mario_cap_unused_base_top_dl_vertex_group1, 16, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
-    gsSP2Triangles( 3,  1,  0, 0x0,  3,  5,  6, 0x0),
-    gsSP2Triangles( 3,  0,  5, 0x0,  5,  7,  8, 0x0),
-    gsSP2Triangles( 5,  8,  6, 0x0,  0,  2,  5, 0x0),
-    gsSP2Triangles( 6,  9, 10, 0x0,  8,  9,  6, 0x0),
-    gsSP2Triangles(11,  8,  7, 0x0,  8, 12,  9, 0x0),
-    gsSP2Triangles(12,  8, 11, 0x0, 13, 14, 15, 0x0),
-    gsSPVertex(mario_cap_unused_base_top_dl_vertex_group2, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
-    gsSP2Triangles( 4,  2,  1, 0x0,  5,  1,  0, 0x0),
-    gsSP2Triangles( 1,  6,  3, 0x0,  6,  7,  8, 0x0),
-    gsSP2Triangles( 9,  7,  6, 0x0, 10,  4,  3, 0x0),
-    gsSP2Triangles( 9, 11,  7, 0x0,  7, 11,  8, 0x0),
-    gsSP2Triangles(12, 11,  9, 0x0, 13, 14,  4, 0x0),
-    gsSPVertex(mario_cap_unused_base_top_dl_vertex_group3, 15, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  4, 0x0),
-    gsSP2Triangles( 5,  3,  1, 0x0,  1,  4,  2, 0x0),
-    gsSP2Triangles( 4,  3,  6, 0x0,  0,  2,  7, 0x0),
-    gsSP2Triangles( 8,  7,  2, 0x0,  9, 10, 11, 0x0),
-    gsSP2Triangles(12, 10,  9, 0x0,  7, 10,  0, 0x0),
-    gsSP2Triangles(10,  7, 11, 0x0,  0, 10, 12, 0x0),
-    gsSP2Triangles(11,  8, 13, 0x0, 14, 12,  9, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401C4C8 - 0x0401C510
-const Gfx mario_cap_unused_base_bottom_dl[] = {
-    gsSPVertex(mario_cap_unused_base_bottom_dl_vertex, 9, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  3,  5, 0x0,  7,  6,  5, 0x0),
-    gsSP2Triangles( 0,  7,  5, 0x0,  0,  5,  1, 0x0),
-    gsSP1Triangle( 2,  8,  0, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401C510 - 0x0401C538
-const Gfx mario_cap_unused_base_dl[] = {
-    gsSPDisplayList(mario_cap_unused_base_top_dl),
-    gsSPLight(&mario_brown2_lights_group.l, 1),
-    gsSPLight(&mario_brown2_lights_group.a, 2),
-    gsSPDisplayList(mario_cap_unused_base_bottom_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401C538
-static const Vtx mario_wings_half_1_unused_dl_vertex[] = {
-    {{{   199,    247,    -55}, 0, {   990,      0}, {0x59, 0xed, 0x58, 0xff}}},
-    {{{   131,    274,     20}, 0, {     0,      0}, {0x59, 0xed, 0x58, 0xff}}},
-    {{{    69,     71,     38}, 0, {     0,   2012}, {0x59, 0xed, 0x58, 0xff}}},
-    {{{   199,    247,    -55}, 0, {   990,      0}, {0x58, 0xee, 0x58, 0xff}}},
-    {{{    69,     71,     38}, 0, {     0,   2012}, {0x58, 0xee, 0x58, 0xff}}},
-    {{{   138,     44,    -37}, 0, {   990,   2012}, {0x58, 0xee, 0x58, 0xff}}},
-    {{{  -137,     44,    -37}, 0, {   990,   2012}, {0xa8, 0xee, 0x58, 0xff}}},
-    {{{   -68,     71,     38}, 0, {     0,   2012}, {0xa8, 0xee, 0x58, 0xff}}},
-    {{{  -198,    247,    -55}, 0, {   990,      0}, {0xa8, 0xee, 0x58, 0xff}}},
-    {{{   -68,     71,     38}, 0, {     0,   2012}, {0xa7, 0xed, 0x58, 0xff}}},
-    {{{  -130,    274,     20}, 0, {     0,      0}, {0xa7, 0xed, 0x58, 0xff}}},
-    {{{  -198,    247,    -55}, 0, {   990,      0}, {0xa7, 0xed, 0x58, 0xff}}},
-};
-
-// 0x0401C5F8
-static const Vtx mario_wings_half_2_unused_dl_vertex[] = {
-    {{{   268,    219,   -132}, 0, {   990,      0}, {0x59, 0xed, 0x57, 0xff}}},
-    {{{   199,    247,    -55}, 0, {     0,      0}, {0x59, 0xed, 0x57, 0xff}}},
-    {{{   138,     44,    -37}, 0, {     0,   2012}, {0x59, 0xed, 0x57, 0xff}}},
-    {{{   207,     16,   -114}, 0, {   990,   2012}, {0x59, 0xed, 0x57, 0xff}}},
-    {{{  -206,     16,   -114}, 0, {   990,   2012}, {0xa7, 0xed, 0x57, 0xff}}},
-    {{{  -137,     44,    -37}, 0, {     0,   2012}, {0xa7, 0xed, 0x57, 0xff}}},
-    {{{  -267,    219,   -132}, 0, {   990,      0}, {0xa7, 0xed, 0x57, 0xff}}},
-    {{{  -198,    247,    -55}, 0, {     0,      0}, {0xa7, 0xed, 0x57, 0xff}}},
-};
-
-// 0x0401C678 - 0x0401C6A8
-const Gfx mario_wings_half_1_unused_dl[] = {
-    gsSPVertex(mario_wings_half_1_unused_dl_vertex, 12, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10, 11, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401C6A8 - 0x0401C6D8
-const Gfx mario_wings_half_2_unused_dl[] = {
-    gsSPVertex(mario_wings_half_2_unused_dl_vertex, 8, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
-    gsSP2Triangles( 4,  5,  6, 0x0,  5,  7,  6, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401C6D8 - 0x0401C730
-const Gfx mario_cap_wings_unused_intial_dl[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_MODULATERGBA, G_CC_MODULATERGBA),
-    gsSPClearGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 6, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (64 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401C730 - 0x0401C758
-const Gfx mario_cap_wings_unused_end_dl[] = {
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
-    gsSPSetGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401C758 - 0x0401C7E8 # Unreferenced, possibly a early duplicate of the cap object used in segment 03
-const Gfx mario_cap_unused_dl[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_BLENDRGBA, G_CC_BLENDRGBA),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPLight(&mario_red_lights_group.l, 1),
-    gsSPLight(&mario_red_lights_group.a, 2),
-    gsSPDisplayList(mario_cap_unused_m_logo_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
-    gsSPDisplayList(mario_cap_unused_base_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401C7E8 - 0x0401C890 # Unreferenced, possibly an early duplicate of the cap object used in segment 03
-const Gfx mario_metal_cap_unused_dl[] = {
-    gsDPPipeSync(),
-    gsSPSetGeometryMode(G_TEXTURE_GEN),
-    gsDPSetCombineMode(G_CC_MODULATERGB, G_CC_MODULATERGB),
-    gsDPLoadTextureBlock(mario_texture_metal, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_ON),
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsSPDisplayList(mario_cap_unused_m_logo_dl),
-    gsSPDisplayList(mario_cap_unused_base_top_dl),
-    gsSPDisplayList(mario_cap_unused_base_bottom_dl),
-    gsDPPipeSync(),
-    gsSPClearGeometryMode(G_TEXTURE_GEN),
-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401C890 - 0x0401C8E8 # Unreferenced, unused like the duplicated cap, same case
-const Gfx mario_cap_wings_unused[] = {
-    gsSPDisplayList(mario_cap_wings_unused_intial_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_wings_half_1),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_wings_half_1_unused_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_wings_half_2),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_wings_half_2_unused_dl),
-    gsSPDisplayList(mario_cap_wings_unused_end_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401C8E8 - 0x0401C940 # Unreferenced, unused like the duplicated cap, same case
-const Gfx mario_metal_cap_wings_unused[] = {
-    gsSPDisplayList(mario_cap_wings_unused_intial_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_metal_wings_half_1),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_wings_half_1_unused_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_metal_wings_half_2),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_wings_half_2_unused_dl),
-    gsSPDisplayList(mario_cap_wings_unused_end_dl),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401C940
-static const Vtx mario_wings_half_1_dl_vertex[] = {
-    {{{  -105,    212,      0}, 0, {     0,      0}, {0x00, 0x00, 0x7f, 0xff}}},
-    {{{  -105,      0,      0}, 0, {     0,   2012}, {0x00, 0x00, 0x7f, 0xff}}},
-    {{{     0,      0,      0}, 0, {   990,   2012}, {0x00, 0x00, 0x7f, 0xff}}},
-    {{{     0,    212,      0}, 0, {   990,      0}, {0x00, 0x00, 0x7f, 0xff}}},
-};
-
-// 0x0401C980
-static const Vtx mario_wings_half_2_dl_vertex[] = {
-    {{{     0,      0,      0}, 0, {     0,   2012}, {0x00, 0x00, 0x7f, 0xff}}},
-    {{{   106,    212,      0}, 0, {   990,      0}, {0x00, 0x00, 0x7f, 0xff}}},
-    {{{     0,    212,      0}, 0, {     0,      0}, {0x00, 0x00, 0x7f, 0xff}}},
-    {{{   106,      0,      0}, 0, {   990,   2012}, {0x00, 0x00, 0x7f, 0xff}}},
-};
-
-// 0x0401C9C0 - 0x0401C9E0
-const Gfx mario_wings_half_1_dl[] = {
-    gsSPVertex(mario_wings_half_1_dl_vertex, 4, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401C9E0 - 0x0401CA00
-const Gfx mario_wings_half_2_dl[] = {
-    gsSPVertex(mario_wings_half_2_dl_vertex, 4, 0),
-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401CA00 - 0x0401CAB8
-const Gfx mario_cap_wings[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_DECALRGBA, G_CC_DECALRGBA),
-    gsSPClearGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 6, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (64 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_wings_half_1),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_wings_half_1_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_wings_half_2),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_wings_half_2_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
-    gsSPSetGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401CAB8 - 0x0401CB70
-const Gfx mario_cap_wings_transparent[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_DECALFADEA, G_CC_DECALFADEA),
-    gsSPClearGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 6, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (64 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_wings_half_1),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_wings_half_1_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_wings_half_2),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_wings_half_2_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
-    gsSPSetGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401CB70 - 0x0401CC28
-const Gfx mario_metal_cap_wings[] = {
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_DECALRGBA, G_CC_DECALRGBA),
-    gsSPClearGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 6, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (64 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsSPLight(&mario_white_lights_group.l, 1),
-    gsSPLight(&mario_white_lights_group.a, 2),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_metal_wings_half_1),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_wings_half_1_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_metal_wings_half_2),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_wings_half_2_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
-    gsSPSetGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
-    gsSPEndDisplayList(),
-};
-
-// 0x0401CC28 - 0x0401CD20
-const Gfx mario_metal_cap_wings_transparent[] = {
-    gsDPPipeSync(),
-    gsSPClearGeometryMode(G_TEXTURE_GEN),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPSetCombineMode(G_CC_DECALFADEA, G_CC_DECALFADEA),
-    gsSPClearGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
-    gsDPTileSync(),
-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 6, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (64 - 1) << G_TEXTURE_IMAGE_FRAC),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_metal_wings_half_1),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_wings_half_1_dl),
-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_metal_wings_half_2),
-    gsDPLoadSync(),
-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
-    gsSPDisplayList(mario_wings_half_2_dl),
-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
-    gsDPPipeSync(),
-    gsSPSetGeometryMode(G_TEXTURE_GEN | G_CULL_BACK | G_SHADING_SMOOTH),
-    gsDPSetCombineMode(G_CC_DECALFADE, G_CC_DECALFADE),
-    gsDPLoadTextureBlock(mario_texture_metal, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_ON),
-    gsSPEndDisplayList(),
+Gfx mario_material_revert_render_settings[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPClearGeometryMode(G_TEXTURE_GEN),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 0),
+	gsDPSetEnvColor(255, 255, 255, 255),
+	gsDPSetAlphaCompare(G_AC_NONE),
+	gsSPEndDisplayList(),
 };
diff --git a/actors/mario/model.inc.c.rej b/actors/mario/model.inc.c.rej
new file mode 100644
index 0000000..f39cb21
--- /dev/null
+++ b/actors/mario/model.inc.c.rej
@@ -0,0 +1,10722 @@
+diff a/actors/mario/model.inc.c b/actors/mario/model.inc.c	(rejected hunks)
+@@ -1,6825 +1,3935 @@
+-// Mario
++Lights1 mario_body_v3_lights = gdSPDefLights1(
++	0x0, 0x0, 0x7F,
++	0x0, 0x0, 0xFE, 0x28, 0x28, 0x28);
+ 
+-// 0x04000000 # solid color blue - butt, left thigh, right thigh - all poly types
+-static const Lights1 mario_blue_lights_group = gdSPDefLights1(
+-    0x00, 0x00, 0x7f,
+-    0x00, 0x00, 0xff, 0x28, 0x28, 0x28
+-);
++Lights1 mario_cap_v3_lights = gdSPDefLights1(
++	0x7F, 0x0, 0x0,
++	0xFE, 0x0, 0x0, 0x28, 0x28, 0x28);
+ 
+-// 0x04000018 # solid color red - left & right arm, torso (tshirt part), caps - all poly types
+-static const Lights1 mario_red_lights_group = gdSPDefLights1(
+-    0x7f, 0x00, 0x00,
+-    0xff, 0x00, 0x00, 0x28, 0x28, 0x28
+-);
++Lights1 mario_face_0___eye_open_v3_lights = gdSPDefLights1(
++	0x7E, 0x60, 0x3C,
++	0xFD, 0xC0, 0x79, 0x28, 0x28, 0x28);
+ 
+-// 0x04000030 # solid color white - metal butt & left thigh - normal left & right hand closed & open (with cap too) and all wings - all poly types
+-static const Lights1 mario_white_lights_group = gdSPDefLights1(
+-    0x7f, 0x7f, 0x7f,
+-    0xff, 0xff, 0xff, 0x28, 0x28, 0x28
+-);
++Lights1 mario_mustache_v3_lights = gdSPDefLights1(
++	0x7E, 0x60, 0x3C,
++	0xFD, 0xC0, 0x79, 0x28, 0x28, 0x28);
+ 
+-// 0x04000048 # solid color brown 1 - foot - all poly types
+-static const Lights1 mario_brown1_lights_group = gdSPDefLights1(
+-    0x39, 0x0e, 0x07,
+-    0x72, 0x1c, 0x0e, 0x28, 0x28, 0x28
+-);
++Lights1 mario_hair_v3_lights = gdSPDefLights1(
++	0x39, 0x2, 0x0,
++	0x73, 0x5, 0x0, 0x28, 0x28, 0x28);
+ 
+-// 0x04000060 # solid color beige skin - face (cap on and off dls) - all poly types
+-static const Lights1 mario_beige_lights_group = gdSPDefLights1(
+-    0x7f, 0x60, 0x3c,
+-    0xfe, 0xc1, 0x79, 0x28, 0x28, 0x28
+-);
++Lights1 mario_sideburns_v3_lights = gdSPDefLights1(
++	0x7E, 0x60, 0x3C,
++	0xFD, 0xC0, 0x79, 0x28, 0x28, 0x28);
+ 
+-// 0x04000078  # solid color brown 2 - hair - all poly types
+-static const Lights1 mario_brown2_lights_group = gdSPDefLights1(
+-    0x39, 0x03, 0x00,
+-    0x73, 0x06, 0x00, 0x28, 0x28, 0x28
+-);
++Lights1 mario_face_1___eye_half_v3_lights = gdSPDefLights1(
++	0x7E, 0x60, 0x3C,
++	0xFD, 0xC0, 0x79, 0x28, 0x28, 0x28);
+ 
+-// 0x04000090
+-ALIGNED8 static const Texture mario_texture_metal[] = {
+-#include "actors/mario/mario_metal.rgba16.inc.c"
++Lights1 mario_face_2___eye_closed_v3_lights = gdSPDefLights1(
++	0x7E, 0x60, 0x3C,
++	0xFD, 0xC0, 0x79, 0x28, 0x28, 0x28);
++
++Lights1 mario_face_7___eye_X_v3_lights = gdSPDefLights1(
++	0x7E, 0x60, 0x3C,
++	0xFD, 0xC0, 0x79, 0x28, 0x28, 0x28);
++
++Lights1 mario_gloves_v3_lights = gdSPDefLights1(
++	0x7F, 0x7F, 0x7F,
++	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
++
++Lights1 mario_shoes_v3_lights = gdSPDefLights1(
++	0x39, 0xD, 0x7,
++	0x72, 0x1B, 0xE, 0x28, 0x28, 0x28);
++
++Gfx mario_mario_button_rgba16_aligner[] = {gsSPEndDisplayList()};
++u8 mario_mario_button_rgba16[] = {
++	#include "actors/mario/mario_button.rgba16.inc.c"
++};
++
++Gfx mario_metal_rgba16_aligner[] = {gsSPEndDisplayList()};
++u8 mario_metal_rgba16[] = {
++	#include "actors/mario/mario_metal.rgba16.inc.c"
++};
++
++Gfx mario_mario_cap_rgba16_aligner[] = {gsSPEndDisplayList()};
++u8 mario_mario_cap_rgba16[] = {
++	#include "actors/mario/mario_cap.rgba16.inc.c"
++};
++
++Gfx mario_mario_face_1_rgba16_aligner[] = {gsSPEndDisplayList()};
++u8 mario_mario_face_1_rgba16[] = {
++	#include "actors/mario/mario_face_1.rgba16.inc.c"
++};
++
++Gfx mario_mario_mustache_rgba16_aligner[] = {gsSPEndDisplayList()};
++u8 mario_mario_mustache_rgba16[] = {
++	#include "actors/mario/mario_mustache.rgba16.inc.c"
++};
++
++Gfx mario_mario_sideburn_rgba16_aligner[] = {gsSPEndDisplayList()};
++u8 mario_mario_sideburn_rgba16[] = {
++	#include "actors/mario/mario_sideburn.rgba16.inc.c"
++};
++
++Gfx mario_mario_face_2_rgba16_aligner[] = {gsSPEndDisplayList()};
++u8 mario_mario_face_2_rgba16[] = {
++	#include "actors/mario/mario_face_2.rgba16.inc.c"
++};
++
++Gfx mario_mario_face_3_rgba16_aligner[] = {gsSPEndDisplayList()};
++u8 mario_mario_face_3_rgba16[] = {
++	#include "actors/mario/mario_face_3.rgba16.inc.c"
++};
++
++Gfx mario_mario_face_4_rgba16_aligner[] = {gsSPEndDisplayList()};
++u8 mario_mario_face_4_rgba16[] = {
++	#include "actors/mario/mario_face_4.rgba16.inc.c"
++};
++
++Gfx mario_wing_2_rgba16_aligner[] = {gsSPEndDisplayList()};
++u8 mario_wing_2_rgba16[] = {
++	#include "actors/mario/wing_2.rgba16.inc.c"
++};
++
++Gfx mario_wing1_rgba16_aligner[] = {gsSPEndDisplayList()};
++u8 mario_wing1_rgba16[] = {
++	#include "actors/mario/wing1.rgba16.inc.c"
++};
++
++Vtx mario_000_offset_mesh_vtx_0[76] = {
++	{{{73, 11, 0},0, {-16, -16},{0x7F, 0x5, 0x0, 0xFF}}},
++	{{{55, -61, -36},0, {-16, -16},{0x64, 0xB5, 0xE7, 0xFF}}},
++	{{{44, -10, -92},0, {-16, -16},{0x50, 0xF0, 0x9F, 0xFF}}},
++	{{{55, -61, 36},0, {-16, -16},{0x64, 0xB5, 0x19, 0xFF}}},
++	{{{44, -9, 92},0, {-16, -16},{0x51, 0xF1, 0x60, 0xFF}}},
++	{{{43, 40, 91},0, {-16, -16},{0x45, 0x2C, 0x61, 0xFF}}},
++	{{{52, 70, 38},0, {-16, -16},{0x5C, 0x53, 0x1A, 0xFF}}},
++	{{{52, 70, -39},0, {-16, -16},{0x5C, 0x53, 0xE5, 0xFF}}},
++	{{{43, 40, -91},0, {-16, -16},{0x45, 0x2C, 0x9F, 0xFF}}},
++	{{{6, 33, -95},0, {-16, -16},{0xE3, 0x28, 0x8B, 0xFF}}},
++	{{{8, -8, -99},0, {-16, -16},{0xEB, 0xF4, 0x83, 0xFF}}},
++	{{{36, -51, -79},0, {-16, -16},{0x3A, 0xB7, 0xAA, 0xFF}}},
++	{{{26, -74, -46},0, {-16, -16},{0x19, 0x88, 0xDE, 0xFF}}},
++	{{{26, -74, 45},0, {-16, -16},{0x19, 0x88, 0x20, 0xFF}}},
++	{{{36, -52, 79},0, {-16, -16},{0x3B, 0xB7, 0x55, 0xFF}}},
++	{{{8, -8, 99},0, {-16, -16},{0xEA, 0xF4, 0x7D, 0xFF}}},
++	{{{7, 33, 95},0, {-16, -16},{0xE5, 0x28, 0x76, 0xFF}}},
++	{{{8, -8, 99},0, {-16, -16},{0xEA, 0xF4, 0x7D, 0xFF}}},
++	{{{44, -9, 92},0, {-16, -16},{0x51, 0xF1, 0x60, 0xFF}}},
++	{{{43, 40, 91},0, {-16, -16},{0x45, 0x2C, 0x61, 0xFF}}},
++	{{{27, 72, 63},0, {-16, -16},{0x11, 0x6D, 0x3F, 0xFF}}},
++	{{{52, 70, 38},0, {-16, -16},{0x5C, 0x53, 0x1A, 0xFF}}},
++	{{{22, 82, 26},0, {-16, -16},{0x5, 0x7E, 0xD, 0xFF}}},
++	{{{22, 82, -26},0, {-16, -16},{0x5, 0x7E, 0xF3, 0xFF}}},
++	{{{52, 70, -39},0, {-16, -16},{0x5C, 0x53, 0xE5, 0xFF}}},
++	{{{27, 72, -63},0, {-16, -16},{0x10, 0x6D, 0xC1, 0xFF}}},
++	{{{43, 40, -91},0, {-16, -16},{0x45, 0x2C, 0x9F, 0xFF}}},
++	{{{6, 33, -95},0, {-16, -16},{0xE3, 0x28, 0x8B, 0xFF}}},
++	{{{-5, 59, -72},0, {-16, -16},{0xC5, 0x56, 0xB8, 0xFF}}},
++	{{{-17, 32, -79},0, {-16, -16},{0xA0, 0x21, 0xB4, 0xFF}}},
++	{{{-20, -8, -81},0, {-16, -16},{0x9D, 0xF6, 0xB2, 0xFF}}},
++	{{{8, -8, -99},0, {-16, -16},{0xEB, 0xF4, 0x83, 0xFF}}},
++	{{{-20, -8, -81},0, {-16, -16},{0x9D, 0xF6, 0xB2, 0xFF}}},
++	{{{8, -8, -99},0, {-16, -16},{0xEB, 0xF4, 0x83, 0xFF}}},
++	{{{4, -48, -86},0, {-16, -16},{0xDF, 0xBC, 0x9A, 0xFF}}},
++	{{{36, -51, -79},0, {-16, -16},{0x3A, 0xB7, 0xAA, 0xFF}}},
++	{{{26, -74, -46},0, {-16, -16},{0x19, 0x88, 0xDE, 0xFF}}},
++	{{{-9, -69, -55},0, {-16, -16},{0xCC, 0x99, 0xCB, 0xFF}}},
++	{{{-14, -74, 0},0, {-16, -16},{0xC6, 0x8F, 0x0, 0xFF}}},
++	{{{26, -74, 45},0, {-16, -16},{0x19, 0x88, 0x20, 0xFF}}},
++	{{{-9, -69, 55},0, {-16, -16},{0xCC, 0x98, 0x34, 0xFF}}},
++	{{{4, -49, 86},0, {-16, -16},{0xDF, 0xBB, 0x66, 0xFF}}},
++	{{{36, -52, 79},0, {-16, -16},{0x3B, 0xB7, 0x55, 0xFF}}},
++	{{{8, -8, 99},0, {-16, -16},{0xEA, 0xF4, 0x7D, 0xFF}}},
++	{{{-20, -7, 81},0, {-16, -16},{0x9D, 0xF6, 0x4E, 0xFF}}},
++	{{{7, 33, 95},0, {-16, -16},{0xE5, 0x28, 0x76, 0xFF}}},
++	{{{-18, 32, 79},0, {-16, -16},{0xA1, 0x20, 0x4E, 0xFF}}},
++	{{{-5, 59, 72},0, {-16, -16},{0xC6, 0x57, 0x49, 0xFF}}},
++	{{{27, 72, 63},0, {-16, -16},{0x11, 0x6D, 0x3F, 0xFF}}},
++	{{{-5, 59, 72},0, {-16, -16},{0xC6, 0x57, 0x49, 0xFF}}},
++	{{{7, 33, 95},0, {-16, -16},{0xE5, 0x28, 0x76, 0xFF}}},
++	{{{-9, 73, 34},0, {-16, -16},{0xBA, 0x68, 0x15, 0xFF}}},
++	{{{22, 82, 26},0, {-16, -16},{0x5, 0x7E, 0xD, 0xFF}}},
++	{{{22, 82, -26},0, {-16, -16},{0x5, 0x7E, 0xF3, 0xFF}}},
++	{{{-9, 73, -34},0, {-16, -16},{0xBA, 0x68, 0xEB, 0xFF}}},
++	{{{27, 72, -63},0, {-16, -16},{0x10, 0x6D, 0xC1, 0xFF}}},
++	{{{-5, 59, -72},0, {-16, -16},{0xC5, 0x56, 0xB8, 0xFF}}},
++	{{{-32, 40, -39},0, {-16, -16},{0x89, 0x27, 0xEA, 0xFF}}},
++	{{{-17, 32, -79},0, {-16, -16},{0xA0, 0x21, 0xB4, 0xFF}}},
++	{{{-20, -8, -81},0, {-16, -16},{0x9D, 0xF6, 0xB2, 0xFF}}},
++	{{{-31, -51, -42},0, {-16, -16},{0x8E, 0xD1, 0xE1, 0xFF}}},
++	{{{4, -48, -86},0, {-16, -16},{0xDF, 0xBC, 0x9A, 0xFF}}},
++	{{{-9, -69, -55},0, {-16, -16},{0xCC, 0x99, 0xCB, 0xFF}}},
++	{{{-14, -74, 0},0, {-16, -16},{0xC6, 0x8F, 0x0, 0xFF}}},
++	{{{-31, -51, 42},0, {-16, -16},{0x8E, 0xD1, 0x1F, 0xFF}}},
++	{{{-31, -51, -42},0, {-16, -16},{0x8E, 0xD1, 0xE1, 0xFF}}},
++	{{{-14, -74, 0},0, {-16, -16},{0xC6, 0x8F, 0x0, 0xFF}}},
++	{{{-9, -69, 55},0, {-16, -16},{0xCC, 0x98, 0x34, 0xFF}}},
++	{{{4, -49, 86},0, {-16, -16},{0xDF, 0xBB, 0x66, 0xFF}}},
++	{{{-20, -7, 81},0, {-16, -16},{0x9D, 0xF6, 0x4E, 0xFF}}},
++	{{{-32, 40, 39},0, {-16, -16},{0x89, 0x27, 0x15, 0xFF}}},
++	{{{-18, 32, 79},0, {-16, -16},{0xA1, 0x20, 0x4E, 0xFF}}},
++	{{{-5, 59, 72},0, {-16, -16},{0xC6, 0x57, 0x49, 0xFF}}},
++	{{{-9, 73, 34},0, {-16, -16},{0xBA, 0x68, 0x15, 0xFF}}},
++	{{{-32, 40, -39},0, {-16, -16},{0x89, 0x27, 0xEA, 0xFF}}},
++	{{{-9, 73, -34},0, {-16, -16},{0xBA, 0x68, 0xEB, 0xFF}}},
++};
++
++Gfx mario_000_offset_mesh_tri_0[] = {
++	gsSPVertex(mario_000_offset_mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 3, 1, 0),
++	gsSP1Triangle(3, 0, 4, 0),
++	gsSP1Triangle(5, 4, 0, 0),
++	gsSP1Triangle(0, 6, 5, 0),
++	gsSP1Triangle(6, 0, 7, 0),
++	gsSP1Triangle(8, 7, 0, 0),
++	gsSP1Triangle(0, 2, 8, 0),
++	gsSP1Triangle(9, 8, 2, 0),
++	gsSP1Triangle(2, 10, 9, 0),
++	gsSP1Triangle(10, 2, 11, 0),
++	gsSP1Triangle(1, 11, 2, 0),
++	gsSP1Triangle(1, 12, 11, 0),
++	gsSP1Triangle(12, 1, 3, 0),
++	gsSP1Triangle(3, 13, 12, 0),
++	gsSP1Triangle(14, 13, 3, 0),
++	gsSP1Triangle(4, 14, 3, 0),
++	gsSP1Triangle(15, 14, 4, 0),
++	gsSPVertex(mario_000_offset_mesh_vtx_0 + 16, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 2, 3, 0),
++	gsSP1Triangle(0, 3, 4, 0),
++	gsSP1Triangle(4, 3, 5, 0),
++	gsSP1Triangle(5, 6, 4, 0),
++	gsSP1Triangle(7, 6, 5, 0),
++	gsSP1Triangle(8, 7, 5, 0),
++	gsSP1Triangle(9, 7, 8, 0),
++	gsSP1Triangle(10, 9, 8, 0),
++	gsSP1Triangle(11, 9, 10, 0),
++	gsSP1Triangle(11, 12, 9, 0),
++	gsSP1Triangle(12, 11, 13, 0),
++	gsSP1Triangle(14, 13, 11, 0),
++	gsSP1Triangle(11, 15, 14, 0),
++	gsSPVertex(mario_000_offset_mesh_vtx_0 + 32, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 2, 1, 0),
++	gsSP1Triangle(2, 3, 4, 0),
++	gsSP1Triangle(4, 5, 2, 0),
++	gsSP1Triangle(6, 5, 4, 0),
++	gsSP1Triangle(7, 6, 4, 0),
++	gsSP1Triangle(7, 8, 6, 0),
++	gsSP1Triangle(9, 8, 7, 0),
++	gsSP1Triangle(7, 10, 9, 0),
++	gsSP1Triangle(11, 9, 10, 0),
++	gsSP1Triangle(9, 11, 12, 0),
++	gsSP1Triangle(12, 11, 13, 0),
++	gsSP1Triangle(13, 14, 12, 0),
++	gsSP1Triangle(14, 13, 15, 0),
++	gsSPVertex(mario_000_offset_mesh_vtx_0 + 48, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 3, 1, 0),
++	gsSP1Triangle(0, 4, 3, 0),
++	gsSP1Triangle(3, 4, 5, 0),
++	gsSP1Triangle(6, 3, 5, 0),
++	gsSP1Triangle(6, 5, 7, 0),
++	gsSP1Triangle(8, 6, 7, 0),
++	gsSP1Triangle(9, 6, 8, 0),
++	gsSP1Triangle(8, 10, 9, 0),
++	gsSP1Triangle(9, 10, 11, 0),
++	gsSP1Triangle(9, 11, 12, 0),
++	gsSP1Triangle(11, 13, 12, 0),
++	gsSP1Triangle(13, 14, 12, 0),
++	gsSP1Triangle(12, 14, 15, 0),
++	gsSPVertex(mario_000_offset_mesh_vtx_0 + 64, 12, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 3, 0, 0),
++	gsSP1Triangle(0, 3, 4, 0),
++	gsSP1Triangle(4, 5, 0, 0),
++	gsSP1Triangle(5, 6, 0, 0),
++	gsSP1Triangle(5, 7, 6, 0),
++	gsSP1Triangle(6, 7, 8, 0),
++	gsSP1Triangle(8, 9, 6, 0),
++	gsSP1Triangle(6, 9, 10, 0),
++	gsSP1Triangle(9, 11, 10, 0),
++	gsSP1Triangle(0, 6, 10, 0),
++	gsSP1Triangle(10, 1, 0, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_000_offset_001_mesh_vtx_0[108] = {
++	{{{9, 89, -40},0, {760, 904},{0xF, 0x78, 0xD8, 0xFF}}},
++	{{{28, 85, -29},0, {974, 496},{0x2D, 0x76, 0xF0, 0xFF}}},
++	{{{47, 75, -34},0, {834, 56},{0x48, 0x66, 0xE6, 0xFF}}},
++	{{{3, 77, -61},0, {248, 956},{0x4, 0x6C, 0xBD, 0xFF}}},
++	{{{17, 66, -75},0, {-74, 626},{0x17, 0x57, 0xA7, 0xFF}}},
++	{{{32, 62, -73},0, {-40, 294},{0x2A, 0x51, 0xA8, 0xFF}}},
++	{{{48, 64, -58},0, {296, -16},{0x46, 0x59, 0xC7, 0xFF}}},
++	{{{47, 75, 35},0, {18, 90},{0x48, 0x66, 0x1A, 0xFF}}},
++	{{{28, 85, 30},0, {-76, 556},{0x2D, 0x76, 0x10, 0xFF}}},
++	{{{9, 89, 41},0, {164, 946},{0x10, 0x78, 0x28, 0xFF}}},
++	{{{3, 77, 62},0, {666, 950},{0x4, 0x6C, 0x42, 0xFF}}},
++	{{{17, 66, 76},0, {950, 574},{0x19, 0x58, 0x59, 0xFF}}},
++	{{{32, 62, 74},0, {886, 236},{0x29, 0x53, 0x57, 0xFF}}},
++	{{{48, 64, 59},0, {532, -16},{0x46, 0x5A, 0x37, 0xFF}}},
++	{{{47, 75, -34},0, {-16, -16},{0x48, 0x66, 0xE6, 0xFF}}},
++	{{{28, 85, 30},0, {-16, -16},{0x2D, 0x76, 0x10, 0xFF}}},
++	{{{47, 75, 35},0, {-16, -16},{0x48, 0x66, 0x1A, 0xFF}}},
++	{{{28, 85, -29},0, {-16, -16},{0x2D, 0x76, 0xF0, 0xFF}}},
++	{{{9, 89, -40},0, {-16, -16},{0xF, 0x78, 0xD8, 0xFF}}},
++	{{{9, 89, 41},0, {-16, -16},{0x10, 0x78, 0x28, 0xFF}}},
++	{{{-15, 88, 35},0, {-16, -16},{0xEC, 0x7A, 0x1D, 0xFF}}},
++	{{{-15, 87, -35},0, {-16, -16},{0xEB, 0x7A, 0xE2, 0xFF}}},
++	{{{3, 77, -61},0, {-16, -16},{0x4, 0x6C, 0xBD, 0xFF}}},
++	{{{-28, 63, -74},0, {-16, -16},{0xCB, 0x48, 0xA6, 0xFF}}},
++	{{{-4, 58, -82},0, {-16, -16},{0xFA, 0x41, 0x93, 0xFF}}},
++	{{{17, 66, -75},0, {-16, -16},{0x17, 0x57, 0xA7, 0xFF}}},
++	{{{12, 33, -90},0, {-16, -16},{0xD, 0x1C, 0x85, 0xFF}}},
++	{{{32, 62, -73},0, {-16, -16},{0x2A, 0x51, 0xA8, 0xFF}}},
++	{{{43, 51, -74},0, {-16, -16},{0x3D, 0x34, 0x9E, 0xFF}}},
++	{{{48, 64, -58},0, {-16, -16},{0x46, 0x59, 0xC7, 0xFF}}},
++	{{{80, 14, -61},0, {-16, -16},{0x61, 0x24, 0xB7, 0xFF}}},
++	{{{43, 51, -74},0, {-16, -16},{0x3D, 0x34, 0x9E, 0xFF}}},
++	{{{48, 64, -58},0, {-16, -16},{0x46, 0x59, 0xC7, 0xFF}}},
++	{{{82, 37, -26},0, {-16, -16},{0x68, 0x45, 0xEB, 0xFF}}},
++	{{{47, 75, -34},0, {-16, -16},{0x48, 0x66, 0xE6, 0xFF}}},
++	{{{100, 1, -23},0, {-16, -16},{0x7C, 0x12, 0xEB, 0xFF}}},
++	{{{84, -29, -62},0, {-16, -16},{0x5E, 0xD7, 0xB5, 0xFF}}},
++	{{{93, -36, -25},0, {-16, -16},{0x6B, 0xBE, 0xF0, 0xFF}}},
++	{{{66, -52, -50},0, {-16, -16},{0x3B, 0x98, 0xD5, 0xFF}}},
++	{{{54, -63, 0},0, {-16, -16},{0x30, 0x8A, 0x0, 0xFF}}},
++	{{{20, -61, -67},0, {-16, -16},{0xA, 0x97, 0xB9, 0xFF}}},
++	{{{8, -74, 0},0, {-16, -16},{0x2, 0x81, 0x0, 0xFF}}},
++	{{{20, -61, 68},0, {-16, -16},{0x9, 0x97, 0x47, 0xFF}}},
++	{{{66, -52, 51},0, {-16, -16},{0x3B, 0x98, 0x2B, 0xFF}}},
++	{{{93, -36, 26},0, {-16, -16},{0x6B, 0xBE, 0x10, 0xFF}}},
++	{{{84, -29, 63},0, {-16, -16},{0x5E, 0xD7, 0x4B, 0xFF}}},
++	{{{84, -29, 63},0, {-16, -16},{0x5E, 0xD7, 0x4B, 0xFF}}},
++	{{{93, -36, 26},0, {-16, -16},{0x6B, 0xBE, 0x10, 0xFF}}},
++	{{{100, 1, 24},0, {-16, -16},{0x7C, 0x12, 0x15, 0xFF}}},
++	{{{80, 14, 62},0, {-16, -16},{0x61, 0x23, 0x4A, 0xFF}}},
++	{{{82, 37, 27},0, {-16, -16},{0x68, 0x45, 0x15, 0xFF}}},
++	{{{48, 64, 59},0, {-16, -16},{0x46, 0x5A, 0x37, 0xFF}}},
++	{{{47, 75, 35},0, {-16, -16},{0x48, 0x66, 0x1A, 0xFF}}},
++	{{{44, 51, 75},0, {-16, -16},{0x3E, 0x37, 0x60, 0xFF}}},
++	{{{32, 62, 74},0, {-16, -16},{0x29, 0x53, 0x57, 0xFF}}},
++	{{{13, 33, 91},0, {-16, -16},{0x10, 0x1C, 0x7B, 0xFF}}},
++	{{{17, 66, 76},0, {-16, -16},{0x19, 0x58, 0x59, 0xFF}}},
++	{{{-4, 58, 84},0, {-16, -16},{0xFB, 0x42, 0x6D, 0xFF}}},
++	{{{3, 77, 62},0, {-16, -16},{0x4, 0x6C, 0x42, 0xFF}}},
++	{{{-28, 63, 75},0, {-16, -16},{0xCB, 0x49, 0x59, 0xFF}}},
++	{{{-15, 88, 35},0, {-16, -16},{0xEC, 0x7A, 0x1D, 0xFF}}},
++	{{{9, 89, 41},0, {-16, -16},{0x10, 0x78, 0x28, 0xFF}}},
++	{{{-15, 88, 35},0, {-16, -16},{0xEC, 0x7A, 0x1D, 0xFF}}},
++	{{{-40, 72, 55},0, {-16, -16},{0xC1, 0x59, 0x40, 0xFF}}},
++	{{{-28, 63, 75},0, {-16, -16},{0xCB, 0x49, 0x59, 0xFF}}},
++	{{{-43, 83, 25},0, {-16, -16},{0xC4, 0x6E, 0x13, 0xFF}}},
++	{{{-43, 83, -24},0, {-16, -16},{0xC5, 0x6F, 0xED, 0xFF}}},
++	{{{-15, 87, -35},0, {-16, -16},{0xEB, 0x7A, 0xE2, 0xFF}}},
++	{{{-40, 72, -54},0, {-16, -16},{0xC1, 0x59, 0xC0, 0xFF}}},
++	{{{-28, 63, -74},0, {-16, -16},{0xCB, 0x48, 0xA6, 0xFF}}},
++	{{{-71, 54, -29},0, {-16, -16},{0x8B, 0x25, 0xDE, 0xFF}}},
++	{{{-27, 26, -89},0, {-16, -16},{0xC4, 0xE, 0x91, 0xFF}}},
++	{{{-4, 58, -82},0, {-16, -16},{0xFA, 0x41, 0x93, 0xFF}}},
++	{{{12, 33, -90},0, {-16, -16},{0xD, 0x1C, 0x85, 0xFF}}},
++	{{{6, -10, -92},0, {-16, -16},{0x0, 0xEA, 0x83, 0xFF}}},
++	{{{-27, -25, -86},0, {-16, -16},{0xC5, 0xDA, 0x96, 0xFF}}},
++	{{{20, -61, -67},0, {-16, -16},{0xA, 0x97, 0xB9, 0xFF}}},
++	{{{-29, -58, -59},0, {-16, -16},{0xC5, 0x9F, 0xC8, 0xFF}}},
++	{{{-29, -58, -59},0, {-16, -16},{0xC5, 0x9F, 0xC8, 0xFF}}},
++	{{{20, -61, -67},0, {-16, -16},{0xA, 0x97, 0xB9, 0xFF}}},
++	{{{8, -74, 0},0, {-16, -16},{0x2, 0x81, 0x0, 0xFF}}},
++	{{{-30, -66, 0},0, {-16, -16},{0xBF, 0x93, 0x0, 0xFF}}},
++	{{{-29, -58, 59},0, {-16, -16},{0xC4, 0x9F, 0x38, 0xFF}}},
++	{{{20, -61, 68},0, {-16, -16},{0x9, 0x97, 0x47, 0xFF}}},
++	{{{-27, -25, 87},0, {-16, -16},{0xC5, 0xD8, 0x69, 0xFF}}},
++	{{{6, -11, 93},0, {-16, -16},{0x0, 0xE9, 0x7D, 0xFF}}},
++	{{{-27, 26, 91},0, {-16, -16},{0xC4, 0xD, 0x6F, 0xFF}}},
++	{{{13, 33, 91},0, {-16, -16},{0x10, 0x1C, 0x7B, 0xFF}}},
++	{{{-4, 58, 84},0, {-16, -16},{0xFB, 0x42, 0x6D, 0xFF}}},
++	{{{-28, 63, 75},0, {-16, -16},{0xCB, 0x49, 0x59, 0xFF}}},
++	{{{-71, 54, 30},0, {-16, -16},{0x8B, 0x25, 0x22, 0xFF}}},
++	{{{-40, 72, 55},0, {-16, -16},{0xC1, 0x59, 0x40, 0xFF}}},
++	{{{-43, 83, 25},0, {-16, -16},{0xC4, 0x6E, 0x13, 0xFF}}},
++	{{{-71, 54, -29},0, {-16, -16},{0x8B, 0x25, 0xDE, 0xFF}}},
++	{{{-43, 83, 25},0, {-16, -16},{0xC4, 0x6E, 0x13, 0xFF}}},
++	{{{-43, 83, -24},0, {-16, -16},{0xC5, 0x6F, 0xED, 0xFF}}},
++	{{{-71, 54, -29},0, {-16, -16},{0x8B, 0x25, 0xDE, 0xFF}}},
++	{{{-40, 72, -54},0, {-16, -16},{0xC1, 0x59, 0xC0, 0xFF}}},
++	{{{-59, -28, 38},0, {-16, -16},{0x8E, 0xD4, 0x22, 0xFF}}},
++	{{{-71, 54, 30},0, {-16, -16},{0x8B, 0x25, 0x22, 0xFF}}},
++	{{{-59, -28, -37},0, {-16, -16},{0x8E, 0xD4, 0xDE, 0xFF}}},
++	{{{-27, 26, -89},0, {-16, -16},{0xC4, 0xE, 0x91, 0xFF}}},
++	{{{-27, -25, -86},0, {-16, -16},{0xC5, 0xDA, 0x96, 0xFF}}},
++	{{{-29, -58, -59},0, {-16, -16},{0xC5, 0x9F, 0xC8, 0xFF}}},
++	{{{-30, -66, 0},0, {-16, -16},{0xBF, 0x93, 0x0, 0xFF}}},
++	{{{-29, -58, 59},0, {-16, -16},{0xC4, 0x9F, 0x38, 0xFF}}},
++	{{{-27, -25, 87},0, {-16, -16},{0xC5, 0xD8, 0x69, 0xFF}}},
++	{{{-27, 26, 91},0, {-16, -16},{0xC4, 0xD, 0x6F, 0xFF}}},
++};
++
++Gfx mario_000_offset_001_mesh_tri_0[] = {
++	gsSPVertex(mario_000_offset_001_mesh_vtx_0 + 0, 14, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 0, 2, 0),
++	gsSP1Triangle(4, 3, 2, 0),
++	gsSP1Triangle(5, 4, 2, 0),
++	gsSP1Triangle(2, 6, 5, 0),
++	gsSP1Triangle(7, 8, 9, 0),
++	gsSP1Triangle(9, 10, 7, 0),
++	gsSP1Triangle(10, 11, 7, 0),
++	gsSP1Triangle(11, 12, 7, 0),
++	gsSP1Triangle(12, 13, 7, 0),
++	gsSPVertex(mario_000_offset_001_mesh_vtx_0 + 14, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 3, 1, 0),
++	gsSP1Triangle(1, 3, 4, 0),
++	gsSP1Triangle(5, 1, 4, 0),
++	gsSP1Triangle(5, 4, 6, 0),
++	gsSP1Triangle(4, 7, 6, 0),
++	gsSP1Triangle(7, 4, 8, 0),
++	gsSP1Triangle(7, 8, 9, 0),
++	gsSP1Triangle(9, 8, 10, 0),
++	gsSP1Triangle(11, 10, 8, 0),
++	gsSP1Triangle(12, 10, 11, 0),
++	gsSP1Triangle(12, 11, 13, 0),
++	gsSP1Triangle(12, 13, 14, 0),
++	gsSP1Triangle(15, 14, 13, 0),
++	gsSPVertex(mario_000_offset_001_mesh_vtx_0 + 30, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 0, 2, 0),
++	gsSP1Triangle(2, 4, 3, 0),
++	gsSP1Triangle(0, 3, 5, 0),
++	gsSP1Triangle(0, 5, 6, 0),
++	gsSP1Triangle(5, 7, 6, 0),
++	gsSP1Triangle(6, 7, 8, 0),
++	gsSP1Triangle(9, 8, 7, 0),
++	gsSP1Triangle(10, 8, 9, 0),
++	gsSP1Triangle(9, 11, 10, 0),
++	gsSP1Triangle(12, 11, 9, 0),
++	gsSP1Triangle(12, 9, 13, 0),
++	gsSP1Triangle(14, 13, 9, 0),
++	gsSP1Triangle(13, 14, 15, 0),
++	gsSPVertex(mario_000_offset_001_mesh_vtx_0 + 46, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 0, 2, 0),
++	gsSP1Triangle(2, 4, 3, 0),
++	gsSP1Triangle(3, 4, 5, 0),
++	gsSP1Triangle(6, 5, 4, 0),
++	gsSP1Triangle(5, 7, 3, 0),
++	gsSP1Triangle(8, 7, 5, 0),
++	gsSP1Triangle(9, 7, 8, 0),
++	gsSP1Triangle(8, 10, 9, 0),
++	gsSP1Triangle(10, 11, 9, 0),
++	gsSP1Triangle(12, 11, 10, 0),
++	gsSP1Triangle(13, 11, 12, 0),
++	gsSP1Triangle(14, 13, 12, 0),
++	gsSP1Triangle(12, 15, 14, 0),
++	gsSPVertex(mario_000_offset_001_mesh_vtx_0 + 62, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(1, 0, 3, 0),
++	gsSP1Triangle(4, 3, 0, 0),
++	gsSP1Triangle(4, 0, 5, 0),
++	gsSP1Triangle(4, 5, 6, 0),
++	gsSP1Triangle(7, 6, 5, 0),
++	gsSP1Triangle(6, 7, 8, 0),
++	gsSP1Triangle(7, 9, 8, 0),
++	gsSP1Triangle(9, 7, 10, 0),
++	gsSP1Triangle(9, 10, 11, 0),
++	gsSP1Triangle(12, 9, 11, 0),
++	gsSP1Triangle(13, 9, 12, 0),
++	gsSP1Triangle(14, 13, 12, 0),
++	gsSP1Triangle(14, 15, 13, 0),
++	gsSPVertex(mario_000_offset_001_mesh_vtx_0 + 78, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 3, 0, 0),
++	gsSP1Triangle(4, 3, 2, 0),
++	gsSP1Triangle(2, 5, 4, 0),
++	gsSP1Triangle(4, 5, 6, 0),
++	gsSP1Triangle(5, 7, 6, 0),
++	gsSP1Triangle(7, 8, 6, 0),
++	gsSP1Triangle(8, 7, 9, 0),
++	gsSP1Triangle(8, 9, 10, 0),
++	gsSP1Triangle(11, 8, 10, 0),
++	gsSP1Triangle(12, 8, 11, 0),
++	gsSP1Triangle(12, 11, 13, 0),
++	gsSP1Triangle(13, 14, 12, 0),
++	gsSP1Triangle(14, 15, 12, 0),
++	gsSPVertex(mario_000_offset_001_mesh_vtx_0 + 94, 14, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 1, 3, 0),
++	gsSP1Triangle(2, 4, 5, 0),
++	gsSP1Triangle(2, 6, 4, 0),
++	gsSP1Triangle(6, 2, 7, 0),
++	gsSP1Triangle(7, 8, 6, 0),
++	gsSP1Triangle(8, 9, 6, 0),
++	gsSP1Triangle(10, 6, 9, 0),
++	gsSP1Triangle(4, 6, 10, 0),
++	gsSP1Triangle(10, 11, 4, 0),
++	gsSP1Triangle(11, 12, 4, 0),
++	gsSP1Triangle(4, 12, 13, 0),
++	gsSP1Triangle(13, 5, 4, 0),
++	gsSPEndDisplayList(),
++};Vtx mario_000_offset_001_mesh_vtx_1[31] = {
++	{{{47, 75, -34},0, {-16, -16},{0x48, 0x66, 0xE6, 0xFF}}},
++	{{{47, 75, 35},0, {-16, -16},{0x48, 0x66, 0x1A, 0xFF}}},
++	{{{82, 37, 27},0, {-16, -16},{0x68, 0x45, 0x15, 0xFF}}},
++	{{{82, 37, -26},0, {-16, -16},{0x68, 0x45, 0xEB, 0xFF}}},
++	{{{100, 1, 24},0, {-16, -16},{0x7C, 0x12, 0x15, 0xFF}}},
++	{{{100, 1, -23},0, {-16, -16},{0x7C, 0x12, 0xEB, 0xFF}}},
++	{{{93, -36, 26},0, {-16, -16},{0x6B, 0xBE, 0x10, 0xFF}}},
++	{{{93, -36, -25},0, {-16, -16},{0x6B, 0xBE, 0xF0, 0xFF}}},
++	{{{54, -63, 0},0, {-16, -16},{0x30, 0x8A, 0x0, 0xFF}}},
++	{{{20, -61, 68},0, {-16, -16},{0x9, 0x97, 0x47, 0xFF}}},
++	{{{46, -34, 84},0, {-16, -16},{0x24, 0xC9, 0x6D, 0xFF}}},
++	{{{6, -11, 93},0, {-16, -16},{0x0, 0xE9, 0x7D, 0xFF}}},
++	{{{66, -52, 51},0, {-16, -16},{0x3B, 0x98, 0x2B, 0xFF}}},
++	{{{84, -29, 63},0, {-16, -16},{0x5E, 0xD7, 0x4B, 0xFF}}},
++	{{{47, 3, 89},0, {-16, -16},{0x2F, 0x8, 0x76, 0xFF}}},
++	{{{80, 14, 62},0, {-16, -16},{0x61, 0x23, 0x4A, 0xFF}}},
++	{{{44, 51, 75},0, {-16, -16},{0x3E, 0x37, 0x60, 0xFF}}},
++	{{{47, 3, 89},0, {-16, -16},{0x2F, 0x8, 0x76, 0xFF}}},
++	{{{80, 14, 62},0, {-16, -16},{0x61, 0x23, 0x4A, 0xFF}}},
++	{{{13, 33, 91},0, {-16, -16},{0x10, 0x1C, 0x7B, 0xFF}}},
++	{{{6, -11, 93},0, {-16, -16},{0x0, 0xE9, 0x7D, 0xFF}}},
++	{{{46, -34, 84},0, {-16, -16},{0x24, 0xC9, 0x6D, 0xFF}}},
++	{{{6, -10, -92},0, {-16, -16},{0x0, 0xEA, 0x83, 0xFF}}},
++	{{{12, 33, -90},0, {-16, -16},{0xD, 0x1C, 0x85, 0xFF}}},
++	{{{47, 3, -88},0, {-16, -16},{0x2F, 0x9, 0x8A, 0xFF}}},
++	{{{43, 51, -74},0, {-16, -16},{0x3D, 0x34, 0x9E, 0xFF}}},
++	{{{80, 14, -61},0, {-16, -16},{0x61, 0x24, 0xB7, 0xFF}}},
++	{{{84, -29, -62},0, {-16, -16},{0x5E, 0xD7, 0xB5, 0xFF}}},
++	{{{46, -34, -83},0, {-16, -16},{0x24, 0xC9, 0x93, 0xFF}}},
++	{{{66, -52, -50},0, {-16, -16},{0x3B, 0x98, 0xD5, 0xFF}}},
++	{{{20, -61, -67},0, {-16, -16},{0xA, 0x97, 0xB9, 0xFF}}},
++};
++
++Gfx mario_000_offset_001_mesh_tri_1[] = {
++	gsSPVertex(mario_000_offset_001_mesh_vtx_1 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 2, 3, 0),
++	gsSP1Triangle(4, 3, 2, 0),
++	gsSP1Triangle(4, 5, 3, 0),
++	gsSP1Triangle(5, 4, 6, 0),
++	gsSP1Triangle(5, 6, 7, 0),
++	gsSP1Triangle(8, 7, 6, 0),
++	gsSP1Triangle(9, 10, 11, 0),
++	gsSP1Triangle(9, 12, 10, 0),
++	gsSP1Triangle(13, 10, 12, 0),
++	gsSP1Triangle(14, 10, 13, 0),
++	gsSP1Triangle(15, 14, 13, 0),
++	gsSPVertex(mario_000_offset_001_mesh_vtx_1 + 16, 15, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(3, 4, 1, 0),
++	gsSP1Triangle(5, 1, 4, 0),
++	gsSP1Triangle(6, 7, 8, 0),
++	gsSP1Triangle(8, 7, 9, 0),
++	gsSP1Triangle(10, 8, 9, 0),
++	gsSP1Triangle(11, 8, 10, 0),
++	gsSP1Triangle(11, 12, 8, 0),
++	gsSP1Triangle(13, 12, 11, 0),
++	gsSP1Triangle(12, 13, 14, 0),
++	gsSP1Triangle(6, 12, 14, 0),
++	gsSP1Triangle(6, 8, 12, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_000_displaylist_mesh_vtx_0[99] = {
++	{{{97, 103, 25},0, {708, 942},{0x4E, 0x42, 0x4C, 0xFF}}},
++	{{{104, 87, 70},0, {1122, 848},{0x2B, 0x63, 0x44, 0xFF}}},
++	{{{144, 83, 67},0, {1092, 412},{0x20, 0x5B, 0x52, 0xFF}}},
++	{{{175, 91, 39},0, {826, 96},{0xA5, 0x57, 0xB, 0xFF}}},
++	{{{153, 33, 95},0, {1346, 280},{0x1, 0x46, 0x6A, 0xFF}}},
++	{{{145, 101, 0},0, {464, 430},{0x17, 0x7D, 0x0, 0xFF}}},
++	{{{175, 91, -38},0, {90, 114},{0xA5, 0x57, 0xF5, 0xFF}}},
++	{{{97, 103, -24},0, {240, 954},{0x4D, 0x42, 0xB4, 0xFF}}},
++	{{{144, 83, -66},0, {-162, 444},{0x20, 0x5B, 0xAE, 0xFF}}},
++	{{{153, 33, -94},0, {-420, 326},{0x0, 0x46, 0x96, 0xFF}}},
++	{{{104, 87, -69},0, {-176, 882},{0x2B, 0x63, 0xBC, 0xFF}}},
++	{{{92, 88, 84},0, {-16, -16},{0x2B, 0x4E, 0x5A, 0xFF}}},
++	{{{104, 87, 70},0, {-16, -16},{0x2B, 0x63, 0x44, 0xFF}}},
++	{{{97, 103, 25},0, {-16, -16},{0x4E, 0x42, 0x4C, 0xFF}}},
++	{{{96, 49, 94},0, {-16, -16},{0xC, 0x29, 0x78, 0xFF}}},
++	{{{44, 44, 97},0, {-16, -16},{0xD1, 0x1E, 0x72, 0xFF}}},
++	{{{144, 83, 67},0, {-16, -16},{0x20, 0x5B, 0x52, 0xFF}}},
++	{{{104, 87, 70},0, {-16, -16},{0x2B, 0x63, 0x44, 0xFF}}},
++	{{{96, 49, 94},0, {-16, -16},{0xC, 0x29, 0x78, 0xFF}}},
++	{{{153, 33, 95},0, {-16, -16},{0x1, 0x46, 0x6A, 0xFF}}},
++	{{{97, 103, -24},0, {240, 954},{0x4D, 0x42, 0xB4, 0xFF}}},
++	{{{108, 105, 0},0, {472, 838},{0x65, 0x4D, 0xFF, 0xFF}}},
++	{{{145, 101, 0},0, {464, 430},{0x17, 0x7D, 0x0, 0xFF}}},
++	{{{97, 103, 25},0, {708, 942},{0x4E, 0x42, 0x4C, 0xFF}}},
++	{{{92, 88, -83},0, {-16, -16},{0x2B, 0x4E, 0xA6, 0xFF}}},
++	{{{97, 103, -24},0, {-16, -16},{0x4D, 0x42, 0xB4, 0xFF}}},
++	{{{104, 87, -69},0, {-16, -16},{0x2B, 0x63, 0xBC, 0xFF}}},
++	{{{96, 49, -93},0, {-16, -16},{0xC, 0x28, 0x88, 0xFF}}},
++	{{{144, 83, -66},0, {-16, -16},{0x20, 0x5B, 0xAE, 0xFF}}},
++	{{{153, 33, -94},0, {-16, -16},{0x0, 0x46, 0x96, 0xFF}}},
++	{{{44, 44, -96},0, {-16, -16},{0xD1, 0x1E, 0x8E, 0xFF}}},
++	{{{44, 44, 97},0, {-16, -16},{0xD1, 0x1E, 0x72, 0xFF}}},
++	{{{3, 54, 52},0, {-16, -16},{0x8F, 0x1A, 0x35, 0xFF}}},
++	{{{42, 0, 103},0, {-16, -16},{0xB8, 0xFF, 0x68, 0xFF}}},
++	{{{17, -52, 47},0, {-16, -16},{0x86, 0xFC, 0x22, 0xFF}}},
++	{{{-7, 62, 0},0, {-16, -16},{0x85, 0x21, 0x0, 0xFF}}},
++	{{{17, -52, -46},0, {-16, -16},{0x86, 0xFC, 0xDE, 0xFF}}},
++	{{{3, 54, -51},0, {-16, -16},{0x8F, 0x1A, 0xCB, 0xFF}}},
++	{{{42, 0, -102},0, {-16, -16},{0xB8, 0xFF, 0x98, 0xFF}}},
++	{{{44, 44, -96},0, {-16, -16},{0xD1, 0x1E, 0x8E, 0xFF}}},
++	{{{56, -45, -76},0, {-16, -16},{0xCB, 0xC7, 0x9C, 0xFF}}},
++	{{{64, -25, -134},0, {-16, -16},{0xD6, 0x6, 0x88, 0xFF}}},
++	{{{85, -23, -110},0, {-16, -16},{0x7, 0x5A, 0xA7, 0xFF}}},
++	{{{102, -33, -134},0, {-16, -16},{0x33, 0xED, 0x8D, 0xFF}}},
++	{{{120, -12, -109},0, {-16, -16},{0xEE, 0x20, 0x86, 0xFF}}},
++	{{{91, -54, -85},0, {-16, -16},{0xC7, 0xC0, 0xA3, 0xFF}}},
++	{{{97, 103, 25},0, {-16, -16},{0x4E, 0x42, 0x4C, 0xFF}}},
++	{{{108, 105, 0},0, {-16, -16},{0x65, 0x4D, 0xFF, 0xFF}}},
++	{{{117, 128, 0},0, {-16, -16},{0x7C, 0xE4, 0xFF, 0xFF}}},
++	{{{97, 103, -24},0, {-16, -16},{0x4D, 0x42, 0xB4, 0xFF}}},
++	{{{102, 129, -40},0, {-16, -16},{0x4C, 0xDF, 0xA0, 0xFF}}},
++	{{{77, 108, -33},0, {-16, -16},{0x18, 0x2D, 0x8C, 0xFF}}},
++	{{{75, 130, -45},0, {-16, -16},{0xFE, 0xE1, 0x85, 0xFF}}},
++	{{{47, 131, -40},0, {-16, -16},{0xAF, 0xE9, 0xA1, 0xFF}}},
++	{{{52, 111, -30},0, {-16, -16},{0xB4, 0x37, 0xAB, 0xFF}}},
++	{{{32, 132, 0},0, {-16, -16},{0x83, 0xEC, 0xFE, 0xFF}}},
++	{{{41, 109, 0},0, {-16, -16},{0x8D, 0x36, 0xFF, 0xFF}}},
++	{{{52, 111, 31},0, {-16, -16},{0xB4, 0x37, 0x55, 0xFF}}},
++	{{{47, 131, 41},0, {-16, -16},{0xB0, 0xE7, 0x60, 0xFF}}},
++	{{{77, 108, 34},0, {-16, -16},{0x18, 0x2D, 0x74, 0xFF}}},
++	{{{75, 130, 46},0, {-16, -16},{0xFE, 0xE1, 0x7B, 0xFF}}},
++	{{{102, 129, 41},0, {-16, -16},{0x4C, 0xDF, 0x60, 0xFF}}},
++	{{{104, 162, 41},0, {-16, -16},{0x49, 0x39, 0x57, 0xFF}}},
++	{{{102, 129, 41},0, {-16, -16},{0x4C, 0xDF, 0x60, 0xFF}}},
++	{{{117, 128, 0},0, {-16, -16},{0x7C, 0xE4, 0xFF, 0xFF}}},
++	{{{119, 161, 0},0, {-16, -16},{0x78, 0x29, 0x0, 0xFF}}},
++	{{{102, 129, -40},0, {-16, -16},{0x4C, 0xDF, 0xA0, 0xFF}}},
++	{{{104, 162, -40},0, {-16, -16},{0x48, 0x38, 0xA8, 0xFF}}},
++	{{{75, 130, -45},0, {-16, -16},{0xFE, 0xE1, 0x85, 0xFF}}},
++	{{{78, 163, -45},0, {-16, -16},{0x3, 0x43, 0x94, 0xFF}}},
++	{{{52, 164, -40},0, {-16, -16},{0xC2, 0x41, 0xA7, 0xFF}}},
++	{{{47, 131, -40},0, {-16, -16},{0xAF, 0xE9, 0xA1, 0xFF}}},
++	{{{32, 132, 0},0, {-16, -16},{0x83, 0xEC, 0xFE, 0xFF}}},
++	{{{33, 165, 0},0, {-16, -16},{0x90, 0x3C, 0xFE, 0xFF}}},
++	{{{47, 131, 41},0, {-16, -16},{0xB0, 0xE7, 0x60, 0xFF}}},
++	{{{52, 164, 41},0, {-16, -16},{0xC3, 0x43, 0x59, 0xFF}}},
++	{{{75, 130, 46},0, {-16, -16},{0xFE, 0xE1, 0x7B, 0xFF}}},
++	{{{78, 163, 46},0, {-16, -16},{0x3, 0x44, 0x6B, 0xFF}}},
++	{{{104, 162, 41},0, {-16, -16},{0x49, 0x39, 0x57, 0xFF}}},
++	{{{101, 179, 0},0, {-16, -16},{0x30, 0x76, 0x0, 0xFF}}},
++	{{{78, 163, 46},0, {-16, -16},{0x3, 0x44, 0x6B, 0xFF}}},
++	{{{119, 161, 0},0, {-16, -16},{0x78, 0x29, 0x0, 0xFF}}},
++	{{{104, 162, -40},0, {-16, -16},{0x48, 0x38, 0xA8, 0xFF}}},
++	{{{78, 163, -45},0, {-16, -16},{0x3, 0x43, 0x94, 0xFF}}},
++	{{{60, 181, 0},0, {-16, -16},{0xE5, 0x7C, 0x0, 0xFF}}},
++	{{{52, 164, -40},0, {-16, -16},{0xC2, 0x41, 0xA7, 0xFF}}},
++	{{{33, 165, 0},0, {-16, -16},{0x90, 0x3C, 0xFE, 0xFF}}},
++	{{{52, 164, 41},0, {-16, -16},{0xC3, 0x43, 0x59, 0xFF}}},
++	{{{42, 0, 103},0, {-16, -16},{0xB8, 0xFF, 0x68, 0xFF}}},
++	{{{64, -25, 135},0, {-16, -16},{0xD6, 0x6, 0x78, 0xFF}}},
++	{{{85, -23, 111},0, {-16, -16},{0x5, 0x5A, 0x59, 0xFF}}},
++	{{{56, -45, 77},0, {-16, -16},{0xCB, 0xC7, 0x64, 0xFF}}},
++	{{{17, -52, 47},0, {-16, -16},{0x86, 0xFC, 0x22, 0xFF}}},
++	{{{91, -54, 86},0, {-16, -16},{0xC7, 0xC0, 0x5D, 0xFF}}},
++	{{{64, -25, 135},0, {-16, -16},{0xD6, 0x6, 0x78, 0xFF}}},
++	{{{91, -54, 86},0, {-16, -16},{0xC7, 0xC0, 0x5D, 0xFF}}},
++	{{{102, -33, 135},0, {-16, -16},{0x32, 0xEB, 0x73, 0xFF}}},
++	{{{120, -11, 111},0, {-16, -16},{0xED, 0x20, 0x7A, 0xFF}}},
++	{{{85, -23, 111},0, {-16, -16},{0x5, 0x5A, 0x59, 0xFF}}},
++};
++
++Gfx mario_000_displaylist_mesh_tri_0[] = {
++	gsSPVertex(mario_000_displaylist_mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 3, 0, 0),
++	gsSP1Triangle(4, 3, 2, 0),
++	gsSP1Triangle(3, 5, 0, 0),
++	gsSP1Triangle(6, 5, 3, 0),
++	gsSP1Triangle(7, 5, 6, 0),
++	gsSP1Triangle(7, 6, 8, 0),
++	gsSP1Triangle(8, 6, 9, 0),
++	gsSP1Triangle(10, 7, 8, 0),
++	gsSP1Triangle(11, 12, 13, 0),
++	gsSP1Triangle(12, 11, 14, 0),
++	gsSP1Triangle(15, 14, 11, 0),
++	gsSPVertex(mario_000_displaylist_mesh_vtx_0 + 16, 15, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 3, 0, 0),
++	gsSP1Triangle(4, 5, 6, 0),
++	gsSP1Triangle(6, 5, 7, 0),
++	gsSP1Triangle(8, 9, 10, 0),
++	gsSP1Triangle(11, 8, 10, 0),
++	gsSP1Triangle(11, 10, 12, 0),
++	gsSP1Triangle(12, 13, 11, 0),
++	gsSP1Triangle(8, 11, 14, 0),
++	gsSPVertex(mario_000_displaylist_mesh_vtx_0 + 31, 15, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(1, 3, 2, 0),
++	gsSP1Triangle(3, 1, 4, 0),
++	gsSP1Triangle(5, 3, 4, 0),
++	gsSP1Triangle(5, 4, 6, 0),
++	gsSP1Triangle(7, 5, 6, 0),
++	gsSP1Triangle(7, 6, 8, 0),
++	gsSP1Triangle(7, 9, 5, 0),
++	gsSP1Triangle(7, 10, 9, 0),
++	gsSP1Triangle(11, 10, 7, 0),
++	gsSP1Triangle(11, 12, 10, 0),
++	gsSP1Triangle(12, 11, 13, 0),
++	gsSP1Triangle(12, 13, 14, 0),
++	gsSP1Triangle(10, 12, 14, 0),
++	gsSP1Triangle(9, 10, 14, 0),
++	gsSPVertex(mario_000_displaylist_mesh_vtx_0 + 46, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 1, 3, 0),
++	gsSP1Triangle(3, 4, 2, 0),
++	gsSP1Triangle(4, 3, 5, 0),
++	gsSP1Triangle(6, 4, 5, 0),
++	gsSP1Triangle(7, 6, 5, 0),
++	gsSP1Triangle(5, 8, 7, 0),
++	gsSP1Triangle(9, 7, 8, 0),
++	gsSP1Triangle(8, 10, 9, 0),
++	gsSP1Triangle(9, 10, 11, 0),
++	gsSP1Triangle(11, 12, 9, 0),
++	gsSP1Triangle(12, 11, 13, 0),
++	gsSP1Triangle(14, 12, 13, 0),
++	gsSP1Triangle(15, 14, 13, 0),
++	gsSP1Triangle(13, 0, 15, 0),
++	gsSP1Triangle(2, 15, 0, 0),
++	gsSPVertex(mario_000_displaylist_mesh_vtx_0 + 62, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 0, 2, 0),
++	gsSP1Triangle(2, 4, 3, 0),
++	gsSP1Triangle(4, 5, 3, 0),
++	gsSP1Triangle(6, 5, 4, 0),
++	gsSP1Triangle(6, 7, 5, 0),
++	gsSP1Triangle(8, 7, 6, 0),
++	gsSP1Triangle(9, 8, 6, 0),
++	gsSP1Triangle(8, 9, 10, 0),
++	gsSP1Triangle(11, 8, 10, 0),
++	gsSP1Triangle(10, 12, 11, 0),
++	gsSP1Triangle(12, 13, 11, 0),
++	gsSP1Triangle(13, 12, 14, 0),
++	gsSP1Triangle(13, 14, 15, 0),
++	gsSP1Triangle(15, 14, 0, 0),
++	gsSP1Triangle(14, 1, 0, 0),
++	gsSPVertex(mario_000_displaylist_mesh_vtx_0 + 78, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(1, 0, 3, 0),
++	gsSP1Triangle(1, 3, 4, 0),
++	gsSP1Triangle(1, 4, 5, 0),
++	gsSP1Triangle(5, 6, 1, 0),
++	gsSP1Triangle(6, 5, 7, 0),
++	gsSP1Triangle(8, 6, 7, 0),
++	gsSP1Triangle(8, 9, 6, 0),
++	gsSP1Triangle(9, 2, 6, 0),
++	gsSP1Triangle(6, 2, 1, 0),
++	gsSP1Triangle(10, 11, 12, 0),
++	gsSP1Triangle(11, 10, 13, 0),
++	gsSP1Triangle(14, 13, 10, 0),
++	gsSP1Triangle(11, 13, 15, 0),
++	gsSPVertex(mario_000_displaylist_mesh_vtx_0 + 94, 5, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(1, 3, 2, 0),
++	gsSP1Triangle(3, 4, 2, 0),
++	gsSP1Triangle(0, 2, 4, 0),
++	gsSPEndDisplayList(),
++};Vtx mario_000_displaylist_mesh_vtx_1[27] = {
++	{{{92, 88, -83},0, {906, -20},{0x2B, 0x4E, 0xA6, 0xFF}}},
++	{{{77, 108, -33},0, {346, 328},{0x18, 0x2D, 0x8C, 0xFF}}},
++	{{{97, 103, -24},0, {258, 84},{0x4D, 0x42, 0xB4, 0xFF}}},
++	{{{48, 94, -75},0, {840, 592},{0xD5, 0x59, 0xB0, 0xFF}}},
++	{{{44, 44, -96},0, {1234, 502},{0xD1, 0x1E, 0x8E, 0xFF}}},
++	{{{3, 54, -51},0, {790, 1146},{0x8F, 0x1A, 0xCB, 0xFF}}},
++	{{{27, 100, -29},0, {378, 982},{0xB0, 0x60, 0xE6, 0xFF}}},
++	{{{52, 111, -30},0, {324, 668},{0xB4, 0x37, 0xAB, 0xFF}}},
++	{{{41, 109, 0},0, {34, 884},{0x8D, 0x36, 0xFF, 0xFF}}},
++	{{{27, 100, 30},0, {426, 966},{0xB0, 0x60, 0x1A, 0xFF}}},
++	{{{52, 111, 31},0, {338, 674},{0xB4, 0x37, 0x55, 0xFF}}},
++	{{{41, 109, 0},0, {54, 908},{0x8D, 0x36, 0xFF, 0xFF}}},
++	{{{48, 94, 76},0, {872, 548},{0xD5, 0x59, 0x50, 0xFF}}},
++	{{{3, 54, 52},0, {876, 1074},{0x8F, 0x1A, 0x35, 0xFF}}},
++	{{{44, 44, 97},0, {1280, 422},{0xD1, 0x1E, 0x72, 0xFF}}},
++	{{{92, 88, 84},0, {882, -34},{0x2B, 0x4E, 0x5A, 0xFF}}},
++	{{{92, 88, 84},0, {882, -34},{0x2B, 0x4E, 0x5A, 0xFF}}},
++	{{{77, 108, 34},0, {326, 352},{0x18, 0x2D, 0x74, 0xFF}}},
++	{{{48, 94, 76},0, {872, 548},{0xD5, 0x59, 0x50, 0xFF}}},
++	{{{97, 103, 25},0, {208, 130},{0x4E, 0x42, 0x4C, 0xFF}}},
++	{{{52, 111, 31},0, {338, 674},{0xB4, 0x37, 0x55, 0xFF}}},
++	{{{27, 100, -29},0, {-16, -16},{0xB0, 0x60, 0xE6, 0xFF}}},
++	{{{3, 54, -51},0, {-16, -16},{0x8F, 0x1A, 0xCB, 0xFF}}},
++	{{{-7, 62, 0},0, {-16, -16},{0x85, 0x21, 0x0, 0xFF}}},
++	{{{27, 100, 30},0, {-16, -16},{0xB0, 0x60, 0x1A, 0xFF}}},
++	{{{3, 54, 52},0, {-16, -16},{0x8F, 0x1A, 0x35, 0xFF}}},
++	{{{41, 109, 0},0, {-16, -16},{0x8D, 0x36, 0xFF, 0xFF}}},
++};
++
++Gfx mario_000_displaylist_mesh_tri_1[] = {
++	gsSPVertex(mario_000_displaylist_mesh_vtx_1 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(0, 4, 3, 0),
++	gsSP1Triangle(5, 3, 4, 0),
++	gsSP1Triangle(6, 3, 5, 0),
++	gsSP1Triangle(7, 3, 6, 0),
++	gsSP1Triangle(8, 7, 6, 0),
++	gsSP1Triangle(3, 7, 1, 0),
++	gsSP1Triangle(9, 10, 11, 0),
++	gsSP1Triangle(9, 12, 10, 0),
++	gsSP1Triangle(13, 12, 9, 0),
++	gsSP1Triangle(14, 12, 13, 0),
++	gsSP1Triangle(12, 14, 15, 0),
++	gsSPVertex(mario_000_displaylist_mesh_vtx_1 + 16, 11, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(1, 0, 3, 0),
++	gsSP1Triangle(1, 4, 2, 0),
++	gsSP1Triangle(5, 6, 7, 0),
++	gsSP1Triangle(8, 5, 7, 0),
++	gsSP1Triangle(7, 9, 8, 0),
++	gsSP1Triangle(10, 5, 8, 0),
++	gsSPEndDisplayList(),
++};Vtx mario_000_displaylist_mesh_vtx_2[28] = {
++	{{{17, -52, -46},0, {-16, -16},{0x86, 0xFC, 0xDE, 0xFF}}},
++	{{{31, -84, 0},0, {-16, -16},{0x9E, 0xB0, 0x1, 0xFF}}},
++	{{{17, -52, 47},0, {-16, -16},{0x86, 0xFC, 0x22, 0xFF}}},
++	{{{9, -88, -58},0, {-16, -16},{0x84, 0xEC, 0xEA, 0xFF}}},
++	{{{31, -85, -86},0, {-16, -16},{0xE4, 0xFA, 0x84, 0xFF}}},
++	{{{56, -45, -76},0, {-16, -16},{0xCB, 0xC7, 0x9C, 0xFF}}},
++	{{{58, -114, -59},0, {-16, -16},{0x57, 0xAA, 0xDF, 0xFF}}},
++	{{{64, -103, -51},0, {-16, -16},{0xF2, 0x95, 0xBD, 0xFF}}},
++	{{{91, -54, -85},0, {-16, -16},{0xC7, 0xC0, 0xA3, 0xFF}}},
++	{{{36, -116, -35},0, {-16, -16},{0xEE, 0x92, 0x3D, 0xFF}}},
++	{{{35, -120, -67},0, {-16, -16},{0xE6, 0x92, 0xC6, 0xFF}}},
++	{{{64, -103, 52},0, {-16, -16},{0xF2, 0x95, 0x43, 0xFF}}},
++	{{{36, -116, 36},0, {-16, -16},{0xEE, 0x92, 0xC3, 0xFF}}},
++	{{{58, -114, 60},0, {-16, -16},{0x57, 0xAA, 0x21, 0xFF}}},
++	{{{56, -45, 77},0, {-16, -16},{0xCB, 0xC7, 0x64, 0xFF}}},
++	{{{91, -54, 86},0, {-16, -16},{0xC7, 0xC0, 0x5D, 0xFF}}},
++	{{{56, -45, 77},0, {-16, -16},{0xCB, 0xC7, 0x64, 0xFF}}},
++	{{{31, -85, 87},0, {-16, -16},{0xE4, 0xFA, 0x7C, 0xFF}}},
++	{{{58, -114, 60},0, {-16, -16},{0x57, 0xAA, 0x21, 0xFF}}},
++	{{{17, -52, 47},0, {-16, -16},{0x86, 0xFC, 0x22, 0xFF}}},
++	{{{9, -88, 59},0, {-16, -16},{0x84, 0xEC, 0x16, 0xFF}}},
++	{{{31, -84, 0},0, {-16, -16},{0x9E, 0xB0, 0x1, 0xFF}}},
++	{{{36, -116, 36},0, {-16, -16},{0xEE, 0x92, 0xC3, 0xFF}}},
++	{{{35, -120, 68},0, {-16, -16},{0xE6, 0x92, 0x3A, 0xFF}}},
++	{{{35, -120, -67},0, {-16, -16},{0xE6, 0x92, 0xC6, 0xFF}}},
++	{{{31, -85, -86},0, {-16, -16},{0xE4, 0xFA, 0x84, 0xFF}}},
++	{{{58, -114, -59},0, {-16, -16},{0x57, 0xAA, 0xDF, 0xFF}}},
++	{{{9, -88, -58},0, {-16, -16},{0x84, 0xEC, 0xEA, 0xFF}}},
++};
++
++Gfx mario_000_displaylist_mesh_tri_2[] = {
++	gsSPVertex(mario_000_displaylist_mesh_vtx_2 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(1, 0, 3, 0),
++	gsSP1Triangle(4, 3, 0, 0),
++	gsSP1Triangle(0, 5, 4, 0),
++	gsSP1Triangle(6, 4, 5, 0),
++	gsSP1Triangle(5, 7, 6, 0),
++	gsSP1Triangle(5, 8, 7, 0),
++	gsSP1Triangle(9, 6, 7, 0),
++	gsSP1Triangle(9, 10, 6, 0),
++	gsSP1Triangle(3, 10, 9, 0),
++	gsSP1Triangle(3, 9, 1, 0),
++	gsSP1Triangle(1, 9, 7, 0),
++	gsSP1Triangle(1, 7, 11, 0),
++	gsSP1Triangle(1, 11, 12, 0),
++	gsSP1Triangle(13, 12, 11, 0),
++	gsSP1Triangle(13, 11, 14, 0),
++	gsSP1Triangle(11, 15, 14, 0),
++	gsSPVertex(mario_000_displaylist_mesh_vtx_2 + 16, 12, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(1, 0, 3, 0),
++	gsSP1Triangle(3, 4, 1, 0),
++	gsSP1Triangle(4, 3, 5, 0),
++	gsSP1Triangle(5, 6, 4, 0),
++	gsSP1Triangle(6, 7, 4, 0),
++	gsSP1Triangle(2, 7, 6, 0),
++	gsSP1Triangle(1, 7, 2, 0),
++	gsSP1Triangle(4, 7, 1, 0),
++	gsSP1Triangle(8, 9, 10, 0),
++	gsSP1Triangle(9, 8, 11, 0),
++	gsSPEndDisplayList(),
++};Vtx mario_000_displaylist_mesh_vtx_3[12] = {
++	{{{96, 49, 94},0, {-90, 710},{0xC, 0x29, 0x78, 0xFF}}},
++	{{{44, 44, 97},0, {180, 1350},{0xD1, 0x1E, 0x72, 0xFF}}},
++	{{{42, 0, 103},0, {952, 1176},{0xB8, 0xFF, 0x68, 0xFF}}},
++	{{{85, -23, 111},0, {1222, 502},{0x5, 0x5A, 0x59, 0xFF}}},
++	{{{120, -11, 111},0, {906, 106},{0xED, 0x20, 0x7A, 0xFF}}},
++	{{{153, 33, 95},0, {6, -84},{0x1, 0x46, 0x6A, 0xFF}}},
++	{{{120, -12, -109},0, {900, 168},{0xEE, 0x20, 0x86, 0xFF}}},
++	{{{96, 49, -93},0, {-86, 684},{0xC, 0x28, 0x88, 0xFF}}},
++	{{{153, 33, -94},0, {74, -74},{0x0, 0x46, 0x96, 0xFF}}},
++	{{{85, -23, -110},0, {1134, 566},{0x7, 0x5A, 0xA7, 0xFF}}},
++	{{{42, 0, -102},0, {826, 1194},{0xB8, 0xFF, 0x98, 0xFF}}},
++	{{{44, 44, -96},0, {102, 1318},{0xD1, 0x1E, 0x8E, 0xFF}}},
++};
++
++Gfx mario_000_displaylist_mesh_tri_3[] = {
++	gsSPVertex(mario_000_displaylist_mesh_vtx_3 + 0, 12, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 3, 0, 0),
++	gsSP1Triangle(3, 4, 0, 0),
++	gsSP1Triangle(5, 0, 4, 0),
++	gsSP1Triangle(6, 7, 8, 0),
++	gsSP1Triangle(9, 7, 6, 0),
++	gsSP1Triangle(7, 9, 10, 0),
++	gsSP1Triangle(10, 11, 7, 0),
++	gsSPEndDisplayList(),
++};Vtx mario_000_displaylist_mesh_vtx_4[57] = {
++	{{{195, 93, 32},0, {728, 716},{0x53, 0x52, 0x34, 0xFF}}},
++	{{{153, 33, 95},0, {1234, 1050},{0x1, 0x46, 0x6A, 0xFF}}},
++	{{{252, 62, 70},0, {1016, 136},{0x47, 0x41, 0x52, 0xFF}}},
++	{{{272, 85, 0},0, {456, -32},{0x5E, 0x55, 0x0, 0xFF}}},
++	{{{195, 93, -31},0, {216, 720},{0x52, 0x51, 0xCB, 0xFF}}},
++	{{{252, 62, -69},0, {-94, 142},{0x47, 0x41, 0xAE, 0xFF}}},
++	{{{153, 33, -94},0, {-274, 1060},{0x0, 0x46, 0x96, 0xFF}}},
++	{{{120, -12, -109},0, {-16, -16},{0xEE, 0x20, 0x86, 0xFF}}},
++	{{{131, -56, -123},0, {-16, -16},{0xEA, 0xD7, 0x8A, 0xFF}}},
++	{{{91, -54, -85},0, {-16, -16},{0xC7, 0xC0, 0xA3, 0xFF}}},
++	{{{187, -6, -133},0, {-16, -16},{0x22, 0x6, 0x86, 0xFF}}},
++	{{{153, 33, -94},0, {-16, -16},{0x0, 0x46, 0x96, 0xFF}}},
++	{{{252, 62, -69},0, {-16, -16},{0x47, 0x41, 0xAE, 0xFF}}},
++	{{{271, 0, -41},0, {-16, -16},{0x71, 0xD2, 0xDB, 0xFF}}},
++	{{{272, 85, 0},0, {-16, -16},{0x5E, 0x55, 0x0, 0xFF}}},
++	{{{271, 0, 42},0, {-16, -16},{0x71, 0xD2, 0x25, 0xFF}}},
++	{{{271, 0, 42},0, {-16, -16},{0x71, 0xD2, 0x25, 0xFF}}},
++	{{{272, 85, 0},0, {-16, -16},{0x5E, 0x55, 0x0, 0xFF}}},
++	{{{252, 62, 70},0, {-16, -16},{0x47, 0x41, 0x52, 0xFF}}},
++	{{{187, -6, 134},0, {-16, -16},{0x23, 0x6, 0x7A, 0xFF}}},
++	{{{153, 33, 95},0, {-16, -16},{0x1, 0x46, 0x6A, 0xFF}}},
++	{{{120, -11, 111},0, {-16, -16},{0xED, 0x20, 0x7A, 0xFF}}},
++	{{{131, -56, 124},0, {-16, -16},{0xEA, 0xD6, 0x76, 0xFF}}},
++	{{{91, -54, 86},0, {-16, -16},{0xC7, 0xC0, 0x5D, 0xFF}}},
++	{{{64, -103, 52},0, {-16, -16},{0xF2, 0x95, 0x43, 0xFF}}},
++	{{{77, -138, 51},0, {-16, -16},{0xBE, 0xA0, 0x32, 0xFF}}},
++	{{{77, -138, -50},0, {-16, -16},{0xBE, 0xA0, 0xCE, 0xFF}}},
++	{{{64, -103, -51},0, {-16, -16},{0xF2, 0x95, 0xBD, 0xFF}}},
++	{{{131, -56, -123},0, {-16, -16},{0xEA, 0xD7, 0x8A, 0xFF}}},
++	{{{91, -54, -85},0, {-16, -16},{0xC7, 0xC0, 0xA3, 0xFF}}},
++	{{{122, -139, -48},0, {-16, -16},{0x2C, 0x90, 0xD6, 0xFF}}},
++	{{{164, -89, -74},0, {-16, -16},{0x4A, 0xA7, 0xCC, 0xFF}}},
++	{{{187, -6, -133},0, {-16, -16},{0x22, 0x6, 0x86, 0xFF}}},
++	{{{164, -89, -74},0, {-16, -16},{0x4A, 0xA7, 0xCC, 0xFF}}},
++	{{{131, -56, -123},0, {-16, -16},{0xEA, 0xD7, 0x8A, 0xFF}}},
++	{{{271, 0, -41},0, {-16, -16},{0x71, 0xD2, 0xDB, 0xFF}}},
++	{{{164, -89, 75},0, {-16, -16},{0x4A, 0xA7, 0x34, 0xFF}}},
++	{{{271, 0, 42},0, {-16, -16},{0x71, 0xD2, 0x25, 0xFF}}},
++	{{{187, -6, 134},0, {-16, -16},{0x23, 0x6, 0x7A, 0xFF}}},
++	{{{131, -56, 124},0, {-16, -16},{0xEA, 0xD6, 0x76, 0xFF}}},
++	{{{122, -139, 49},0, {-16, -16},{0x2C, 0x90, 0x2A, 0xFF}}},
++	{{{77, -138, 51},0, {-16, -16},{0xBE, 0xA0, 0x32, 0xFF}}},
++	{{{77, -138, -50},0, {-16, -16},{0xBE, 0xA0, 0xCE, 0xFF}}},
++	{{{122, -139, -48},0, {-16, -16},{0x2C, 0x90, 0xD6, 0xFF}}},
++	{{{195, 93, 32},0, {-16, -16},{0x53, 0x52, 0x34, 0xFF}}},
++	{{{173, 132, 66},0, {-16, -16},{0xE9, 0x58, 0x59, 0xFF}}},
++	{{{153, 33, 95},0, {-16, -16},{0x1, 0x46, 0x6A, 0xFF}}},
++	{{{182, 155, 0},0, {-16, -16},{0xFD, 0x7F, 0x0, 0xFF}}},
++	{{{195, 93, -31},0, {-16, -16},{0x52, 0x51, 0xCB, 0xFF}}},
++	{{{182, 155, 0},0, {-16, -16},{0xFD, 0x7F, 0x0, 0xFF}}},
++	{{{195, 93, 32},0, {-16, -16},{0x53, 0x52, 0x34, 0xFF}}},
++	{{{173, 132, -65},0, {-16, -16},{0xE9, 0x57, 0xA7, 0xFF}}},
++	{{{153, 33, -94},0, {-16, -16},{0x0, 0x46, 0x96, 0xFF}}},
++	{{{175, 91, -38},0, {-16, -16},{0xA5, 0x57, 0xF5, 0xFF}}},
++	{{{175, 91, 39},0, {-16, -16},{0xA5, 0x57, 0xB, 0xFF}}},
++	{{{173, 132, 66},0, {-16, -16},{0xE9, 0x58, 0x59, 0xFF}}},
++	{{{153, 33, 95},0, {-16, -16},{0x1, 0x46, 0x6A, 0xFF}}},
++};
++
++Gfx mario_000_displaylist_mesh_tri_4[] = {
++	gsSPVertex(mario_000_displaylist_mesh_vtx_4 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 3, 0, 0),
++	gsSP1Triangle(3, 4, 0, 0),
++	gsSP1Triangle(3, 5, 4, 0),
++	gsSP1Triangle(5, 6, 4, 0),
++	gsSP1Triangle(7, 8, 9, 0),
++	gsSP1Triangle(10, 8, 7, 0),
++	gsSP1Triangle(11, 10, 7, 0),
++	gsSP1Triangle(11, 12, 10, 0),
++	gsSP1Triangle(13, 10, 12, 0),
++	gsSP1Triangle(12, 14, 13, 0),
++	gsSP1Triangle(13, 14, 15, 0),
++	gsSPVertex(mario_000_displaylist_mesh_vtx_4 + 16, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 3, 0, 0),
++	gsSP1Triangle(3, 2, 4, 0),
++	gsSP1Triangle(3, 4, 5, 0),
++	gsSP1Triangle(5, 6, 3, 0),
++	gsSP1Triangle(7, 6, 5, 0),
++	gsSP1Triangle(7, 8, 6, 0),
++	gsSP1Triangle(6, 8, 9, 0),
++	gsSP1Triangle(9, 8, 10, 0),
++	gsSP1Triangle(8, 11, 10, 0),
++	gsSP1Triangle(10, 11, 12, 0),
++	gsSP1Triangle(13, 12, 11, 0),
++	gsSP1Triangle(12, 14, 10, 0),
++	gsSP1Triangle(15, 14, 12, 0),
++	gsSPVertex(mario_000_displaylist_mesh_vtx_4 + 32, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(1, 0, 3, 0),
++	gsSP1Triangle(1, 3, 4, 0),
++	gsSP1Triangle(3, 5, 4, 0),
++	gsSP1Triangle(5, 6, 4, 0),
++	gsSP1Triangle(7, 4, 6, 0),
++	gsSP1Triangle(7, 8, 4, 0),
++	gsSP1Triangle(9, 8, 7, 0),
++	gsSP1Triangle(10, 8, 9, 0),
++	gsSP1Triangle(10, 11, 8, 0),
++	gsSP1Triangle(8, 11, 1, 0),
++	gsSP1Triangle(1, 4, 8, 0),
++	gsSP1Triangle(12, 13, 14, 0),
++	gsSP1Triangle(12, 15, 13, 0),
++	gsSPVertex(mario_000_displaylist_mesh_vtx_4 + 48, 9, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(3, 0, 4, 0),
++	gsSP1Triangle(5, 3, 4, 0),
++	gsSP1Triangle(5, 1, 3, 0),
++	gsSP1Triangle(5, 6, 1, 0),
++	gsSP1Triangle(7, 1, 6, 0),
++	gsSP1Triangle(8, 7, 6, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_002_switch_option_head__no_cap__mesh_vtx_0[103] = {
++	{{{104, 87, -69},0, {-176, 882},{0x2B, 0x63, 0xBC, 0xFF}}},
++	{{{97, 103, -24},0, {240, 954},{0x4D, 0x42, 0xB4, 0xFF}}},
++	{{{144, 83, -66},0, {-162, 444},{0x20, 0x5B, 0xAE, 0xFF}}},
++	{{{175, 91, -38},0, {90, 114},{0x21, 0x73, 0xD5, 0xFF}}},
++	{{{145, 101, 0},0, {464, 430},{0x17, 0x7D, 0x0, 0xFF}}},
++	{{{108, 105, 0},0, {472, 838},{0x65, 0x4D, 0xFF, 0xFF}}},
++	{{{97, 103, 25},0, {708, 942},{0x4E, 0x42, 0x4C, 0xFF}}},
++	{{{175, 91, 39},0, {826, 96},{0x21, 0x73, 0x2B, 0xFF}}},
++	{{{144, 83, 67},0, {1092, 412},{0x20, 0x5B, 0x52, 0xFF}}},
++	{{{104, 87, 70},0, {1122, 848},{0x2B, 0x63, 0x44, 0xFF}}},
++	{{{153, 33, 95},0, {1346, 280},{0xFE, 0x36, 0x73, 0xFF}}},
++	{{{153, 33, -94},0, {-420, 326},{0xF5, 0x33, 0x8C, 0xFF}}},
++	{{{144, 83, -66},0, {-16, -16},{0x20, 0x5B, 0xAE, 0xFF}}},
++	{{{153, 33, -94},0, {-16, -16},{0xF5, 0x33, 0x8C, 0xFF}}},
++	{{{96, 49, -93},0, {-16, -16},{0xC, 0x28, 0x88, 0xFF}}},
++	{{{104, 87, -69},0, {-16, -16},{0x2B, 0x63, 0xBC, 0xFF}}},
++	{{{96, 49, -93},0, {-16, -16},{0xC, 0x28, 0x88, 0xFF}}},
++	{{{92, 88, -83},0, {-16, -16},{0x2B, 0x4E, 0xA6, 0xFF}}},
++	{{{104, 87, -69},0, {-16, -16},{0x2B, 0x63, 0xBC, 0xFF}}},
++	{{{44, 44, -96},0, {-16, -16},{0xD1, 0x1E, 0x8E, 0xFF}}},
++	{{{97, 103, -24},0, {-16, -16},{0x4D, 0x42, 0xB4, 0xFF}}},
++	{{{92, 88, 84},0, {-16, -16},{0x2B, 0x4E, 0x5A, 0xFF}}},
++	{{{104, 87, 70},0, {-16, -16},{0x2B, 0x63, 0x44, 0xFF}}},
++	{{{97, 103, 25},0, {-16, -16},{0x4E, 0x42, 0x4C, 0xFF}}},
++	{{{96, 49, 94},0, {-16, -16},{0xC, 0x29, 0x78, 0xFF}}},
++	{{{44, 44, 97},0, {-16, -16},{0xD1, 0x1E, 0x72, 0xFF}}},
++	{{{144, 83, 67},0, {-16, -16},{0x20, 0x5B, 0x52, 0xFF}}},
++	{{{153, 33, 95},0, {-16, -16},{0xFE, 0x36, 0x73, 0xFF}}},
++	{{{42, 0, -102},0, {-16, -16},{0xB8, 0xFF, 0x98, 0xFF}}},
++	{{{3, 54, -51},0, {-16, -16},{0x8F, 0x1A, 0xCB, 0xFF}}},
++	{{{17, -52, -46},0, {-16, -16},{0x86, 0xFC, 0xDE, 0xFF}}},
++	{{{56, -45, -76},0, {-16, -16},{0xCB, 0xC7, 0x9C, 0xFF}}},
++	{{{42, 0, -102},0, {-16, -16},{0xB8, 0xFF, 0x98, 0xFF}}},
++	{{{64, -25, -134},0, {-16, -16},{0xD6, 0x6, 0x88, 0xFF}}},
++	{{{56, -45, -76},0, {-16, -16},{0xCB, 0xC7, 0x9C, 0xFF}}},
++	{{{85, -23, -110},0, {-16, -16},{0x7, 0x5A, 0xA7, 0xFF}}},
++	{{{102, -33, -134},0, {-16, -16},{0x33, 0xED, 0x8D, 0xFF}}},
++	{{{120, -12, -109},0, {-16, -16},{0x2, 0xE, 0x82, 0xFF}}},
++	{{{91, -54, -85},0, {-16, -16},{0xDA, 0xB6, 0xA0, 0xFF}}},
++	{{{17, -52, -46},0, {-16, -16},{0x86, 0xFC, 0xDE, 0xFF}}},
++	{{{-7, 62, 0},0, {-16, -16},{0x85, 0x21, 0x0, 0xFF}}},
++	{{{3, 54, -51},0, {-16, -16},{0x8F, 0x1A, 0xCB, 0xFF}}},
++	{{{17, -52, 47},0, {-16, -16},{0x86, 0xFC, 0x22, 0xFF}}},
++	{{{31, -84, 0},0, {-16, -16},{0x9E, 0xB0, 0x1, 0xFF}}},
++	{{{3, 54, 52},0, {-16, -16},{0x8F, 0x1A, 0x35, 0xFF}}},
++	{{{42, 0, 103},0, {-16, -16},{0xB8, 0xFF, 0x68, 0xFF}}},
++	{{{56, -45, 77},0, {-16, -16},{0xCB, 0xC7, 0x64, 0xFF}}},
++	{{{64, -25, 135},0, {-16, -16},{0xD6, 0x6, 0x78, 0xFF}}},
++	{{{64, -25, 135},0, {-16, -16},{0xD6, 0x6, 0x78, 0xFF}}},
++	{{{56, -45, 77},0, {-16, -16},{0xCB, 0xC7, 0x64, 0xFF}}},
++	{{{91, -54, 86},0, {-16, -16},{0xDA, 0xB6, 0x60, 0xFF}}},
++	{{{102, -33, 135},0, {-16, -16},{0x32, 0xEB, 0x73, 0xFF}}},
++	{{{120, -11, 111},0, {-16, -16},{0x1, 0xF, 0x7E, 0xFF}}},
++	{{{85, -23, 111},0, {-16, -16},{0x5, 0x5A, 0x59, 0xFF}}},
++	{{{42, 0, 103},0, {-16, -16},{0xB8, 0xFF, 0x68, 0xFF}}},
++	{{{44, 44, 97},0, {-16, -16},{0xD1, 0x1E, 0x72, 0xFF}}},
++	{{{3, 54, 52},0, {-16, -16},{0x8F, 0x1A, 0x35, 0xFF}}},
++	{{{97, 103, 25},0, {-16, -16},{0x4E, 0x42, 0x4C, 0xFF}}},
++	{{{108, 105, 0},0, {-16, -16},{0x65, 0x4D, 0xFF, 0xFF}}},
++	{{{117, 128, 0},0, {-16, -16},{0x7C, 0xE4, 0xFF, 0xFF}}},
++	{{{97, 103, -24},0, {-16, -16},{0x4D, 0x42, 0xB4, 0xFF}}},
++	{{{102, 129, -40},0, {-16, -16},{0x4C, 0xDF, 0xA0, 0xFF}}},
++	{{{77, 108, -33},0, {-16, -16},{0x18, 0x2D, 0x8C, 0xFF}}},
++	{{{75, 130, -45},0, {-16, -16},{0xFE, 0xE1, 0x85, 0xFF}}},
++	{{{47, 131, -40},0, {-16, -16},{0xAF, 0xE9, 0xA1, 0xFF}}},
++	{{{75, 130, -45},0, {-16, -16},{0xFE, 0xE1, 0x85, 0xFF}}},
++	{{{77, 108, -33},0, {-16, -16},{0x18, 0x2D, 0x8C, 0xFF}}},
++	{{{52, 111, -30},0, {-16, -16},{0xB4, 0x37, 0xAB, 0xFF}}},
++	{{{32, 132, 0},0, {-16, -16},{0x83, 0xEC, 0xFE, 0xFF}}},
++	{{{41, 109, 0},0, {-16, -16},{0x8D, 0x36, 0xFF, 0xFF}}},
++	{{{52, 111, 31},0, {-16, -16},{0xB4, 0x37, 0x55, 0xFF}}},
++	{{{47, 131, 41},0, {-16, -16},{0xB0, 0xE7, 0x60, 0xFF}}},
++	{{{77, 108, 34},0, {-16, -16},{0x18, 0x2D, 0x74, 0xFF}}},
++	{{{75, 130, 46},0, {-16, -16},{0xFE, 0xE1, 0x7B, 0xFF}}},
++	{{{102, 129, 41},0, {-16, -16},{0x4C, 0xDF, 0x60, 0xFF}}},
++	{{{97, 103, 25},0, {-16, -16},{0x4E, 0x42, 0x4C, 0xFF}}},
++	{{{117, 128, 0},0, {-16, -16},{0x7C, 0xE4, 0xFF, 0xFF}}},
++	{{{104, 162, 41},0, {-16, -16},{0x49, 0x39, 0x57, 0xFF}}},
++	{{{119, 161, 0},0, {-16, -16},{0x78, 0x29, 0x0, 0xFF}}},
++	{{{102, 129, -40},0, {-16, -16},{0x4C, 0xDF, 0xA0, 0xFF}}},
++	{{{102, 129, -40},0, {-16, -16},{0x4C, 0xDF, 0xA0, 0xFF}}},
++	{{{104, 162, -40},0, {-16, -16},{0x48, 0x38, 0xA8, 0xFF}}},
++	{{{119, 161, 0},0, {-16, -16},{0x78, 0x29, 0x0, 0xFF}}},
++	{{{75, 130, -45},0, {-16, -16},{0xFE, 0xE1, 0x85, 0xFF}}},
++	{{{78, 163, -45},0, {-16, -16},{0x3, 0x43, 0x94, 0xFF}}},
++	{{{52, 164, -40},0, {-16, -16},{0xC2, 0x41, 0xA7, 0xFF}}},
++	{{{47, 131, -40},0, {-16, -16},{0xAF, 0xE9, 0xA1, 0xFF}}},
++	{{{32, 132, 0},0, {-16, -16},{0x83, 0xEC, 0xFE, 0xFF}}},
++	{{{33, 165, 0},0, {-16, -16},{0x90, 0x3C, 0xFE, 0xFF}}},
++	{{{47, 131, 41},0, {-16, -16},{0xB0, 0xE7, 0x60, 0xFF}}},
++	{{{52, 164, 41},0, {-16, -16},{0xC3, 0x43, 0x59, 0xFF}}},
++	{{{75, 130, 46},0, {-16, -16},{0xFE, 0xE1, 0x7B, 0xFF}}},
++	{{{78, 163, 46},0, {-16, -16},{0x3, 0x44, 0x6B, 0xFF}}},
++	{{{104, 162, 41},0, {-16, -16},{0x49, 0x39, 0x57, 0xFF}}},
++	{{{102, 129, 41},0, {-16, -16},{0x4C, 0xDF, 0x60, 0xFF}}},
++	{{{101, 179, 0},0, {-16, -16},{0x30, 0x76, 0x0, 0xFF}}},
++	{{{78, 163, -45},0, {-16, -16},{0x3, 0x43, 0x94, 0xFF}}},
++	{{{60, 181, 0},0, {-16, -16},{0xE5, 0x7C, 0x0, 0xFF}}},
++	{{{101, 179, 0},0, {-16, -16},{0x30, 0x76, 0x0, 0xFF}}},
++	{{{52, 164, -40},0, {-16, -16},{0xC2, 0x41, 0xA7, 0xFF}}},
++	{{{33, 165, 0},0, {-16, -16},{0x90, 0x3C, 0xFE, 0xFF}}},
++	{{{52, 164, 41},0, {-16, -16},{0xC3, 0x43, 0x59, 0xFF}}},
++	{{{78, 163, 46},0, {-16, -16},{0x3, 0x44, 0x6B, 0xFF}}},
++};
++
++Gfx mario_002_switch_option_head__no_cap__mesh_tri_0[] = {
++	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(1, 3, 2, 0),
++	gsSP1Triangle(1, 4, 3, 0),
++	gsSP1Triangle(1, 5, 4, 0),
++	gsSP1Triangle(4, 5, 6, 0),
++	gsSP1Triangle(7, 4, 6, 0),
++	gsSP1Triangle(8, 7, 6, 0),
++	gsSP1Triangle(6, 9, 8, 0),
++	gsSP1Triangle(10, 7, 8, 0),
++	gsSP1Triangle(3, 4, 7, 0),
++	gsSP1Triangle(2, 3, 11, 0),
++	gsSP1Triangle(12, 13, 14, 0),
++	gsSP1Triangle(14, 15, 12, 0),
++	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_0 + 16, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(1, 0, 3, 0),
++	gsSP1Triangle(1, 4, 2, 0),
++	gsSP1Triangle(5, 6, 7, 0),
++	gsSP1Triangle(6, 5, 8, 0),
++	gsSP1Triangle(9, 8, 5, 0),
++	gsSP1Triangle(10, 6, 8, 0),
++	gsSP1Triangle(8, 11, 10, 0),
++	gsSP1Triangle(12, 13, 3, 0),
++	gsSP1Triangle(12, 14, 13, 0),
++	gsSP1Triangle(12, 15, 14, 0),
++	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_0 + 32, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(3, 4, 1, 0),
++	gsSP1Triangle(4, 3, 5, 0),
++	gsSP1Triangle(4, 5, 6, 0),
++	gsSP1Triangle(1, 4, 6, 0),
++	gsSP1Triangle(2, 1, 6, 0),
++	gsSP1Triangle(7, 8, 9, 0),
++	gsSP1Triangle(7, 10, 8, 0),
++	gsSP1Triangle(7, 11, 10, 0),
++	gsSP1Triangle(10, 12, 8, 0),
++	gsSP1Triangle(12, 10, 13, 0),
++	gsSP1Triangle(10, 14, 13, 0),
++	gsSP1Triangle(15, 13, 14, 0),
++	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_0 + 48, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 2, 3, 0),
++	gsSP1Triangle(2, 4, 3, 0),
++	gsSP1Triangle(4, 5, 3, 0),
++	gsSP1Triangle(0, 3, 5, 0),
++	gsSP1Triangle(6, 0, 5, 0),
++	gsSP1Triangle(7, 8, 6, 0),
++	gsSP1Triangle(9, 10, 11, 0),
++	gsSP1Triangle(11, 10, 12, 0),
++	gsSP1Triangle(12, 13, 11, 0),
++	gsSP1Triangle(13, 12, 14, 0),
++	gsSP1Triangle(15, 13, 14, 0),
++	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_0 + 64, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 3, 0, 0),
++	gsSP1Triangle(4, 0, 3, 0),
++	gsSP1Triangle(3, 5, 4, 0),
++	gsSP1Triangle(4, 5, 6, 0),
++	gsSP1Triangle(6, 7, 4, 0),
++	gsSP1Triangle(7, 6, 8, 0),
++	gsSP1Triangle(9, 7, 8, 0),
++	gsSP1Triangle(10, 9, 8, 0),
++	gsSP1Triangle(8, 11, 10, 0),
++	gsSP1Triangle(12, 10, 11, 0),
++	gsSP1Triangle(13, 10, 12, 0),
++	gsSP1Triangle(14, 13, 12, 0),
++	gsSP1Triangle(12, 15, 14, 0),
++	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_0 + 80, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(3, 4, 1, 0),
++	gsSP1Triangle(5, 4, 3, 0),
++	gsSP1Triangle(6, 5, 3, 0),
++	gsSP1Triangle(5, 6, 7, 0),
++	gsSP1Triangle(8, 5, 7, 0),
++	gsSP1Triangle(7, 9, 8, 0),
++	gsSP1Triangle(9, 10, 8, 0),
++	gsSP1Triangle(10, 9, 11, 0),
++	gsSP1Triangle(10, 11, 12, 0),
++	gsSP1Triangle(12, 11, 13, 0),
++	gsSP1Triangle(11, 14, 13, 0),
++	gsSP1Triangle(13, 15, 12, 0),
++	gsSP1Triangle(15, 13, 2, 0),
++	gsSP1Triangle(15, 2, 1, 0),
++	gsSP1Triangle(15, 1, 4, 0),
++	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_0 + 96, 7, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(1, 0, 3, 0),
++	gsSP1Triangle(4, 1, 3, 0),
++	gsSP1Triangle(4, 5, 1, 0),
++	gsSP1Triangle(5, 6, 1, 0),
++	gsSP1Triangle(1, 6, 2, 0),
++	gsSPEndDisplayList(),
++};Vtx mario_002_switch_option_head__no_cap__mesh_vtx_1[30] = {
++	{{{44, 44, 97},0, {-16, -16},{0xD1, 0x1E, 0x72, 0xFF}}},
++	{{{48, 94, 76},0, {-16, -16},{0xD5, 0x59, 0x50, 0xFF}}},
++	{{{3, 54, 52},0, {-16, -16},{0x8F, 0x1A, 0x35, 0xFF}}},
++	{{{77, 108, 34},0, {314, 300},{0x18, 0x2D, 0x74, 0xFF}}},
++	{{{92, 88, 84},0, {932, -24},{0x2B, 0x4E, 0x5A, 0xFF}}},
++	{{{97, 103, 25},0, {232, 34},{0x4E, 0x42, 0x4C, 0xFF}}},
++	{{{48, 94, 76},0, {832, 614},{0xD5, 0x59, 0x50, 0xFF}}},
++	{{{52, 111, 31},0, {276, 654},{0xB4, 0x37, 0x55, 0xFF}}},
++	{{{27, 100, 30},0, {320, 990},{0xB0, 0x60, 0x1A, 0xFF}}},
++	{{{41, 109, 0},0, {-46, 860},{0x8D, 0x36, 0xFF, 0xFF}}},
++	{{{3, 54, 52},0, {752, 1194},{0x8F, 0x1A, 0x35, 0xFF}}},
++	{{{44, 44, 97},0, {1260, 550},{0xD1, 0x1E, 0x72, 0xFF}}},
++	{{{92, 88, -83},0, {976, -26},{0x2B, 0x4E, 0xA6, 0xFF}}},
++	{{{77, 108, -33},0, {344, 280},{0x18, 0x2D, 0x8C, 0xFF}}},
++	{{{97, 103, -24},0, {282, 4},{0x4D, 0x42, 0xB4, 0xFF}}},
++	{{{48, 94, -75},0, {828, 624},{0xD5, 0x59, 0xB0, 0xFF}}},
++	{{{92, 88, -83},0, {976, -26},{0x2B, 0x4E, 0xA6, 0xFF}}},
++	{{{44, 44, -96},0, {1256, 576},{0xD1, 0x1E, 0x8E, 0xFF}}},
++	{{{48, 94, -75},0, {828, 624},{0xD5, 0x59, 0xB0, 0xFF}}},
++	{{{3, 54, -51},0, {704, 1212},{0x8F, 0x1A, 0xCB, 0xFF}}},
++	{{{27, 100, -29},0, {294, 986},{0xB0, 0x60, 0xE6, 0xFF}}},
++	{{{52, 111, -30},0, {278, 640},{0xB4, 0x37, 0xAB, 0xFF}}},
++	{{{41, 109, 0},0, {-54, 836},{0x8D, 0x36, 0xFF, 0xFF}}},
++	{{{77, 108, -33},0, {344, 280},{0x18, 0x2D, 0x8C, 0xFF}}},
++	{{{-7, 62, 0},0, {-16, -16},{0x85, 0x21, 0x0, 0xFF}}},
++	{{{3, 54, 52},0, {-16, -16},{0x8F, 0x1A, 0x35, 0xFF}}},
++	{{{27, 100, 30},0, {-16, -16},{0xB0, 0x60, 0x1A, 0xFF}}},
++	{{{27, 100, -29},0, {-16, -16},{0xB0, 0x60, 0xE6, 0xFF}}},
++	{{{41, 109, 0},0, {-16, -16},{0x8D, 0x36, 0xFF, 0xFF}}},
++	{{{3, 54, -51},0, {-16, -16},{0x8F, 0x1A, 0xCB, 0xFF}}},
++};
++
++Gfx mario_002_switch_option_head__no_cap__mesh_tri_1[] = {
++	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_1 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 4, 5, 0),
++	gsSP1Triangle(4, 3, 6, 0),
++	gsSP1Triangle(3, 7, 6, 0),
++	gsSP1Triangle(8, 6, 7, 0),
++	gsSP1Triangle(8, 7, 9, 0),
++	gsSP1Triangle(10, 6, 8, 0),
++	gsSP1Triangle(6, 11, 4, 0),
++	gsSP1Triangle(12, 13, 14, 0),
++	gsSP1Triangle(15, 13, 12, 0),
++	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_1 + 16, 14, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 2, 1, 0),
++	gsSP1Triangle(4, 2, 3, 0),
++	gsSP1Triangle(5, 2, 4, 0),
++	gsSP1Triangle(6, 5, 4, 0),
++	gsSP1Triangle(2, 5, 7, 0),
++	gsSP1Triangle(8, 9, 10, 0),
++	gsSP1Triangle(10, 11, 8, 0),
++	gsSP1Triangle(12, 11, 10, 0),
++	gsSP1Triangle(11, 13, 8, 0),
++	gsSPEndDisplayList(),
++};Vtx mario_002_switch_option_head__no_cap__mesh_vtx_2[12] = {
++	{{{96, 49, 94},0, {-90, 710},{0xC, 0x29, 0x78, 0xFF}}},
++	{{{44, 44, 97},0, {180, 1350},{0xD1, 0x1E, 0x72, 0xFF}}},
++	{{{42, 0, 103},0, {952, 1176},{0xB8, 0xFF, 0x68, 0xFF}}},
++	{{{85, -23, 111},0, {1222, 502},{0x5, 0x5A, 0x59, 0xFF}}},
++	{{{120, -11, 111},0, {906, 106},{0x1, 0xF, 0x7E, 0xFF}}},
++	{{{153, 33, 95},0, {6, -84},{0xFE, 0x36, 0x73, 0xFF}}},
++	{{{42, 0, -102},0, {826, 1194},{0xB8, 0xFF, 0x98, 0xFF}}},
++	{{{44, 44, -96},0, {102, 1318},{0xD1, 0x1E, 0x8E, 0xFF}}},
++	{{{96, 49, -93},0, {-86, 684},{0xC, 0x28, 0x88, 0xFF}}},
++	{{{85, -23, -110},0, {1134, 566},{0x7, 0x5A, 0xA7, 0xFF}}},
++	{{{120, -12, -109},0, {900, 168},{0x2, 0xE, 0x82, 0xFF}}},
++	{{{153, 33, -94},0, {74, -74},{0xF5, 0x33, 0x8C, 0xFF}}},
++};
++
++Gfx mario_002_switch_option_head__no_cap__mesh_tri_2[] = {
++	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_2 + 0, 12, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 3, 0, 0),
++	gsSP1Triangle(3, 4, 0, 0),
++	gsSP1Triangle(5, 0, 4, 0),
++	gsSP1Triangle(6, 7, 8, 0),
++	gsSP1Triangle(8, 9, 6, 0),
++	gsSP1Triangle(9, 8, 10, 0),
++	gsSP1Triangle(10, 8, 11, 0),
++	gsSPEndDisplayList(),
++};Vtx mario_002_switch_option_head__no_cap__mesh_vtx_3[92] = {
++	{{{153, 33, 95},0, {-16, -16},{0xFE, 0x36, 0x73, 0xFF}}},
++	{{{200, 75, 84},0, {-16, -16},{0x21, 0x51, 0x5D, 0xFF}}},
++	{{{151, 72, 70},0, {-16, -16},{0xE2, 0x5B, 0x54, 0xFF}}},
++	{{{181, -9, 116},0, {-16, -16},{0x2A, 0x2, 0x78, 0xFF}}},
++	{{{120, -11, 111},0, {-16, -16},{0x1, 0xF, 0x7E, 0xFF}}},
++	{{{145, -83, 105},0, {-16, -16},{0xFF, 0xCA, 0x73, 0xFF}}},
++	{{{91, -54, 86},0, {-16, -16},{0xDA, 0xB6, 0x60, 0xFF}}},
++	{{{64, -103, 52},0, {-16, -16},{0x19, 0x8B, 0x2C, 0xFF}}},
++	{{{56, -45, 77},0, {-16, -16},{0xCB, 0xC7, 0x64, 0xFF}}},
++	{{{58, -114, 60},0, {-16, -16},{0x57, 0xAA, 0x21, 0xFF}}},
++	{{{31, -85, 87},0, {-16, -16},{0xE4, 0xFA, 0x7C, 0xFF}}},
++	{{{17, -52, 47},0, {-16, -16},{0x86, 0xFC, 0x22, 0xFF}}},
++	{{{9, -88, 59},0, {-16, -16},{0x84, 0xEC, 0x16, 0xFF}}},
++	{{{31, -84, 0},0, {-16, -16},{0x9E, 0xB0, 0x1, 0xFF}}},
++	{{{36, -116, 36},0, {-16, -16},{0xEE, 0x92, 0xC3, 0xFF}}},
++	{{{64, -103, -51},0, {-16, -16},{0x1A, 0x8C, 0xD4, 0xFF}}},
++	{{{31, -84, 0},0, {-16, -16},{0x9E, 0xB0, 0x1, 0xFF}}},
++	{{{36, -116, -35},0, {-16, -16},{0xEE, 0x92, 0x3D, 0xFF}}},
++	{{{64, -103, -51},0, {-16, -16},{0x1A, 0x8C, 0xD4, 0xFF}}},
++	{{{9, -88, -58},0, {-16, -16},{0x84, 0xEC, 0xEA, 0xFF}}},
++	{{{17, -52, -46},0, {-16, -16},{0x86, 0xFC, 0xDE, 0xFF}}},
++	{{{31, -85, -86},0, {-16, -16},{0xE4, 0xFA, 0x84, 0xFF}}},
++	{{{56, -45, -76},0, {-16, -16},{0xCB, 0xC7, 0x9C, 0xFF}}},
++	{{{58, -114, -59},0, {-16, -16},{0x57, 0xAA, 0xDF, 0xFF}}},
++	{{{91, -54, -85},0, {-16, -16},{0xDA, 0xB6, 0xA0, 0xFF}}},
++	{{{145, -84, -104},0, {-16, -16},{0x0, 0xC8, 0x8E, 0xFF}}},
++	{{{120, -12, -109},0, {-16, -16},{0x2, 0xE, 0x82, 0xFF}}},
++	{{{182, -9, -115},0, {-16, -16},{0x2B, 0xFF, 0x88, 0xFF}}},
++	{{{153, 33, -94},0, {-16, -16},{0xF5, 0x33, 0x8C, 0xFF}}},
++	{{{200, 70, -97},0, {-16, -16},{0x21, 0x3F, 0x97, 0xFF}}},
++	{{{151, 72, -68},0, {-16, -16},{0xD7, 0x5E, 0xB5, 0xFF}}},
++	{{{175, 91, -38},0, {-16, -16},{0xC7, 0x63, 0xC8, 0xFF}}},
++	{{{200, 70, -97},0, {-16, -16},{0x21, 0x3F, 0x97, 0xFF}}},
++	{{{175, 91, -38},0, {-16, -16},{0xC7, 0x63, 0xC8, 0xFF}}},
++	{{{211, 91, -71},0, {-16, -16},{0x23, 0x52, 0xA5, 0xFF}}},
++	{{{201, 125, -13},0, {-16, -16},{0xF8, 0x7F, 0xFF, 0xFF}}},
++	{{{160, 96, 0},0, {-16, -16},{0xB8, 0x68, 0x5, 0xFF}}},
++	{{{175, 91, 39},0, {-16, -16},{0xE2, 0x70, 0x34, 0xFF}}},
++	{{{209, 86, 60},0, {-16, -16},{0x32, 0x62, 0x3F, 0xFF}}},
++	{{{200, 75, 84},0, {-16, -16},{0x21, 0x51, 0x5D, 0xFF}}},
++	{{{151, 72, 70},0, {-16, -16},{0xE2, 0x5B, 0x54, 0xFF}}},
++	{{{227, 35, 75},0, {-16, -16},{0x6C, 0xB, 0x42, 0xFF}}},
++	{{{181, -9, 116},0, {-16, -16},{0x2A, 0x2, 0x78, 0xFF}}},
++	{{{227, -14, 59},0, {-16, -16},{0x72, 0xEA, 0x34, 0xFF}}},
++	{{{189, -102, 73},0, {-16, -16},{0x49, 0xB0, 0x41, 0xFF}}},
++	{{{145, -83, 105},0, {-16, -16},{0xFF, 0xCA, 0x73, 0xFF}}},
++	{{{116, -126, 68},0, {-16, -16},{0xEA, 0x95, 0x41, 0xFF}}},
++	{{{64, -103, 52},0, {-16, -16},{0x19, 0x8B, 0x2C, 0xFF}}},
++	{{{64, -103, 52},0, {-16, -16},{0x19, 0x8B, 0x2C, 0xFF}}},
++	{{{119, -134, 0},0, {-16, -16},{0xF1, 0x82, 0xFE, 0xFF}}},
++	{{{116, -126, 68},0, {-16, -16},{0xEA, 0x95, 0x41, 0xFF}}},
++	{{{64, -103, -51},0, {-16, -16},{0x1A, 0x8C, 0xD4, 0xFF}}},
++	{{{116, -124, -67},0, {-16, -16},{0xEB, 0x95, 0xBF, 0xFF}}},
++	{{{145, -84, -104},0, {-16, -16},{0x0, 0xC8, 0x8E, 0xFF}}},
++	{{{189, -102, -71},0, {-16, -16},{0x49, 0xAF, 0xC0, 0xFF}}},
++	{{{182, -9, -115},0, {-16, -16},{0x2B, 0xFF, 0x88, 0xFF}}},
++	{{{227, -14, -58},0, {-16, -16},{0x72, 0xEF, 0xCA, 0xFF}}},
++	{{{221, 35, -73},0, {-16, -16},{0x70, 0x3, 0xC4, 0xFF}}},
++	{{{200, 70, -97},0, {-16, -16},{0x21, 0x3F, 0x97, 0xFF}}},
++	{{{211, 91, -71},0, {-16, -16},{0x23, 0x52, 0xA5, 0xFF}}},
++	{{{232, 69, -34},0, {-16, -16},{0x75, 0xE2, 0xD8, 0xFF}}},
++	{{{248, 104, -43},0, {-16, -16},{0x6A, 0x32, 0xCF, 0xFF}}},
++	{{{201, 125, -13},0, {-16, -16},{0xF8, 0x7F, 0xFF, 0xFF}}},
++	{{{209, 86, 60},0, {-16, -16},{0x32, 0x62, 0x3F, 0xFF}}},
++	{{{209, 86, 60},0, {-16, -16},{0x32, 0x62, 0x3F, 0xFF}}},
++	{{{231, 81, 33},0, {-16, -16},{0x6C, 0x34, 0x2A, 0xFF}}},
++	{{{248, 104, -43},0, {-16, -16},{0x6A, 0x32, 0xCF, 0xFF}}},
++	{{{227, 35, 75},0, {-16, -16},{0x6C, 0xB, 0x42, 0xFF}}},
++	{{{237, 64, 0},0, {-16, -16},{0x7F, 0xF8, 0x5, 0xFF}}},
++	{{{227, -14, 59},0, {-16, -16},{0x72, 0xEA, 0x34, 0xFF}}},
++	{{{241, -34, 0},0, {-16, -16},{0x7C, 0xE4, 0x0, 0xFF}}},
++	{{{189, -102, 73},0, {-16, -16},{0x49, 0xB0, 0x41, 0xFF}}},
++	{{{200, -117, 0},0, {-16, -16},{0x4F, 0x9D, 0xFF, 0xFF}}},
++	{{{116, -126, 68},0, {-16, -16},{0xEA, 0x95, 0x41, 0xFF}}},
++	{{{119, -134, 0},0, {-16, -16},{0xF1, 0x82, 0xFE, 0xFF}}},
++	{{{116, -124, -67},0, {-16, -16},{0xEB, 0x95, 0xBF, 0xFF}}},
++	{{{189, -102, -71},0, {-16, -16},{0x49, 0xAF, 0xC0, 0xFF}}},
++	{{{227, -14, -58},0, {-16, -16},{0x72, 0xEF, 0xCA, 0xFF}}},
++	{{{221, 35, -73},0, {-16, -16},{0x70, 0x3, 0xC4, 0xFF}}},
++	{{{232, 69, -34},0, {-16, -16},{0x75, 0xE2, 0xD8, 0xFF}}},
++	{{{36, -116, -35},0, {-16, -16},{0xEE, 0x92, 0x3D, 0xFF}}},
++	{{{58, -114, -59},0, {-16, -16},{0x57, 0xAA, 0xDF, 0xFF}}},
++	{{{64, -103, -51},0, {-16, -16},{0x1A, 0x8C, 0xD4, 0xFF}}},
++	{{{35, -120, -67},0, {-16, -16},{0xE6, 0x92, 0xC6, 0xFF}}},
++	{{{9, -88, -58},0, {-16, -16},{0x84, 0xEC, 0xEA, 0xFF}}},
++	{{{31, -85, -86},0, {-16, -16},{0xE4, 0xFA, 0x84, 0xFF}}},
++	{{{58, -114, 60},0, {-16, -16},{0x57, 0xAA, 0x21, 0xFF}}},
++	{{{36, -116, 36},0, {-16, -16},{0xEE, 0x92, 0xC3, 0xFF}}},
++	{{{64, -103, 52},0, {-16, -16},{0x19, 0x8B, 0x2C, 0xFF}}},
++	{{{35, -120, 68},0, {-16, -16},{0xE6, 0x92, 0x3A, 0xFF}}},
++	{{{31, -85, 87},0, {-16, -16},{0xE4, 0xFA, 0x7C, 0xFF}}},
++	{{{9, -88, 59},0, {-16, -16},{0x84, 0xEC, 0x16, 0xFF}}},
++};
++
++Gfx mario_002_switch_option_head__no_cap__mesh_tri_3[] = {
++	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_3 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 3, 1, 0),
++	gsSP1Triangle(0, 4, 3, 0),
++	gsSP1Triangle(5, 3, 4, 0),
++	gsSP1Triangle(6, 5, 4, 0),
++	gsSP1Triangle(7, 5, 6, 0),
++	gsSP1Triangle(7, 6, 8, 0),
++	gsSP1Triangle(9, 7, 8, 0),
++	gsSP1Triangle(8, 10, 9, 0),
++	gsSP1Triangle(10, 8, 11, 0),
++	gsSP1Triangle(11, 12, 10, 0),
++	gsSP1Triangle(12, 11, 13, 0),
++	gsSP1Triangle(13, 14, 12, 0),
++	gsSP1Triangle(13, 7, 14, 0),
++	gsSP1Triangle(13, 15, 7, 0),
++	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_3 + 16, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(0, 4, 3, 0),
++	gsSP1Triangle(5, 3, 4, 0),
++	gsSP1Triangle(4, 6, 5, 0),
++	gsSP1Triangle(7, 5, 6, 0),
++	gsSP1Triangle(6, 2, 7, 0),
++	gsSP1Triangle(6, 8, 2, 0),
++	gsSP1Triangle(8, 9, 2, 0),
++	gsSP1Triangle(9, 8, 10, 0),
++	gsSP1Triangle(11, 9, 10, 0),
++	gsSP1Triangle(10, 12, 11, 0),
++	gsSP1Triangle(12, 13, 11, 0),
++	gsSP1Triangle(13, 12, 14, 0),
++	gsSP1Triangle(15, 13, 14, 0),
++	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_3 + 32, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 1, 3, 0),
++	gsSP1Triangle(1, 4, 3, 0),
++	gsSP1Triangle(3, 4, 5, 0),
++	gsSP1Triangle(6, 3, 5, 0),
++	gsSP1Triangle(5, 7, 6, 0),
++	gsSP1Triangle(5, 8, 7, 0),
++	gsSP1Triangle(7, 9, 6, 0),
++	gsSP1Triangle(10, 9, 7, 0),
++	gsSP1Triangle(9, 10, 11, 0),
++	gsSP1Triangle(11, 10, 12, 0),
++	gsSP1Triangle(13, 12, 10, 0),
++	gsSP1Triangle(13, 14, 12, 0),
++	gsSP1Triangle(15, 14, 13, 0),
++	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_3 + 48, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 3, 1, 0),
++	gsSP1Triangle(3, 4, 1, 0),
++	gsSP1Triangle(5, 4, 3, 0),
++	gsSP1Triangle(6, 4, 5, 0),
++	gsSP1Triangle(7, 6, 5, 0),
++	gsSP1Triangle(6, 7, 8, 0),
++	gsSP1Triangle(8, 7, 9, 0),
++	gsSP1Triangle(10, 9, 7, 0),
++	gsSP1Triangle(9, 10, 11, 0),
++	gsSP1Triangle(9, 11, 12, 0),
++	gsSP1Triangle(12, 11, 13, 0),
++	gsSP1Triangle(11, 14, 13, 0),
++	gsSP1Triangle(14, 15, 13, 0),
++	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_3 + 64, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(3, 4, 1, 0),
++	gsSP1Triangle(4, 3, 5, 0),
++	gsSP1Triangle(5, 6, 4, 0),
++	gsSP1Triangle(6, 5, 7, 0),
++	gsSP1Triangle(8, 6, 7, 0),
++	gsSP1Triangle(8, 7, 9, 0),
++	gsSP1Triangle(10, 8, 9, 0),
++	gsSP1Triangle(10, 11, 8, 0),
++	gsSP1Triangle(11, 12, 8, 0),
++	gsSP1Triangle(8, 12, 6, 0),
++	gsSP1Triangle(12, 13, 6, 0),
++	gsSP1Triangle(13, 4, 6, 0),
++	gsSP1Triangle(13, 14, 4, 0),
++	gsSP1Triangle(14, 15, 4, 0),
++	gsSP1Triangle(4, 15, 2, 0),
++	gsSP1Triangle(4, 2, 1, 0),
++	gsSPVertex(mario_002_switch_option_head__no_cap__mesh_vtx_3 + 80, 12, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 3, 1, 0),
++	gsSP1Triangle(4, 3, 0, 0),
++	gsSP1Triangle(5, 3, 4, 0),
++	gsSP1Triangle(3, 5, 1, 0),
++	gsSP1Triangle(6, 7, 8, 0),
++	gsSP1Triangle(6, 9, 7, 0),
++	gsSP1Triangle(10, 9, 6, 0),
++	gsSP1Triangle(11, 9, 10, 0),
++	gsSP1Triangle(7, 9, 11, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_000_displaylist_001_mesh_vtx_0[4] = {
++	{{{0, 0, 0},0, {-16, 1978},{0x17, 0x0, 0x7D, 0xFF}}},
++	{{{104, 0, -19},0, {974, 1978},{0x18, 0xFF, 0x7D, 0xFF}}},
++	{{{104, 212, -19},0, {974, -34},{0x17, 0x0, 0x7D, 0xFF}}},
++	{{{0, 212, 0},0, {-16, -34},{0x17, 0x0, 0x7D, 0xFF}}},
++};
++
++Gfx mario_000_displaylist_001_mesh_tri_0[] = {
++	gsSPVertex(mario_000_displaylist_001_mesh_vtx_0 + 0, 4, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 2, 3, 0),
++	gsSPEndDisplayList(),
++};Vtx mario_000_displaylist_001_mesh_vtx_1[4] = {
++	{{{-103, 212, 18},0, {-16, -34},{0x17, 0x0, 0x7D, 0xFF}}},
++	{{{0, 0, 0},0, {974, 1978},{0x17, 0x0, 0x7D, 0xFF}}},
++	{{{0, 212, 0},0, {974, -34},{0x17, 0x0, 0x7D, 0xFF}}},
++	{{{-103, 0, 19},0, {-16, 1978},{0x17, 0x0, 0x7D, 0xFF}}},
++};
++
++Gfx mario_000_displaylist_001_mesh_tri_1[] = {
++	gsSPVertex(mario_000_displaylist_001_mesh_vtx_1 + 0, 4, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 3, 1, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_000_displaylist_002_mesh_vtx_0[4] = {
++	{{{0, 0, 0},0, {-16, 1978},{0xE9, 0x0, 0x7D, 0xFF}}},
++	{{{104, 0, 19},0, {974, 1978},{0xE8, 0x1, 0x7D, 0xFF}}},
++	{{{104, 212, 19},0, {974, -34},{0xE9, 0x0, 0x7D, 0xFF}}},
++	{{{0, 212, 0},0, {-16, -34},{0xE9, 0x0, 0x7D, 0xFF}}},
++};
++
++Gfx mario_000_displaylist_002_mesh_tri_0[] = {
++	gsSPVertex(mario_000_displaylist_002_mesh_vtx_0 + 0, 4, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 2, 3, 0),
++	gsSPEndDisplayList(),
++};Vtx mario_000_displaylist_002_mesh_vtx_1[4] = {
++	{{{-103, 212, -18},0, {-16, -34},{0xE9, 0x0, 0x7D, 0xFF}}},
++	{{{-103, 0, -19},0, {-16, 1978},{0xE9, 0x0, 0x7D, 0xFF}}},
++	{{{0, 0, 0},0, {974, 1978},{0xE9, 0x0, 0x7D, 0xFF}}},
++	{{{0, 212, 0},0, {974, -34},{0xE9, 0x0, 0x7D, 0xFF}}},
++};
++
++Gfx mario_000_displaylist_002_mesh_tri_1[] = {
++	gsSPVertex(mario_000_displaylist_002_mesh_vtx_1 + 0, 4, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 2, 3, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_000_offset_003_mesh_vtx_0[31] = {
++	{{{6, -13, -42},0, {-16, -16},{0xDB, 0xE1, 0x8A, 0xFF}}},
++	{{{-8, -9, -27},0, {-16, -16},{0x90, 0xF1, 0xC6, 0xFF}}},
++	{{{-8, 17, -17},0, {-16, -16},{0x92, 0x36, 0xDF, 0xFF}}},
++	{{{5, -42, -5},0, {-16, -16},{0xD7, 0x88, 0xFD, 0xFF}}},
++	{{{57, -36, -5},0, {-16, -16},{0x32, 0x8B, 0xFD, 0xFF}}},
++	{{{58, -13, -34},0, {-16, -16},{0x33, 0xDF, 0x90, 0xFF}}},
++	{{{7, 29, -26},0, {-16, -16},{0xDF, 0x66, 0xBC, 0xFF}}},
++	{{{-8, 16, 10},0, {-16, -16},{0x92, 0x33, 0x26, 0xFF}}},
++	{{{-8, -11, 18},0, {-16, -16},{0x91, 0xEC, 0x3A, 0xFF}}},
++	{{{-9, -26, -5},0, {-16, -16},{0x8E, 0xC8, 0xFD, 0xFF}}},
++	{{{6, -16, 32},0, {-16, -16},{0xDB, 0xD8, 0x73, 0xFF}}},
++	{{{58, -15, 25},0, {-16, -16},{0x35, 0xD7, 0x6C, 0xFF}}},
++	{{{67, -12, 16},0, {-16, -16},{0x6E, 0xE8, 0x3B, 0xFF}}},
++	{{{67, -26, -5},0, {-16, -16},{0x6D, 0xBF, 0xFE, 0xFF}}},
++	{{{68, -10, -25},0, {-16, -16},{0x6D, 0xEF, 0xC1, 0xFF}}},
++	{{{68, 13, -16},0, {-16, -16},{0x6F, 0x33, 0xDC, 0xFF}}},
++	{{{59, 21, -21},0, {-16, -16},{0x37, 0x5F, 0xC0, 0xFF}}},
++	{{{68, 13, -16},0, {-16, -16},{0x6F, 0x33, 0xDC, 0xFF}}},
++	{{{58, -13, -34},0, {-16, -16},{0x33, 0xDF, 0x90, 0xFF}}},
++	{{{7, 29, -26},0, {-16, -16},{0xDF, 0x66, 0xBC, 0xFF}}},
++	{{{7, 27, 20},0, {-16, -16},{0xDF, 0x60, 0x4C, 0xFF}}},
++	{{{-8, 16, 10},0, {-16, -16},{0x92, 0x33, 0x26, 0xFF}}},
++	{{{-8, -11, 18},0, {-16, -16},{0x91, 0xEC, 0x3A, 0xFF}}},
++	{{{6, -16, 32},0, {-16, -16},{0xDB, 0xD8, 0x73, 0xFF}}},
++	{{{-9, -26, -5},0, {-16, -16},{0x8E, 0xC8, 0xFD, 0xFF}}},
++	{{{59, 20, 15},0, {-16, -16},{0x37, 0x5A, 0x46, 0xFF}}},
++	{{{58, -15, 25},0, {-16, -16},{0x35, 0xD7, 0x6C, 0xFF}}},
++	{{{67, -12, 16},0, {-16, -16},{0x6E, 0xE8, 0x3B, 0xFF}}},
++	{{{68, 12, 9},0, {-16, -16},{0x70, 0x2D, 0x27, 0xFF}}},
++	{{{68, -10, -25},0, {-16, -16},{0x6D, 0xEF, 0xC1, 0xFF}}},
++	{{{67, -26, -5},0, {-16, -16},{0x6D, 0xBF, 0xFE, 0xFF}}},
++};
++
++Gfx mario_000_offset_003_mesh_tri_0[] = {
++	gsSPVertex(mario_000_offset_003_mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(3, 0, 4, 0),
++	gsSP1Triangle(0, 5, 4, 0),
++	gsSP1Triangle(0, 6, 5, 0),
++	gsSP1Triangle(0, 2, 6, 0),
++	gsSP1Triangle(6, 2, 7, 0),
++	gsSP1Triangle(8, 7, 2, 0),
++	gsSP1Triangle(2, 1, 8, 0),
++	gsSP1Triangle(1, 9, 8, 0),
++	gsSP1Triangle(3, 9, 1, 0),
++	gsSP1Triangle(10, 9, 3, 0),
++	gsSP1Triangle(10, 3, 11, 0),
++	gsSP1Triangle(3, 4, 11, 0),
++	gsSP1Triangle(4, 12, 11, 0),
++	gsSP1Triangle(4, 13, 12, 0),
++	gsSP1Triangle(14, 13, 4, 0),
++	gsSP1Triangle(5, 14, 4, 0),
++	gsSP1Triangle(15, 14, 5, 0),
++	gsSPVertex(mario_000_offset_003_mesh_vtx_0 + 16, 15, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 0, 2, 0),
++	gsSP1Triangle(3, 4, 0, 0),
++	gsSP1Triangle(3, 5, 4, 0),
++	gsSP1Triangle(4, 5, 6, 0),
++	gsSP1Triangle(4, 6, 7, 0),
++	gsSP1Triangle(7, 6, 8, 0),
++	gsSP1Triangle(4, 7, 9, 0),
++	gsSP1Triangle(7, 10, 9, 0),
++	gsSP1Triangle(10, 11, 9, 0),
++	gsSP1Triangle(11, 12, 9, 0),
++	gsSP1Triangle(12, 11, 13, 0),
++	gsSP1Triangle(11, 14, 13, 0),
++	gsSP1Triangle(12, 13, 1, 0),
++	gsSP1Triangle(9, 12, 1, 0),
++	gsSP1Triangle(9, 1, 0, 0),
++	gsSP1Triangle(4, 9, 0, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_000_offset_004_mesh_vtx_0[16] = {
++	{{{-2, 21, -21},0, {-16, -16},{0xDF, 0x67, 0xBE, 0xFF}}},
++	{{{-14, 13, -15},0, {-16, -16},{0x97, 0x3E, 0xDD, 0xFF}}},
++	{{{-14, 11, 10},0, {-16, -16},{0x96, 0x37, 0x2B, 0xFF}}},
++	{{{-3, -14, -34},0, {-16, -16},{0xDC, 0xE0, 0x8A, 0xFF}}},
++	{{{46, -14, -30},0, {-16, -16},{0x40, 0xE0, 0x97, 0xFF}}},
++	{{{47, 16, -19},0, {-16, -16},{0x43, 0x59, 0xC4, 0xFF}}},
++	{{{-2, 19, 16},0, {-16, -16},{0xE0, 0x60, 0x4C, 0xFF}}},
++	{{{-15, -13, 17},0, {-16, -16},{0x95, 0xEB, 0x41, 0xFF}}},
++	{{{-15, -27, -4},0, {-16, -16},{0x93, 0xBF, 0xFD, 0xFF}}},
++	{{{-15, -11, -24},0, {-16, -16},{0x94, 0xF1, 0xBF, 0xFF}}},
++	{{{-3, -38, -4},0, {-16, -16},{0xDB, 0x86, 0xFC, 0xFF}}},
++	{{{45, -34, -4},0, {-16, -16},{0x3D, 0x91, 0xFB, 0xFF}}},
++	{{{58, -7, -3},0, {-16, -16},{0x7F, 0xFC, 0x1, 0xFF}}},
++	{{{47, 14, 13},0, {-16, -16},{0x43, 0x53, 0x44, 0xFF}}},
++	{{{-3, -17, 26},0, {-16, -16},{0xDD, 0xD7, 0x73, 0xFF}}},
++	{{{46, -17, 22},0, {-16, -16},{0x40, 0xD8, 0x66, 0xFF}}},
++};
++
++Gfx mario_000_offset_004_mesh_tri_0[] = {
++	gsSPVertex(mario_000_offset_004_mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(3, 0, 4, 0),
++	gsSP1Triangle(0, 5, 4, 0),
++	gsSP1Triangle(0, 6, 5, 0),
++	gsSP1Triangle(0, 2, 6, 0),
++	gsSP1Triangle(6, 2, 7, 0),
++	gsSP1Triangle(8, 7, 2, 0),
++	gsSP1Triangle(8, 2, 1, 0),
++	gsSP1Triangle(9, 8, 1, 0),
++	gsSP1Triangle(3, 9, 1, 0),
++	gsSP1Triangle(10, 9, 3, 0),
++	gsSP1Triangle(10, 3, 11, 0),
++	gsSP1Triangle(3, 4, 11, 0),
++	gsSP1Triangle(4, 12, 11, 0),
++	gsSP1Triangle(5, 12, 4, 0),
++	gsSP1Triangle(13, 12, 5, 0),
++	gsSP1Triangle(6, 13, 5, 0),
++	gsSP1Triangle(6, 14, 13, 0),
++	gsSP1Triangle(6, 7, 14, 0),
++	gsSP1Triangle(14, 7, 8, 0),
++	gsSP1Triangle(14, 8, 10, 0),
++	gsSP1Triangle(10, 8, 9, 0),
++	gsSP1Triangle(14, 10, 15, 0),
++	gsSP1Triangle(10, 11, 15, 0),
++	gsSP1Triangle(11, 12, 15, 0),
++	gsSP1Triangle(15, 12, 13, 0),
++	gsSP1Triangle(14, 15, 13, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_000_displaylist_003_mesh_vtx_0[46] = {
++	{{{17, -38, -39},0, {-16, -16},{0x9E, 0xB9, 0xDA, 0xFF}}},
++	{{{-14, -14, -4},0, {-16, -16},{0x8C, 0xCD, 0x3, 0xFF}}},
++	{{{-10, 26, -38},0, {-16, -16},{0x88, 0xEC, 0xDA, 0xFF}}},
++	{{{27, -58, 6},0, {-16, -16},{0xA2, 0xAC, 0xE, 0xFF}}},
++	{{{5, -6, 36},0, {-16, -16},{0x99, 0xD2, 0x3A, 0xFF}}},
++	{{{-18, 45, 8},0, {-16, -16},{0x82, 0xF5, 0xE, 0xFF}}},
++	{{{26, -25, -32},0, {-16, -16},{0x17, 0xC9, 0x90, 0xFF}}},
++	{{{17, -38, -39},0, {-16, -16},{0x5E, 0xEC, 0xAC, 0xFF}}},
++	{{{-10, 26, -38},0, {-16, -16},{0x33, 0x54, 0xB0, 0xFF}}},
++	{{{34, -41, 3},0, {-16, -16},{0x3D, 0x97, 0x26, 0xFF}}},
++	{{{58, -45, 7},0, {-16, -16},{0x6, 0x8A, 0x2F, 0xFF}}},
++	{{{80, -31, -61},0, {-16, -16},{0x1D, 0xB6, 0x9D, 0xFF}}},
++	{{{33, 7, -44},0, {-16, -16},{0xC4, 0xFD, 0x90, 0xFF}}},
++	{{{4, 24, -31},0, {-16, -16},{0xFB, 0x44, 0x95, 0xFF}}},
++	{{{-1, 39, 5},0, {-16, -16},{0xDB, 0x71, 0x2D, 0xFF}}},
++	{{{-18, 45, 8},0, {-16, -16},{0x2E, 0x73, 0x1C, 0xFF}}},
++	{{{-1, 39, 5},0, {-16, -16},{0xDB, 0x71, 0x2D, 0xFF}}},
++	{{{-18, 45, 8},0, {-16, -16},{0x2E, 0x73, 0x1C, 0xFF}}},
++	{{{5, -6, 36},0, {-16, -16},{0x43, 0x1C, 0x68, 0xFF}}},
++	{{{17, -1, 27},0, {-16, -16},{0xFE, 0xFD, 0x7F, 0xFF}}},
++	{{{34, -41, 3},0, {-16, -16},{0x3D, 0x97, 0x26, 0xFF}}},
++	{{{27, -58, 6},0, {-16, -16},{0x75, 0xD4, 0x18, 0xFF}}},
++	{{{17, -38, -39},0, {-16, -16},{0x5E, 0xEC, 0xAC, 0xFF}}},
++	{{{36, 6, 42},0, {-16, -16},{0xE2, 0xEF, 0x7A, 0xFF}}},
++	{{{12, 59, 10},0, {-16, -16},{0xAF, 0x55, 0x30, 0xFF}}},
++	{{{59, 81, 8},0, {-16, -16},{0x15, 0x79, 0x21, 0xFF}}},
++	{{{86, 29, 41},0, {-16, -16},{0x3F, 0x1A, 0x6B, 0xFF}}},
++	{{{107, -26, 4},0, {-16, -16},{0x65, 0xBF, 0x29, 0xFF}}},
++	{{{58, -45, 7},0, {-16, -16},{0x6, 0x8A, 0x2F, 0xFF}}},
++	{{{80, -31, -61},0, {-16, -16},{0x1D, 0xB6, 0x9D, 0xFF}}},
++	{{{100, -6, -46},0, {-16, -16},{0x69, 0xFD, 0xB9, 0xFF}}},
++	{{{61, 12, -60},0, {-16, -16},{0xF4, 0x18, 0x84, 0xFF}}},
++	{{{33, 7, -44},0, {-16, -16},{0xC4, 0xFD, 0x90, 0xFF}}},
++	{{{61, 12, -60},0, {-16, -16},{0xF4, 0x18, 0x84, 0xFF}}},
++	{{{80, -31, -61},0, {-16, -16},{0x1D, 0xB6, 0x9D, 0xFF}}},
++	{{{32, 63, -28},0, {-16, -16},{0xD0, 0x5B, 0xB6, 0xFF}}},
++	{{{4, 24, -31},0, {-16, -16},{0xFB, 0x44, 0x95, 0xFF}}},
++	{{{12, 59, 10},0, {-16, -16},{0xAF, 0x55, 0x30, 0xFF}}},
++	{{{-1, 39, 5},0, {-16, -16},{0xDB, 0x71, 0x2D, 0xFF}}},
++	{{{59, 81, 8},0, {-16, -16},{0x15, 0x79, 0x21, 0xFF}}},
++	{{{57, 55, -37},0, {-16, -16},{0x18, 0x54, 0xA4, 0xFF}}},
++	{{{99, 40, -16},0, {-16, -16},{0x6B, 0x41, 0xEA, 0xFF}}},
++	{{{86, 29, 41},0, {-16, -16},{0x3F, 0x1A, 0x6B, 0xFF}}},
++	{{{107, -26, 4},0, {-16, -16},{0x65, 0xBF, 0x29, 0xFF}}},
++	{{{100, -6, -46},0, {-16, -16},{0x69, 0xFD, 0xB9, 0xFF}}},
++	{{{90, 17, -46},0, {-16, -16},{0x47, 0x31, 0xA3, 0xFF}}},
++};
++
++Gfx mario_000_displaylist_003_mesh_tri_0[] = {
++	gsSPVertex(mario_000_displaylist_003_mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(4, 1, 3, 0),
++	gsSP1Triangle(5, 1, 4, 0),
++	gsSP1Triangle(2, 1, 5, 0),
++	gsSP1Triangle(6, 7, 8, 0),
++	gsSP1Triangle(7, 6, 9, 0),
++	gsSP1Triangle(10, 9, 6, 0),
++	gsSP1Triangle(6, 11, 10, 0),
++	gsSP1Triangle(6, 12, 11, 0),
++	gsSP1Triangle(6, 13, 12, 0),
++	gsSP1Triangle(8, 13, 6, 0),
++	gsSP1Triangle(14, 13, 8, 0),
++	gsSP1Triangle(8, 15, 14, 0),
++	gsSPVertex(mario_000_displaylist_003_mesh_vtx_0 + 16, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 3, 0, 0),
++	gsSP1Triangle(4, 3, 2, 0),
++	gsSP1Triangle(2, 5, 4, 0),
++	gsSP1Triangle(4, 5, 6, 0),
++	gsSP1Triangle(7, 3, 4, 0),
++	gsSP1Triangle(0, 3, 7, 0),
++	gsSP1Triangle(0, 7, 8, 0),
++	gsSP1Triangle(7, 9, 8, 0),
++	gsSP1Triangle(7, 10, 9, 0),
++	gsSP1Triangle(11, 10, 7, 0),
++	gsSP1Triangle(12, 11, 7, 0),
++	gsSP1Triangle(4, 12, 7, 0),
++	gsSP1Triangle(13, 11, 12, 0),
++	gsSP1Triangle(13, 14, 11, 0),
++	gsSP1Triangle(15, 14, 13, 0),
++	gsSPVertex(mario_000_displaylist_003_mesh_vtx_0 + 32, 14, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(1, 0, 3, 0),
++	gsSP1Triangle(3, 0, 4, 0),
++	gsSP1Triangle(5, 3, 4, 0),
++	gsSP1Triangle(4, 6, 5, 0),
++	gsSP1Triangle(3, 5, 7, 0),
++	gsSP1Triangle(7, 8, 3, 0),
++	gsSP1Triangle(7, 9, 8, 0),
++	gsSP1Triangle(10, 9, 7, 0),
++	gsSP1Triangle(11, 9, 10, 0),
++	gsSP1Triangle(12, 9, 11, 0),
++	gsSP1Triangle(13, 9, 12, 0),
++	gsSP1Triangle(1, 13, 12, 0),
++	gsSP1Triangle(8, 13, 1, 0),
++	gsSP1Triangle(1, 3, 8, 0),
++	gsSP1Triangle(13, 8, 9, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_002_switch_option_right_hand_open_mesh_vtx_0[58] = {
++	{{{2, 3, 26},0, {-16, -16},{0x4A, 0x34, 0x59, 0xFF}}},
++	{{{20, -46, 12},0, {-16, -16},{0x75, 0xDD, 0x23, 0xFF}}},
++	{{{26, -32, 6},0, {-16, -16},{0x37, 0xA8, 0x49, 0xFF}}},
++	{{{13, -39, -31},0, {-16, -16},{0x63, 0xDD, 0xB9, 0xFF}}},
++	{{{20, -27, -27},0, {-16, -16},{0x11, 0xB1, 0x9E, 0xFF}}},
++	{{{-10, 14, -43},0, {-16, -16},{0x32, 0x3C, 0x9C, 0xFF}}},
++	{{{1, 15, -37},0, {-16, -16},{0xE0, 0x1D, 0x88, 0xFF}}},
++	{{{-3, 35, -9},0, {-16, -16},{0xCE, 0x72, 0x19, 0xFF}}},
++	{{{-17, 40, -8},0, {-16, -16},{0x2B, 0x78, 0x0, 0xFF}}},
++	{{{11, 5, 17},0, {-16, -16},{0x6, 0x1C, 0x7C, 0xFF}}},
++	{{{26, 16, 28},0, {-16, -16},{0xDE, 0xD, 0x7A, 0xFF}}},
++	{{{45, -34, 10},0, {-16, -16},{0xFF, 0x9F, 0x52, 0xFF}}},
++	{{{41, -37, -36},0, {-16, -16},{0xD7, 0x9E, 0xBB, 0xFF}}},
++	{{{25, -1, -44},0, {-16, -16},{0xDF, 0xE2, 0x89, 0xFF}}},
++	{{{11, 29, -52},0, {-16, -16},{0xDA, 0x1F, 0x8B, 0xFF}}},
++	{{{6, 53, -9},0, {-16, -16},{0xAC, 0x5C, 0x17, 0xFF}}},
++	{{{26, 16, 28},0, {-16, -16},{0xDE, 0xD, 0x7A, 0xFF}}},
++	{{{70, 89, -20},0, {-16, -16},{0xF0, 0x7E, 0xF8, 0xFF}}},
++	{{{6, 53, -9},0, {-16, -16},{0xAC, 0x5C, 0x17, 0xFF}}},
++	{{{77, 41, 21},0, {-16, -16},{0x14, 0x28, 0x77, 0xFF}}},
++	{{{83, -17, 10},0, {-16, -16},{0x42, 0xC1, 0x58, 0xFF}}},
++	{{{45, -34, 10},0, {-16, -16},{0xFF, 0x9F, 0x52, 0xFF}}},
++	{{{89, -47, -37},0, {-16, -16},{0x4B, 0xA4, 0xD3, 0xFF}}},
++	{{{41, -37, -36},0, {-16, -16},{0xD7, 0x9E, 0xBB, 0xFF}}},
++	{{{76, -18, -48},0, {-16, -16},{0x2D, 0x3, 0x89, 0xFF}}},
++	{{{25, -1, -44},0, {-16, -16},{0xDF, 0xE2, 0x89, 0xFF}}},
++	{{{26, 41, -41},0, {-16, -16},{0xF5, 0x42, 0x94, 0xFF}}},
++	{{{11, 29, -52},0, {-16, -16},{0xDA, 0x1F, 0x8B, 0xFF}}},
++	{{{78, 59, -34},0, {-16, -16},{0xF6, 0x16, 0x83, 0xFF}}},
++	{{{119, 70, -42},0, {-16, -16},{0x33, 0x40, 0x9F, 0xFF}}},
++	{{{121, 73, -21},0, {-16, -16},{0x4D, 0x5F, 0x22, 0xFF}}},
++	{{{141, 34, -7},0, {-16, -16},{0x74, 0xF7, 0x33, 0xFF}}},
++	{{{133, 28, -40},0, {-16, -16},{0x50, 0xD8, 0xA6, 0xFF}}},
++	{{{141, 34, -7},0, {-16, -16},{0x74, 0xF7, 0x33, 0xFF}}},
++	{{{83, -17, 10},0, {-16, -16},{0x42, 0xC1, 0x58, 0xFF}}},
++	{{{89, -6, -27},0, {-16, -16},{0x64, 0xE3, 0xB8, 0xFF}}},
++	{{{89, -47, -37},0, {-16, -16},{0x4B, 0xA4, 0xD3, 0xFF}}},
++	{{{76, -18, -48},0, {-16, -16},{0x2D, 0x3, 0x89, 0xFF}}},
++	{{{69, 10, -36},0, {-16, -16},{0x34, 0x1D, 0x90, 0xFF}}},
++	{{{26, 41, -41},0, {-16, -16},{0xF5, 0x42, 0x94, 0xFF}}},
++	{{{78, 59, -34},0, {-16, -16},{0xF6, 0x16, 0x83, 0xFF}}},
++	{{{119, 70, -42},0, {-16, -16},{0x33, 0x40, 0x9F, 0xFF}}},
++	{{{121, 73, -21},0, {-16, -16},{0x4D, 0x5F, 0x22, 0xFF}}},
++	{{{2, 3, 26},0, {-16, -16},{0xA8, 0xF0, 0x5A, 0xFF}}},
++	{{{6, -38, 7},0, {-16, -16},{0xA7, 0xB0, 0x2A, 0xFF}}},
++	{{{20, -46, 12},0, {-16, -16},{0xBA, 0xA1, 0x2E, 0xFF}}},
++	{{{-6, -3, 17},0, {-16, -16},{0x97, 0xE2, 0x42, 0xFF}}},
++	{{{-20, 22, -7},0, {-16, -16},{0x83, 0x0, 0x17, 0xFF}}},
++	{{{-17, 40, -8},0, {-16, -16},{0x84, 0x16, 0x11, 0xFF}}},
++	{{{-20, 22, -7},0, {-16, -16},{0x83, 0x0, 0x17, 0xFF}}},
++	{{{2, 3, 26},0, {-16, -16},{0xA8, 0xF0, 0x5A, 0xFF}}},
++	{{{-10, 14, -43},0, {-16, -16},{0x91, 0xF4, 0xC4, 0xFF}}},
++	{{{-15, 4, -32},0, {-16, -16},{0x8D, 0xDE, 0xD6, 0xFF}}},
++	{{{1, -33, -23},0, {-16, -16},{0x9F, 0xB3, 0xE2, 0xFF}}},
++	{{{13, -39, -31},0, {-16, -16},{0xB5, 0xA4, 0xD4, 0xFF}}},
++	{{{6, -38, 7},0, {-16, -16},{0xA7, 0xB0, 0x2A, 0xFF}}},
++	{{{20, -46, 12},0, {-16, -16},{0xBA, 0xA1, 0x2E, 0xFF}}},
++	{{{-6, -3, 17},0, {-16, -16},{0x97, 0xE2, 0x42, 0xFF}}},
++};
++
++Gfx mario_002_switch_option_right_hand_open_mesh_tri_0[] = {
++	gsSPVertex(mario_002_switch_option_right_hand_open_mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 1, 3, 0),
++	gsSP1Triangle(3, 4, 2, 0),
++	gsSP1Triangle(4, 3, 5, 0),
++	gsSP1Triangle(5, 6, 4, 0),
++	gsSP1Triangle(7, 6, 5, 0),
++	gsSP1Triangle(5, 8, 7, 0),
++	gsSP1Triangle(7, 8, 0, 0),
++	gsSP1Triangle(0, 9, 7, 0),
++	gsSP1Triangle(2, 9, 0, 0),
++	gsSP1Triangle(10, 9, 2, 0),
++	gsSP1Triangle(2, 11, 10, 0),
++	gsSP1Triangle(2, 12, 11, 0),
++	gsSP1Triangle(2, 4, 12, 0),
++	gsSP1Triangle(4, 13, 12, 0),
++	gsSP1Triangle(4, 6, 13, 0),
++	gsSP1Triangle(6, 14, 13, 0),
++	gsSP1Triangle(14, 6, 7, 0),
++	gsSP1Triangle(7, 15, 14, 0),
++	gsSP1Triangle(7, 10, 15, 0),
++	gsSP1Triangle(7, 9, 10, 0),
++	gsSPVertex(mario_002_switch_option_right_hand_open_mesh_vtx_0 + 16, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 3, 1, 0),
++	gsSP1Triangle(4, 3, 0, 0),
++	gsSP1Triangle(5, 4, 0, 0),
++	gsSP1Triangle(6, 4, 5, 0),
++	gsSP1Triangle(5, 7, 6, 0),
++	gsSP1Triangle(6, 7, 8, 0),
++	gsSP1Triangle(7, 9, 8, 0),
++	gsSP1Triangle(8, 9, 10, 0),
++	gsSP1Triangle(9, 11, 10, 0),
++	gsSP1Triangle(2, 10, 11, 0),
++	gsSP1Triangle(10, 2, 1, 0),
++	gsSP1Triangle(1, 12, 10, 0),
++	gsSP1Triangle(13, 12, 1, 0),
++	gsSP1Triangle(1, 14, 13, 0),
++	gsSP1Triangle(14, 1, 3, 0),
++	gsSP1Triangle(15, 14, 3, 0),
++	gsSP1Triangle(4, 15, 3, 0),
++	gsSPVertex(mario_002_switch_option_right_hand_open_mesh_vtx_0 + 32, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 0, 2, 0),
++	gsSP1Triangle(4, 3, 2, 0),
++	gsSP1Triangle(5, 3, 4, 0),
++	gsSP1Triangle(5, 6, 3, 0),
++	gsSP1Triangle(5, 7, 6, 0),
++	gsSP1Triangle(7, 8, 6, 0),
++	gsSP1Triangle(6, 8, 3, 0),
++	gsSP1Triangle(8, 0, 3, 0),
++	gsSP1Triangle(8, 9, 0, 0),
++	gsSP1Triangle(9, 1, 0, 0),
++	gsSP1Triangle(10, 1, 9, 0),
++	gsSP1Triangle(11, 12, 13, 0),
++	gsSP1Triangle(11, 14, 12, 0),
++	gsSP1Triangle(15, 14, 11, 0),
++	gsSPVertex(mario_002_switch_option_right_hand_open_mesh_vtx_0 + 48, 10, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(3, 4, 1, 0),
++	gsSP1Triangle(5, 4, 3, 0),
++	gsSP1Triangle(6, 5, 3, 0),
++	gsSP1Triangle(7, 5, 6, 0),
++	gsSP1Triangle(8, 7, 6, 0),
++	gsSP1Triangle(5, 7, 9, 0),
++	gsSP1Triangle(9, 4, 5, 0),
++	gsSP1Triangle(9, 1, 4, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_000_offset_006_mesh_vtx_0[28] = {
++	{{{58, 17, 27},0, {-16, -16},{0x37, 0x5A, 0x48, 0xFF}}},
++	{{{67, 10, 21},0, {-16, -16},{0x6F, 0x31, 0x26, 0xFF}}},
++	{{{67, 11, -4},0, {-16, -16},{0x6F, 0x33, 0xDE, 0xFF}}},
++	{{{67, -14, 28},0, {-16, -16},{0x6E, 0xE8, 0x3B, 0xFF}}},
++	{{{57, -17, 37},0, {-16, -16},{0x33, 0xD7, 0x6D, 0xFF}}},
++	{{{7, 25, 32},0, {-16, -16},{0xDF, 0x60, 0x4C, 0xFF}}},
++	{{{7, 27, -13},0, {-16, -16},{0xE0, 0x68, 0xBF, 0xFF}}},
++	{{{58, 19, -9},0, {-16, -16},{0x37, 0x60, 0xC2, 0xFF}}},
++	{{{67, -12, -13},0, {-16, -16},{0x6E, 0xEE, 0xC3, 0xFF}}},
++	{{{66, -28, 6},0, {-16, -16},{0x6F, 0xC3, 0xFA, 0xFF}}},
++	{{{57, -38, 6},0, {-16, -16},{0x34, 0x8C, 0xF9, 0xFF}}},
++	{{{57, -14, -22},0, {-16, -16},{0x32, 0xE2, 0x8F, 0xFF}}},
++	{{{5, -44, 5},0, {-16, -16},{0xD8, 0x88, 0xF8, 0xFF}}},
++	{{{6, -19, 44},0, {-16, -16},{0xDC, 0xD5, 0x72, 0xFF}}},
++	{{{-8, 14, 22},0, {-16, -16},{0x93, 0x35, 0x26, 0xFF}}},
++	{{{-8, 15, -5},0, {-16, -16},{0x93, 0x38, 0xDE, 0xFF}}},
++	{{{-9, -10, -15},0, {-16, -16},{0x90, 0xF5, 0xC4, 0xFF}}},
++	{{{-8, 15, -5},0, {-16, -16},{0x93, 0x38, 0xDE, 0xFF}}},
++	{{{7, 27, -13},0, {-16, -16},{0xE0, 0x68, 0xBF, 0xFF}}},
++	{{{6, -15, -30},0, {-16, -16},{0xDC, 0xE2, 0x8A, 0xFF}}},
++	{{{58, 19, -9},0, {-16, -16},{0x37, 0x60, 0xC2, 0xFF}}},
++	{{{57, -14, -22},0, {-16, -16},{0x32, 0xE2, 0x8F, 0xFF}}},
++	{{{67, -12, -13},0, {-16, -16},{0x6E, 0xEE, 0xC3, 0xFF}}},
++	{{{5, -44, 5},0, {-16, -16},{0xD8, 0x88, 0xF8, 0xFF}}},
++	{{{-9, -28, 6},0, {-16, -16},{0x8F, 0xC6, 0xFB, 0xFF}}},
++	{{{-9, -13, 30},0, {-16, -16},{0x91, 0xEE, 0x3B, 0xFF}}},
++	{{{6, -19, 44},0, {-16, -16},{0xDC, 0xD5, 0x72, 0xFF}}},
++	{{{-8, 14, 22},0, {-16, -16},{0x93, 0x35, 0x26, 0xFF}}},
++};
++
++Gfx mario_000_offset_006_mesh_tri_0[] = {
++	gsSPVertex(mario_000_offset_006_mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(4, 3, 0, 0),
++	gsSP1Triangle(4, 0, 5, 0),
++	gsSP1Triangle(0, 6, 5, 0),
++	gsSP1Triangle(0, 7, 6, 0),
++	gsSP1Triangle(0, 2, 7, 0),
++	gsSP1Triangle(7, 2, 8, 0),
++	gsSP1Triangle(8, 2, 9, 0),
++	gsSP1Triangle(2, 3, 9, 0),
++	gsSP1Triangle(2, 1, 3, 0),
++	gsSP1Triangle(10, 9, 3, 0),
++	gsSP1Triangle(8, 9, 10, 0),
++	gsSP1Triangle(11, 8, 10, 0),
++	gsSP1Triangle(11, 10, 12, 0),
++	gsSP1Triangle(10, 13, 12, 0),
++	gsSP1Triangle(10, 4, 13, 0),
++	gsSP1Triangle(10, 3, 4, 0),
++	gsSP1Triangle(4, 5, 13, 0),
++	gsSP1Triangle(5, 14, 13, 0),
++	gsSP1Triangle(15, 14, 5, 0),
++	gsSP1Triangle(6, 15, 5, 0),
++	gsSPVertex(mario_000_offset_006_mesh_vtx_0 + 16, 12, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 0, 2, 0),
++	gsSP1Triangle(4, 3, 2, 0),
++	gsSP1Triangle(4, 5, 3, 0),
++	gsSP1Triangle(4, 6, 5, 0),
++	gsSP1Triangle(5, 7, 3, 0),
++	gsSP1Triangle(7, 8, 3, 0),
++	gsSP1Triangle(9, 8, 7, 0),
++	gsSP1Triangle(10, 9, 7, 0),
++	gsSP1Triangle(11, 9, 10, 0),
++	gsSP1Triangle(9, 11, 1, 0),
++	gsSP1Triangle(9, 1, 0, 0),
++	gsSP1Triangle(0, 8, 9, 0),
++	gsSP1Triangle(8, 0, 3, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_000_offset_007_mesh_vtx_0[16] = {
++	{{{-2, -18, 38},0, {-16, -16},{0xDC, 0xD6, 0x72, 0xFF}}},
++	{{{-14, -14, 28},0, {-16, -16},{0x93, 0xED, 0x3E, 0xFF}}},
++	{{{-3, -39, 6},0, {-16, -16},{0xD8, 0x88, 0xF9, 0xFF}}},
++	{{{-13, 10, 21},0, {-16, -16},{0x95, 0x36, 0x2A, 0xFF}}},
++	{{{-1, 18, 28},0, {-16, -16},{0xDF, 0x60, 0x4C, 0xFF}}},
++	{{{47, -17, 34},0, {-16, -16},{0x41, 0xD9, 0x66, 0xFF}}},
++	{{{46, -36, 6},0, {-16, -16},{0x3D, 0x91, 0xFA, 0xFF}}},
++	{{{47, -15, -19},0, {-16, -16},{0x3F, 0xE3, 0x96, 0xFF}}},
++	{{{-2, -15, -23},0, {-16, -16},{0xDC, 0xE2, 0x8A, 0xFF}}},
++	{{{-14, -28, 6},0, {-16, -16},{0x92, 0xC1, 0xFA, 0xFF}}},
++	{{{-14, -12, -13},0, {-16, -16},{0x94, 0xF2, 0xBF, 0xFF}}},
++	{{{-13, 12, -4},0, {-16, -16},{0x98, 0x3E, 0xDA, 0xFF}}},
++	{{{-1, 20, -9},0, {-16, -16},{0xE1, 0x68, 0xBE, 0xFF}}},
++	{{{48, 13, 25},0, {-16, -16},{0x44, 0x54, 0x44, 0xFF}}},
++	{{{59, -8, 7},0, {-16, -16},{0x7F, 0xFD, 0xFE, 0xFF}}},
++	{{{48, 15, -7},0, {-16, -16},{0x43, 0x5B, 0xC5, 0xFF}}},
++};
++
++Gfx mario_000_offset_007_mesh_tri_0[] = {
++	gsSPVertex(mario_000_offset_007_mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(4, 3, 0, 0),
++	gsSP1Triangle(5, 4, 0, 0),
++	gsSP1Triangle(6, 5, 0, 0),
++	gsSP1Triangle(6, 0, 2, 0),
++	gsSP1Triangle(7, 6, 2, 0),
++	gsSP1Triangle(7, 2, 8, 0),
++	gsSP1Triangle(2, 9, 8, 0),
++	gsSP1Triangle(1, 9, 2, 0),
++	gsSP1Triangle(9, 1, 3, 0),
++	gsSP1Triangle(10, 9, 3, 0),
++	gsSP1Triangle(10, 3, 11, 0),
++	gsSP1Triangle(11, 3, 4, 0),
++	gsSP1Triangle(12, 11, 4, 0),
++	gsSP1Triangle(13, 12, 4, 0),
++	gsSP1Triangle(5, 13, 4, 0),
++	gsSP1Triangle(5, 14, 13, 0),
++	gsSP1Triangle(6, 14, 5, 0),
++	gsSP1Triangle(7, 14, 6, 0),
++	gsSP1Triangle(15, 14, 7, 0),
++	gsSP1Triangle(15, 7, 8, 0),
++	gsSP1Triangle(15, 8, 12, 0),
++	gsSP1Triangle(8, 10, 12, 0),
++	gsSP1Triangle(9, 10, 8, 0),
++	gsSP1Triangle(10, 11, 12, 0),
++	gsSP1Triangle(13, 14, 15, 0),
++	gsSP1Triangle(13, 15, 12, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_000_displaylist_004_mesh_vtx_0[36] = {
++	{{{-14, 26, 41},0, {-16, -16},{0x2D, 0x50, 0x57, 0xFF}}},
++	{{{13, -38, 41},0, {-16, -16},{0x57, 0xE5, 0x58, 0xFF}}},
++	{{{23, -26, 35},0, {-16, -16},{0xF, 0xBF, 0x6C, 0xFF}}},
++	{{{31, -40, -1},0, {-16, -16},{0x3D, 0x99, 0xD4, 0xFF}}},
++	{{{24, -57, -4},0, {-16, -16},{0x75, 0xD3, 0xEC, 0xFF}}},
++	{{{4, -3, -33},0, {-16, -16},{0x4C, 0x21, 0x9F, 0xFF}}},
++	{{{15, 0, -23},0, {-16, -16},{0xC, 0x1, 0x82, 0xFF}}},
++	{{{-2, 41, -1},0, {-16, -16},{0xDA, 0x71, 0xD3, 0xFF}}},
++	{{{-19, 47, -4},0, {-16, -16},{0x2D, 0x75, 0xEB, 0xFF}}},
++	{{{1, 24, 35},0, {-16, -16},{0xF5, 0x3E, 0x6E, 0xFF}}},
++	{{{29, 6, 49},0, {-16, -16},{0xBF, 0xF9, 0x6D, 0xFF}}},
++	{{{75, -33, 66},0, {-16, -16},{0x19, 0xB2, 0x61, 0xFF}}},
++	{{{55, -44, -4},0, {-16, -16},{0x7, 0x8C, 0xCC, 0xFF}}},
++	{{{35, 9, -37},0, {-16, -16},{0xE7, 0xF6, 0x84, 0xFF}}},
++	{{{10, 60, -4},0, {-16, -16},{0xB1, 0x58, 0xD2, 0xFF}}},
++	{{{29, 62, 34},0, {-16, -16},{0xCE, 0x59, 0x4B, 0xFF}}},
++	{{{29, 62, 34},0, {-16, -16},{0xCE, 0x59, 0x4B, 0xFF}}},
++	{{{29, 6, 49},0, {-16, -16},{0xBF, 0xF9, 0x6D, 0xFF}}},
++	{{{57, 10, 66},0, {-16, -16},{0xF3, 0x15, 0x7D, 0xFF}}},
++	{{{75, -33, 66},0, {-16, -16},{0x19, 0xB2, 0x61, 0xFF}}},
++	{{{96, -8, 52},0, {-16, -16},{0x67, 0xF9, 0x4A, 0xFF}}},
++	{{{104, -26, 1},0, {-16, -16},{0x65, 0xBF, 0xD7, 0xFF}}},
++	{{{55, -44, -4},0, {-16, -16},{0x7, 0x8C, 0xCC, 0xFF}}},
++	{{{35, 9, -37},0, {-16, -16},{0xE7, 0xF6, 0x84, 0xFF}}},
++	{{{86, 30, -33},0, {-16, -16},{0x45, 0x1C, 0x99, 0xFF}}},
++	{{{58, 81, 0},0, {-16, -16},{0x17, 0x7A, 0xE4, 0xFF}}},
++	{{{10, 60, -4},0, {-16, -16},{0xB1, 0x58, 0xD2, 0xFF}}},
++	{{{54, 54, 44},0, {-16, -16},{0x14, 0x51, 0x5F, 0xFF}}},
++	{{{86, 15, 52},0, {-16, -16},{0x45, 0x2E, 0x61, 0xFF}}},
++	{{{97, 39, 24},0, {-16, -16},{0x6B, 0x3E, 0x1C, 0xFF}}},
++	{{{4, -3, -33},0, {-16, -16},{0x9A, 0xD6, 0xC1, 0xFF}}},
++	{{{-16, -12, 6},0, {-16, -16},{0x8B, 0xCF, 0xF6, 0xFF}}},
++	{{{-19, 47, -4},0, {-16, -16},{0x83, 0xF6, 0xEB, 0xFF}}},
++	{{{24, -57, -4},0, {-16, -16},{0xA0, 0xAF, 0xEC, 0xFF}}},
++	{{{13, -38, 41},0, {-16, -16},{0x9C, 0xB8, 0x1F, 0xFF}}},
++	{{{-14, 26, 41},0, {-16, -16},{0x86, 0xEB, 0x1E, 0xFF}}},
++};
++
++Gfx mario_000_displaylist_004_mesh_tri_0[] = {
++	gsSPVertex(mario_000_displaylist_004_mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 2, 1, 0),
++	gsSP1Triangle(1, 4, 3, 0),
++	gsSP1Triangle(3, 4, 5, 0),
++	gsSP1Triangle(5, 6, 3, 0),
++	gsSP1Triangle(7, 6, 5, 0),
++	gsSP1Triangle(5, 8, 7, 0),
++	gsSP1Triangle(7, 8, 0, 0),
++	gsSP1Triangle(0, 9, 7, 0),
++	gsSP1Triangle(2, 9, 0, 0),
++	gsSP1Triangle(10, 9, 2, 0),
++	gsSP1Triangle(11, 10, 2, 0),
++	gsSP1Triangle(12, 11, 2, 0),
++	gsSP1Triangle(2, 3, 12, 0),
++	gsSP1Triangle(13, 12, 3, 0),
++	gsSP1Triangle(3, 6, 13, 0),
++	gsSP1Triangle(13, 6, 7, 0),
++	gsSP1Triangle(14, 13, 7, 0),
++	gsSP1Triangle(14, 7, 9, 0),
++	gsSP1Triangle(15, 14, 9, 0),
++	gsSP1Triangle(9, 10, 15, 0),
++	gsSPVertex(mario_000_displaylist_004_mesh_vtx_0 + 16, 14, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 2, 1, 0),
++	gsSP1Triangle(3, 4, 2, 0),
++	gsSP1Triangle(5, 4, 3, 0),
++	gsSP1Triangle(6, 5, 3, 0),
++	gsSP1Triangle(7, 5, 6, 0),
++	gsSP1Triangle(7, 8, 5, 0),
++	gsSP1Triangle(9, 8, 7, 0),
++	gsSP1Triangle(10, 9, 7, 0),
++	gsSP1Triangle(9, 10, 0, 0),
++	gsSP1Triangle(0, 11, 9, 0),
++	gsSP1Triangle(11, 0, 2, 0),
++	gsSP1Triangle(12, 11, 2, 0),
++	gsSP1Triangle(4, 12, 2, 0),
++	gsSP1Triangle(4, 13, 12, 0),
++	gsSP1Triangle(5, 13, 4, 0),
++	gsSP1Triangle(8, 13, 5, 0),
++	gsSP1Triangle(9, 13, 8, 0),
++	gsSP1Triangle(11, 13, 9, 0),
++	gsSP1Triangle(13, 11, 12, 0),
++	gsSPVertex(mario_000_displaylist_004_mesh_vtx_0 + 30, 6, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(4, 1, 3, 0),
++	gsSP1Triangle(5, 1, 4, 0),
++	gsSP1Triangle(2, 1, 5, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_002_switch_option_left_hand_open_mesh_vtx_0[57] = {
++	{{{7, 1, -26},0, {-16, -16},{0x4C, 0x2B, 0xA4, 0xFF}}},
++	{{{-9, 41, 5},0, {-16, -16},{0x32, 0x74, 0xF3, 0xFF}}},
++	{{{3, 36, 6},0, {-16, -16},{0xD7, 0x74, 0xE0, 0xFF}}},
++	{{{-1, 18, 42},0, {-16, -16},{0x3E, 0x42, 0x5A, 0xFF}}},
++	{{{9, 18, 35},0, {-16, -16},{0xEA, 0x29, 0x76, 0xFF}}},
++	{{{26, -24, 28},0, {-16, -16},{0xE, 0xBA, 0x69, 0xFF}}},
++	{{{19, -36, 33},0, {-16, -16},{0x66, 0xE1, 0x45, 0xFF}}},
++	{{{30, -32, -4},0, {-16, -16},{0x37, 0xA3, 0xBD, 0xFF}}},
++	{{{25, -46, -9},0, {-16, -16},{0x77, 0xE1, 0xDF, 0xFF}}},
++	{{{16, 4, -17},0, {-16, -16},{0xFF, 0x11, 0x82, 0xFF}}},
++	{{{30, 13, -30},0, {-16, -16},{0xD6, 0x3, 0x88, 0xFF}}},
++	{{{13, 53, 5},0, {-16, -16},{0xAE, 0x5E, 0xE7, 0xFF}}},
++	{{{20, 33, 48},0, {-16, -16},{0xE2, 0x2B, 0x74, 0xFF}}},
++	{{{32, 2, 43},0, {-16, -16},{0xE2, 0xED, 0x7A, 0xFF}}},
++	{{{46, -35, 37},0, {-16, -16},{0xD8, 0xA4, 0x4E, 0xFF}}},
++	{{{48, -35, -9},0, {-16, -16},{0xF7, 0x99, 0xB7, 0xFF}}},
++	{{{30, 13, -30},0, {-16, -16},{0xD6, 0x3, 0x88, 0xFF}}},
++	{{{86, -19, -13},0, {-16, -16},{0x3D, 0xB9, 0xAB, 0xFF}}},
++	{{{48, -35, -9},0, {-16, -16},{0xF7, 0x99, 0xB7, 0xFF}}},
++	{{{81, 37, -28},0, {-16, -16},{0x11, 0x1E, 0x86, 0xFF}}},
++	{{{76, 88, 9},0, {-16, -16},{0xF2, 0x7E, 0xFE, 0xFF}}},
++	{{{13, 53, 5},0, {-16, -16},{0xAE, 0x5E, 0xE7, 0xFF}}},
++	{{{34, 43, 36},0, {-16, -16},{0xFD, 0x4A, 0x67, 0xFF}}},
++	{{{20, 33, 48},0, {-16, -16},{0xE2, 0x2B, 0x74, 0xFF}}},
++	{{{32, 2, 43},0, {-16, -16},{0xE2, 0xED, 0x7A, 0xFF}}},
++	{{{81, -15, 45},0, {-16, -16},{0x35, 0xC, 0x73, 0xFF}}},
++	{{{46, -35, 37},0, {-16, -16},{0xD8, 0xA4, 0x4E, 0xFF}}},
++	{{{93, -45, 36},0, {-16, -16},{0x4C, 0xA7, 0x31, 0xFF}}},
++	{{{93, -5, 22},0, {-16, -16},{0x68, 0xE6, 0x45, 0xFF}}},
++	{{{136, 28, 31},0, {-16, -16},{0x51, 0xDD, 0x5B, 0xFF}}},
++	{{{143, 31, -1},0, {-16, -16},{0x72, 0xF0, 0xCB, 0xFF}}},
++	{{{125, 71, 9},0, {-16, -16},{0x4E, 0x5B, 0xD4, 0xFF}}},
++	{{{124, 69, 30},0, {-16, -16},{0x38, 0x45, 0x5A, 0xFF}}},
++	{{{125, 71, 9},0, {-16, -16},{0x4E, 0x5B, 0xD4, 0xFF}}},
++	{{{76, 88, 9},0, {-16, -16},{0xF2, 0x7E, 0xFE, 0xFF}}},
++	{{{84, 59, 25},0, {-16, -16},{0xFD, 0x21, 0x7B, 0xFF}}},
++	{{{34, 43, 36},0, {-16, -16},{0xFD, 0x4A, 0x67, 0xFF}}},
++	{{{75, 11, 32},0, {-16, -16},{0x3E, 0x24, 0x69, 0xFF}}},
++	{{{81, -15, 45},0, {-16, -16},{0x35, 0xC, 0x73, 0xFF}}},
++	{{{93, -5, 22},0, {-16, -16},{0x68, 0xE6, 0x45, 0xFF}}},
++	{{{93, -45, 36},0, {-16, -16},{0x4C, 0xA7, 0x31, 0xFF}}},
++	{{{136, 28, 31},0, {-16, -16},{0x51, 0xDD, 0x5B, 0xFF}}},
++	{{{143, 31, -1},0, {-16, -16},{0x72, 0xF0, 0xCB, 0xFF}}},
++	{{{25, -46, -9},0, {-16, -16},{0xB8, 0x9F, 0xDA, 0xFF}}},
++	{{{11, -38, -3},0, {-16, -16},{0xA5, 0xAD, 0xE2, 0xFF}}},
++	{{{7, 1, -26},0, {-16, -16},{0x9E, 0xE7, 0xB3, 0xFF}}},
++	{{{19, -36, 33},0, {-16, -16},{0xB6, 0xA8, 0x37, 0xFF}}},
++	{{{7, -30, 26},0, {-16, -16},{0x9E, 0xBA, 0x2A, 0xFF}}},
++	{{{-1, 18, 42},0, {-16, -16},{0x94, 0xFD, 0x42, 0xFF}}},
++	{{{7, -30, 26},0, {-16, -16},{0x9E, 0xBA, 0x2A, 0xFF}}},
++	{{{19, -36, 33},0, {-16, -16},{0xB6, 0xA8, 0x37, 0xFF}}},
++	{{{-7, 7, 32},0, {-16, -16},{0x8E, 0xE6, 0x31, 0xFF}}},
++	{{{-12, 23, 6},0, {-16, -16},{0x82, 0x0, 0xF0, 0xFF}}},
++	{{{-9, 41, 5},0, {-16, -16},{0x83, 0x14, 0xF4, 0xFF}}},
++	{{{7, 1, -26},0, {-16, -16},{0x9E, 0xE7, 0xB3, 0xFF}}},
++	{{{0, -4, -15},0, {-16, -16},{0x92, 0xDD, 0xCB, 0xFF}}},
++	{{{11, -38, -3},0, {-16, -16},{0xA5, 0xAD, 0xE2, 0xFF}}},
++};
++
++Gfx mario_002_switch_option_left_hand_open_mesh_tri_0[] = {
++	gsSPVertex(mario_002_switch_option_left_hand_open_mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 1, 3, 0),
++	gsSP1Triangle(3, 4, 2, 0),
++	gsSP1Triangle(5, 4, 3, 0),
++	gsSP1Triangle(3, 6, 5, 0),
++	gsSP1Triangle(7, 5, 6, 0),
++	gsSP1Triangle(6, 8, 7, 0),
++	gsSP1Triangle(7, 8, 0, 0),
++	gsSP1Triangle(0, 9, 7, 0),
++	gsSP1Triangle(2, 9, 0, 0),
++	gsSP1Triangle(10, 9, 2, 0),
++	gsSP1Triangle(11, 10, 2, 0),
++	gsSP1Triangle(12, 11, 2, 0),
++	gsSP1Triangle(2, 4, 12, 0),
++	gsSP1Triangle(13, 12, 4, 0),
++	gsSP1Triangle(13, 4, 5, 0),
++	gsSP1Triangle(14, 13, 5, 0),
++	gsSP1Triangle(14, 5, 7, 0),
++	gsSP1Triangle(15, 14, 7, 0),
++	gsSP1Triangle(10, 15, 7, 0),
++	gsSP1Triangle(7, 9, 10, 0),
++	gsSPVertex(mario_002_switch_option_left_hand_open_mesh_vtx_0 + 16, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 3, 1, 0),
++	gsSP1Triangle(4, 3, 0, 0),
++	gsSP1Triangle(5, 4, 0, 0),
++	gsSP1Triangle(4, 5, 6, 0),
++	gsSP1Triangle(7, 6, 5, 0),
++	gsSP1Triangle(6, 7, 8, 0),
++	gsSP1Triangle(6, 8, 9, 0),
++	gsSP1Triangle(9, 8, 10, 0),
++	gsSP1Triangle(9, 10, 11, 0),
++	gsSP1Triangle(11, 10, 2, 0),
++	gsSP1Triangle(2, 1, 11, 0),
++	gsSP1Triangle(1, 12, 11, 0),
++	gsSP1Triangle(1, 13, 12, 0),
++	gsSP1Triangle(1, 14, 13, 0),
++	gsSP1Triangle(3, 14, 1, 0),
++	gsSP1Triangle(3, 15, 14, 0),
++	gsSP1Triangle(3, 4, 15, 0),
++	gsSPVertex(mario_002_switch_option_left_hand_open_mesh_vtx_0 + 32, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 3, 0, 0),
++	gsSP1Triangle(4, 3, 2, 0),
++	gsSP1Triangle(5, 3, 4, 0),
++	gsSP1Triangle(5, 4, 6, 0),
++	gsSP1Triangle(7, 5, 6, 0),
++	gsSP1Triangle(8, 7, 6, 0),
++	gsSP1Triangle(7, 3, 5, 0),
++	gsSP1Triangle(7, 9, 3, 0),
++	gsSP1Triangle(9, 0, 3, 0),
++	gsSP1Triangle(9, 10, 0, 0),
++	gsSP1Triangle(0, 10, 1, 0),
++	gsSP1Triangle(11, 12, 13, 0),
++	gsSP1Triangle(14, 12, 11, 0),
++	gsSP1Triangle(14, 15, 12, 0),
++	gsSPVertex(mario_002_switch_option_left_hand_open_mesh_vtx_0 + 48, 9, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 3, 1, 0),
++	gsSP1Triangle(4, 3, 0, 0),
++	gsSP1Triangle(5, 4, 0, 0),
++	gsSP1Triangle(6, 4, 5, 0),
++	gsSP1Triangle(6, 7, 4, 0),
++	gsSP1Triangle(8, 7, 6, 0),
++	gsSP1Triangle(7, 8, 1, 0),
++	gsSP1Triangle(1, 3, 7, 0),
++	gsSP1Triangle(3, 4, 7, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_004_switch_option_left_hand_peace_mesh_vtx_0[73] = {
++	{{{166, -13, -17},0, {-16, -16},{0x7A, 0x9, 0x23, 0xFF}}},
++	{{{162, 14, -11},0, {-16, -16},{0x7A, 0xB, 0x22, 0xFF}}},
++	{{{153, 7, 24},0, {-16, -16},{0x49, 0xF2, 0x67, 0xFF}}},
++	{{{155, -15, 21},0, {-16, -16},{0x47, 0xF8, 0x69, 0xFF}}},
++	{{{101, -29, 15},0, {-16, -16},{0x42, 0x97, 0x1A, 0xFF}}},
++	{{{98, 10, 29},0, {-16, -16},{0x4F, 0x9, 0x63, 0xFF}}},
++	{{{90, -3, 52},0, {-16, -16},{0x47, 0x3, 0x69, 0xFF}}},
++	{{{84, 48, 24},0, {-16, -16},{0x1A, 0x4F, 0x60, 0xFF}}},
++	{{{139, 53, 25},0, {-16, -16},{0xFC, 0x14, 0x7D, 0xFF}}},
++	{{{123, 72, 21},0, {-16, -16},{0xFC, 0x17, 0x7D, 0xFF}}},
++	{{{46, 49, 45},0, {-16, -16},{0xF7, 0x48, 0x68, 0xFF}}},
++	{{{56, 80, 1},0, {-16, -16},{0x7, 0x7D, 0xEC, 0xFF}}},
++	{{{84, 60, -7},0, {-16, -16},{0x2, 0x70, 0xC4, 0xFF}}},
++	{{{126, 84, -3},0, {-16, -16},{0xC3, 0x67, 0x2B, 0xFF}}},
++	{{{123, 72, 21},0, {-16, -16},{0xC4, 0x67, 0x2C, 0xFF}}},
++	{{{89, 18, -34},0, {-16, -16},{0x7, 0xB, 0x82, 0xFF}}},
++	{{{126, 84, -3},0, {-16, -16},{0x6, 0x33, 0x8C, 0xFF}}},
++	{{{89, 18, -34},0, {-16, -16},{0x7, 0xB, 0x82, 0xFF}}},
++	{{{84, 60, -7},0, {-16, -16},{0x2, 0x70, 0xC4, 0xFF}}},
++	{{{146, 59, -8},0, {-16, -16},{0x17, 0x2A, 0x8A, 0xFF}}},
++	{{{56, 80, 1},0, {-16, -16},{0x7, 0x7D, 0xEC, 0xFF}}},
++	{{{33, 7, -37},0, {-16, -16},{0xDF, 0xF9, 0x86, 0xFF}}},
++	{{{94, -22, -18},0, {-16, -16},{0x1A, 0xA8, 0xA9, 0xFF}}},
++	{{{166, -13, -17},0, {-16, -16},{0x1E, 0x7, 0x85, 0xFF}}},
++	{{{162, 14, -11},0, {-16, -16},{0x27, 0x20, 0x8B, 0xFF}}},
++	{{{56, -47, -5},0, {-16, -16},{0x3, 0x8A, 0xD1, 0xFF}}},
++	{{{32, -43, 0},0, {-16, -16},{0x34, 0x95, 0xD3, 0xFF}}},
++	{{{45, -29, 52},0, {-16, -16},{0xE7, 0xBC, 0x69, 0xFF}}},
++	{{{88, -34, 39},0, {-16, -16},{0x3D, 0xA6, 0x41, 0xFF}}},
++	{{{101, -29, 15},0, {-16, -16},{0x42, 0x97, 0x1A, 0xFF}}},
++	{{{155, -15, 21},0, {-16, -16},{0x15, 0x83, 0xF6, 0xFF}}},
++	{{{166, -13, -17},0, {-16, -16},{0x10, 0x82, 0xFE, 0xFF}}},
++	{{{88, -34, 39},0, {-16, -16},{0x3D, 0xA6, 0x41, 0xFF}}},
++	{{{101, -29, 15},0, {-16, -16},{0x42, 0x97, 0x1A, 0xFF}}},
++	{{{90, -3, 52},0, {-16, -16},{0x47, 0x3, 0x69, 0xFF}}},
++	{{{45, -29, 52},0, {-16, -16},{0xE7, 0xBC, 0x69, 0xFF}}},
++	{{{46, 49, 45},0, {-16, -16},{0xF7, 0x48, 0x68, 0xFF}}},
++	{{{18, 30, 41},0, {-16, -16},{0xC9, 0x2E, 0x69, 0xFF}}},
++	{{{8, 58, -2},0, {-16, -16},{0xAF, 0x5D, 0xE2, 0xFF}}},
++	{{{56, 80, 1},0, {-16, -16},{0x7, 0x7D, 0xEC, 0xFF}}},
++	{{{33, 7, -37},0, {-16, -16},{0xDF, 0xF9, 0x86, 0xFF}}},
++	{{{-4, 38, 0},0, {-16, -16},{0xD9, 0x72, 0xD8, 0xFF}}},
++	{{{14, -1, -22},0, {-16, -16},{0x4, 0x4, 0x81, 0xFF}}},
++	{{{32, -43, 0},0, {-16, -16},{0x34, 0x95, 0xD3, 0xFF}}},
++	{{{2, -5, -33},0, {-16, -16},{0xFA, 0x3, 0x81, 0xFF}}},
++	{{{24, -59, -3},0, {-16, -16},{0x27, 0x8D, 0xDA, 0xFF}}},
++	{{{23, -29, 36},0, {-16, -16},{0x17, 0xC5, 0x6E, 0xFF}}},
++	{{{0, 21, 37},0, {-16, -16},{0x5, 0x44, 0x6B, 0xFF}}},
++	{{{-15, 23, 43},0, {-16, -16},{0xD4, 0x3C, 0x67, 0xFF}}},
++	{{{0, 21, 37},0, {-16, -16},{0x5, 0x44, 0x6B, 0xFF}}},
++	{{{-4, 38, 0},0, {-16, -16},{0xD9, 0x72, 0xD8, 0xFF}}},
++	{{{15, -39, 42},0, {-16, -16},{0x13, 0xBA, 0x68, 0xFF}}},
++	{{{0, -35, 32},0, {-16, -16},{0xA4, 0xB8, 0x32, 0xFF}}},
++	{{{-21, 9, 33},0, {-16, -16},{0x8D, 0xE6, 0x30, 0xFF}}},
++	{{{-22, 43, -3},0, {-16, -16},{0xC2, 0x68, 0xD9, 0xFF}}},
++	{{{14, -1, -22},0, {-16, -16},{0x4, 0x4, 0x81, 0xFF}}},
++	{{{2, -5, -33},0, {-16, -16},{0xFA, 0x3, 0x81, 0xFF}}},
++	{{{-25, 24, 0},0, {-16, -16},{0x84, 0xFB, 0xE5, 0xFF}}},
++	{{{-8, -12, -20},0, {-16, -16},{0x9B, 0xD0, 0xC4, 0xFF}}},
++	{{{24, -59, -3},0, {-16, -16},{0x27, 0x8D, 0xDA, 0xFF}}},
++	{{{6, -49, 0},0, {-16, -16},{0xAC, 0xA5, 0xE6, 0xFF}}},
++	{{{23, -29, 36},0, {-16, -16},{0x17, 0xC5, 0x6E, 0xFF}}},
++	{{{146, 59, -8},0, {-16, -16},{0x5E, 0x4B, 0x29, 0xFF}}},
++	{{{126, 84, -3},0, {-16, -16},{0x60, 0x44, 0x2F, 0xFF}}},
++	{{{123, 72, 21},0, {-16, -16},{0x5D, 0x4C, 0x28, 0xFF}}},
++	{{{139, 53, 25},0, {-16, -16},{0x5A, 0x53, 0x22, 0xFF}}},
++	{{{105, 17, 3},0, {-16, -16},{0x77, 0x2D, 0x3, 0xFF}}},
++	{{{98, 10, 29},0, {-16, -16},{0x6E, 0x30, 0x2B, 0xFF}}},
++	{{{153, 7, 24},0, {-16, -16},{0xD, 0x7B, 0x1E, 0xFF}}},
++	{{{139, 53, 25},0, {-16, -16},{0x5B, 0xA8, 0x3, 0xFF}}},
++	{{{146, 59, -8},0, {-16, -16},{0x59, 0xA6, 0xF5, 0xFF}}},
++	{{{89, 18, -34},0, {-16, -16},{0x70, 0x25, 0xD0, 0xFF}}},
++	{{{162, 14, -11},0, {-16, -16},{0xB, 0x7D, 0x13, 0xFF}}},
++};
++
++Gfx mario_004_switch_option_left_hand_peace_mesh_tri_0[] = {
++	gsSPVertex(mario_004_switch_option_left_hand_peace_mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 2, 3, 0),
++	gsSP1Triangle(4, 3, 2, 0),
++	gsSP1Triangle(4, 2, 5, 0),
++	gsSP1Triangle(4, 5, 6, 0),
++	gsSP1Triangle(5, 7, 6, 0),
++	gsSP1Triangle(7, 5, 8, 0),
++	gsSP1Triangle(8, 9, 7, 0),
++	gsSP1Triangle(6, 7, 10, 0),
++	gsSP1Triangle(10, 7, 11, 0),
++	gsSP1Triangle(11, 7, 12, 0),
++	gsSP1Triangle(12, 7, 13, 0),
++	gsSP1Triangle(7, 14, 13, 0),
++	gsSP1Triangle(11, 12, 15, 0),
++	gsSPVertex(mario_004_switch_option_left_hand_peace_mesh_vtx_0 + 16, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(1, 0, 3, 0),
++	gsSP1Triangle(4, 1, 5, 0),
++	gsSP1Triangle(5, 1, 6, 0),
++	gsSP1Triangle(7, 6, 1, 0),
++	gsSP1Triangle(1, 8, 7, 0),
++	gsSP1Triangle(9, 5, 6, 0),
++	gsSP1Triangle(5, 9, 10, 0),
++	gsSP1Triangle(9, 11, 10, 0),
++	gsSP1Triangle(11, 9, 12, 0),
++	gsSP1Triangle(13, 12, 9, 0),
++	gsSP1Triangle(13, 9, 6, 0),
++	gsSP1Triangle(6, 14, 13, 0),
++	gsSP1Triangle(14, 6, 15, 0),
++	gsSPVertex(mario_004_switch_option_left_hand_peace_mesh_vtx_0 + 32, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 2, 3, 0),
++	gsSP1Triangle(3, 2, 4, 0),
++	gsSP1Triangle(3, 4, 5, 0),
++	gsSP1Triangle(4, 6, 5, 0),
++	gsSP1Triangle(4, 7, 6, 0),
++	gsSP1Triangle(6, 7, 8, 0),
++	gsSP1Triangle(6, 8, 9, 0),
++	gsSP1Triangle(8, 10, 9, 0),
++	gsSP1Triangle(11, 10, 8, 0),
++	gsSP1Triangle(12, 10, 11, 0),
++	gsSP1Triangle(12, 11, 13, 0),
++	gsSP1Triangle(13, 11, 14, 0),
++	gsSP1Triangle(3, 14, 11, 0),
++	gsSP1Triangle(14, 3, 5, 0),
++	gsSP1Triangle(15, 14, 5, 0),
++	gsSP1Triangle(9, 15, 5, 0),
++	gsSP1Triangle(5, 6, 9, 0),
++	gsSPVertex(mario_004_switch_option_left_hand_peace_mesh_vtx_0 + 48, 14, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(0, 4, 3, 0),
++	gsSP1Triangle(0, 5, 4, 0),
++	gsSP1Triangle(6, 5, 0, 0),
++	gsSP1Triangle(0, 2, 6, 0),
++	gsSP1Triangle(6, 2, 7, 0),
++	gsSP1Triangle(6, 7, 8, 0),
++	gsSP1Triangle(8, 9, 6, 0),
++	gsSP1Triangle(8, 10, 9, 0),
++	gsSP1Triangle(11, 10, 8, 0),
++	gsSP1Triangle(11, 12, 10, 0),
++	gsSP1Triangle(3, 12, 11, 0),
++	gsSP1Triangle(11, 13, 3, 0),
++	gsSP1Triangle(3, 13, 1, 0),
++	gsSP1Triangle(3, 4, 12, 0),
++	gsSP1Triangle(10, 12, 4, 0),
++	gsSP1Triangle(4, 5, 10, 0),
++	gsSP1Triangle(5, 9, 10, 0),
++	gsSP1Triangle(6, 9, 5, 0),
++	gsSPVertex(mario_004_switch_option_left_hand_peace_mesh_vtx_0 + 62, 11, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 3, 0, 0),
++	gsSP1Triangle(4, 5, 6, 0),
++	gsSP1Triangle(7, 5, 4, 0),
++	gsSP1Triangle(7, 4, 8, 0),
++	gsSP1Triangle(8, 4, 9, 0),
++	gsSP1Triangle(10, 9, 4, 0),
++	gsSP1Triangle(4, 6, 10, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_005_switch_option_left_hand_cap_mesh_vtx_0[59] = {
++	{{{131, 47, -1},0, {1088, 212},{0xE3, 0x5C, 0xAE, 0xFF}}},
++	{{{107, -19, -33},0, {458, 16},{0xCE, 0xF, 0x8C, 0xFF}}},
++	{{{78, 11, 40},0, {756, 802},{0xD2, 0x41, 0x9D, 0xFF}}},
++	{{{70, -52, 35},0, {180, 784},{0xC6, 0xDB, 0x95, 0xFF}}},
++	{{{114, -92, -11},0, {-164, 172},{0xD0, 0xBA, 0xA2, 0xFF}}},
++	{{{192, 11, -2},0, {-16, -16},{0x52, 0x22, 0xA6, 0xFF}}},
++	{{{107, -19, -33},0, {-16, -16},{0xCE, 0xF, 0x8C, 0xFF}}},
++	{{{131, 47, -1},0, {-16, -16},{0xE3, 0x5C, 0xAE, 0xFF}}},
++	{{{182, -72, -8},0, {-16, -16},{0x4A, 0xD8, 0xA0, 0xFF}}},
++	{{{246, 29, 128},0, {-16, -16},{0x71, 0x29, 0xD6, 0xFF}}},
++	{{{183, 100, 86},0, {-16, -16},{0x14, 0x7B, 0xE9, 0xFF}}},
++	{{{129, 65, 103},0, {-16, -16},{0xA4, 0x4D, 0x2A, 0xFF}}},
++	{{{78, 11, 40},0, {-16, -16},{0xD2, 0x41, 0x9D, 0xFF}}},
++	{{{45, 49, 53},0, {-16, -16},{0x18, 0x3B, 0x92, 0xFF}}},
++	{{{18, -13, 33},0, {-16, -16},{0x1, 0xA, 0x81, 0xFF}}},
++	{{{70, -52, 35},0, {-16, -16},{0xC6, 0xDB, 0x95, 0xFF}}},
++	{{{29, -82, 43},0, {-16, -16},{0xB, 0xD2, 0x8A, 0xFF}}},
++	{{{18, -13, 33},0, {-16, -16},{0x1, 0xA, 0x81, 0xFF}}},
++	{{{70, -52, 35},0, {-16, -16},{0xC6, 0xDB, 0x95, 0xFF}}},
++	{{{106, -124, 90},0, {-16, -16},{0x98, 0xBB, 0x17, 0xFF}}},
++	{{{114, -92, -11},0, {-16, -16},{0xD0, 0xBA, 0xA2, 0xFF}}},
++	{{{151, -168, 67},0, {-16, -16},{0xF7, 0x88, 0xD8, 0xFF}}},
++	{{{182, -72, -8},0, {-16, -16},{0x4A, 0xD8, 0xA0, 0xFF}}},
++	{{{107, -19, -33},0, {-16, -16},{0xCE, 0xF, 0x8C, 0xFF}}},
++	{{{228, -121, 117},0, {-16, -16},{0x64, 0xC4, 0xCE, 0xFF}}},
++	{{{181, -167, 138},0, {-16, -16},{0x8, 0x84, 0x1B, 0xFF}}},
++	{{{273, -105, 188},0, {-16, -16},{0x6D, 0xC5, 0x1E, 0xFF}}},
++	{{{285, -6, 196},0, {-16, -16},{0x76, 0x1B, 0x26, 0xFF}}},
++	{{{246, 29, 128},0, {-16, -16},{0x71, 0x29, 0xD6, 0xFF}}},
++	{{{211, 81, 156},0, {-16, -16},{0x26, 0x71, 0x2C, 0xFF}}},
++	{{{228, 1, 228},0, {-16, -16},{0xFB, 0x22, 0x7A, 0xFF}}},
++	{{{192, 42, 190},0, {-16, -16},{0xC4, 0x35, 0x62, 0xFF}}},
++	{{{192, 42, 190},0, {-16, -16},{0xC4, 0x35, 0x62, 0xFF}}},
++	{{{211, 81, 156},0, {-16, -16},{0x26, 0x71, 0x2C, 0xFF}}},
++	{{{160, 65, 148},0, {-16, -16},{0xB0, 0x42, 0x48, 0xFF}}},
++	{{{183, 100, 86},0, {-16, -16},{0x14, 0x7B, 0xE9, 0xFF}}},
++	{{{246, 29, 128},0, {-16, -16},{0x71, 0x29, 0xD6, 0xFF}}},
++	{{{129, 65, 103},0, {-16, -16},{0xA4, 0x4D, 0x2A, 0xFF}}},
++	{{{137, -137, 134},0, {-16, -16},{0xA3, 0xC8, 0x41, 0xFF}}},
++	{{{73, 11, 60},0, {-16, -16},{0xBC, 0xFA, 0x6B, 0xFF}}},
++	{{{45, 49, 53},0, {-16, -16},{0xC8, 0xEC, 0x70, 0xFF}}},
++	{{{18, -13, 33},0, {-16, -16},{0xCC, 0xFD, 0x74, 0xFF}}},
++	{{{65, -53, 55},0, {-16, -16},{0xBB, 0x8, 0x6A, 0xFF}}},
++	{{{29, -82, 43},0, {-16, -16},{0xCC, 0x10, 0x73, 0xFF}}},
++	{{{106, -124, 90},0, {-16, -16},{0x98, 0xBB, 0x17, 0xFF}}},
++	{{{151, -168, 67},0, {-16, -16},{0xF7, 0x88, 0xD8, 0xFF}}},
++	{{{181, -167, 138},0, {-16, -16},{0x8, 0x84, 0x1B, 0xFF}}},
++	{{{171, -129, 178},0, {-16, -16},{0xB7, 0xCD, 0x5A, 0xFF}}},
++	{{{171, -129, 178},0, {-16, -16},{0xB7, 0xCD, 0x5A, 0xFF}}},
++	{{{181, -167, 138},0, {-16, -16},{0x8, 0x84, 0x1B, 0xFF}}},
++	{{{216, -104, 220},0, {-16, -16},{0xF4, 0xCE, 0x74, 0xFF}}},
++	{{{273, -105, 188},0, {-16, -16},{0x6D, 0xC5, 0x1E, 0xFF}}},
++	{{{228, 1, 228},0, {-16, -16},{0xFB, 0x22, 0x7A, 0xFF}}},
++	{{{285, -6, 196},0, {-16, -16},{0x76, 0x1B, 0x26, 0xFF}}},
++	{{{192, 42, 190},0, {-16, -16},{0xC4, 0x35, 0x62, 0xFF}}},
++	{{{137, -137, 134},0, {-16, -16},{0xA3, 0xC8, 0x41, 0xFF}}},
++	{{{160, 65, 148},0, {-16, -16},{0xB0, 0x42, 0x48, 0xFF}}},
++	{{{73, 11, 60},0, {-16, -16},{0xBC, 0xFA, 0x6B, 0xFF}}},
++	{{{65, -53, 55},0, {-16, -16},{0xBB, 0x8, 0x6A, 0xFF}}},
++};
++
++Gfx mario_005_switch_option_left_hand_cap_mesh_tri_0[] = {
++	gsSPVertex(mario_005_switch_option_left_hand_cap_mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(1, 3, 2, 0),
++	gsSP1Triangle(1, 4, 3, 0),
++	gsSP1Triangle(5, 6, 7, 0),
++	gsSP1Triangle(8, 6, 5, 0),
++	gsSP1Triangle(8, 5, 9, 0),
++	gsSP1Triangle(5, 10, 9, 0),
++	gsSP1Triangle(7, 10, 5, 0),
++	gsSP1Triangle(10, 7, 11, 0),
++	gsSP1Triangle(12, 11, 7, 0),
++	gsSP1Triangle(12, 13, 11, 0),
++	gsSP1Triangle(12, 14, 13, 0),
++	gsSP1Triangle(15, 14, 12, 0),
++	gsSPVertex(mario_005_switch_option_left_hand_cap_mesh_vtx_0 + 16, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 2, 3, 0),
++	gsSP1Triangle(4, 3, 2, 0),
++	gsSP1Triangle(3, 4, 5, 0),
++	gsSP1Triangle(6, 5, 4, 0),
++	gsSP1Triangle(4, 7, 6, 0),
++	gsSP1Triangle(8, 5, 6, 0),
++	gsSP1Triangle(5, 8, 9, 0),
++	gsSP1Triangle(8, 10, 9, 0),
++	gsSP1Triangle(11, 10, 8, 0),
++	gsSP1Triangle(8, 12, 11, 0),
++	gsSP1Triangle(8, 6, 12, 0),
++	gsSP1Triangle(13, 11, 12, 0),
++	gsSP1Triangle(14, 11, 13, 0),
++	gsSP1Triangle(14, 13, 15, 0),
++	gsSPVertex(mario_005_switch_option_left_hand_cap_mesh_vtx_0 + 32, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 1, 3, 0),
++	gsSP1Triangle(1, 4, 3, 0),
++	gsSP1Triangle(3, 5, 2, 0),
++	gsSP1Triangle(2, 5, 6, 0),
++	gsSP1Triangle(5, 7, 6, 0),
++	gsSP1Triangle(5, 8, 7, 0),
++	gsSP1Triangle(8, 9, 7, 0),
++	gsSP1Triangle(10, 7, 9, 0),
++	gsSP1Triangle(10, 9, 11, 0),
++	gsSP1Triangle(10, 11, 12, 0),
++	gsSP1Triangle(10, 12, 6, 0),
++	gsSP1Triangle(12, 13, 6, 0),
++	gsSP1Triangle(13, 14, 6, 0),
++	gsSP1Triangle(6, 14, 15, 0),
++	gsSPVertex(mario_005_switch_option_left_hand_cap_mesh_vtx_0 + 48, 11, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(1, 3, 2, 0),
++	gsSP1Triangle(2, 3, 4, 0),
++	gsSP1Triangle(3, 5, 4, 0),
++	gsSP1Triangle(2, 4, 6, 0),
++	gsSP1Triangle(6, 0, 2, 0),
++	gsSP1Triangle(6, 7, 0, 0),
++	gsSP1Triangle(6, 8, 7, 0),
++	gsSP1Triangle(9, 10, 7, 0),
++	gsSPEndDisplayList(),
++};Vtx mario_005_switch_option_left_hand_cap_mesh_vtx_1[36] = {
++	{{{4, -3, -32},0, {-16, -16},{0x48, 0x20, 0x9D, 0xFF}}},
++	{{{-19, 47, -4},0, {-16, -16},{0x2F, 0x74, 0xE8, 0xFF}}},
++	{{{-2, 41, 0},0, {-16, -16},{0xDD, 0x73, 0xD7, 0xFF}}},
++	{{{-13, 26, 41},0, {-16, -16},{0x2E, 0x50, 0x57, 0xFF}}},
++	{{{1, 24, 35},0, {-16, -16},{0xF8, 0x3F, 0x6E, 0xFF}}},
++	{{{23, -25, 35},0, {-16, -16},{0x10, 0xC1, 0x6D, 0xFF}}},
++	{{{13, -37, 41},0, {-16, -16},{0x57, 0xE5, 0x59, 0xFF}}},
++	{{{31, -39, 0},0, {-16, -16},{0x3C, 0x98, 0xD7, 0xFF}}},
++	{{{24, -55, -4},0, {-16, -16},{0x74, 0xD2, 0xE9, 0xFF}}},
++	{{{16, 1, -22},0, {-16, -16},{0x4, 0xFF, 0x81, 0xFF}}},
++	{{{35, 9, -36},0, {-16, -16},{0xE6, 0xF5, 0x84, 0xFF}}},
++	{{{11, 60, -3},0, {-16, -16},{0xB1, 0x59, 0xD2, 0xFF}}},
++	{{{29, 62, 34},0, {-16, -16},{0xCE, 0x59, 0x4B, 0xFF}}},
++	{{{29, 7, 48},0, {-16, -16},{0xC1, 0xF9, 0x6E, 0xFF}}},
++	{{{75, -32, 65},0, {-16, -16},{0x19, 0xB2, 0x61, 0xFF}}},
++	{{{55, -43, -3},0, {-16, -16},{0x7, 0x8C, 0xCD, 0xFF}}},
++	{{{35, 9, -36},0, {-16, -16},{0xE6, 0xF5, 0x84, 0xFF}}},
++	{{{103, -25, 1},0, {-16, -16},{0x65, 0xC0, 0xD6, 0xFF}}},
++	{{{55, -43, -3},0, {-16, -16},{0x7, 0x8C, 0xCD, 0xFF}}},
++	{{{85, 30, -32},0, {-16, -16},{0x45, 0x1C, 0x99, 0xFF}}},
++	{{{58, 81, 0},0, {-16, -16},{0x18, 0x79, 0xE3, 0xFF}}},
++	{{{11, 60, -3},0, {-16, -16},{0xB1, 0x59, 0xD2, 0xFF}}},
++	{{{29, 62, 34},0, {-16, -16},{0xCE, 0x59, 0x4B, 0xFF}}},
++	{{{54, 54, 44},0, {-16, -16},{0x15, 0x51, 0x5F, 0xFF}}},
++	{{{56, 11, 65},0, {-16, -16},{0xF0, 0x13, 0x7D, 0xFF}}},
++	{{{29, 7, 48},0, {-16, -16},{0xC1, 0xF9, 0x6E, 0xFF}}},
++	{{{75, -32, 65},0, {-16, -16},{0x19, 0xB2, 0x61, 0xFF}}},
++	{{{95, -8, 52},0, {-16, -16},{0x67, 0xF9, 0x4A, 0xFF}}},
++	{{{96, 39, 24},0, {-16, -16},{0x6C, 0x3D, 0x1C, 0xFF}}},
++	{{{85, 15, 52},0, {-16, -16},{0x44, 0x2D, 0x61, 0xFF}}},
++	{{{13, -37, 41},0, {-16, -16},{0x9B, 0xB8, 0x1E, 0xFF}}},
++	{{{-15, -12, 7},0, {-16, -16},{0x8B, 0xCF, 0xF8, 0xFF}}},
++	{{{24, -55, -4},0, {-16, -16},{0xA1, 0xAF, 0xEC, 0xFF}}},
++	{{{-13, 26, 41},0, {-16, -16},{0x87, 0xEA, 0x1F, 0xFF}}},
++	{{{-19, 47, -4},0, {-16, -16},{0x83, 0xF4, 0xED, 0xFF}}},
++	{{{4, -3, -32},0, {-16, -16},{0x99, 0xD5, 0xC3, 0xFF}}},
++};
++
++Gfx mario_005_switch_option_left_hand_cap_mesh_tri_1[] = {
++	gsSPVertex(mario_005_switch_option_left_hand_cap_mesh_vtx_1 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 1, 3, 0),
++	gsSP1Triangle(3, 4, 2, 0),
++	gsSP1Triangle(5, 4, 3, 0),
++	gsSP1Triangle(3, 6, 5, 0),
++	gsSP1Triangle(7, 5, 6, 0),
++	gsSP1Triangle(6, 8, 7, 0),
++	gsSP1Triangle(7, 8, 0, 0),
++	gsSP1Triangle(0, 9, 7, 0),
++	gsSP1Triangle(2, 9, 0, 0),
++	gsSP1Triangle(10, 9, 2, 0),
++	gsSP1Triangle(11, 10, 2, 0),
++	gsSP1Triangle(11, 2, 4, 0),
++	gsSP1Triangle(12, 11, 4, 0),
++	gsSP1Triangle(4, 13, 12, 0),
++	gsSP1Triangle(13, 4, 5, 0),
++	gsSP1Triangle(14, 13, 5, 0),
++	gsSP1Triangle(15, 14, 5, 0),
++	gsSP1Triangle(5, 7, 15, 0),
++	gsSP1Triangle(10, 15, 7, 0),
++	gsSP1Triangle(7, 9, 10, 0),
++	gsSPVertex(mario_005_switch_option_left_hand_cap_mesh_vtx_1 + 16, 14, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 3, 1, 0),
++	gsSP1Triangle(4, 3, 0, 0),
++	gsSP1Triangle(5, 4, 0, 0),
++	gsSP1Triangle(4, 5, 6, 0),
++	gsSP1Triangle(6, 7, 4, 0),
++	gsSP1Triangle(7, 6, 8, 0),
++	gsSP1Triangle(6, 9, 8, 0),
++	gsSP1Triangle(10, 8, 9, 0),
++	gsSP1Triangle(10, 11, 8, 0),
++	gsSP1Triangle(1, 11, 10, 0),
++	gsSP1Triangle(2, 1, 10, 0),
++	gsSP1Triangle(1, 12, 11, 0),
++	gsSP1Triangle(3, 12, 1, 0),
++	gsSP1Triangle(4, 12, 3, 0),
++	gsSP1Triangle(7, 12, 4, 0),
++	gsSP1Triangle(12, 7, 13, 0),
++	gsSP1Triangle(13, 7, 8, 0),
++	gsSP1Triangle(11, 13, 8, 0),
++	gsSP1Triangle(11, 12, 13, 0),
++	gsSPVertex(mario_005_switch_option_left_hand_cap_mesh_vtx_1 + 30, 6, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(4, 1, 3, 0),
++	gsSP1Triangle(5, 1, 4, 0),
++	gsSP1Triangle(2, 1, 5, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_006_switch_option_left_hand_wing_cap_mesh_vtx_0[59] = {
++	{{{131, 47, -1},0, {1088, 212},{0xE3, 0x5C, 0xAE, 0xFF}}},
++	{{{107, -19, -33},0, {458, 16},{0xCE, 0xF, 0x8C, 0xFF}}},
++	{{{78, 11, 40},0, {756, 802},{0xD2, 0x41, 0x9D, 0xFF}}},
++	{{{70, -52, 35},0, {180, 784},{0xC6, 0xDB, 0x95, 0xFF}}},
++	{{{114, -92, -11},0, {-164, 172},{0xD0, 0xBA, 0xA2, 0xFF}}},
++	{{{192, 11, -2},0, {-16, -16},{0x52, 0x22, 0xA6, 0xFF}}},
++	{{{107, -19, -33},0, {-16, -16},{0xCE, 0xF, 0x8C, 0xFF}}},
++	{{{131, 47, -1},0, {-16, -16},{0xE3, 0x5C, 0xAE, 0xFF}}},
++	{{{182, -72, -8},0, {-16, -16},{0x4A, 0xD8, 0xA0, 0xFF}}},
++	{{{246, 29, 128},0, {-16, -16},{0x71, 0x29, 0xD6, 0xFF}}},
++	{{{183, 100, 86},0, {-16, -16},{0x14, 0x7B, 0xE9, 0xFF}}},
++	{{{129, 65, 103},0, {-16, -16},{0xA4, 0x4D, 0x2A, 0xFF}}},
++	{{{78, 11, 40},0, {-16, -16},{0xD2, 0x41, 0x9D, 0xFF}}},
++	{{{45, 49, 53},0, {-16, -16},{0x18, 0x3B, 0x92, 0xFF}}},
++	{{{18, -13, 33},0, {-16, -16},{0x1, 0xA, 0x81, 0xFF}}},
++	{{{70, -52, 35},0, {-16, -16},{0xC6, 0xDB, 0x95, 0xFF}}},
++	{{{29, -82, 43},0, {-16, -16},{0xB, 0xD2, 0x8A, 0xFF}}},
++	{{{18, -13, 33},0, {-16, -16},{0x1, 0xA, 0x81, 0xFF}}},
++	{{{70, -52, 35},0, {-16, -16},{0xC6, 0xDB, 0x95, 0xFF}}},
++	{{{106, -124, 90},0, {-16, -16},{0x98, 0xBB, 0x17, 0xFF}}},
++	{{{114, -92, -11},0, {-16, -16},{0xD0, 0xBA, 0xA2, 0xFF}}},
++	{{{151, -168, 67},0, {-16, -16},{0xF7, 0x88, 0xD8, 0xFF}}},
++	{{{182, -72, -8},0, {-16, -16},{0x4A, 0xD8, 0xA0, 0xFF}}},
++	{{{107, -19, -33},0, {-16, -16},{0xCE, 0xF, 0x8C, 0xFF}}},
++	{{{228, -121, 117},0, {-16, -16},{0x64, 0xC4, 0xCE, 0xFF}}},
++	{{{181, -167, 138},0, {-16, -16},{0x8, 0x84, 0x1B, 0xFF}}},
++	{{{273, -105, 188},0, {-16, -16},{0x6D, 0xC5, 0x1E, 0xFF}}},
++	{{{285, -6, 196},0, {-16, -16},{0x76, 0x1B, 0x26, 0xFF}}},
++	{{{246, 29, 128},0, {-16, -16},{0x71, 0x29, 0xD6, 0xFF}}},
++	{{{211, 81, 156},0, {-16, -16},{0x26, 0x71, 0x2C, 0xFF}}},
++	{{{228, 1, 228},0, {-16, -16},{0xFB, 0x22, 0x7A, 0xFF}}},
++	{{{192, 42, 190},0, {-16, -16},{0xC4, 0x35, 0x62, 0xFF}}},
++	{{{192, 42, 190},0, {-16, -16},{0xC4, 0x35, 0x62, 0xFF}}},
++	{{{211, 81, 156},0, {-16, -16},{0x26, 0x71, 0x2C, 0xFF}}},
++	{{{160, 65, 148},0, {-16, -16},{0xB0, 0x42, 0x48, 0xFF}}},
++	{{{183, 100, 86},0, {-16, -16},{0x14, 0x7B, 0xE9, 0xFF}}},
++	{{{246, 29, 128},0, {-16, -16},{0x71, 0x29, 0xD6, 0xFF}}},
++	{{{129, 65, 103},0, {-16, -16},{0xA4, 0x4D, 0x2A, 0xFF}}},
++	{{{137, -137, 134},0, {-16, -16},{0xA3, 0xC8, 0x41, 0xFF}}},
++	{{{73, 11, 60},0, {-16, -16},{0xBC, 0xFA, 0x6B, 0xFF}}},
++	{{{45, 49, 53},0, {-16, -16},{0xC8, 0xEC, 0x70, 0xFF}}},
++	{{{18, -13, 33},0, {-16, -16},{0xCC, 0xFD, 0x74, 0xFF}}},
++	{{{65, -53, 55},0, {-16, -16},{0xBB, 0x8, 0x6A, 0xFF}}},
++	{{{29, -82, 43},0, {-16, -16},{0xCC, 0x10, 0x73, 0xFF}}},
++	{{{106, -124, 90},0, {-16, -16},{0x98, 0xBB, 0x17, 0xFF}}},
++	{{{151, -168, 67},0, {-16, -16},{0xF7, 0x88, 0xD8, 0xFF}}},
++	{{{181, -167, 138},0, {-16, -16},{0x8, 0x84, 0x1B, 0xFF}}},
++	{{{171, -129, 178},0, {-16, -16},{0xB7, 0xCD, 0x5A, 0xFF}}},
++	{{{171, -129, 178},0, {-16, -16},{0xB7, 0xCD, 0x5A, 0xFF}}},
++	{{{181, -167, 138},0, {-16, -16},{0x8, 0x84, 0x1B, 0xFF}}},
++	{{{216, -104, 220},0, {-16, -16},{0xF4, 0xCE, 0x74, 0xFF}}},
++	{{{273, -105, 188},0, {-16, -16},{0x6D, 0xC5, 0x1E, 0xFF}}},
++	{{{228, 1, 228},0, {-16, -16},{0xFB, 0x22, 0x7A, 0xFF}}},
++	{{{285, -6, 196},0, {-16, -16},{0x76, 0x1B, 0x26, 0xFF}}},
++	{{{192, 42, 190},0, {-16, -16},{0xC4, 0x35, 0x62, 0xFF}}},
++	{{{137, -137, 134},0, {-16, -16},{0xA3, 0xC8, 0x41, 0xFF}}},
++	{{{160, 65, 148},0, {-16, -16},{0xB0, 0x42, 0x48, 0xFF}}},
++	{{{73, 11, 60},0, {-16, -16},{0xBC, 0xFA, 0x6B, 0xFF}}},
++	{{{65, -53, 55},0, {-16, -16},{0xBB, 0x8, 0x6A, 0xFF}}},
++};
++
++Gfx mario_006_switch_option_left_hand_wing_cap_mesh_tri_0[] = {
++	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(1, 3, 2, 0),
++	gsSP1Triangle(1, 4, 3, 0),
++	gsSP1Triangle(5, 6, 7, 0),
++	gsSP1Triangle(8, 6, 5, 0),
++	gsSP1Triangle(8, 5, 9, 0),
++	gsSP1Triangle(5, 10, 9, 0),
++	gsSP1Triangle(7, 10, 5, 0),
++	gsSP1Triangle(10, 7, 11, 0),
++	gsSP1Triangle(12, 11, 7, 0),
++	gsSP1Triangle(12, 13, 11, 0),
++	gsSP1Triangle(12, 14, 13, 0),
++	gsSP1Triangle(15, 14, 12, 0),
++	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_mesh_vtx_0 + 16, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 2, 3, 0),
++	gsSP1Triangle(4, 3, 2, 0),
++	gsSP1Triangle(3, 4, 5, 0),
++	gsSP1Triangle(6, 5, 4, 0),
++	gsSP1Triangle(4, 7, 6, 0),
++	gsSP1Triangle(8, 5, 6, 0),
++	gsSP1Triangle(5, 8, 9, 0),
++	gsSP1Triangle(8, 10, 9, 0),
++	gsSP1Triangle(11, 10, 8, 0),
++	gsSP1Triangle(8, 12, 11, 0),
++	gsSP1Triangle(8, 6, 12, 0),
++	gsSP1Triangle(13, 11, 12, 0),
++	gsSP1Triangle(14, 11, 13, 0),
++	gsSP1Triangle(14, 13, 15, 0),
++	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_mesh_vtx_0 + 32, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 1, 3, 0),
++	gsSP1Triangle(1, 4, 3, 0),
++	gsSP1Triangle(3, 5, 2, 0),
++	gsSP1Triangle(2, 5, 6, 0),
++	gsSP1Triangle(5, 7, 6, 0),
++	gsSP1Triangle(5, 8, 7, 0),
++	gsSP1Triangle(8, 9, 7, 0),
++	gsSP1Triangle(10, 7, 9, 0),
++	gsSP1Triangle(10, 9, 11, 0),
++	gsSP1Triangle(10, 11, 12, 0),
++	gsSP1Triangle(10, 12, 6, 0),
++	gsSP1Triangle(12, 13, 6, 0),
++	gsSP1Triangle(13, 14, 6, 0),
++	gsSP1Triangle(6, 14, 15, 0),
++	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_mesh_vtx_0 + 48, 11, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(1, 3, 2, 0),
++	gsSP1Triangle(2, 3, 4, 0),
++	gsSP1Triangle(3, 5, 4, 0),
++	gsSP1Triangle(2, 4, 6, 0),
++	gsSP1Triangle(6, 0, 2, 0),
++	gsSP1Triangle(6, 7, 0, 0),
++	gsSP1Triangle(6, 8, 7, 0),
++	gsSP1Triangle(9, 10, 7, 0),
++	gsSPEndDisplayList(),
++};Vtx mario_006_switch_option_left_hand_wing_cap_mesh_vtx_1[36] = {
++	{{{4, -3, -32},0, {-16, -16},{0x48, 0x20, 0x9D, 0xFF}}},
++	{{{-19, 47, -4},0, {-16, -16},{0x2F, 0x74, 0xE8, 0xFF}}},
++	{{{-2, 41, 0},0, {-16, -16},{0xDD, 0x73, 0xD7, 0xFF}}},
++	{{{-13, 26, 41},0, {-16, -16},{0x2E, 0x50, 0x57, 0xFF}}},
++	{{{1, 24, 35},0, {-16, -16},{0xF8, 0x3F, 0x6E, 0xFF}}},
++	{{{23, -25, 35},0, {-16, -16},{0x10, 0xC1, 0x6D, 0xFF}}},
++	{{{13, -37, 41},0, {-16, -16},{0x57, 0xE5, 0x59, 0xFF}}},
++	{{{31, -39, 0},0, {-16, -16},{0x3C, 0x98, 0xD7, 0xFF}}},
++	{{{24, -55, -4},0, {-16, -16},{0x74, 0xD2, 0xE9, 0xFF}}},
++	{{{16, 1, -22},0, {-16, -16},{0x4, 0xFF, 0x81, 0xFF}}},
++	{{{35, 9, -36},0, {-16, -16},{0xE6, 0xF5, 0x84, 0xFF}}},
++	{{{11, 60, -3},0, {-16, -16},{0xB1, 0x59, 0xD2, 0xFF}}},
++	{{{29, 62, 34},0, {-16, -16},{0xCE, 0x59, 0x4B, 0xFF}}},
++	{{{29, 7, 48},0, {-16, -16},{0xC1, 0xF9, 0x6E, 0xFF}}},
++	{{{75, -32, 65},0, {-16, -16},{0x19, 0xB2, 0x61, 0xFF}}},
++	{{{55, -43, -3},0, {-16, -16},{0x7, 0x8C, 0xCD, 0xFF}}},
++	{{{35, 9, -36},0, {-16, -16},{0xE6, 0xF5, 0x84, 0xFF}}},
++	{{{103, -25, 1},0, {-16, -16},{0x65, 0xC0, 0xD6, 0xFF}}},
++	{{{55, -43, -3},0, {-16, -16},{0x7, 0x8C, 0xCD, 0xFF}}},
++	{{{85, 30, -32},0, {-16, -16},{0x45, 0x1C, 0x99, 0xFF}}},
++	{{{58, 81, 0},0, {-16, -16},{0x18, 0x79, 0xE3, 0xFF}}},
++	{{{11, 60, -3},0, {-16, -16},{0xB1, 0x59, 0xD2, 0xFF}}},
++	{{{29, 62, 34},0, {-16, -16},{0xCE, 0x59, 0x4B, 0xFF}}},
++	{{{54, 54, 44},0, {-16, -16},{0x15, 0x51, 0x5F, 0xFF}}},
++	{{{56, 11, 65},0, {-16, -16},{0xF0, 0x13, 0x7D, 0xFF}}},
++	{{{29, 7, 48},0, {-16, -16},{0xC1, 0xF9, 0x6E, 0xFF}}},
++	{{{75, -32, 65},0, {-16, -16},{0x19, 0xB2, 0x61, 0xFF}}},
++	{{{95, -8, 52},0, {-16, -16},{0x67, 0xF9, 0x4A, 0xFF}}},
++	{{{96, 39, 24},0, {-16, -16},{0x6C, 0x3D, 0x1C, 0xFF}}},
++	{{{85, 15, 52},0, {-16, -16},{0x44, 0x2D, 0x61, 0xFF}}},
++	{{{13, -37, 41},0, {-16, -16},{0x9B, 0xB8, 0x1E, 0xFF}}},
++	{{{-15, -12, 7},0, {-16, -16},{0x8B, 0xCF, 0xF8, 0xFF}}},
++	{{{24, -55, -4},0, {-16, -16},{0xA1, 0xAF, 0xEC, 0xFF}}},
++	{{{-13, 26, 41},0, {-16, -16},{0x87, 0xEA, 0x1F, 0xFF}}},
++	{{{-19, 47, -4},0, {-16, -16},{0x83, 0xF4, 0xED, 0xFF}}},
++	{{{4, -3, -32},0, {-16, -16},{0x99, 0xD5, 0xC3, 0xFF}}},
++};
++
++Gfx mario_006_switch_option_left_hand_wing_cap_mesh_tri_1[] = {
++	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_mesh_vtx_1 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 1, 3, 0),
++	gsSP1Triangle(3, 4, 2, 0),
++	gsSP1Triangle(5, 4, 3, 0),
++	gsSP1Triangle(3, 6, 5, 0),
++	gsSP1Triangle(7, 5, 6, 0),
++	gsSP1Triangle(6, 8, 7, 0),
++	gsSP1Triangle(7, 8, 0, 0),
++	gsSP1Triangle(0, 9, 7, 0),
++	gsSP1Triangle(2, 9, 0, 0),
++	gsSP1Triangle(10, 9, 2, 0),
++	gsSP1Triangle(11, 10, 2, 0),
++	gsSP1Triangle(11, 2, 4, 0),
++	gsSP1Triangle(12, 11, 4, 0),
++	gsSP1Triangle(4, 13, 12, 0),
++	gsSP1Triangle(13, 4, 5, 0),
++	gsSP1Triangle(14, 13, 5, 0),
++	gsSP1Triangle(15, 14, 5, 0),
++	gsSP1Triangle(5, 7, 15, 0),
++	gsSP1Triangle(10, 15, 7, 0),
++	gsSP1Triangle(7, 9, 10, 0),
++	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_mesh_vtx_1 + 16, 14, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 3, 1, 0),
++	gsSP1Triangle(4, 3, 0, 0),
++	gsSP1Triangle(5, 4, 0, 0),
++	gsSP1Triangle(4, 5, 6, 0),
++	gsSP1Triangle(6, 7, 4, 0),
++	gsSP1Triangle(7, 6, 8, 0),
++	gsSP1Triangle(6, 9, 8, 0),
++	gsSP1Triangle(10, 8, 9, 0),
++	gsSP1Triangle(10, 11, 8, 0),
++	gsSP1Triangle(1, 11, 10, 0),
++	gsSP1Triangle(2, 1, 10, 0),
++	gsSP1Triangle(1, 12, 11, 0),
++	gsSP1Triangle(3, 12, 1, 0),
++	gsSP1Triangle(4, 12, 3, 0),
++	gsSP1Triangle(7, 12, 4, 0),
++	gsSP1Triangle(12, 7, 13, 0),
++	gsSP1Triangle(13, 7, 8, 0),
++	gsSP1Triangle(11, 13, 8, 0),
++	gsSP1Triangle(11, 12, 13, 0),
++	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_mesh_vtx_1 + 30, 6, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(4, 1, 3, 0),
++	gsSP1Triangle(5, 1, 4, 0),
++	gsSP1Triangle(2, 1, 5, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_006_switch_option_left_hand_wing_cap_wings_mesh_vtx_0[8] = {
++	{{{178, -177, 128},0, {-16, 4008},{0xA8, 0xB3, 0xCF, 0xFF}}},
++	{{{319, -248, -14},0, {-16, -16},{0xA8, 0xB4, 0xCE, 0xFF}}},
++	{{{349, -325, 53},0, {974, -16},{0xA8, 0xB3, 0xCF, 0xFF}}},
++	{{{207, -253, 195},0, {974, 4008},{0xA8, 0xB3, 0xCF, 0xFF}}},
++	{{{414, 206, 82},0, {974, -16},{0xBD, 0x64, 0xD8, 0xFF}}},
++	{{{368, 146, 7},0, {-16, -16},{0xBE, 0x65, 0xD8, 0xFF}}},
++	{{{212, 96, 143},0, {-16, 4008},{0xBE, 0x65, 0xD8, 0xFF}}},
++	{{{258, 156, 218},0, {974, 4008},{0xBD, 0x64, 0xD8, 0xFF}}},
++};
++
++Gfx mario_006_switch_option_left_hand_wing_cap_wings_mesh_tri_0[] = {
++	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_wings_mesh_vtx_0 + 0, 8, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 0, 2, 0),
++	gsSP1Triangle(4, 5, 6, 0),
++	gsSP1Triangle(4, 6, 7, 0),
++	gsSPEndDisplayList(),
++};Vtx mario_006_switch_option_left_hand_wing_cap_wings_mesh_vtx_1[8] = {
++	{{{368, 146, 7},0, {974, -16},{0xBE, 0x65, 0xD8, 0xFF}}},
++	{{{166, 37, 68},0, {-16, 4008},{0xBE, 0x65, 0xD9, 0xFF}}},
++	{{{212, 96, 143},0, {974, 4008},{0xBE, 0x65, 0xD8, 0xFF}}},
++	{{{322, 87, -67},0, {-16, -16},{0xBE, 0x65, 0xD8, 0xFF}}},
++	{{{178, -177, 128},0, {974, 4008},{0xA8, 0xB3, 0xCF, 0xFF}}},
++	{{{149, -100, 60},0, {-16, 4008},{0xA8, 0xB4, 0xCE, 0xFF}}},
++	{{{319, -248, -14},0, {974, -16},{0xA8, 0xB4, 0xCE, 0xFF}}},
++	{{{290, -171, -81},0, {-16, -16},{0xA8, 0xB4, 0xCE, 0xFF}}},
++};
++
++Gfx mario_006_switch_option_left_hand_wing_cap_wings_mesh_tri_1[] = {
++	gsSPVertex(mario_006_switch_option_left_hand_wing_cap_wings_mesh_vtx_1 + 0, 8, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 3, 1, 0),
++	gsSP1Triangle(4, 5, 6, 0),
++	gsSP1Triangle(5, 7, 6, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_000_offset_009_mesh_vtx_0[22] = {
++	{{{-5, 37, 31},0, {-16, -16},{0x9D, 0x3F, 0x32, 0xFF}}},
++	{{{-15, 0, 7},0, {-16, -16},{0x81, 0xF7, 0xFE, 0xFF}}},
++	{{{-1, -12, 47},0, {-16, -16},{0xA5, 0xE2, 0x53, 0xFF}}},
++	{{{-4, 37, -17},0, {-16, -16},{0xA0, 0x3E, 0xC9, 0xFF}}},
++	{{{14, 48, -23},0, {-16, -16},{0xE2, 0x62, 0xB5, 0xFF}}},
++	{{{13, 48, 38},0, {-16, -16},{0xE0, 0x62, 0x4A, 0xFF}}},
++	{{{18, -15, 58},0, {-16, -16},{0xEB, 0xD9, 0x77, 0xFF}}},
++	{{{1, -44, 8},0, {-16, -16},{0xAA, 0xA3, 0x0, 0xFF}}},
++	{{{0, -13, -32},0, {-16, -16},{0xA8, 0xDF, 0xAA, 0xFF}}},
++	{{{19, -15, -42},0, {-16, -16},{0xEE, 0xD8, 0x89, 0xFF}}},
++	{{{92, 45, -16},0, {-16, -16},{0x3B, 0x5C, 0xC0, 0xFF}}},
++	{{{91, 45, 32},0, {-16, -16},{0x39, 0x5D, 0x40, 0xFF}}},
++	{{{95, -5, 48},0, {-16, -16},{0x42, 0xE6, 0x69, 0xFF}}},
++	{{{98, -37, 8},0, {-16, -16},{0x4A, 0x99, 0x0, 0xFF}}},
++	{{{21, -54, 8},0, {-16, -16},{0xF3, 0x82, 0x0, 0xFF}}},
++	{{{96, -5, -31},0, {-16, -16},{0x44, 0xE5, 0x98, 0xFF}}},
++	{{{92, 45, -16},0, {-16, -16},{0x3B, 0x5C, 0xC0, 0xFF}}},
++	{{{116, 10, 8},0, {-16, -16},{0x7F, 0xA, 0x1, 0xFF}}},
++	{{{96, -5, -31},0, {-16, -16},{0x44, 0xE5, 0x98, 0xFF}}},
++	{{{91, 45, 32},0, {-16, -16},{0x39, 0x5D, 0x40, 0xFF}}},
++	{{{95, -5, 48},0, {-16, -16},{0x42, 0xE6, 0x69, 0xFF}}},
++	{{{98, -37, 8},0, {-16, -16},{0x4A, 0x99, 0x0, 0xFF}}},
++};
++
++Gfx mario_000_offset_009_mesh_tri_0[] = {
++	gsSPVertex(mario_000_offset_009_mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(4, 3, 0, 0),
++	gsSP1Triangle(4, 0, 5, 0),
++	gsSP1Triangle(5, 0, 6, 0),
++	gsSP1Triangle(0, 2, 6, 0),
++	gsSP1Triangle(6, 2, 7, 0),
++	gsSP1Triangle(2, 1, 7, 0),
++	gsSP1Triangle(7, 1, 8, 0),
++	gsSP1Triangle(8, 1, 3, 0),
++	gsSP1Triangle(9, 8, 3, 0),
++	gsSP1Triangle(9, 3, 4, 0),
++	gsSP1Triangle(9, 4, 10, 0),
++	gsSP1Triangle(4, 5, 10, 0),
++	gsSP1Triangle(5, 11, 10, 0),
++	gsSP1Triangle(5, 6, 11, 0),
++	gsSP1Triangle(6, 12, 11, 0),
++	gsSP1Triangle(13, 12, 6, 0),
++	gsSP1Triangle(6, 14, 13, 0),
++	gsSP1Triangle(6, 7, 14, 0),
++	gsSP1Triangle(14, 7, 9, 0),
++	gsSP1Triangle(7, 8, 9, 0),
++	gsSP1Triangle(14, 9, 13, 0),
++	gsSP1Triangle(9, 15, 13, 0),
++	gsSP1Triangle(10, 15, 9, 0),
++	gsSPVertex(mario_000_offset_009_mesh_vtx_0 + 16, 6, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(4, 1, 3, 0),
++	gsSP1Triangle(5, 1, 4, 0),
++	gsSP1Triangle(2, 1, 5, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_000_offset_010_mesh_vtx_0[12] = {
++	{{{8, 44, 33},0, {-16, -16},{0xC5, 0x5C, 0x40, 0xFF}}},
++	{{{65, -11, 54},0, {-16, -16},{0x3A, 0xDB, 0x6B, 0xFF}}},
++	{{{68, 45, 37},0, {-16, -16},{0x40, 0x57, 0x44, 0xFF}}},
++	{{{6, -6, 49},0, {-16, -16},{0xBF, 0xE3, 0x69, 0xFF}}},
++	{{{-14, 8, 8},0, {-16, -16},{0x81, 0x6, 0xFE, 0xFF}}},
++	{{{9, 44, -16},0, {-16, -16},{0xC7, 0x5C, 0xBE, 0xFF}}},
++	{{{69, 45, -18},0, {-16, -16},{0x42, 0x57, 0xC0, 0xFF}}},
++	{{{81, 3, 9},0, {-16, -16},{0x7F, 0xF9, 0x1, 0xFF}}},
++	{{{64, -46, 9},0, {-16, -16},{0x36, 0x8D, 0x0, 0xFF}}},
++	{{{4, -37, 9},0, {-16, -16},{0xBA, 0x96, 0x0, 0xFF}}},
++	{{{6, -6, -31},0, {-16, -16},{0xBF, 0xE2, 0x97, 0xFF}}},
++	{{{66, -11, -36},0, {-16, -16},{0x3B, 0xDB, 0x96, 0xFF}}},
++};
++
++Gfx mario_000_offset_010_mesh_tri_0[] = {
++	gsSPVertex(mario_000_offset_010_mesh_vtx_0 + 0, 12, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 3, 1, 0),
++	gsSP1Triangle(0, 4, 3, 0),
++	gsSP1Triangle(5, 4, 0, 0),
++	gsSP1Triangle(6, 5, 0, 0),
++	gsSP1Triangle(0, 2, 6, 0),
++	gsSP1Triangle(2, 7, 6, 0),
++	gsSP1Triangle(1, 7, 2, 0),
++	gsSP1Triangle(8, 7, 1, 0),
++	gsSP1Triangle(9, 8, 1, 0),
++	gsSP1Triangle(1, 3, 9, 0),
++	gsSP1Triangle(3, 4, 9, 0),
++	gsSP1Triangle(9, 4, 10, 0),
++	gsSP1Triangle(10, 4, 5, 0),
++	gsSP1Triangle(11, 10, 5, 0),
++	gsSP1Triangle(5, 6, 11, 0),
++	gsSP1Triangle(6, 7, 11, 0),
++	gsSP1Triangle(11, 7, 8, 0),
++	gsSP1Triangle(9, 11, 8, 0),
++	gsSP1Triangle(9, 10, 11, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_000_offset_011_mesh_vtx_0[29] = {
++	{{{-11, 54, 53},0, {-16, -16},{0x2D, 0x77, 0xFE, 0xFF}}},
++	{{{-39, 64, -8},0, {-16, -16},{0x2E, 0x76, 0xFE, 0xFF}}},
++	{{{-41, 65, 26},0, {-16, -16},{0x2D, 0x77, 0xFF, 0xFF}}},
++	{{{-12, 53, -32},0, {-16, -16},{0x2D, 0x77, 0xFE, 0xFF}}},
++	{{{78, 21, 61},0, {-16, -16},{0x2C, 0x77, 0xFE, 0xFF}}},
++	{{{76, 20, -41},0, {-16, -16},{0x2C, 0x77, 0xFE, 0xFF}}},
++	{{{110, 9, 35},0, {-16, -16},{0x2C, 0x77, 0xFE, 0xFF}}},
++	{{{110, 8, -20},0, {-16, -16},{0x2C, 0x77, 0xFE, 0xFF}}},
++	{{{-34, 12, 44},0, {-16, -16},{0xB3, 0xCF, 0x58, 0xFF}}},
++	{{{-11, 54, 53},0, {-16, -16},{0xD1, 0x3, 0x76, 0xFF}}},
++	{{{-41, 65, 26},0, {-16, -16},{0x8E, 0x1A, 0x31, 0xFF}}},
++	{{{43, -18, 54},0, {-16, -16},{0x0, 0xB0, 0x62, 0xFF}}},
++	{{{27, -35, 11},0, {-16, -16},{0xE4, 0x84, 0xFC, 0xFF}}},
++	{{{-54, 15, 8},0, {-16, -16},{0x89, 0xD3, 0xFC, 0xFF}}},
++	{{{-39, 64, -8},0, {-16, -16},{0x92, 0x19, 0xC6, 0xFF}}},
++	{{{-35, 11, -21},0, {-16, -16},{0xB4, 0xCB, 0xA9, 0xFF}}},
++	{{{-39, 64, -8},0, {-16, -16},{0x92, 0x19, 0xC6, 0xFF}}},
++	{{{-12, 53, -32},0, {-16, -16},{0xCE, 0xFE, 0x8B, 0xFF}}},
++	{{{-35, 11, -21},0, {-16, -16},{0xB4, 0xCB, 0xA9, 0xFF}}},
++	{{{44, -12, -33},0, {-16, -16},{0xFB, 0xB5, 0x99, 0xFF}}},
++	{{{76, 20, -41},0, {-16, -16},{0x13, 0xD0, 0x8C, 0xFF}}},
++	{{{110, 8, -20},0, {-16, -16},{0x48, 0xAA, 0xC5, 0xFF}}},
++	{{{80, -31, 7},0, {-16, -16},{0x36, 0x8D, 0xF9, 0xFF}}},
++	{{{110, 9, 35},0, {-16, -16},{0x4E, 0xAC, 0x36, 0xFF}}},
++	{{{43, -18, 54},0, {-16, -16},{0x0, 0xB0, 0x62, 0xFF}}},
++	{{{78, 21, 61},0, {-16, -16},{0x1C, 0xD2, 0x73, 0xFF}}},
++	{{{-11, 54, 53},0, {-16, -16},{0xD1, 0x3, 0x76, 0xFF}}},
++	{{{27, -35, 11},0, {-16, -16},{0xE4, 0x84, 0xFC, 0xFF}}},
++	{{{-54, 15, 8},0, {-16, -16},{0x89, 0xD3, 0xFC, 0xFF}}},
++};
++
++Gfx mario_000_offset_011_mesh_tri_0[] = {
++	gsSPVertex(mario_000_offset_011_mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 3, 1, 0),
++	gsSP1Triangle(0, 4, 3, 0),
++	gsSP1Triangle(4, 5, 3, 0),
++	gsSP1Triangle(4, 6, 5, 0),
++	gsSP1Triangle(6, 7, 5, 0),
++	gsSP1Triangle(8, 9, 10, 0),
++	gsSP1Triangle(8, 11, 9, 0),
++	gsSP1Triangle(12, 11, 8, 0),
++	gsSP1Triangle(12, 8, 13, 0),
++	gsSP1Triangle(10, 13, 8, 0),
++	gsSP1Triangle(13, 10, 14, 0),
++	gsSP1Triangle(14, 15, 13, 0),
++	gsSPVertex(mario_000_offset_011_mesh_vtx_0 + 16, 13, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 2, 1, 0),
++	gsSP1Triangle(3, 1, 4, 0),
++	gsSP1Triangle(3, 4, 5, 0),
++	gsSP1Triangle(5, 6, 3, 0),
++	gsSP1Triangle(6, 5, 7, 0),
++	gsSP1Triangle(8, 6, 7, 0),
++	gsSP1Triangle(7, 9, 8, 0),
++	gsSP1Triangle(8, 9, 10, 0),
++	gsSP1Triangle(6, 8, 11, 0),
++	gsSP1Triangle(11, 3, 6, 0),
++	gsSP1Triangle(2, 3, 11, 0),
++	gsSP1Triangle(12, 2, 11, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_000_offset_012_mesh_vtx_0[22] = {
++	{{{95, -3, -49},0, {-16, -16},{0x41, 0xE8, 0x96, 0xFF}}},
++	{{{116, 11, -9},0, {-16, -16},{0x7F, 0xB, 0xFF, 0xFF}}},
++	{{{98, -35, -10},0, {-16, -16},{0x4B, 0x99, 0xFD, 0xFF}}},
++	{{{90, 47, -32},0, {-16, -16},{0x37, 0x5F, 0xC1, 0xFF}}},
++	{{{18, -13, -58},0, {-16, -16},{0xEB, 0xDC, 0x88, 0xFF}}},
++	{{{22, -54, -9},0, {-16, -16},{0xF6, 0x81, 0xFE, 0xFF}}},
++	{{{19, -16, 41},0, {-16, -16},{0xEF, 0xD5, 0x76, 0xFF}}},
++	{{{96, -5, 30},0, {-16, -16},{0x44, 0xE2, 0x67, 0xFF}}},
++	{{{91, 46, 16},0, {-16, -16},{0x3B, 0x5C, 0x42, 0xFF}}},
++	{{{12, 49, -37},0, {-16, -16},{0xE0, 0x64, 0xB9, 0xFF}}},
++	{{{-6, 38, -31},0, {-16, -16},{0x9E, 0x3F, 0xCD, 0xFF}}},
++	{{{-1, -11, -47},0, {-16, -16},{0xA5, 0xE2, 0xAC, 0xFF}}},
++	{{{1, -44, -9},0, {-16, -16},{0xAB, 0xA2, 0xFE, 0xFF}}},
++	{{{0, -14, 31},0, {-16, -16},{0xA9, 0xDB, 0x54, 0xFF}}},
++	{{{-5, 36, 18},0, {-16, -16},{0x9E, 0x39, 0x39, 0xFF}}},
++	{{{13, 48, 24},0, {-16, -16},{0xE1, 0x60, 0x4D, 0xFF}}},
++	{{{-6, 38, -31},0, {-16, -16},{0x9E, 0x3F, 0xCD, 0xFF}}},
++	{{{-15, 0, -7},0, {-16, -16},{0x81, 0xF5, 0x2, 0xFF}}},
++	{{{-5, 36, 18},0, {-16, -16},{0x9E, 0x39, 0x39, 0xFF}}},
++	{{{-1, -11, -47},0, {-16, -16},{0xA5, 0xE2, 0xAC, 0xFF}}},
++	{{{1, -44, -9},0, {-16, -16},{0xAB, 0xA2, 0xFE, 0xFF}}},
++	{{{0, -14, 31},0, {-16, -16},{0xA9, 0xDB, 0x54, 0xFF}}},
++};
++
++Gfx mario_000_offset_012_mesh_tri_0[] = {
++	gsSPVertex(mario_000_offset_012_mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(3, 0, 4, 0),
++	gsSP1Triangle(4, 0, 2, 0),
++	gsSP1Triangle(2, 5, 4, 0),
++	gsSP1Triangle(2, 6, 5, 0),
++	gsSP1Triangle(2, 7, 6, 0),
++	gsSP1Triangle(2, 1, 7, 0),
++	gsSP1Triangle(7, 1, 8, 0),
++	gsSP1Triangle(8, 1, 3, 0),
++	gsSP1Triangle(8, 3, 9, 0),
++	gsSP1Triangle(3, 4, 9, 0),
++	gsSP1Triangle(4, 10, 9, 0),
++	gsSP1Triangle(4, 11, 10, 0),
++	gsSP1Triangle(12, 11, 4, 0),
++	gsSP1Triangle(5, 12, 4, 0),
++	gsSP1Triangle(6, 12, 5, 0),
++	gsSP1Triangle(6, 13, 12, 0),
++	gsSP1Triangle(14, 13, 6, 0),
++	gsSP1Triangle(15, 14, 6, 0),
++	gsSP1Triangle(8, 15, 6, 0),
++	gsSP1Triangle(6, 7, 8, 0),
++	gsSP1Triangle(8, 9, 15, 0),
++	gsSP1Triangle(9, 10, 15, 0),
++	gsSP1Triangle(10, 14, 15, 0),
++	gsSPVertex(mario_000_offset_012_mesh_vtx_0 + 16, 6, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(3, 1, 0, 0),
++	gsSP1Triangle(4, 1, 3, 0),
++	gsSP1Triangle(5, 1, 4, 0),
++	gsSP1Triangle(2, 1, 5, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_000_offset_013_mesh_vtx_0[12] = {
++	{{{66, -11, 34},0, {-16, -16},{0x39, 0xD8, 0x6A, 0xFF}}},
++	{{{69, 45, 18},0, {-16, -16},{0x40, 0x55, 0x44, 0xFF}}},
++	{{{9, 44, 16},0, {-16, -16},{0xC6, 0x5A, 0x45, 0xFF}}},
++	{{{83, 4, -10},0, {-16, -16},{0x7F, 0xF8, 0x0, 0xFF}}},
++	{{{63, -45, -12},0, {-16, -16},{0x33, 0x8C, 0xFC, 0xFF}}},
++	{{{4, -36, -10},0, {-16, -16},{0xB9, 0x96, 0xFF, 0xFF}}},
++	{{{6, -6, 30},0, {-16, -16},{0xC0, 0xE0, 0x69, 0xFF}}},
++	{{{-13, 10, -9},0, {-16, -16},{0x81, 0x8, 0x2, 0xFF}}},
++	{{{9, 46, -33},0, {-16, -16},{0xC6, 0x5F, 0xC3, 0xFF}}},
++	{{{69, 46, -37},0, {-16, -16},{0x40, 0x58, 0xBF, 0xFF}}},
++	{{{65, -9, -56},0, {-16, -16},{0x37, 0xDD, 0x93, 0xFF}}},
++	{{{5, -3, -50},0, {-16, -16},{0xBC, 0xE7, 0x97, 0xFF}}},
++};
++
++Gfx mario_000_offset_013_mesh_tri_0[] = {
++	gsSPVertex(mario_000_offset_013_mesh_vtx_0 + 0, 12, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 3, 1, 0),
++	gsSP1Triangle(4, 3, 0, 0),
++	gsSP1Triangle(4, 0, 5, 0),
++	gsSP1Triangle(0, 6, 5, 0),
++	gsSP1Triangle(2, 6, 0, 0),
++	gsSP1Triangle(2, 7, 6, 0),
++	gsSP1Triangle(8, 7, 2, 0),
++	gsSP1Triangle(8, 2, 1, 0),
++	gsSP1Triangle(1, 9, 8, 0),
++	gsSP1Triangle(1, 3, 9, 0),
++	gsSP1Triangle(9, 3, 10, 0),
++	gsSP1Triangle(10, 3, 4, 0),
++	gsSP1Triangle(10, 4, 5, 0),
++	gsSP1Triangle(5, 11, 10, 0),
++	gsSP1Triangle(5, 7, 11, 0),
++	gsSP1Triangle(6, 7, 5, 0),
++	gsSP1Triangle(11, 7, 8, 0),
++	gsSP1Triangle(10, 11, 8, 0),
++	gsSP1Triangle(9, 10, 8, 0),
++	gsSPEndDisplayList(),
++};
++
++Vtx mario_000_displaylist_005_mesh_vtx_0[28] = {
++	{{{75, 23, 40},0, {-16, -16},{0x2A, 0x78, 0x0, 0xFF}}},
++	{{{109, 11, 20},0, {-16, -16},{0x2B, 0x78, 0x1, 0xFF}}},
++	{{{110, 11, -36},0, {-16, -16},{0x2A, 0x78, 0x0, 0xFF}}},
++	{{{78, 22, -61},0, {-16, -16},{0x2A, 0x78, 0x0, 0xFF}}},
++	{{{-14, 54, 29},0, {-16, -16},{0x2A, 0x78, 0x0, 0xFF}}},
++	{{{-11, 53, -56},0, {-16, -16},{0x2A, 0x78, 0x0, 0xFF}}},
++	{{{-40, 63, 5},0, {-16, -16},{0x2A, 0x78, 0x0, 0xFF}}},
++	{{{-42, 64, -29},0, {-16, -16},{0x2C, 0x77, 0x1, 0xFF}}},
++	{{{110, 11, -36},0, {-16, -16},{0x50, 0xAD, 0xCB, 0xFF}}},
++	{{{109, 11, 20},0, {-16, -16},{0x49, 0xAD, 0x3E, 0xFF}}},
++	{{{80, -29, -7},0, {-16, -16},{0x39, 0x8F, 0x9, 0xFF}}},
++	{{{44, -11, 32},0, {-16, -16},{0xFC, 0xB7, 0x68, 0xFF}}},
++	{{{75, 23, 40},0, {-16, -16},{0x12, 0xD4, 0x76, 0xFF}}},
++	{{{-14, 54, 29},0, {-16, -16},{0xCD, 0x0, 0x74, 0xFF}}},
++	{{{-36, 11, 19},0, {-16, -16},{0xB4, 0xCC, 0x57, 0xFF}}},
++	{{{-40, 63, 5},0, {-16, -16},{0x91, 0x19, 0x38, 0xFF}}},
++	{{{-54, 14, -10},0, {-16, -16},{0x8A, 0xD1, 0x4, 0xFF}}},
++	{{{-36, 11, 19},0, {-16, -16},{0xB4, 0xCC, 0x57, 0xFF}}},
++	{{{-40, 63, 5},0, {-16, -16},{0x91, 0x19, 0x38, 0xFF}}},
++	{{{-42, 64, -29},0, {-16, -16},{0x8D, 0x17, 0xCE, 0xFF}}},
++	{{{-34, 11, -46},0, {-16, -16},{0xB4, 0xCC, 0xA9, 0xFF}}},
++	{{{-11, 53, -56},0, {-16, -16},{0xD2, 0x0, 0x8A, 0xFF}}},
++	{{{43, -18, -55},0, {-16, -16},{0x2, 0xAF, 0x9F, 0xFF}}},
++	{{{78, 22, -61},0, {-16, -16},{0x1F, 0xD4, 0x8D, 0xFF}}},
++	{{{110, 11, -36},0, {-16, -16},{0x50, 0xAD, 0xCB, 0xFF}}},
++	{{{80, -29, -7},0, {-16, -16},{0x39, 0x8F, 0x9, 0xFF}}},
++	{{{27, -35, -11},0, {-16, -16},{0xE6, 0x84, 0x6, 0xFF}}},
++	{{{44, -11, 32},0, {-16, -16},{0xFC, 0xB7, 0x68, 0xFF}}},
++};
++
++Gfx mario_000_displaylist_005_mesh_tri_0[] = {
++	gsSPVertex(mario_000_displaylist_005_mesh_vtx_0 + 0, 16, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(0, 2, 3, 0),
++	gsSP1Triangle(4, 0, 3, 0),
++	gsSP1Triangle(4, 3, 5, 0),
++	gsSP1Triangle(6, 4, 5, 0),
++	gsSP1Triangle(7, 6, 5, 0),
++	gsSP1Triangle(8, 9, 10, 0),
++	gsSP1Triangle(11, 10, 9, 0),
++	gsSP1Triangle(9, 12, 11, 0),
++	gsSP1Triangle(12, 13, 11, 0),
++	gsSP1Triangle(13, 14, 11, 0),
++	gsSP1Triangle(14, 13, 15, 0),
++	gsSPVertex(mario_000_displaylist_005_mesh_vtx_0 + 16, 12, 0),
++	gsSP1Triangle(0, 1, 2, 0),
++	gsSP1Triangle(2, 3, 0, 0),
++	gsSP1Triangle(4, 0, 3, 0),
++	gsSP1Triangle(3, 5, 4, 0),
++	gsSP1Triangle(5, 6, 4, 0),
++	gsSP1Triangle(5, 7, 6, 0),
++	gsSP1Triangle(6, 7, 8, 0),
++	gsSP1Triangle(8, 9, 6, 0),
++	gsSP1Triangle(10, 6, 9, 0),
++	gsSP1Triangle(9, 11, 10, 0),
++	gsSP1Triangle(10, 11, 1, 0),
++	gsSP1Triangle(10, 1, 0, 0),
++	gsSP1Triangle(0, 4, 10, 0),
++	gsSP1Triangle(4, 6, 10, 0),
++	gsSPEndDisplayList(),
++};
++
++
++Gfx mat_mario_body_v3[] = {
++	gsDPPipeSync(),
++	gsDPSetCombineLERP(TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT, TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT),
++	gsSPTexture(65535, 65535, 0, 0, 1),
++	gsDPTileSync(),
++	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_mario_button_rgba16),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
++	gsDPLoadSync(),
++	gsDPLoadTile(7, 0, 0, 124, 124),
++	gsDPPipeSync(),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
++	gsDPSetTileSize(0, 0, 0, 124, 124),
++	gsSPSetLights1(mario_body_v3_lights),
++	gsSPEndDisplayList(),
++};
++
++
++Gfx mat_mario_metal_v3[] = {
++	gsDPPipeSync(),
++	gsDPSetCombineLERP(0, 0, 0, TEXEL0, 0, 0, 0, ENVIRONMENT, 0, 0, 0, TEXEL0, 0, 0, 0, ENVIRONMENT),
++	gsSPSetGeometryMode(G_TEXTURE_GEN),
++	gsSPTexture(4031, 1983, 0, 0, 1),
++	gsDPTileSync(),
++	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, mario_metal_rgba16),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 16, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
++	gsDPLoadSync(),
++	gsDPLoadTile(7, 0, 0, 252, 124),
++	gsDPPipeSync(),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 16, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
++	gsDPSetTileSize(0, 0, 0, 252, 124),
++	gsSPEndDisplayList(),
++};
++
++Gfx mat_revert_mario_metal_v3[] = {
++	gsDPPipeSync(),
++	gsSPClearGeometryMode(G_TEXTURE_GEN),
++	gsSPEndDisplayList(),
++};
++
++
++Gfx mat_mario_cap_v3[] = {
++	gsDPPipeSync(),
++	gsDPSetCombineLERP(TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT, TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT),
++	gsSPTexture(65535, 65535, 0, 0, 1),
++	gsDPTileSync(),
++	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_mario_cap_rgba16),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPLoadSync(),
++	gsDPLoadTile(7, 0, 0, 124, 124),
++	gsDPPipeSync(),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPSetTileSize(0, 0, 0, 124, 124),
++	gsSPSetLights1(mario_cap_v3_lights),
++	gsSPEndDisplayList(),
++};
++
++
++Gfx mat_mario_face_0___eye_open_v3[] = {
++	gsDPPipeSync(),
++	gsDPSetCombineLERP(TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT, TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT),
++	gsSPTexture(65535, 65535, 0, 0, 1),
++	gsDPTileSync(),
++	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_mario_face_1_rgba16),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPLoadSync(),
++	gsDPLoadTile(7, 0, 0, 124, 124),
++	gsDPPipeSync(),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPSetTileSize(0, 0, 0, 124, 124),
++	gsSPSetLights1(mario_face_0___eye_open_v3_lights),
++	gsSPEndDisplayList(),
++};
++
++
++Gfx mat_mario_mustache_v3[] = {
++	gsDPPipeSync(),
++	gsDPSetCombineLERP(TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT, TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT),
++	gsSPTexture(65535, 65535, 0, 0, 1),
++	gsDPTileSync(),
++	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_mario_mustache_rgba16),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPLoadSync(),
++	gsDPLoadTile(7, 0, 0, 124, 124),
++	gsDPPipeSync(),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPSetTileSize(0, 0, 0, 124, 124),
++	gsSPSetLights1(mario_mustache_v3_lights),
++	gsSPEndDisplayList(),
++};
++
++
++Gfx mat_mario_hair_v3[] = {
++	gsDPPipeSync(),
++	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
++	gsSPTexture(65535, 65535, 0, 0, 1),
++	gsSPSetLights1(mario_hair_v3_lights),
++	gsSPEndDisplayList(),
++};
++
++
++Gfx mat_mario_sideburns_v3[] = {
++	gsDPPipeSync(),
++	gsDPSetCombineLERP(TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT, TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT),
++	gsSPTexture(65535, 65535, 0, 0, 1),
++	gsDPTileSync(),
++	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_mario_sideburn_rgba16),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPLoadSync(),
++	gsDPLoadTile(7, 0, 0, 124, 124),
++	gsDPPipeSync(),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPSetTileSize(0, 0, 0, 124, 124),
++	gsSPSetLights1(mario_sideburns_v3_lights),
++	gsSPEndDisplayList(),
++};
++
++
++Gfx mat_mario_face_1___eye_half_v3[] = {
++	gsDPPipeSync(),
++	gsDPSetCombineLERP(TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT, TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT),
++	gsSPTexture(65535, 65535, 0, 0, 1),
++	gsDPTileSync(),
++	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_mario_face_2_rgba16),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPLoadSync(),
++	gsDPLoadTile(7, 0, 0, 124, 124),
++	gsDPPipeSync(),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPSetTileSize(0, 0, 0, 124, 124),
++	gsSPSetLights1(mario_face_1___eye_half_v3_lights),
++	gsSPEndDisplayList(),
++};
++
++
++Gfx mat_mario_face_2___eye_closed_v3[] = {
++	gsDPPipeSync(),
++	gsDPSetCombineLERP(TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT, TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT),
++	gsSPTexture(65535, 65535, 0, 0, 1),
++	gsDPTileSync(),
++	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_mario_face_3_rgba16),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPLoadSync(),
++	gsDPLoadTile(7, 0, 0, 124, 124),
++	gsDPPipeSync(),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPSetTileSize(0, 0, 0, 124, 124),
++	gsSPSetLights1(mario_face_2___eye_closed_v3_lights),
++	gsSPEndDisplayList(),
++};
++
++
++Gfx mat_mario_face_7___eye_X_v3[] = {
++	gsDPPipeSync(),
++	gsDPSetCombineLERP(TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT, TEXEL0, SHADE, TEXEL0_ALPHA, SHADE, 0, 0, 0, ENVIRONMENT),
++	gsSPTexture(65535, 65535, 0, 0, 1),
++	gsDPTileSync(),
++	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_mario_face_4_rgba16),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPLoadSync(),
++	gsDPLoadTile(7, 0, 0, 124, 124),
++	gsDPPipeSync(),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPSetTileSize(0, 0, 0, 124, 124),
++	gsSPSetLights1(mario_face_7___eye_X_v3_lights),
++	gsSPEndDisplayList(),
++};
++
++
++Gfx mat_mario_wing_2_v3[] = {
++	gsDPPipeSync(),
++	gsDPSetCombineLERP(0, 0, 0, TEXEL0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, TEXEL0, TEXEL0, 0, ENVIRONMENT, 0),
++	gsSPClearGeometryMode(G_CULL_BACK),
++	gsSPTexture(65535, 65535, 0, 0, 1),
++	gsDPTileSync(),
++	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_wing_2_rgba16),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPLoadSync(),
++	gsDPLoadTile(7, 0, 0, 124, 252),
++	gsDPPipeSync(),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPSetTileSize(0, 0, 0, 124, 252),
++	gsSPEndDisplayList(),
++};
++
++Gfx mat_revert_mario_wing_2_v3[] = {
++	gsDPPipeSync(),
++	gsSPSetGeometryMode(G_CULL_BACK),
++	gsSPEndDisplayList(),
++};
++
++
++Gfx mat_mario_wing_1_v3[] = {
++	gsDPPipeSync(),
++	gsDPSetCombineLERP(0, 0, 0, TEXEL0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, TEXEL0, TEXEL0, 0, ENVIRONMENT, 0),
++	gsSPClearGeometryMode(G_CULL_BACK),
++	gsSPTexture(65535, 65535, 0, 0, 1),
++	gsDPTileSync(),
++	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, mario_wing1_rgba16),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPLoadSync(),
++	gsDPLoadTile(7, 0, 0, 124, 252),
++	gsDPPipeSync(),
++	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
++	gsDPSetTileSize(0, 0, 0, 124, 252),
++	gsSPEndDisplayList(),
++};
++
++Gfx mat_revert_mario_wing_1_v3[] = {
++	gsDPPipeSync(),
++	gsSPSetGeometryMode(G_CULL_BACK),
++	gsSPEndDisplayList(),
++};
++
++
++Gfx mat_mario_gloves_v3[] = {
++	gsDPPipeSync(),
++	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
++	gsSPTexture(65535, 65535, 0, 0, 1),
++	gsSPSetLights1(mario_gloves_v3_lights),
++	gsSPEndDisplayList(),
++};
++
++
++Gfx mat_mario_shoes_v3[] = {
++	gsDPPipeSync(),
++	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
++	gsSPTexture(65535, 65535, 0, 0, 1),
++	gsSPSetLights1(mario_shoes_v3_lights),
++	gsSPEndDisplayList(),
++};
++
++
++Gfx mario_000_offset_mesh[] = {
++	gsSPDisplayList(mat_mario_body_v3),
++	gsSPDisplayList(mario_000_offset_mesh_tri_0),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_000_offset_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_offset_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
++};
++
++
++
++Gfx mario_000_offset_001_mesh[] = {
++	gsSPDisplayList(mat_mario_body_v3),
++	gsSPDisplayList(mario_000_offset_001_mesh_tri_0),
++	gsSPDisplayList(mat_mario_cap_v3),
++	gsSPDisplayList(mario_000_offset_001_mesh_tri_1),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_000_offset_001_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_offset_001_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_offset_001_mesh_tri_1),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
++};
++
++
++
++Gfx mario_000_displaylist_mesh[] = {
++	gsSPDisplayList(mat_mario_face_0___eye_open_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_0),
++	gsSPDisplayList(mat_mario_mustache_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_1),
++	gsSPDisplayList(mat_mario_hair_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_2),
++	gsSPDisplayList(mat_mario_sideburns_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_3),
++	gsSPDisplayList(mat_mario_cap_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_4),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_000_displaylist_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_1),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_2),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_3),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_4),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_000_displaylist_mesh_mat_override_face_1___eye_half_v3_1[] = {
++	gsSPDisplayList(mat_mario_face_1___eye_half_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_0),
++	gsSPDisplayList(mat_mario_mustache_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_1),
++	gsSPDisplayList(mat_mario_hair_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_2),
++	gsSPDisplayList(mat_mario_sideburns_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_3),
++	gsSPDisplayList(mat_mario_cap_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_4),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_000_displaylist_mesh_mat_override_face_2___eye_closed_v3_2[] = {
++	gsSPDisplayList(mat_mario_face_2___eye_closed_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_0),
++	gsSPDisplayList(mat_mario_mustache_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_1),
++	gsSPDisplayList(mat_mario_hair_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_2),
++	gsSPDisplayList(mat_mario_sideburns_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_3),
++	gsSPDisplayList(mat_mario_cap_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_4),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_000_displaylist_mesh_mat_override_face_7___eye_X_v3_3[] = {
++	gsSPDisplayList(mat_mario_face_7___eye_X_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_0),
++	gsSPDisplayList(mat_mario_mustache_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_1),
++	gsSPDisplayList(mat_mario_hair_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_2),
++	gsSPDisplayList(mat_mario_sideburns_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_3),
++	gsSPDisplayList(mat_mario_cap_v3),
++	gsSPDisplayList(mario_000_displaylist_mesh_tri_4),
++	gsSPEndDisplayList(),
++};
++
++
++
++Gfx mario_002_switch_option_head__no_cap__mesh[] = {
++	gsSPDisplayList(mat_mario_face_0___eye_open_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_0),
++	gsSPDisplayList(mat_mario_mustache_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_1),
++	gsSPDisplayList(mat_mario_sideburns_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_2),
++	gsSPDisplayList(mat_mario_hair_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_3),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_002_switch_option_head__no_cap__mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_1),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_2),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_3),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_002_switch_option_head__no_cap__mesh_mat_override_face_1___eye_half_v3_1[] = {
++	gsSPDisplayList(mat_mario_face_1___eye_half_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_0),
++	gsSPDisplayList(mat_mario_mustache_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_1),
++	gsSPDisplayList(mat_mario_sideburns_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_2),
++	gsSPDisplayList(mat_mario_hair_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_3),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_002_switch_option_head__no_cap__mesh_mat_override_face_2___eye_closed_v3_2[] = {
++	gsSPDisplayList(mat_mario_face_2___eye_closed_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_0),
++	gsSPDisplayList(mat_mario_mustache_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_1),
++	gsSPDisplayList(mat_mario_sideburns_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_2),
++	gsSPDisplayList(mat_mario_hair_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_3),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_002_switch_option_head__no_cap__mesh_mat_override_face_7___eye_X_v3_3[] = {
++	gsSPDisplayList(mat_mario_face_7___eye_X_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_0),
++	gsSPDisplayList(mat_mario_mustache_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_1),
++	gsSPDisplayList(mat_mario_sideburns_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_2),
++	gsSPDisplayList(mat_mario_hair_v3),
++	gsSPDisplayList(mario_002_switch_option_head__no_cap__mesh_tri_3),
++	gsSPEndDisplayList(),
++};
++
++
++
++Gfx mario_000_displaylist_001_mesh[] = {
++	gsSPDisplayList(mat_mario_wing_2_v3),
++	gsSPDisplayList(mario_000_displaylist_001_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_wing_2_v3),
++	gsSPDisplayList(mat_mario_wing_1_v3),
++	gsSPDisplayList(mario_000_displaylist_001_mesh_tri_1),
++	gsSPDisplayList(mat_revert_mario_wing_1_v3),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_000_displaylist_001_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_wing_2_v3),
++	gsSPDisplayList(mario_000_displaylist_001_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_wing_2_v3),
++	gsSPDisplayList(mat_mario_wing_1_v3),
++	gsSPDisplayList(mario_000_displaylist_001_mesh_tri_1),
++	gsSPDisplayList(mat_revert_mario_wing_1_v3),
++	gsSPEndDisplayList(),
+ };
+ 
+-// 0x04001090
+-ALIGNED8 static const Texture mario_texture_yellow_button[] = {
+-#include "actors/mario/mario_overalls_button.rgba16.inc.c"
++
++
++Gfx mario_000_displaylist_002_mesh[] = {
++	gsSPDisplayList(mat_mario_wing_2_v3),
++	gsSPDisplayList(mario_000_displaylist_002_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_wing_2_v3),
++	gsSPDisplayList(mat_mario_wing_1_v3),
++	gsSPDisplayList(mario_000_displaylist_002_mesh_tri_1),
++	gsSPDisplayList(mat_revert_mario_wing_1_v3),
++	gsSPEndDisplayList(),
+ };
+ 
+-// 0x04001890
+-ALIGNED8 static const Texture mario_texture_m_logo[] = {
+-#include "actors/mario/mario_logo.rgba16.inc.c"
++Gfx mario_000_displaylist_002_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_wing_2_v3),
++	gsSPDisplayList(mario_000_displaylist_002_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_wing_2_v3),
++	gsSPDisplayList(mat_mario_wing_1_v3),
++	gsSPDisplayList(mario_000_displaylist_002_mesh_tri_1),
++	gsSPDisplayList(mat_revert_mario_wing_1_v3),
++	gsSPEndDisplayList(),
+ };
+ 
+-// 0x04002090
+-ALIGNED8 static const Texture mario_texture_hair_sideburn[] = {
+-#include "actors/mario/mario_sideburn.rgba16.inc.c"
++
++
++Gfx mario_000_offset_003_mesh[] = {
++	gsSPDisplayList(mat_mario_cap_v3),
++	gsSPDisplayList(mario_000_offset_003_mesh_tri_0),
++	gsSPEndDisplayList(),
+ };
+ 
+-// 0x04002890
+-ALIGNED8 static const Texture mario_texture_mustache[] = {
+-#include "actors/mario/mario_mustache.rgba16.inc.c"
++Gfx mario_000_offset_003_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_offset_003_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
+ };
+ 
+-// 0x04003090
+-ALIGNED8 static const Texture mario_texture_eyes_front[] = {
+-#include "actors/mario/mario_eyes_center.rgba16.inc.c"
++
++
++Gfx mario_000_offset_004_mesh[] = {
++	gsSPDisplayList(mat_mario_cap_v3),
++	gsSPDisplayList(mario_000_offset_004_mesh_tri_0),
++	gsSPEndDisplayList(),
+ };
+ 
+-// 0x04003890
+-ALIGNED8 static const Texture mario_texture_eyes_half_closed[] = {
+-#include "actors/mario/mario_eyes_half_closed.rgba16.inc.c"
++Gfx mario_000_offset_004_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_offset_004_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
+ };
+ 
+-// 0x04004090
+-ALIGNED8 static const Texture mario_texture_eyes_closed[] = {
+-#include "actors/mario/mario_eyes_closed.rgba16.inc.c"
++
++
++Gfx mario_000_displaylist_003_mesh[] = {
++	gsSPDisplayList(mat_mario_gloves_v3),
++	gsSPDisplayList(mario_000_displaylist_003_mesh_tri_0),
++	gsSPEndDisplayList(),
+ };
+ 
+-// Unreferenced
+-// 0x04004890
+-ALIGNED8 static const Texture mario_texture_eyes_closed_unused1[] = {
+-#include "actors/mario/mario_eyes_closed_unused_0.rgba16.inc.c"
++Gfx mario_000_displaylist_003_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_displaylist_003_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
+ };
+ 
+-// Unreferenced
+-// 0x04005090
+-ALIGNED8 static const Texture mario_texture_eyes_closed_unused2[] = {
+-#include "actors/mario/mario_eyes_closed_unused_1.rgba16.inc.c"
++
++
++Gfx mario_002_switch_option_right_hand_open_mesh[] = {
++	gsSPDisplayList(mat_mario_gloves_v3),
++	gsSPDisplayList(mario_002_switch_option_right_hand_open_mesh_tri_0),
++	gsSPEndDisplayList(),
+ };
+ 
+-// 0x04005890
+-ALIGNED8 static const Texture mario_texture_eyes_right[] = {
+-#include "actors/mario/mario_eyes_left_unused.rgba16.inc.c"
++Gfx mario_002_switch_option_right_hand_open_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_002_switch_option_right_hand_open_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
+ };
+ 
+-// 0x04006090
+-ALIGNED8 static const Texture mario_texture_eyes_left[] = {
+-#include "actors/mario/mario_eyes_right_unused.rgba16.inc.c"
++
++
++Gfx mario_000_offset_006_mesh[] = {
++	gsSPDisplayList(mat_mario_cap_v3),
++	gsSPDisplayList(mario_000_offset_006_mesh_tri_0),
++	gsSPEndDisplayList(),
+ };
+ 
+-// 0x04006890
+-ALIGNED8 static const Texture mario_texture_eyes_up[] = {
+-#include "actors/mario/mario_eyes_up_unused.rgba16.inc.c"
++Gfx mario_000_offset_006_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_offset_006_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
+ };
+ 
+-// 0x04007090
+-ALIGNED8 static const Texture mario_texture_eyes_down[] = {
+-#include "actors/mario/mario_eyes_down_unused.rgba16.inc.c"
+-};
+ 
+-// 0x04007890
+-ALIGNED8 static const Texture mario_texture_eyes_dead[] = {
+-#include "actors/mario/mario_eyes_dead.rgba16.inc.c"
++
++Gfx mario_000_offset_007_mesh[] = {
++	gsSPDisplayList(mat_mario_cap_v3),
++	gsSPDisplayList(mario_000_offset_007_mesh_tri_0),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_000_offset_007_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_offset_007_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
+ };
+ 
+-// 0x04008090
+-ALIGNED8 static const Texture mario_texture_wings_half_1[] = {
+-#include "actors/mario/mario_wing.rgba16.inc.c"
++
++
++Gfx mario_000_displaylist_004_mesh[] = {
++	gsSPDisplayList(mat_mario_gloves_v3),
++	gsSPDisplayList(mario_000_displaylist_004_mesh_tri_0),
++	gsSPEndDisplayList(),
+ };
+ 
+-// 0x04009090
+-ALIGNED8 static const Texture mario_texture_wings_half_2[] = {
+-#include "actors/mario/mario_wing_tip.rgba16.inc.c"
+-};
+-
+-// 0x0400A090
+-ALIGNED8 static const Texture mario_texture_metal_wings_half_1[] = {
+-#include "actors/mario/mario_metal_wing_unused.rgba16.inc.c"
+-};
++Gfx mario_000_displaylist_004_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_displaylist_004_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
++};
++
++
++
++Gfx mario_002_switch_option_left_hand_open_mesh[] = {
++	gsSPDisplayList(mat_mario_gloves_v3),
++	gsSPDisplayList(mario_002_switch_option_left_hand_open_mesh_tri_0),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_002_switch_option_left_hand_open_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_002_switch_option_left_hand_open_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
++};
++
++
++
++Gfx mario_004_switch_option_left_hand_peace_mesh[] = {
++	gsSPDisplayList(mat_mario_gloves_v3),
++	gsSPDisplayList(mario_004_switch_option_left_hand_peace_mesh_tri_0),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_004_switch_option_left_hand_peace_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_004_switch_option_left_hand_peace_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
++};
++
++
++
++Gfx mario_005_switch_option_left_hand_cap_mesh[] = {
++	gsSPDisplayList(mat_mario_cap_v3),
++	gsSPDisplayList(mario_005_switch_option_left_hand_cap_mesh_tri_0),
++	gsSPDisplayList(mat_mario_gloves_v3),
++	gsSPDisplayList(mario_005_switch_option_left_hand_cap_mesh_tri_1),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_005_switch_option_left_hand_cap_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_005_switch_option_left_hand_cap_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_005_switch_option_left_hand_cap_mesh_tri_1),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
++};
++
++
++
++Gfx mario_006_switch_option_left_hand_wing_cap_mesh[] = {
++	gsSPDisplayList(mat_mario_cap_v3),
++	gsSPDisplayList(mario_006_switch_option_left_hand_wing_cap_mesh_tri_0),
++	gsSPDisplayList(mat_mario_gloves_v3),
++	gsSPDisplayList(mario_006_switch_option_left_hand_wing_cap_mesh_tri_1),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_006_switch_option_left_hand_wing_cap_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_006_switch_option_left_hand_wing_cap_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_006_switch_option_left_hand_wing_cap_mesh_tri_1),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
++};
++
++
++
++Gfx mario_006_switch_option_left_hand_wing_cap_wings_mesh[] = {
++	gsSPDisplayList(mat_mario_wing_2_v3),
++	gsSPDisplayList(mario_006_switch_option_left_hand_wing_cap_wings_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_wing_2_v3),
++	gsSPDisplayList(mat_mario_wing_1_v3),
++	gsSPDisplayList(mario_006_switch_option_left_hand_wing_cap_wings_mesh_tri_1),
++	gsSPDisplayList(mat_revert_mario_wing_1_v3),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_006_switch_option_left_hand_wing_cap_wings_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_wing_2_v3),
++	gsSPDisplayList(mario_006_switch_option_left_hand_wing_cap_wings_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_wing_2_v3),
++	gsSPDisplayList(mat_mario_wing_1_v3),
++	gsSPDisplayList(mario_006_switch_option_left_hand_wing_cap_wings_mesh_tri_1),
++	gsSPDisplayList(mat_revert_mario_wing_1_v3),
++	gsSPEndDisplayList(),
++};
++
++
++
++Gfx mario_000_offset_009_mesh[] = {
++	gsSPDisplayList(mat_mario_body_v3),
++	gsSPDisplayList(mario_000_offset_009_mesh_tri_0),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_000_offset_009_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_offset_009_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
++};
++
++
++
++Gfx mario_000_offset_010_mesh[] = {
++	gsSPDisplayList(mat_mario_body_v3),
++	gsSPDisplayList(mario_000_offset_010_mesh_tri_0),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_000_offset_010_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_offset_010_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
++};
++
++
++
++Gfx mario_000_offset_011_mesh[] = {
++	gsSPDisplayList(mat_mario_shoes_v3),
++	gsSPDisplayList(mario_000_offset_011_mesh_tri_0),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_000_offset_011_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_offset_011_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
++};
++
++
++
++Gfx mario_000_offset_012_mesh[] = {
++	gsSPDisplayList(mat_mario_body_v3),
++	gsSPDisplayList(mario_000_offset_012_mesh_tri_0),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_000_offset_012_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_offset_012_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
++};
++
++
++
++Gfx mario_000_offset_013_mesh[] = {
++	gsSPDisplayList(mat_mario_body_v3),
++	gsSPDisplayList(mario_000_offset_013_mesh_tri_0),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_000_offset_013_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_offset_013_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
++};
++
++
++
++Gfx mario_000_displaylist_005_mesh[] = {
++	gsSPDisplayList(mat_mario_shoes_v3),
++	gsSPDisplayList(mario_000_displaylist_005_mesh_tri_0),
++	gsSPEndDisplayList(),
++};
++
++Gfx mario_000_displaylist_005_mesh_mat_override_metal_v3_0[] = {
++	gsSPDisplayList(mat_mario_metal_v3),
++	gsSPDisplayList(mario_000_displaylist_005_mesh_tri_0),
++	gsSPDisplayList(mat_revert_mario_metal_v3),
++	gsSPEndDisplayList(),
++};
++
++
+ 
+-// 0x0400B090
+-ALIGNED8 static const Texture mario_texture_metal_wings_half_2[] = {
+-#include "actors/mario/mario_metal_wing_tip_unused.rgba16.inc.c"
+-};
+-
+-// 0x0400C090
+-static const Vtx mario_butt_dl_vertex_group1[] = {
+-    {{{    -9,     73,    -34}, 0, {     0,      0}, {0xc2, 0x6b, 0xe6, 0x00}}},
+-    {{{    -9,     73,     34}, 0, {     0,      0}, {0xbe, 0x6a, 0x12, 0x00}}},
+-    {{{    22,     82,    -26}, 0, {     0,      0}, {0x07, 0x7e, 0xf5, 0x00}}},
+-    {{{    73,     11,      0}, 0, {     0,      0}, {0x7e, 0x04, 0x00, 0x00}}},
+-    {{{    55,    -61,    -36}, 0, {     0,      0}, {0x67, 0xbe, 0xe1, 0x00}}},
+-    {{{    44,    -10,    -92}, 0, {     0,      0}, {0x4f, 0xf2, 0x9e, 0x00}}},
+-    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
+-    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
+-    {{{    43,     40,     91}, 0, {     0,      0}, {0x4e, 0x30, 0x57, 0x00}}},
+-    {{{     8,     -8,    -99}, 0, {     0,      0}, {0xf3, 0xee, 0x84, 0x00}}},
+-    {{{    36,    -51,    -79}, 0, {     0,      0}, {0x30, 0xb8, 0xa4, 0x00}}},
+-    {{{    26,    -74,    -46}, 0, {     0,      0}, {0x18, 0x88, 0xe2, 0x00}}},
+-    {{{    36,    -52,     79}, 0, {     0,      0}, {0x30, 0xb8, 0x5c, 0x00}}},
+-    {{{    26,    -74,     45}, 0, {     0,      0}, {0x12, 0x88, 0x22, 0x00}}},
+-    {{{    55,    -61,     36}, 0, {     0,      0}, {0x60, 0xb3, 0x1a, 0x00}}},
+-};
+-
+-// 0x0400C180
+-static const Vtx mario_butt_dl_vertex_group2[] = {
+-    {{{    -5,     59,     72}, 0, {     0,      0}, {0xc0, 0x52, 0x47, 0x00}}},
+-    {{{    -9,     73,     34}, 0, {     0,      0}, {0xbe, 0x6a, 0x12, 0x00}}},
+-    {{{   -32,     40,     39}, 0, {     0,      0}, {0x8b, 0x25, 0x1d, 0x00}}},
+-    {{{    52,     70,     38}, 0, {     0,      0}, {0x53, 0x5d, 0x16, 0x00}}},
+-    {{{    22,     82,     26}, 0, {     0,      0}, {0x07, 0x7d, 0x11, 0x00}}},
+-    {{{    27,     72,     63}, 0, {     0,      0}, {0x06, 0x6c, 0x42, 0x00}}},
+-    {{{    43,     40,    -91}, 0, {     0,      0}, {0x4e, 0x30, 0xa9, 0x00}}},
+-    {{{    27,     72,    -63}, 0, {     0,      0}, {0x07, 0x6b, 0xbe, 0x00}}},
+-    {{{    52,     70,    -39}, 0, {     0,      0}, {0x59, 0x56, 0xe5, 0x00}}},
+-    {{{    -5,     59,    -72}, 0, {     0,      0}, {0xc0, 0x52, 0xb9, 0x00}}},
+-    {{{   -17,     32,    -79}, 0, {     0,      0}, {0xa4, 0x23, 0xb1, 0x00}}},
+-    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
+-    {{{    73,     11,      0}, 0, {     0,      0}, {0x7e, 0x04, 0x00, 0x00}}},
+-    {{{    43,     40,     91}, 0, {     0,      0}, {0x4e, 0x30, 0x57, 0x00}}},
+-};
+-
+-// 0x0400C260
+-static const Vtx mario_butt_dl_vertex_group3[] = {
+-    {{{   -14,    -74,      0}, 0, {     0,      0}, {0xcb, 0x8d, 0x00, 0x00}}},
+-    {{{    -9,    -69,     55}, 0, {     0,      0}, {0xcd, 0x97, 0x30, 0x00}}},
+-    {{{   -31,    -51,     42}, 0, {     0,      0}, {0x8d, 0xd7, 0x1f, 0x00}}},
+-    {{{    26,    -74,    -46}, 0, {     0,      0}, {0x18, 0x88, 0xe2, 0x00}}},
+-    {{{    -9,    -69,    -55}, 0, {     0,      0}, {0xcd, 0x97, 0xd0, 0x00}}},
+-    {{{     4,    -48,    -86}, 0, {     0,      0}, {0xd8, 0xba, 0x9f, 0x00}}},
+-    {{{     4,    -49,     86}, 0, {     0,      0}, {0xd8, 0xb9, 0x61, 0x00}}},
+-    {{{    26,    -74,     45}, 0, {     0,      0}, {0x12, 0x88, 0x22, 0x00}}},
+-    {{{   -32,     40,     39}, 0, {     0,      0}, {0x8b, 0x25, 0x1d, 0x00}}},
+-    {{{    -9,     73,     34}, 0, {     0,      0}, {0xbe, 0x6a, 0x12, 0x00}}},
+-    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
+-    {{{    27,     72,     63}, 0, {     0,      0}, {0x06, 0x6c, 0x42, 0x00}}},
+-    {{{    -5,     59,     72}, 0, {     0,      0}, {0xc0, 0x52, 0x47, 0x00}}},
+-    {{{    52,     70,    -39}, 0, {     0,      0}, {0x59, 0x56, 0xe5, 0x00}}},
+-    {{{    22,     82,    -26}, 0, {     0,      0}, {0x07, 0x7e, 0xf5, 0x00}}},
+-    {{{    52,     70,     38}, 0, {     0,      0}, {0x53, 0x5d, 0x16, 0x00}}},
+-};
+-
+-// 0x0400C360
+-static const Vtx mario_butt_dl_vertex_group4[] = {
+-    {{{     6,     33,    -95}, 0, {     0,      0}, {0xe6, 0x26, 0x8b, 0x00}}},
+-    {{{    27,     72,    -63}, 0, {     0,      0}, {0x07, 0x6b, 0xbe, 0x00}}},
+-    {{{    43,     40,    -91}, 0, {     0,      0}, {0x4e, 0x30, 0xa9, 0x00}}},
+-    {{{   -31,    -51,     42}, 0, {     0,      0}, {0x8d, 0xd7, 0x1f, 0x00}}},
+-    {{{   -31,    -51,    -42}, 0, {     0,      0}, {0x91, 0xd0, 0xdc, 0x00}}},
+-    {{{   -14,    -74,      0}, 0, {     0,      0}, {0xcb, 0x8d, 0x00, 0x00}}},
+-    {{{    -9,    -69,    -55}, 0, {     0,      0}, {0xcd, 0x97, 0xd0, 0x00}}},
+-    {{{    73,     11,      0}, 0, {     0,      0}, {0x7e, 0x04, 0x00, 0x00}}},
+-    {{{    44,    -10,    -92}, 0, {     0,      0}, {0x4f, 0xf2, 0x9e, 0x00}}},
+-    {{{    52,     70,     38}, 0, {     0,      0}, {0x53, 0x5d, 0x16, 0x00}}},
+-    {{{    52,     70,    -39}, 0, {     0,      0}, {0x59, 0x56, 0xe5, 0x00}}},
+-    {{{    43,     40,     91}, 0, {     0,      0}, {0x4e, 0x30, 0x57, 0x00}}},
+-    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
+-    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
+-    {{{    27,     72,     63}, 0, {     0,      0}, {0x06, 0x6c, 0x42, 0x00}}},
+-};
+-
+-// 0x0400C450
+-static const Vtx mario_butt_dl_vertex_group5[] = {
+-    {{{    -5,     59,    -72}, 0, {     0,      0}, {0xc0, 0x52, 0xb9, 0x00}}},
+-    {{{    -9,     73,    -34}, 0, {     0,      0}, {0xc2, 0x6b, 0xe6, 0x00}}},
+-    {{{    27,     72,    -63}, 0, {     0,      0}, {0x07, 0x6b, 0xbe, 0x00}}},
+-    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
+-    {{{   -32,     40,     39}, 0, {     0,      0}, {0x8b, 0x25, 0x1d, 0x00}}},
+-    {{{   -18,     32,     79}, 0, {     0,      0}, {0xa4, 0x23, 0x4f, 0x00}}},
+-    {{{    -5,     59,     72}, 0, {     0,      0}, {0xc0, 0x52, 0x47, 0x00}}},
+-    {{{    22,     82,    -26}, 0, {     0,      0}, {0x07, 0x7e, 0xf5, 0x00}}},
+-    {{{    52,     70,    -39}, 0, {     0,      0}, {0x59, 0x56, 0xe5, 0x00}}},
+-    {{{    27,     72,     63}, 0, {     0,      0}, {0x06, 0x6c, 0x42, 0x00}}},
+-    {{{    43,     40,     91}, 0, {     0,      0}, {0x4e, 0x30, 0x57, 0x00}}},
+-    {{{    52,     70,     38}, 0, {     0,      0}, {0x53, 0x5d, 0x16, 0x00}}},
+-    {{{     8,     -8,     99}, 0, {     0,      0}, {0xf3, 0xef, 0x7c, 0x00}}},
+-    {{{    36,    -52,     79}, 0, {     0,      0}, {0x30, 0xb8, 0x5c, 0x00}}},
+-    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
+-};
+-
+-// 0x0400C540
+-static const Vtx mario_butt_dl_vertex_group6[] = {
+-    {{{     6,     33,    -95}, 0, {     0,      0}, {0xe6, 0x26, 0x8b, 0x00}}},
+-    {{{    43,     40,    -91}, 0, {     0,      0}, {0x4e, 0x30, 0xa9, 0x00}}},
+-    {{{    44,    -10,    -92}, 0, {     0,      0}, {0x4f, 0xf2, 0x9e, 0x00}}},
+-    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
+-    {{{    36,    -52,     79}, 0, {     0,      0}, {0x30, 0xb8, 0x5c, 0x00}}},
+-    {{{    55,    -61,     36}, 0, {     0,      0}, {0x60, 0xb3, 0x1a, 0x00}}},
+-    {{{   -18,     32,     79}, 0, {     0,      0}, {0xa4, 0x23, 0x4f, 0x00}}},
+-    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
+-    {{{    -5,     59,     72}, 0, {     0,      0}, {0xc0, 0x52, 0x47, 0x00}}},
+-    {{{   -20,     -7,     81}, 0, {     0,      0}, {0xa3, 0xf9, 0x55, 0x00}}},
+-    {{{     8,     -8,     99}, 0, {     0,      0}, {0xf3, 0xef, 0x7c, 0x00}}},
+-    {{{     4,    -49,     86}, 0, {     0,      0}, {0xd8, 0xb9, 0x61, 0x00}}},
+-    {{{   -20,     -8,    -81}, 0, {     0,      0}, {0xa3, 0xf8, 0xab, 0x00}}},
+-    {{{     8,     -8,    -99}, 0, {     0,      0}, {0xf3, 0xee, 0x84, 0x00}}},
+-    {{{     4,    -48,    -86}, 0, {     0,      0}, {0xd8, 0xba, 0x9f, 0x00}}},
+-};
+-
+-// 0x0400C630
+-static const Vtx mario_butt_dl_vertex_group7[] = {
+-    {{{    -5,     59,    -72}, 0, {     0,      0}, {0xc0, 0x52, 0xb9, 0x00}}},
+-    {{{     6,     33,    -95}, 0, {     0,      0}, {0xe6, 0x26, 0x8b, 0x00}}},
+-    {{{   -17,     32,    -79}, 0, {     0,      0}, {0xa4, 0x23, 0xb1, 0x00}}},
+-    {{{   -20,     -8,    -81}, 0, {     0,      0}, {0xa3, 0xf8, 0xab, 0x00}}},
+-    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
+-    {{{   -18,     32,     79}, 0, {     0,      0}, {0xa4, 0x23, 0x4f, 0x00}}},
+-    {{{   -20,     -7,     81}, 0, {     0,      0}, {0xa3, 0xf9, 0x55, 0x00}}},
+-    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
+-    {{{    55,    -61,     36}, 0, {     0,      0}, {0x60, 0xb3, 0x1a, 0x00}}},
+-    {{{    73,     11,      0}, 0, {     0,      0}, {0x7e, 0x04, 0x00, 0x00}}},
+-    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
+-    {{{    55,    -61,    -36}, 0, {     0,      0}, {0x67, 0xbe, 0xe1, 0x00}}},
+-    {{{    36,    -51,    -79}, 0, {     0,      0}, {0x30, 0xb8, 0xa4, 0x00}}},
+-    {{{    44,    -10,    -92}, 0, {     0,      0}, {0x4f, 0xf2, 0x9e, 0x00}}},
+-    {{{     8,     -8,    -99}, 0, {     0,      0}, {0xf3, 0xee, 0x84, 0x00}}},
+-};
+-
+-// 0x0400C720
+-static const Vtx mario_butt_dl_vertex_group8[] = {
+-    {{{     8,     -8,     99}, 0, {     0,      0}, {0xf3, 0xef, 0x7c, 0x00}}},
+-    {{{     4,    -49,     86}, 0, {     0,      0}, {0xd8, 0xb9, 0x61, 0x00}}},
+-    {{{    36,    -52,     79}, 0, {     0,      0}, {0x30, 0xb8, 0x5c, 0x00}}},
+-    {{{    -9,     73,    -34}, 0, {     0,      0}, {0xc2, 0x6b, 0xe6, 0x00}}},
+-    {{{    22,     82,    -26}, 0, {     0,      0}, {0x07, 0x7e, 0xf5, 0x00}}},
+-    {{{    27,     72,    -63}, 0, {     0,      0}, {0x07, 0x6b, 0xbe, 0x00}}},
+-    {{{    27,     72,     63}, 0, {     0,      0}, {0x06, 0x6c, 0x42, 0x00}}},
+-    {{{    -5,     59,     72}, 0, {     0,      0}, {0xc0, 0x52, 0x47, 0x00}}},
+-    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
+-    {{{     6,     33,    -95}, 0, {     0,      0}, {0xe6, 0x26, 0x8b, 0x00}}},
+-    {{{    -5,     59,    -72}, 0, {     0,      0}, {0xc0, 0x52, 0xb9, 0x00}}},
+-    {{{    22,     82,     26}, 0, {     0,      0}, {0x07, 0x7d, 0x11, 0x00}}},
+-    {{{    52,     70,     38}, 0, {     0,      0}, {0x53, 0x5d, 0x16, 0x00}}},
+-    {{{    -9,     73,     34}, 0, {     0,      0}, {0xbe, 0x6a, 0x12, 0x00}}},
+-    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
+-    {{{    26,    -74,     45}, 0, {     0,      0}, {0x12, 0x88, 0x22, 0x00}}},
+-};
+-
+-// 0x0400C820
+-static const Vtx mario_butt_dl_vertex_group9[] = {
+-    {{{     4,    -48,    -86}, 0, {     0,      0}, {0xd8, 0xba, 0x9f, 0x00}}},
+-    {{{    36,    -51,    -79}, 0, {     0,      0}, {0x30, 0xb8, 0xa4, 0x00}}},
+-    {{{    26,    -74,    -46}, 0, {     0,      0}, {0x18, 0x88, 0xe2, 0x00}}},
+-    {{{   -20,     -7,     81}, 0, {     0,      0}, {0xa3, 0xf9, 0x55, 0x00}}},
+-    {{{   -18,     32,     79}, 0, {     0,      0}, {0xa4, 0x23, 0x4f, 0x00}}},
+-    {{{   -32,     40,     39}, 0, {     0,      0}, {0x8b, 0x25, 0x1d, 0x00}}},
+-    {{{     8,     -8,    -99}, 0, {     0,      0}, {0xf3, 0xee, 0x84, 0x00}}},
+-    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
+-    {{{     8,     -8,     99}, 0, {     0,      0}, {0xf3, 0xef, 0x7c, 0x00}}},
+-    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
+-    {{{    -9,     73,     34}, 0, {     0,      0}, {0xbe, 0x6a, 0x12, 0x00}}},
+-    {{{    22,     82,     26}, 0, {     0,      0}, {0x07, 0x7d, 0x11, 0x00}}},
+-    {{{    22,     82,    -26}, 0, {     0,      0}, {0x07, 0x7e, 0xf5, 0x00}}},
+-    {{{    -9,    -69,    -55}, 0, {     0,      0}, {0xcd, 0x97, 0xd0, 0x00}}},
+-    {{{   -31,    -51,    -42}, 0, {     0,      0}, {0x91, 0xd0, 0xdc, 0x00}}},
+-    {{{   -20,     -8,    -81}, 0, {     0,      0}, {0xa3, 0xf8, 0xab, 0x00}}},
+-};
+-
+-// 0x0400C920
+-static const Vtx mario_butt_dl_vertex_group10[] = {
+-    {{{   -31,    -51,     42}, 0, {     0,      0}, {0x8d, 0xd7, 0x1f, 0x00}}},
+-    {{{    -9,    -69,     55}, 0, {     0,      0}, {0xcd, 0x97, 0x30, 0x00}}},
+-    {{{     4,    -49,     86}, 0, {     0,      0}, {0xd8, 0xb9, 0x61, 0x00}}},
+-    {{{   -20,     -7,     81}, 0, {     0,      0}, {0xa3, 0xf9, 0x55, 0x00}}},
+-    {{{   -32,     40,     39}, 0, {     0,      0}, {0x8b, 0x25, 0x1d, 0x00}}},
+-    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
+-    {{{   -20,     -8,    -81}, 0, {     0,      0}, {0xa3, 0xf8, 0xab, 0x00}}},
+-    {{{   -31,    -51,    -42}, 0, {     0,      0}, {0x91, 0xd0, 0xdc, 0x00}}},
+-    {{{    55,    -61,     36}, 0, {     0,      0}, {0x60, 0xb3, 0x1a, 0x00}}},
+-    {{{    26,    -74,     45}, 0, {     0,      0}, {0x12, 0x88, 0x22, 0x00}}},
+-    {{{    26,    -74,    -46}, 0, {     0,      0}, {0x18, 0x88, 0xe2, 0x00}}},
+-    {{{   -14,    -74,      0}, 0, {     0,      0}, {0xcb, 0x8d, 0x00, 0x00}}},
+-    {{{    -9,    -69,    -55}, 0, {     0,      0}, {0xcd, 0x97, 0xd0, 0x00}}},
+-    {{{    55,    -61,    -36}, 0, {     0,      0}, {0x67, 0xbe, 0xe1, 0x00}}},
+-};
+-
+-// 0x0400CA00 - 0x0400CC98
+-const Gfx mario_butt_dl[] = {
+-    gsSPVertex(mario_butt_dl_vertex_group1, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  9,  5, 10, 0x0),
+-    gsSP2Triangles( 4, 11, 10, 0x0, 12, 13, 14, 0x0),
+-    gsSPVertex(mario_butt_dl_vertex_group2, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10, 11, 0x0),
+-    gsSP2Triangles(12,  3, 13, 0x0,  6,  8, 12, 0x0),
+-    gsSPVertex(mario_butt_dl_vertex_group3, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  1,  7, 0x0,  8,  9, 10, 0x0),
+-    gsSP2Triangles(11,  9, 12, 0x0, 13, 14, 15, 0x0),
+-    gsSPVertex(mario_butt_dl_vertex_group4, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 4,  6,  5, 0x0,  7,  8,  2, 0x0),
+-    gsSP2Triangles( 9,  7, 10, 0x0, 11, 12,  7, 0x0),
+-    gsSP1Triangle(13, 11, 14, 0x0),
+-    gsSPVertex(mario_butt_dl_vertex_group5, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  2,  7,  8, 0x0),
+-    gsSP2Triangles( 9, 10, 11, 0x0, 12, 13, 14, 0x0),
+-    gsSPVertex(mario_butt_dl_vertex_group6, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10,  7, 0x0),
+-    gsSP2Triangles(11, 10,  9, 0x0, 12, 13, 14, 0x0),
+-    gsSP1Triangle( 0, 13, 12, 0x0),
+-    gsSPVertex(mario_butt_dl_vertex_group7, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  2,  1, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  2,  3, 0x0),
+-    gsSP2Triangles( 8,  9, 10, 0x0,  9,  8, 11, 0x0),
+-    gsSP2Triangles(11, 12, 13, 0x0, 13, 14,  1, 0x0),
+-    gsSPVertex(mario_butt_dl_vertex_group8, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10,  5, 0x0),
+-    gsSP2Triangles( 4, 11, 12, 0x0,  6, 11, 13, 0x0),
+-    gsSP2Triangles(13,  3, 14, 0x0, 15,  2,  1, 0x0),
+-    gsSPVertex(mario_butt_dl_vertex_group9, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 1,  0,  6, 0x0,  7,  8,  9, 0x0),
+-    gsSP2Triangles(10, 11, 12, 0x0,  0, 13, 14, 0x0),
+-    gsSP1Triangle(15,  0, 14, 0x0),
+-    gsSPVertex(mario_butt_dl_vertex_group10, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
+-    gsSP2Triangles( 3,  4,  0, 0x0,  0,  4,  5, 0x0),
+-    gsSP2Triangles( 5,  6,  7, 0x0,  5,  7,  0, 0x0),
+-    gsSP2Triangles( 8,  9, 10, 0x0,  9, 11, 10, 0x0),
+-    gsSP2Triangles( 9,  1, 11, 0x0, 11, 12, 10, 0x0),
+-    gsSP1Triangle(10, 13,  8, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400CC98 - 0x0400CCC8
+-const Gfx mario_butt[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPLight(&mario_blue_lights_group.l, 1),
+-    gsSPLight(&mario_blue_lights_group.a, 2),
+-    gsSPDisplayList(mario_butt_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400CCC8 - 0x0400CD40
+-const Gfx mario_metal_butt[] = {
+-    gsDPPipeSync(),
+-    gsSPSetGeometryMode(G_TEXTURE_GEN),
+-    gsDPSetCombineMode(G_CC_DECALFADE, G_CC_DECALFADE),
+-    gsDPLoadTextureBlock(mario_texture_metal, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_ON),
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPDisplayList(mario_butt_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400CD40
+-static const Vtx mario_left_arm_shared_dl_vertex_group1[] = {
+-    {{{     7,     27,     20}, 0, {     0,      0}, {0xda, 0x61, 0x47, 0x00}}},
+-    {{{    59,     20,     15}, 0, {     0,      0}, {0x44, 0x4a, 0x4c, 0x00}}},
+-    {{{    59,     21,    -21}, 0, {     0,      0}, {0x37, 0x67, 0xd0, 0x00}}},
+-    {{{     6,    -16,     32}, 0, {     0,      0}, {0xd5, 0xdc, 0x71, 0x00}}},
+-    {{{    58,    -15,     25}, 0, {     0,      0}, {0x32, 0xc6, 0x64, 0x00}}},
+-    {{{     5,    -42,     -5}, 0, {     0,      0}, {0xd3, 0x8a, 0xff, 0x00}}},
+-    {{{    57,    -36,     -5}, 0, {     0,      0}, {0x3e, 0x93, 0xef, 0x00}}},
+-    {{{     6,    -13,    -42}, 0, {     0,      0}, {0xd6, 0xde, 0x8e, 0x00}}},
+-    {{{    58,    -13,    -34}, 0, {     0,      0}, {0x3b, 0xfb, 0x90, 0x00}}},
+-    {{{     7,     29,    -26}, 0, {     0,      0}, {0xda, 0x62, 0xbb, 0x00}}},
+-    {{{    -8,     17,    -17}, 0, {     0,      0}, {0x90, 0x2a, 0xd6, 0x00}}},
+-    {{{    -8,     16,     10}, 0, {     0,      0}, {0x9a, 0x44, 0x1d, 0x00}}},
+-    {{{    -8,     -9,    -27}, 0, {     0,      0}, {0x8e, 0xe8, 0xce, 0x00}}},
+-    {{{    -9,    -26,     -5}, 0, {     0,      0}, {0x96, 0xbd, 0x0e, 0x00}}},
+-    {{{    -8,    -11,     18}, 0, {     0,      0}, {0x8b, 0xff, 0x2f, 0x00}}},
+-};
+-
+-// 0x0400CE30
+-static const Vtx mario_left_arm_shared_dl_vertex_group2[] = {
+-    {{{    68,     13,    -16}, 0, {     0,      0}, {0x6a, 0x38, 0xd9, 0x00}}},
+-    {{{    68,    -10,    -25}, 0, {     0,      0}, {0x75, 0xe7, 0xd9, 0x00}}},
+-    {{{    58,    -13,    -34}, 0, {     0,      0}, {0x3b, 0xfb, 0x90, 0x00}}},
+-    {{{    59,     20,     15}, 0, {     0,      0}, {0x44, 0x4a, 0x4c, 0x00}}},
+-    {{{    68,     12,      9}, 0, {     0,      0}, {0x78, 0x1f, 0x1b, 0x00}}},
+-    {{{    67,    -12,     16}, 0, {     0,      0}, {0x6f, 0xe8, 0x37, 0x00}}},
+-    {{{    57,    -36,     -5}, 0, {     0,      0}, {0x3e, 0x93, 0xef, 0x00}}},
+-    {{{    67,    -26,     -5}, 0, {     0,      0}, {0x6e, 0xc2, 0xfe, 0x00}}},
+-    {{{    58,    -15,     25}, 0, {     0,      0}, {0x32, 0xc6, 0x64, 0x00}}},
+-    {{{    59,     21,    -21}, 0, {     0,      0}, {0x37, 0x67, 0xd0, 0x00}}},
+-    {{{     7,     27,     20}, 0, {     0,      0}, {0xda, 0x61, 0x47, 0x00}}},
+-    {{{    -8,    -11,     18}, 0, {     0,      0}, {0x8b, 0xff, 0x2f, 0x00}}},
+-    {{{     6,    -16,     32}, 0, {     0,      0}, {0xd5, 0xdc, 0x71, 0x00}}},
+-    {{{    -9,    -26,     -5}, 0, {     0,      0}, {0x96, 0xbd, 0x0e, 0x00}}},
+-    {{{     5,    -42,     -5}, 0, {     0,      0}, {0xd3, 0x8a, 0xff, 0x00}}},
+-};
+-
+-// 0x0400CF20
+-static const Vtx mario_left_arm_shared_dl_vertex_group3[] = {
+-    {{{     5,    -42,     -5}, 0, {     0,      0}, {0xd3, 0x8a, 0xff, 0x00}}},
+-    {{{    -8,     -9,    -27}, 0, {     0,      0}, {0x8e, 0xe8, 0xce, 0x00}}},
+-    {{{     6,    -13,    -42}, 0, {     0,      0}, {0xd6, 0xde, 0x8e, 0x00}}},
+-    {{{    -8,     17,    -17}, 0, {     0,      0}, {0x90, 0x2a, 0xd6, 0x00}}},
+-    {{{     7,     29,    -26}, 0, {     0,      0}, {0xda, 0x62, 0xbb, 0x00}}},
+-    {{{    -8,     16,     10}, 0, {     0,      0}, {0x9a, 0x44, 0x1d, 0x00}}},
+-    {{{     7,     27,     20}, 0, {     0,      0}, {0xda, 0x61, 0x47, 0x00}}},
+-    {{{    58,    -13,    -34}, 0, {     0,      0}, {0x3b, 0xfb, 0x90, 0x00}}},
+-    {{{    57,    -36,     -5}, 0, {     0,      0}, {0x3e, 0x93, 0xef, 0x00}}},
+-    {{{     6,    -16,     32}, 0, {     0,      0}, {0xd5, 0xdc, 0x71, 0x00}}},
+-    {{{    58,    -15,     25}, 0, {     0,      0}, {0x32, 0xc6, 0x64, 0x00}}},
+-    {{{    59,     20,     15}, 0, {     0,      0}, {0x44, 0x4a, 0x4c, 0x00}}},
+-    {{{    59,     21,    -21}, 0, {     0,      0}, {0x37, 0x67, 0xd0, 0x00}}},
+-    {{{    -8,    -11,     18}, 0, {     0,      0}, {0x8b, 0xff, 0x2f, 0x00}}},
+-};
+-
+-// 0x0400D000
+-static const Vtx mario_left_arm_shared_dl_vertex_group4[] = {
+-    {{{    68,     12,      9}, 0, {     0,      0}, {0x78, 0x1f, 0x1b, 0x00}}},
+-    {{{    68,    -10,    -25}, 0, {     0,      0}, {0x75, 0xe7, 0xd9, 0x00}}},
+-    {{{    68,     13,    -16}, 0, {     0,      0}, {0x6a, 0x38, 0xd9, 0x00}}},
+-    {{{    67,    -12,     16}, 0, {     0,      0}, {0x6f, 0xe8, 0x37, 0x00}}},
+-    {{{    67,    -26,     -5}, 0, {     0,      0}, {0x6e, 0xc2, 0xfe, 0x00}}},
+-    {{{    -8,     17,    -17}, 0, {     0,      0}, {0x90, 0x2a, 0xd6, 0x00}}},
+-    {{{    -8,     -9,    -27}, 0, {     0,      0}, {0x8e, 0xe8, 0xce, 0x00}}},
+-    {{{    -8,    -11,     18}, 0, {     0,      0}, {0x8b, 0xff, 0x2f, 0x00}}},
+-    {{{    -9,    -26,     -5}, 0, {     0,      0}, {0x96, 0xbd, 0x0e, 0x00}}},
+-};
+-
+-// 0x0400D090 - 0x0400D1D8
+-const Gfx mario_left_arm_shared_dl[] = {
+-    gsSPVertex(mario_left_arm_shared_dl_vertex_group1, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+-    gsSP2Triangles( 5,  6,  4, 0x0,  7,  8,  6, 0x0),
+-    gsSP2Triangles( 9,  2,  8, 0x0,  9, 10, 11, 0x0),
+-    gsSP2Triangles( 7, 12, 10, 0x0,  5, 13, 12, 0x0),
+-    gsSP2Triangles( 3, 14, 13, 0x0,  0, 11, 14, 0x0),
+-    gsSPVertex(mario_left_arm_shared_dl_vertex_group2, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  0, 0x0),
+-    gsSP2Triangles( 5,  4,  3, 0x0,  6,  7,  5, 0x0),
+-    gsSP2Triangles( 1,  7,  6, 0x0,  2,  1,  6, 0x0),
+-    gsSP2Triangles( 6,  5,  8, 0x0,  8,  5,  3, 0x0),
+-    gsSP2Triangles( 3,  0,  9, 0x0,  9,  0,  2, 0x0),
+-    gsSP2Triangles(10, 11, 12, 0x0, 12, 13, 14, 0x0),
+-    gsSPVertex(mario_left_arm_shared_dl_vertex_group3, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  4, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  2,  4,  7, 0x0),
+-    gsSP2Triangles( 0,  2,  8, 0x0,  9,  0, 10, 0x0),
+-    gsSP2Triangles( 6,  9, 11, 0x0,  4,  6, 12, 0x0),
+-    gsSP1Triangle(13,  5,  3, 0x0),
+-    gsSPVertex(mario_left_arm_shared_dl_vertex_group4, 9, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
+-    gsSP2Triangles( 3,  4,  1, 0x0,  5,  6,  7, 0x0),
+-    gsSP1Triangle( 6,  8,  7, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400D1D8 - 0x0400D1F8
+-const Gfx mario_left_arm[] = {
+-    gsSPLight(&mario_red_lights_group.l, 1),
+-    gsSPLight(&mario_red_lights_group.a, 2),
+-    gsSPDisplayList(mario_left_arm_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400D1F8
+-static const Vtx mario_left_forearm_shared_dl_vertex[] = {
+-    {{{    -2,     19,     16}, 0, {     0,      0}, {0xdb, 0x61, 0x48, 0x00}}},
+-    {{{    47,     14,     13}, 0, {     0,      0}, {0x44, 0x44, 0x51, 0x00}}},
+-    {{{    47,     16,    -19}, 0, {     0,      0}, {0x45, 0x61, 0xd6, 0x00}}},
+-    {{{    -3,    -17,     26}, 0, {     0,      0}, {0xd7, 0xdb, 0x71, 0x00}}},
+-    {{{    46,    -17,     22}, 0, {     0,      0}, {0x41, 0xc7, 0x5c, 0x00}}},
+-    {{{    -3,    -38,     -4}, 0, {     0,      0}, {0xd4, 0x89, 0xfe, 0x00}}},
+-    {{{    45,    -34,     -4}, 0, {     0,      0}, {0x3f, 0x95, 0xe8, 0x00}}},
+-    {{{    -3,    -14,    -34}, 0, {     0,      0}, {0xd7, 0xde, 0x8e, 0x00}}},
+-    {{{    46,    -14,    -30}, 0, {     0,      0}, {0x42, 0xf4, 0x95, 0x00}}},
+-    {{{    -2,     21,    -21}, 0, {     0,      0}, {0xdb, 0x63, 0xbb, 0x00}}},
+-    {{{   -14,     13,    -15}, 0, {     0,      0}, {0x93, 0x2c, 0xd3, 0x00}}},
+-    {{{   -14,     11,     10}, 0, {     0,      0}, {0x93, 0x3b, 0x19, 0x00}}},
+-    {{{   -15,    -11,    -24}, 0, {     0,      0}, {0x9a, 0xde, 0xbe, 0x00}}},
+-    {{{   -15,    -27,     -4}, 0, {     0,      0}, {0x8b, 0xd2, 0x0a, 0x00}}},
+-    {{{   -15,    -13,     17}, 0, {     0,      0}, {0x9b, 0xfb, 0x4c, 0x00}}},
+-    {{{    58,     -7,     -3}, 0, {     0,      0}, {0x7e, 0xfc, 0x00, 0x00}}},
+-};
+-
+-// 0x0400D2F8 - 0x0400D3E8
+-const Gfx mario_left_forearm_shared_dl[] = {
+-    gsSPVertex(mario_left_forearm_shared_dl_vertex, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+-    gsSP2Triangles( 5,  6,  4, 0x0,  7,  8,  6, 0x0),
+-    gsSP2Triangles( 9,  2,  8, 0x0,  9, 10, 11, 0x0),
+-    gsSP2Triangles( 7, 12, 10, 0x0,  5, 13, 12, 0x0),
+-    gsSP2Triangles( 3, 14, 13, 0x0,  0, 11, 14, 0x0),
+-    gsSP2Triangles( 8, 15,  6, 0x0,  6, 15,  4, 0x0),
+-    gsSP2Triangles( 4, 15,  1, 0x0,  1, 15,  2, 0x0),
+-    gsSP2Triangles( 2, 15,  8, 0x0,  0, 14,  3, 0x0),
+-    gsSP2Triangles( 3, 13,  5, 0x0,  5, 12,  7, 0x0),
+-    gsSP2Triangles( 7, 10,  9, 0x0,  9, 11,  0, 0x0),
+-    gsSP2Triangles( 7,  9,  8, 0x0,  5,  7,  6, 0x0),
+-    gsSP2Triangles( 3,  5,  4, 0x0,  0,  3,  1, 0x0),
+-    gsSP2Triangles( 9,  0,  2, 0x0, 12, 13, 10, 0x0),
+-    gsSP2Triangles(13, 11, 10, 0x0, 13, 14, 11, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400D3E8
+-static const Vtx mario_left_hand_closed_shared_dl_vertex_group1[] = {
+-    {{{    36,      6,     42}, 0, {     0,      0}, {0xe1, 0xf0, 0x79, 0x00}}},
+-    {{{    17,     -1,     27}, 0, {     0,      0}, {0x00, 0xfd, 0x7f, 0x00}}},
+-    {{{    34,    -41,      3}, 0, {     0,      0}, {0x42, 0xa3, 0x36, 0x00}}},
+-    {{{    26,    -25,    -32}, 0, {     0,      0}, {0x09, 0xc7, 0x8f, 0x00}}},
+-    {{{     4,     24,    -31}, 0, {     0,      0}, {0xd5, 0x3f, 0x9c, 0x00}}},
+-    {{{    33,      7,    -44}, 0, {     0,      0}, {0xc6, 0xfe, 0x90, 0x00}}},
+-    {{{    -1,     39,      5}, 0, {     0,      0}, {0xea, 0x6e, 0x3a, 0x00}}},
+-    {{{     5,     -6,     36}, 0, {     0,      0}, {0x44, 0x1b, 0x67, 0x00}}},
+-    {{{   -10,     26,    -38}, 0, {     0,      0}, {0xf0, 0x41, 0x95, 0x00}}},
+-    {{{    17,    -38,    -39}, 0, {     0,      0}, {0x1a, 0xb7, 0x9d, 0x00}}},
+-    {{{    86,     29,     41}, 0, {     0,      0}, {0x4b, 0x20, 0x60, 0x00}}},
+-    {{{    59,     81,      8}, 0, {     0,      0}, {0x11, 0x7a, 0x1d, 0x00}}},
+-    {{{   107,    -26,      4}, 0, {     0,      0}, {0x67, 0xc5, 0x2b, 0x00}}},
+-    {{{    61,     12,    -60}, 0, {     0,      0}, {0x00, 0x21, 0x86, 0x00}}},
+-    {{{    90,     17,    -46}, 0, {     0,      0}, {0x43, 0x35, 0xa3, 0x00}}},
+-    {{{   100,     -6,    -46}, 0, {     0,      0}, {0x63, 0x0a, 0xb3, 0x00}}},
+-};
+-
+-// 0x0400D4E8
+-static const Vtx mario_left_hand_closed_shared_dl_vertex_group2[] = {
+-    {{{    90,     17,    -46}, 0, {     0,      0}, {0x43, 0x35, 0xa3, 0x00}}},
+-    {{{    57,     55,    -37}, 0, {     0,      0}, {0x22, 0x54, 0xa9, 0x00}}},
+-    {{{    99,     40,    -16}, 0, {     0,      0}, {0x6c, 0x3c, 0xe5, 0x00}}},
+-    {{{    32,     63,    -28}, 0, {     0,      0}, {0xd0, 0x4f, 0xaa, 0x00}}},
+-    {{{    12,     59,     10}, 0, {     0,      0}, {0xaa, 0x58, 0x1b, 0x00}}},
+-    {{{    59,     81,      8}, 0, {     0,      0}, {0x11, 0x7a, 0x1d, 0x00}}},
+-    {{{    80,    -31,    -61}, 0, {     0,      0}, {0x0c, 0xb2, 0x9d, 0x00}}},
+-    {{{   100,     -6,    -46}, 0, {     0,      0}, {0x63, 0x0a, 0xb3, 0x00}}},
+-    {{{   107,    -26,      4}, 0, {     0,      0}, {0x67, 0xc5, 0x2b, 0x00}}},
+-    {{{    61,     12,    -60}, 0, {     0,      0}, {0x00, 0x21, 0x86, 0x00}}},
+-    {{{    33,      7,    -44}, 0, {     0,      0}, {0xc6, 0xfe, 0x90, 0x00}}},
+-    {{{    86,     29,     41}, 0, {     0,      0}, {0x4b, 0x20, 0x60, 0x00}}},
+-    {{{    58,    -45,      7}, 0, {     0,      0}, {0x01, 0x85, 0x1c, 0x00}}},
+-    {{{    36,      6,     42}, 0, {     0,      0}, {0xe1, 0xf0, 0x79, 0x00}}},
+-};
+-
+-// 0x0400D5C8
+-static const Vtx mario_left_hand_closed_shared_dl_vertex_group3[] = {
+-    {{{    27,    -58,      6}, 0, {     0,      0}, {0xa3, 0xad, 0x12, 0x00}}},
+-    {{{   -14,    -14,     -4}, 0, {     0,      0}, {0x8c, 0xcd, 0x02, 0x00}}},
+-    {{{    17,    -38,    -39}, 0, {     0,      0}, {0x1a, 0xb7, 0x9d, 0x00}}},
+-    {{{   -10,     26,    -38}, 0, {     0,      0}, {0xf0, 0x41, 0x95, 0x00}}},
+-    {{{   -18,     45,      8}, 0, {     0,      0}, {0x84, 0xf3, 0x13, 0x00}}},
+-    {{{     5,     -6,     36}, 0, {     0,      0}, {0x99, 0xd2, 0x38, 0x00}}},
+-    {{{    34,    -41,      3}, 0, {     0,      0}, {0x42, 0xa3, 0x36, 0x00}}},
+-    {{{    27,    -58,      6}, 0, {     0,      0}, {0x73, 0xd5, 0x1d, 0x00}}},
+-    {{{    26,    -25,    -32}, 0, {     0,      0}, {0x09, 0xc7, 0x8f, 0x00}}},
+-    {{{   -18,     45,      8}, 0, {     0,      0}, {0x2d, 0x71, 0x21, 0x00}}},
+-    {{{    -1,     39,      5}, 0, {     0,      0}, {0xea, 0x6e, 0x3a, 0x00}}},
+-    {{{     5,     -6,     36}, 0, {     0,      0}, {0x44, 0x1b, 0x67, 0x00}}},
+-    {{{    36,      6,     42}, 0, {     0,      0}, {0xe1, 0xf0, 0x79, 0x00}}},
+-    {{{    12,     59,     10}, 0, {     0,      0}, {0xaa, 0x58, 0x1b, 0x00}}},
+-    {{{    58,    -45,      7}, 0, {     0,      0}, {0x01, 0x85, 0x1c, 0x00}}},
+-};
+-
+-// 0x0400D6B8
+-static const Vtx mario_left_hand_closed_shared_dl_vertex_group4[] = {
+-    {{{    26,    -25,    -32}, 0, {     0,      0}, {0x09, 0xc7, 0x8f, 0x00}}},
+-    {{{    33,      7,    -44}, 0, {     0,      0}, {0xc6, 0xfe, 0x90, 0x00}}},
+-    {{{    80,    -31,    -61}, 0, {     0,      0}, {0x0c, 0xb2, 0x9d, 0x00}}},
+-    {{{    58,    -45,      7}, 0, {     0,      0}, {0x01, 0x85, 0x1c, 0x00}}},
+-    {{{    34,    -41,      3}, 0, {     0,      0}, {0x42, 0xa3, 0x36, 0x00}}},
+-    {{{    61,     12,    -60}, 0, {     0,      0}, {0x00, 0x21, 0x86, 0x00}}},
+-    {{{    12,     59,     10}, 0, {     0,      0}, {0xaa, 0x58, 0x1b, 0x00}}},
+-    {{{    32,     63,    -28}, 0, {     0,      0}, {0xd0, 0x4f, 0xaa, 0x00}}},
+-    {{{     4,     24,    -31}, 0, {     0,      0}, {0xd5, 0x3f, 0x9c, 0x00}}},
+-    {{{    -1,     39,      5}, 0, {     0,      0}, {0xea, 0x6e, 0x3a, 0x00}}},
+-};
+-
+-// 0x0400D758 - 0x0400D8F0
+-const Gfx mario_left_hand_closed_shared_dl[] = {
+-    gsSPVertex(mario_left_hand_closed_shared_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  1,  0, 0x0,  2,  1,  7, 0x0),
+-    gsSP2Triangles( 7,  1,  6, 0x0,  6,  4,  8, 0x0),
+-    gsSP2Triangles( 8,  4,  3, 0x0,  9,  3,  2, 0x0),
+-    gsSP2Triangles( 0, 10, 11, 0x0, 12, 10,  0, 0x0),
+-    gsSP1Triangle(13, 14, 15, 0x0),
+-    gsSPVertex(mario_left_hand_closed_shared_dl_vertex_group2, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 5,  1,  3, 0x0,  6,  7,  8, 0x0),
+-    gsSP2Triangles( 9, 10,  3, 0x0,  1,  0,  9, 0x0),
+-    gsSP2Triangles( 9,  3,  1, 0x0,  5,  2,  1, 0x0),
+-    gsSP2Triangles( 0,  2,  7, 0x0,  7,  2,  8, 0x0),
+-    gsSP2Triangles( 8,  2, 11, 0x0, 11,  2,  5, 0x0),
+-    gsSP2Triangles( 9,  7,  6, 0x0,  6,  8, 12, 0x0),
+-    gsSP2Triangles(12,  8, 13, 0x0, 13,  5,  4, 0x0),
+-    gsSPVertex(mario_left_hand_closed_shared_dl_vertex_group3, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+-    gsSP2Triangles( 3,  1,  4, 0x0,  4,  1,  5, 0x0),
+-    gsSP2Triangles( 5,  1,  0, 0x0,  6,  7,  2, 0x0),
+-    gsSP2Triangles( 8,  2,  3, 0x0,  3,  9, 10, 0x0),
+-    gsSP2Triangles(10,  9, 11, 0x0, 11,  7,  6, 0x0),
+-    gsSP2Triangles(10, 12, 13, 0x0,  6, 14, 12, 0x0),
+-    gsSPVertex(mario_left_hand_closed_shared_dl_vertex_group4, 10, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  0, 0x0),
+-    gsSP2Triangles( 1,  5,  2, 0x0,  0,  2,  3, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  8,  9,  6, 0x0),
+-    gsSP1Triangle( 7,  1,  8, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400D8F0 - 0x0400D910
+-const Gfx mario_left_hand_closed[] = {
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPDisplayList(mario_left_hand_closed_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400D910
+-static const Vtx mario_right_arm_shared_dl_vertex_group1[] = {
+-    {{{    57,    -14,    -22}, 0, {     0,      0}, {0x33, 0xcf, 0x97, 0x00}}},
+-    {{{     5,    -44,      5}, 0, {     0,      0}, {0xd3, 0x8a, 0xf7, 0x00}}},
+-    {{{     6,    -15,    -30}, 0, {     0,      0}, {0xd6, 0xe6, 0x8c, 0x00}}},
+-    {{{    57,    -38,      6}, 0, {     0,      0}, {0x3e, 0x93, 0x07, 0x00}}},
+-    {{{     6,    -19,     44}, 0, {     0,      0}, {0xd5, 0xd4, 0x6e, 0x00}}},
+-    {{{    57,    -17,     37}, 0, {     0,      0}, {0x33, 0xe8, 0x71, 0x00}}},
+-    {{{     7,     25,     32}, 0, {     0,      0}, {0xd9, 0x5c, 0x4d, 0x00}}},
+-    {{{    58,     17,     27}, 0, {     0,      0}, {0x44, 0x59, 0x39, 0x00}}},
+-    {{{     7,     27,    -13}, 0, {     0,      0}, {0xda, 0x67, 0xc2, 0x00}}},
+-    {{{    58,     19,     -9}, 0, {     0,      0}, {0x3e, 0x4a, 0xaf, 0x00}}},
+-    {{{    -9,    -28,      6}, 0, {     0,      0}, {0x96, 0xbf, 0xec, 0x00}}},
+-    {{{    -9,    -10,    -15}, 0, {     0,      0}, {0x8f, 0x01, 0xc7, 0x00}}},
+-    {{{    -8,     15,     -5}, 0, {     0,      0}, {0x91, 0x39, 0xed, 0x00}}},
+-    {{{    -8,     14,     22}, 0, {     0,      0}, {0x99, 0x2e, 0x38, 0x00}}},
+-    {{{    -9,    -13,     30}, 0, {     0,      0}, {0x8a, 0xe9, 0x26, 0x00}}},
+-    {{{    67,    -12,    -13}, 0, {     0,      0}, {0x68, 0xeb, 0xbc, 0x00}}},
+-};
+-
+-// 0x0400DA10
+-static const Vtx mario_right_arm_shared_dl_vertex_group2[] = {
+-    {{{    57,    -38,      6}, 0, {     0,      0}, {0x3e, 0x93, 0x07, 0x00}}},
+-    {{{    67,    -14,     28}, 0, {     0,      0}, {0x6f, 0xe8, 0x37, 0x00}}},
+-    {{{    57,    -17,     37}, 0, {     0,      0}, {0x33, 0xe8, 0x71, 0x00}}},
+-    {{{    58,     17,     27}, 0, {     0,      0}, {0x44, 0x59, 0x39, 0x00}}},
+-    {{{    67,     11,     -4}, 0, {     0,      0}, {0x78, 0x26, 0xf1, 0x00}}},
+-    {{{    58,     19,     -9}, 0, {     0,      0}, {0x3e, 0x4a, 0xaf, 0x00}}},
+-    {{{    67,     10,     21}, 0, {     0,      0}, {0x71, 0x2a, 0x25, 0x00}}},
+-    {{{    66,    -28,      6}, 0, {     0,      0}, {0x75, 0xd1, 0xfe, 0x00}}},
+-    {{{    67,    -12,    -13}, 0, {     0,      0}, {0x68, 0xeb, 0xbc, 0x00}}},
+-    {{{    -9,    -13,     30}, 0, {     0,      0}, {0x8a, 0xe9, 0x26, 0x00}}},
+-    {{{    -9,    -28,      6}, 0, {     0,      0}, {0x96, 0xbf, 0xec, 0x00}}},
+-    {{{     5,    -44,      5}, 0, {     0,      0}, {0xd3, 0x8a, 0xf7, 0x00}}},
+-    {{{    -8,     14,     22}, 0, {     0,      0}, {0x99, 0x2e, 0x38, 0x00}}},
+-    {{{     6,    -19,     44}, 0, {     0,      0}, {0xd5, 0xd4, 0x6e, 0x00}}},
+-    {{{    -8,     15,     -5}, 0, {     0,      0}, {0x91, 0x39, 0xed, 0x00}}},
+-    {{{     7,     25,     32}, 0, {     0,      0}, {0xd9, 0x5c, 0x4d, 0x00}}},
+-};
+-
+-// 0x0400DB10
+-static const Vtx mario_right_arm_shared_dl_vertex_group3[] = {
+-    {{{    -9,    -10,    -15}, 0, {     0,      0}, {0x8f, 0x01, 0xc7, 0x00}}},
+-    {{{    -8,     15,     -5}, 0, {     0,      0}, {0x91, 0x39, 0xed, 0x00}}},
+-    {{{     7,     27,    -13}, 0, {     0,      0}, {0xda, 0x67, 0xc2, 0x00}}},
+-    {{{    -9,    -28,      6}, 0, {     0,      0}, {0x96, 0xbf, 0xec, 0x00}}},
+-    {{{     6,    -15,    -30}, 0, {     0,      0}, {0xd6, 0xe6, 0x8c, 0x00}}},
+-    {{{    58,     19,     -9}, 0, {     0,      0}, {0x3e, 0x4a, 0xaf, 0x00}}},
+-    {{{    57,    -14,    -22}, 0, {     0,      0}, {0x33, 0xcf, 0x97, 0x00}}},
+-    {{{    58,     17,     27}, 0, {     0,      0}, {0x44, 0x59, 0x39, 0x00}}},
+-    {{{    57,    -17,     37}, 0, {     0,      0}, {0x33, 0xe8, 0x71, 0x00}}},
+-    {{{     7,     25,     32}, 0, {     0,      0}, {0xd9, 0x5c, 0x4d, 0x00}}},
+-    {{{    57,    -38,      6}, 0, {     0,      0}, {0x3e, 0x93, 0x07, 0x00}}},
+-    {{{     6,    -19,     44}, 0, {     0,      0}, {0xd5, 0xd4, 0x6e, 0x00}}},
+-    {{{     5,    -44,      5}, 0, {     0,      0}, {0xd3, 0x8a, 0xf7, 0x00}}},
+-    {{{    67,    -12,    -13}, 0, {     0,      0}, {0x68, 0xeb, 0xbc, 0x00}}},
+-    {{{    67,     11,     -4}, 0, {     0,      0}, {0x78, 0x26, 0xf1, 0x00}}},
+-    {{{    66,    -28,      6}, 0, {     0,      0}, {0x75, 0xd1, 0xfe, 0x00}}},
+-};
+-
+-// 0x0400DC10
+-static const Vtx mario_right_arm_shared_dl_vertex_group4[] = {
+-    {{{    -9,    -10,    -15}, 0, {     0,      0}, {0x8f, 0x01, 0xc7, 0x00}}},
+-    {{{    -9,    -28,      6}, 0, {     0,      0}, {0x96, 0xbf, 0xec, 0x00}}},
+-    {{{    -9,    -13,     30}, 0, {     0,      0}, {0x8a, 0xe9, 0x26, 0x00}}},
+-    {{{    -8,     15,     -5}, 0, {     0,      0}, {0x91, 0x39, 0xed, 0x00}}},
+-    {{{    -8,     14,     22}, 0, {     0,      0}, {0x99, 0x2e, 0x38, 0x00}}},
+-    {{{    67,     11,     -4}, 0, {     0,      0}, {0x78, 0x26, 0xf1, 0x00}}},
+-    {{{    67,    -14,     28}, 0, {     0,      0}, {0x6f, 0xe8, 0x37, 0x00}}},
+-    {{{    66,    -28,      6}, 0, {     0,      0}, {0x75, 0xd1, 0xfe, 0x00}}},
+-    {{{    67,     10,     21}, 0, {     0,      0}, {0x71, 0x2a, 0x25, 0x00}}},
+-};
+-
+-// 0x0400DCA0 - 0x0400DDE8
+-const Gfx mario_right_arm_shared_dl[] = {
+-    gsSPVertex(mario_right_arm_shared_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+-    gsSP2Triangles( 5,  6,  4, 0x0,  7,  8,  6, 0x0),
+-    gsSP2Triangles( 9,  2,  8, 0x0,  1, 10,  2, 0x0),
+-    gsSP2Triangles( 2, 11,  8, 0x0,  8, 12,  6, 0x0),
+-    gsSP2Triangles( 6, 13,  4, 0x0,  4, 14,  1, 0x0),
+-    gsSP2Triangles( 9, 15,  0, 0x0,  0, 15,  3, 0x0),
+-    gsSPVertex(mario_right_arm_shared_dl_vertex_group2, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+-    gsSP2Triangles( 3,  4,  5, 0x0,  3,  6,  4, 0x0),
+-    gsSP2Triangles( 1,  6,  3, 0x0,  0,  7,  1, 0x0),
+-    gsSP2Triangles( 8,  7,  0, 0x0,  5,  4,  8, 0x0),
+-    gsSP2Triangles( 9, 10, 11, 0x0, 12,  9, 13, 0x0),
+-    gsSP1Triangle(14, 12, 15, 0x0),
+-    gsSPVertex(mario_right_arm_shared_dl_vertex_group3, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  4, 0x0),
+-    gsSP2Triangles( 5,  6,  4, 0x0,  7,  5,  2, 0x0),
+-    gsSP2Triangles( 8,  7,  9, 0x0, 10,  8, 11, 0x0),
+-    gsSP2Triangles( 6, 10, 12, 0x0, 13, 14, 15, 0x0),
+-    gsSPVertex(mario_right_arm_shared_dl_vertex_group4, 9, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
+-    gsSP2Triangles( 2,  4,  3, 0x0,  5,  6,  7, 0x0),
+-    gsSP1Triangle( 5,  8,  6, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400DDE8 - 0x0400DE08
+-const Gfx mario_right_arm[] = {
+-    gsSPLight(&mario_red_lights_group.l, 1),
+-    gsSPLight(&mario_red_lights_group.a, 2),
+-    gsSPDisplayList(mario_right_arm_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400DE08
+-static const Vtx mario_right_forearm_shared_dl_vertex[] = {
+-    {{{    47,    -15,    -19}, 0, {     0,      0}, {0x41, 0xcf, 0x9f, 0x00}}},
+-    {{{    -3,    -39,      6}, 0, {     0,      0}, {0xd4, 0x8a, 0xf8, 0x00}}},
+-    {{{    -2,    -15,    -23}, 0, {     0,      0}, {0xd7, 0xe5, 0x8c, 0x00}}},
+-    {{{    46,    -36,      6}, 0, {     0,      0}, {0x3f, 0x94, 0x0f, 0x00}}},
+-    {{{    -2,    -18,     38}, 0, {     0,      0}, {0xd6, 0xd5, 0x6f, 0x00}}},
+-    {{{    47,    -17,     34}, 0, {     0,      0}, {0x42, 0xec, 0x6a, 0x00}}},
+-    {{{    -1,     18,     28}, 0, {     0,      0}, {0xdb, 0x5d, 0x4d, 0x00}}},
+-    {{{    48,     13,     25}, 0, {     0,      0}, {0x45, 0x5d, 0x32, 0x00}}},
+-    {{{    -1,     20,     -9}, 0, {     0,      0}, {0xdb, 0x67, 0xc1, 0x00}}},
+-    {{{    48,     15,     -7}, 0, {     0,      0}, {0x45, 0x4c, 0xb6, 0x00}}},
+-    {{{   -14,    -28,      6}, 0, {     0,      0}, {0x90, 0xc9, 0xef, 0x00}}},
+-    {{{   -14,    -12,    -13}, 0, {     0,      0}, {0x91, 0x01, 0xc3, 0x00}}},
+-    {{{   -13,     12,     -4}, 0, {     0,      0}, {0x9e, 0x4b, 0xe7, 0x00}}},
+-    {{{   -13,     10,     21}, 0, {     0,      0}, {0x8d, 0x22, 0x28, 0x00}}},
+-    {{{   -14,    -14,     28}, 0, {     0,      0}, {0x9a, 0xd8, 0x3f, 0x00}}},
+-    {{{    59,     -8,      7}, 0, {     0,      0}, {0x7f, 0xfd, 0x00, 0x00}}},
+-};
+-
+-// 0x0400DF08 - 0x0400DFF8
+-const Gfx mario_right_forearm_shared_dl[] = {
+-    gsSPVertex(mario_right_forearm_shared_dl_vertex, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+-    gsSP2Triangles( 5,  6,  4, 0x0,  7,  8,  6, 0x0),
+-    gsSP2Triangles( 9,  2,  8, 0x0,  1, 10,  2, 0x0),
+-    gsSP2Triangles( 2, 11,  8, 0x0,  8, 12,  6, 0x0),
+-    gsSP2Triangles( 6, 13,  4, 0x0,  4, 14,  1, 0x0),
+-    gsSP2Triangles( 9, 15,  0, 0x0,  0, 15,  3, 0x0),
+-    gsSP2Triangles( 3, 15,  5, 0x0,  5, 15,  7, 0x0),
+-    gsSP2Triangles( 7, 15,  9, 0x0, 14, 10,  1, 0x0),
+-    gsSP2Triangles(13, 14,  4, 0x0, 12, 13,  6, 0x0),
+-    gsSP2Triangles(11, 12,  8, 0x0, 10, 11,  2, 0x0),
+-    gsSP2Triangles( 9,  0,  2, 0x0,  7,  9,  8, 0x0),
+-    gsSP2Triangles( 5,  7,  6, 0x0,  3,  5,  4, 0x0),
+-    gsSP2Triangles( 0,  3,  1, 0x0, 11, 13, 12, 0x0),
+-    gsSP2Triangles(11, 10, 13, 0x0, 10, 14, 13, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400DFF8
+-static const Vtx mario_right_hand_closed_dl_vertex_group1[] = {
+-    {{{    35,      9,    -37}, 0, {     0,      0}, {0xe5, 0xf5, 0x85, 0x00}}},
+-    {{{    55,    -44,     -4}, 0, {     0,      0}, {0x00, 0x86, 0xdf, 0x00}}},
+-    {{{    31,    -40,     -1}, 0, {     0,      0}, {0x43, 0xa4, 0xc9, 0x00}}},
+-    {{{    10,     60,     -4}, 0, {     0,      0}, {0xac, 0x5a, 0xe5, 0x00}}},
+-    {{{    -2,     41,     -1}, 0, {     0,      0}, {0xed, 0x70, 0xc9, 0x00}}},
+-    {{{    24,    -57,     -4}, 0, {     0,      0}, {0x73, 0xd4, 0xe6, 0x00}}},
+-    {{{     4,     -3,    -33}, 0, {     0,      0}, {0x48, 0x1e, 0x9d, 0x00}}},
+-    {{{   -19,     47,     -4}, 0, {     0,      0}, {0x30, 0x72, 0xe5, 0x00}}},
+-    {{{   -14,     26,     41}, 0, {     0,      0}, {0xed, 0x3d, 0x6d, 0x00}}},
+-    {{{    13,    -38,     41}, 0, {     0,      0}, {0x15, 0xb3, 0x61, 0x00}}},
+-    {{{    23,    -26,     35}, 0, {     0,      0}, {0x04, 0xc3, 0x6e, 0x00}}},
+-    {{{    24,    -57,     -4}, 0, {     0,      0}, {0xa2, 0xaf, 0xe7, 0x00}}},
+-    {{{   -16,    -12,      6}, 0, {     0,      0}, {0x8c, 0xcf, 0xf8, 0x00}}},
+-    {{{     4,     -3,    -33}, 0, {     0,      0}, {0x9b, 0xd5, 0xc2, 0x00}}},
+-    {{{   -19,     47,     -4}, 0, {     0,      0}, {0x85, 0xf5, 0xe7, 0x00}}},
+-    {{{    58,     81,      0}, 0, {     0,      0}, {0x14, 0x7b, 0xe9, 0x00}}},
+-};
+-
+-// 0x0400E0F8
+-static const Vtx mario_right_hand_closed_dl_vertex_group2[] = {
+-    {{{    35,      9,    -37}, 0, {     0,      0}, {0xe5, 0xf5, 0x85, 0x00}}},
+-    {{{   104,    -26,      1}, 0, {     0,      0}, {0x68, 0xc5, 0xd7, 0x00}}},
+-    {{{    55,    -44,     -4}, 0, {     0,      0}, {0x00, 0x86, 0xdf, 0x00}}},
+-    {{{    75,    -33,     66}, 0, {     0,      0}, {0x08, 0xaf, 0x60, 0x00}}},
+-    {{{    96,     -8,     52}, 0, {     0,      0}, {0x60, 0x06, 0x51, 0x00}}},
+-    {{{    57,     10,     66}, 0, {     0,      0}, {0xfd, 0x1c, 0x7b, 0x00}}},
+-    {{{    58,     81,      0}, 0, {     0,      0}, {0x14, 0x7b, 0xe9, 0x00}}},
+-    {{{    97,     39,     24}, 0, {     0,      0}, {0x6b, 0x3a, 0x21, 0x00}}},
+-    {{{    86,     30,    -33}, 0, {     0,      0}, {0x4f, 0x22, 0xa4, 0x00}}},
+-    {{{    86,     15,     52}, 0, {     0,      0}, {0x40, 0x30, 0x61, 0x00}}},
+-    {{{    54,     54,     44}, 0, {     0,      0}, {0x20, 0x51, 0x5c, 0x00}}},
+-    {{{    29,     62,     34}, 0, {     0,      0}, {0xce, 0x4c, 0x57, 0x00}}},
+-    {{{    29,      6,     49}, 0, {     0,      0}, {0xc2, 0xfa, 0x6e, 0x00}}},
+-    {{{    10,     60,     -4}, 0, {     0,      0}, {0xac, 0x5a, 0xe5, 0x00}}},
+-};
+-
+-// 0x0400E1D8
+-static const Vtx mario_right_hand_closed_dl_vertex_group3[] = {
+-    {{{    31,    -40,     -1}, 0, {     0,      0}, {0x43, 0xa4, 0xc9, 0x00}}},
+-    {{{    23,    -26,     35}, 0, {     0,      0}, {0x04, 0xc3, 0x6e, 0x00}}},
+-    {{{    13,    -38,     41}, 0, {     0,      0}, {0x15, 0xb3, 0x61, 0x00}}},
+-    {{{     1,     24,     35}, 0, {     0,      0}, {0xd2, 0x3c, 0x65, 0x00}}},
+-    {{{   -14,     26,     41}, 0, {     0,      0}, {0xed, 0x3d, 0x6d, 0x00}}},
+-    {{{    -2,     41,     -1}, 0, {     0,      0}, {0xed, 0x70, 0xc9, 0x00}}},
+-    {{{    15,      0,    -23}, 0, {     0,      0}, {0x04, 0x01, 0x82, 0x00}}},
+-    {{{     4,     -3,    -33}, 0, {     0,      0}, {0x48, 0x1e, 0x9d, 0x00}}},
+-    {{{    35,      9,    -37}, 0, {     0,      0}, {0xe5, 0xf5, 0x85, 0x00}}},
+-    {{{    29,      6,     49}, 0, {     0,      0}, {0xc2, 0xfa, 0x6e, 0x00}}},
+-    {{{    55,    -44,     -4}, 0, {     0,      0}, {0x00, 0x86, 0xdf, 0x00}}},
+-    {{{    75,    -33,     66}, 0, {     0,      0}, {0x08, 0xaf, 0x60, 0x00}}},
+-    {{{    57,     10,     66}, 0, {     0,      0}, {0xfd, 0x1c, 0x7b, 0x00}}},
+-    {{{    10,     60,     -4}, 0, {     0,      0}, {0xac, 0x5a, 0xe5, 0x00}}},
+-    {{{    29,     62,     34}, 0, {     0,      0}, {0xce, 0x4c, 0x57, 0x00}}},
+-};
+-
+-// 0x0400E2C8 - 0x0400E458
+-const Gfx mario_right_hand_closed_dl[] = {
+-    gsSPVertex(mario_right_hand_closed_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  4, 0x0),
+-    gsSP2Triangles( 2,  5,  6, 0x0,  6,  7,  4, 0x0),
+-    gsSP2Triangles( 4,  7,  8, 0x0,  8,  9, 10, 0x0),
+-    gsSP2Triangles( 9,  5,  2, 0x0, 11, 12, 13, 0x0),
+-    gsSP2Triangles(13, 12, 14, 0x0, 14, 12,  8, 0x0),
+-    gsSP2Triangles( 8, 12,  9, 0x0,  9, 12, 11, 0x0),
+-    gsSP1Triangle( 3, 15,  0, 0x0),
+-    gsSPVertex(mario_right_hand_closed_dl_vertex_group2, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+-    gsSP2Triangles( 3,  4,  5, 0x0,  6,  7,  8, 0x0),
+-    gsSP2Triangles( 8,  7,  1, 0x0,  1,  7,  4, 0x0),
+-    gsSP2Triangles( 4,  7,  9, 0x0, 10,  7,  6, 0x0),
+-    gsSP2Triangles( 9, 10,  5, 0x0, 10, 11,  5, 0x0),
+-    gsSP2Triangles(11, 12,  5, 0x0,  1,  4,  3, 0x0),
+-    gsSP2Triangles(11, 10,  6, 0x0,  6, 13, 11, 0x0),
+-    gsSP2Triangles( 7, 10,  9, 0x0,  4,  9,  5, 0x0),
+-    gsSP2Triangles( 0,  8,  1, 0x0,  6,  8,  0, 0x0),
+-    gsSPVertex(mario_right_hand_closed_dl_vertex_group3, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  4, 0x0),
+-    gsSP2Triangles( 4,  3,  5, 0x0,  5,  6,  7, 0x0),
+-    gsSP2Triangles( 7,  6,  0, 0x0,  8,  6,  5, 0x0),
+-    gsSP2Triangles( 9,  3,  1, 0x0,  0,  6,  8, 0x0),
+-    gsSP2Triangles(10, 11,  1, 0x0, 11,  9,  1, 0x0),
+-    gsSP2Triangles(11, 12,  9, 0x0,  1,  0, 10, 0x0),
+-    gsSP2Triangles(13,  5,  3, 0x0,  3,  9, 14, 0x0),
+-    gsSP1Triangle(14, 13,  3, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400E458 - 0x0400E478
+-const Gfx mario_right_hand_closed[] = {
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPDisplayList(mario_right_hand_closed_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400E478 - 0x0400E4A8
+-const Gfx mario_metal_right_hand_closed[] = {
+-    gsSPDisplayList(mario_right_hand_closed_dl),
+-    gsDPPipeSync(),
+-    gsSPClearGeometryMode(G_TEXTURE_GEN),
+-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400E4A8
+-static const Vtx mario_left_thigh_dl_vertex_group1[] = {
+-    {{{     1,    -44,      8}, 0, {     0,      0}, {0xab, 0xa2, 0x00, 0x00}}},
+-    {{{   -15,      0,      7}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
+-    {{{     0,    -13,    -32}, 0, {     0,      0}, {0x9f, 0xe1, 0xb5, 0x00}}},
+-    {{{    -4,     37,    -17}, 0, {     0,      0}, {0x9e, 0x30, 0xc0, 0x00}}},
+-    {{{    -5,     37,     31}, 0, {     0,      0}, {0xa0, 0x3f, 0x34, 0x00}}},
+-    {{{    -1,    -12,     47}, 0, {     0,      0}, {0x9e, 0xe3, 0x49, 0x00}}},
+-    {{{    95,     -5,     48}, 0, {     0,      0}, {0x4e, 0xe9, 0x60, 0x00}}},
+-    {{{   116,     10,      8}, 0, {     0,      0}, {0x7e, 0x09, 0x01, 0x00}}},
+-    {{{    91,     45,     32}, 0, {     0,      0}, {0x3c, 0x4e, 0x4f, 0x00}}},
+-    {{{    92,     45,    -16}, 0, {     0,      0}, {0x35, 0x5d, 0xbd, 0x00}}},
+-    {{{    96,     -5,    -31}, 0, {     0,      0}, {0x50, 0xe8, 0xa1, 0x00}}},
+-    {{{    98,    -37,      8}, 0, {     0,      0}, {0x46, 0x97, 0x01, 0x00}}},
+-    {{{    19,    -15,    -42}, 0, {     0,      0}, {0xec, 0xd9, 0x8a, 0x00}}},
+-    {{{    14,     48,    -23}, 0, {     0,      0}, {0xd7, 0x67, 0xc5, 0x00}}},
+-    {{{    13,     48,     38}, 0, {     0,      0}, {0xe7, 0x6d, 0x3a, 0x00}}},
+-    {{{    18,    -15,     58}, 0, {     0,      0}, {0xea, 0xda, 0x76, 0x00}}},
+-};
+-
+-// 0x0400E5A8
+-static const Vtx mario_left_thigh_dl_vertex_group2[] = {
+-    {{{    18,    -15,     58}, 0, {     0,      0}, {0xea, 0xda, 0x76, 0x00}}},
+-    {{{     1,    -44,      8}, 0, {     0,      0}, {0xab, 0xa2, 0x00, 0x00}}},
+-    {{{    21,    -54,      8}, 0, {     0,      0}, {0xf0, 0x83, 0x00, 0x00}}},
+-    {{{    19,    -15,    -42}, 0, {     0,      0}, {0xec, 0xd9, 0x8a, 0x00}}},
+-    {{{    -1,    -12,     47}, 0, {     0,      0}, {0x9e, 0xe3, 0x49, 0x00}}},
+-    {{{   -15,      0,      7}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
+-    {{{    98,    -37,      8}, 0, {     0,      0}, {0x46, 0x97, 0x01, 0x00}}},
+-    {{{    13,     48,     38}, 0, {     0,      0}, {0xe7, 0x6d, 0x3a, 0x00}}},
+-    {{{    91,     45,     32}, 0, {     0,      0}, {0x3c, 0x4e, 0x4f, 0x00}}},
+-    {{{    14,     48,    -23}, 0, {     0,      0}, {0xd7, 0x67, 0xc5, 0x00}}},
+-    {{{    92,     45,    -16}, 0, {     0,      0}, {0x35, 0x5d, 0xbd, 0x00}}},
+-    {{{    96,     -5,    -31}, 0, {     0,      0}, {0x50, 0xe8, 0xa1, 0x00}}},
+-    {{{    95,     -5,     48}, 0, {     0,      0}, {0x4e, 0xe9, 0x60, 0x00}}},
+-    {{{     0,    -13,    -32}, 0, {     0,      0}, {0x9f, 0xe1, 0xb5, 0x00}}},
+-    {{{    -5,     37,     31}, 0, {     0,      0}, {0xa0, 0x3f, 0x34, 0x00}}},
+-    {{{    -4,     37,    -17}, 0, {     0,      0}, {0x9e, 0x30, 0xc0, 0x00}}},
+-};
+-
+-// 0x0400E6A8 - 0x0400E7B0
+-const Gfx mario_left_thigh_dl[] = {
+-    gsSPVertex(mario_left_thigh_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+-    gsSP2Triangles( 3,  1,  4, 0x0,  4,  1,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  8,  7,  9, 0x0),
+-    gsSP2Triangles( 9,  7, 10, 0x0, 10,  7, 11, 0x0),
+-    gsSP2Triangles(11,  7,  6, 0x0, 12,  3, 13, 0x0),
+-    gsSP2Triangles(13,  4, 14, 0x0, 14,  4, 15, 0x0),
+-    gsSPVertex(mario_left_thigh_dl_vertex_group2, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+-    gsSP2Triangles( 4,  5,  1, 0x0,  0,  2,  6, 0x0),
+-    gsSP2Triangles( 7,  0,  8, 0x0,  9,  7, 10, 0x0),
+-    gsSP2Triangles( 3,  9, 10, 0x0,  2,  3,  6, 0x0),
+-    gsSP2Triangles( 3, 11,  6, 0x0, 10, 11,  3, 0x0),
+-    gsSP2Triangles( 7,  8, 10, 0x0,  0, 12,  8, 0x0),
+-    gsSP2Triangles( 6, 12,  0, 0x0,  1, 13,  3, 0x0),
+-    gsSP2Triangles( 0,  4,  1, 0x0, 14,  4,  0, 0x0),
+-    gsSP2Triangles( 9, 15, 14, 0x0,  3, 13, 15, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400E7B0 - 0x0400E7E0
+-const Gfx mario_left_thigh[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPLight(&mario_blue_lights_group.l, 1),
+-    gsSPLight(&mario_blue_lights_group.a, 2),
+-    gsSPDisplayList(mario_left_thigh_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400E7E0 - 0x0400E858
+-const Gfx mario_metal_left_thigh[] = {
+-    gsDPPipeSync(),
+-    gsSPSetGeometryMode(G_TEXTURE_GEN),
+-    gsDPSetCombineMode(G_CC_DECALFADE, G_CC_DECALFADE),
+-    gsDPLoadTextureBlock(mario_texture_metal, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_ON),
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPDisplayList(mario_left_thigh_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400E858
+-static const Vtx mario_left_leg_shared_dl_vertex[] = {
+-    {{{     4,    -37,      9}, 0, {     0,      0}, {0xc1, 0x93, 0x00, 0x00}}},
+-    {{{    64,    -46,      9}, 0, {     0,      0}, {0x4b, 0x9a, 0x01, 0x00}}},
+-    {{{    65,    -11,     54}, 0, {     0,      0}, {0x2d, 0xdb, 0x70, 0x00}}},
+-    {{{     8,     44,     33}, 0, {     0,      0}, {0xcc, 0x5e, 0x43, 0x00}}},
+-    {{{    68,     45,     37}, 0, {     0,      0}, {0x52, 0x4b, 0x3c, 0x00}}},
+-    {{{    69,     45,    -18}, 0, {     0,      0}, {0x42, 0x61, 0xd1, 0x00}}},
+-    {{{     9,     44,    -16}, 0, {     0,      0}, {0xc4, 0x4d, 0xaf, 0x00}}},
+-    {{{    66,    -11,    -36}, 0, {     0,      0}, {0x2e, 0xda, 0x91, 0x00}}},
+-    {{{     6,     -6,    -31}, 0, {     0,      0}, {0xb4, 0xe5, 0x9f, 0x00}}},
+-    {{{     6,     -6,     49}, 0, {     0,      0}, {0xb3, 0xe7, 0x60, 0x00}}},
+-    {{{   -14,      8,      8}, 0, {     0,      0}, {0x82, 0x06, 0xff, 0x00}}},
+-    {{{    81,      3,      9}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
+-};
+-
+-// 0x0400E918 - 0x0400E9C8
+-const Gfx mario_left_leg_shared_dl[] = {
+-    gsSPVertex(mario_left_leg_shared_dl_vertex, 12, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  2,  4, 0x0),
+-    gsSP2Triangles( 3,  4,  5, 0x0,  6,  5,  7, 0x0),
+-    gsSP2Triangles( 0,  7,  1, 0x0,  0,  8,  7, 0x0),
+-    gsSP2Triangles( 7,  8,  6, 0x0,  5,  6,  3, 0x0),
+-    gsSP2Triangles( 3,  9,  2, 0x0,  2,  9,  0, 0x0),
+-    gsSP2Triangles( 3, 10,  9, 0x0,  5, 11,  7, 0x0),
+-    gsSP2Triangles( 7, 11,  1, 0x0,  1, 11,  2, 0x0),
+-    gsSP2Triangles( 2, 11,  4, 0x0,  4, 11,  5, 0x0),
+-    gsSP2Triangles( 9, 10,  0, 0x0,  0, 10,  8, 0x0),
+-    gsSP2Triangles( 8, 10,  6, 0x0,  6, 10,  3, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400E9C8
+-static const Vtx mario_left_foot_shared_dl_vertex_group1[] = {
+-    {{{   110,      9,     35}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{   110,      8,    -20}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{    76,     20,    -41}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{    78,     21,     61}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{   -12,     53,    -32}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{   -11,     54,     53}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{   -39,     64,     -8}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{   -41,     65,     26}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{    43,    -18,     54}, 0, {     0,      0}, {0x07, 0xb3, 0x64, 0x00}}},
+-    {{{    78,     21,     61}, 0, {     0,      0}, {0x15, 0xdb, 0x77, 0x00}}},
+-    {{{   -11,     54,     53}, 0, {     0,      0}, {0xd9, 0x00, 0x78, 0x00}}},
+-    {{{    44,    -12,    -33}, 0, {     0,      0}, {0x01, 0xb7, 0x99, 0x00}}},
+-    {{{   -35,     11,    -21}, 0, {     0,      0}, {0xb5, 0xd2, 0xa5, 0x00}}},
+-    {{{   -12,     53,    -32}, 0, {     0,      0}, {0xd7, 0xfd, 0x89, 0x00}}},
+-    {{{   -34,     12,     44}, 0, {     0,      0}, {0xb2, 0xd2, 0x58, 0x00}}},
+-    {{{    76,     20,    -41}, 0, {     0,      0}, {0x0c, 0xd8, 0x89, 0x00}}},
+-};
+-
+-// 0x0400EAC8
+-static const Vtx mario_left_foot_shared_dl_vertex_group2[] = {
+-    {{{    44,    -12,    -33}, 0, {     0,      0}, {0x01, 0xb7, 0x99, 0x00}}},
+-    {{{    76,     20,    -41}, 0, {     0,      0}, {0x0c, 0xd8, 0x89, 0x00}}},
+-    {{{   110,      8,    -20}, 0, {     0,      0}, {0x44, 0xad, 0xbe, 0x00}}},
+-    {{{    80,    -31,      7}, 0, {     0,      0}, {0x34, 0x8d, 0xfb, 0x00}}},
+-    {{{   110,      9,     35}, 0, {     0,      0}, {0x4c, 0xaf, 0x3c, 0x00}}},
+-    {{{    78,     21,     61}, 0, {     0,      0}, {0x15, 0xdb, 0x77, 0x00}}},
+-    {{{    43,    -18,     54}, 0, {     0,      0}, {0x07, 0xb3, 0x64, 0x00}}},
+-    {{{   -34,     12,     44}, 0, {     0,      0}, {0xb2, 0xd2, 0x58, 0x00}}},
+-    {{{   -11,     54,     53}, 0, {     0,      0}, {0xd9, 0x00, 0x78, 0x00}}},
+-    {{{   -41,     65,     26}, 0, {     0,      0}, {0x90, 0x17, 0x35, 0x00}}},
+-    {{{   -39,     64,     -8}, 0, {     0,      0}, {0x93, 0x16, 0xc4, 0x00}}},
+-    {{{   -35,     11,    -21}, 0, {     0,      0}, {0xb5, 0xd2, 0xa5, 0x00}}},
+-    {{{   -54,     15,      8}, 0, {     0,      0}, {0x88, 0xd8, 0xfd, 0x00}}},
+-    {{{   -12,     53,    -32}, 0, {     0,      0}, {0xd7, 0xfd, 0x89, 0x00}}},
+-    {{{    27,    -35,     11}, 0, {     0,      0}, {0xdb, 0x87, 0xfc, 0x00}}},
+-};
+-
+-// 0x0400EBB8 - 0x0400ECA0
+-const Gfx mario_left_foot_shared_dl[] = {
+-    gsSPVertex(mario_left_foot_shared_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
+-    gsSP2Triangles( 3,  2,  4, 0x0,  5,  3,  4, 0x0),
+-    gsSP2Triangles( 5,  4,  6, 0x0,  5,  6,  7, 0x0),
+-    gsSP2Triangles( 8,  9, 10, 0x0, 11, 12, 13, 0x0),
+-    gsSP2Triangles(14,  8, 10, 0x0, 11, 13, 15, 0x0),
+-    gsSPVertex(mario_left_foot_shared_dl_vertex_group2, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  2,  4, 0x0),
+-    gsSP2Triangles( 2,  3,  0, 0x0,  4,  5,  6, 0x0),
+-    gsSP2Triangles( 6,  3,  4, 0x0,  7,  8,  9, 0x0),
+-    gsSP2Triangles(10, 11, 12, 0x0, 10, 13, 11, 0x0),
+-    gsSP2Triangles(12,  9, 10, 0x0,  9, 12,  7, 0x0),
+-    gsSP2Triangles(14,  0,  3, 0x0, 11,  0, 14, 0x0),
+-    gsSP2Triangles( 3,  6, 14, 0x0, 14,  6,  7, 0x0),
+-    gsSP2Triangles(14,  7, 12, 0x0, 12, 11, 14, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400ECA0 - 0x0400ECC0
+-const Gfx mario_left_foot[] = {
+-    gsSPLight(&mario_brown1_lights_group.l, 1),
+-    gsSPLight(&mario_brown1_lights_group.a, 2),
+-    gsSPDisplayList(mario_left_foot_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400ECC0
+-static const Vtx mario_right_thigh_shared_dl_vertex_group1[] = {
+-    {{{    98,    -35,    -10}, 0, {     0,      0}, {0x47, 0x97, 0xfc, 0x00}}},
+-    {{{    19,    -16,     41}, 0, {     0,      0}, {0xee, 0xd6, 0x76, 0x00}}},
+-    {{{    22,    -54,     -9}, 0, {     0,      0}, {0xf2, 0x82, 0xfd, 0x00}}},
+-    {{{    91,     46,     16}, 0, {     0,      0}, {0x35, 0x5c, 0x44, 0x00}}},
+-    {{{    13,     48,     24}, 0, {     0,      0}, {0xd6, 0x66, 0x3e, 0x00}}},
+-    {{{    12,     49,    -37}, 0, {     0,      0}, {0xe5, 0x6e, 0xc9, 0x00}}},
+-    {{{    90,     47,    -32}, 0, {     0,      0}, {0x3b, 0x50, 0xb2, 0x00}}},
+-    {{{    18,    -13,    -58}, 0, {     0,      0}, {0xea, 0xdc, 0x89, 0x00}}},
+-    {{{     1,    -44,     -9}, 0, {     0,      0}, {0xad, 0xa1, 0xff, 0x00}}},
+-    {{{   -15,      0,     -7}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
+-    {{{    -1,    -11,    -47}, 0, {     0,      0}, {0x9d, 0xe3, 0xb7, 0x00}}},
+-    {{{    -6,     38,    -31}, 0, {     0,      0}, {0x9e, 0x3f, 0xcf, 0x00}}},
+-    {{{    -5,     36,     18}, 0, {     0,      0}, {0x9e, 0x2d, 0x42, 0x00}}},
+-    {{{    95,     -3,    -49}, 0, {     0,      0}, {0x4d, 0xec, 0x9e, 0x00}}},
+-    {{{   116,     11,     -9}, 0, {     0,      0}, {0x7e, 0x0b, 0xfe, 0x00}}},
+-    {{{    96,     -5,     30}, 0, {     0,      0}, {0x51, 0xe7, 0x5d, 0x00}}},
+-};
+-
+-// 0x0400EDC0
+-static const Vtx mario_right_thigh_shared_dl_vertex_group2[] = {
+-    {{{    -5,     36,     18}, 0, {     0,      0}, {0x9e, 0x2d, 0x42, 0x00}}},
+-    {{{   -15,      0,     -7}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
+-    {{{     0,    -14,     31}, 0, {     0,      0}, {0xa0, 0xdf, 0x4b, 0x00}}},
+-    {{{     1,    -44,     -9}, 0, {     0,      0}, {0xad, 0xa1, 0xff, 0x00}}},
+-    {{{    19,    -16,     41}, 0, {     0,      0}, {0xee, 0xd6, 0x76, 0x00}}},
+-    {{{    -6,     38,    -31}, 0, {     0,      0}, {0x9e, 0x3f, 0xcf, 0x00}}},
+-    {{{    13,     48,     24}, 0, {     0,      0}, {0xd6, 0x66, 0x3e, 0x00}}},
+-    {{{    18,    -13,    -58}, 0, {     0,      0}, {0xea, 0xdc, 0x89, 0x00}}},
+-    {{{    -1,    -11,    -47}, 0, {     0,      0}, {0x9d, 0xe3, 0xb7, 0x00}}},
+-    {{{    95,     -3,    -49}, 0, {     0,      0}, {0x4d, 0xec, 0x9e, 0x00}}},
+-    {{{    98,    -35,    -10}, 0, {     0,      0}, {0x47, 0x97, 0xfc, 0x00}}},
+-    {{{    90,     47,    -32}, 0, {     0,      0}, {0x3b, 0x50, 0xb2, 0x00}}},
+-    {{{    91,     46,     16}, 0, {     0,      0}, {0x35, 0x5c, 0x44, 0x00}}},
+-    {{{    12,     49,    -37}, 0, {     0,      0}, {0xe5, 0x6e, 0xc9, 0x00}}},
+-    {{{    96,     -5,     30}, 0, {     0,      0}, {0x51, 0xe7, 0x5d, 0x00}}},
+-};
+-
+-// 0x0400EEB0 - 0x0400EFB8
+-const Gfx mario_right_thigh_shared_dl[] = {
+-    gsSPVertex(mario_right_thigh_shared_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+-    gsSP2Triangles( 3,  5,  4, 0x0,  6,  7,  5, 0x0),
+-    gsSP2Triangles( 0,  2,  7, 0x0,  8,  9, 10, 0x0),
+-    gsSP2Triangles( 1,  8,  2, 0x0,  2,  8,  7, 0x0),
+-    gsSP2Triangles( 7, 11,  5, 0x0,  5, 11,  4, 0x0),
+-    gsSP2Triangles( 4, 12,  1, 0x0, 13, 14,  0, 0x0),
+-    gsSP2Triangles( 0, 14, 15, 0x0, 15, 14,  3, 0x0),
+-    gsSP2Triangles( 3, 14,  6, 0x0,  6, 14, 13, 0x0),
+-    gsSP2Triangles(10,  9, 11, 0x0, 11,  9, 12, 0x0),
+-    gsSPVertex(mario_right_thigh_shared_dl_vertex_group2, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+-    gsSP2Triangles( 0,  2,  4, 0x0,  5,  0,  6, 0x0),
+-    gsSP2Triangles( 7,  8,  5, 0x0,  3,  8,  7, 0x0),
+-    gsSP2Triangles( 4,  2,  3, 0x0,  7,  9, 10, 0x0),
+-    gsSP2Triangles(11,  9,  7, 0x0, 12, 11, 13, 0x0),
+-    gsSP2Triangles( 4, 14, 12, 0x0, 10, 14,  4, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400EFB8 - 0x0400EFD8
+-const Gfx mario_right_thigh[] = {
+-    gsSPLight(&mario_blue_lights_group.l, 1),
+-    gsSPLight(&mario_blue_lights_group.a, 2),
+-    gsSPDisplayList(mario_right_thigh_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400EFD8
+-static const Vtx mario_right_leg_shared_dl_vertex_group1[] = {
+-    {{{    63,    -45,    -12}, 0, {     0,      0}, {0xf2, 0x9b, 0x4a, 0x00}}},
+-    {{{    66,    -11,     34}, 0, {     0,      0}, {0xf2, 0x9b, 0x4a, 0x00}}},
+-    {{{     4,    -36,    -10}, 0, {     0,      0}, {0xc0, 0x93, 0xfe, 0x00}}},
+-    {{{    66,    -11,     34}, 0, {     0,      0}, {0xfb, 0x22, 0x7a, 0x00}}},
+-    {{{    69,     45,     18}, 0, {     0,      0}, {0xfc, 0x22, 0x7a, 0x00}}},
+-    {{{     9,     44,     16}, 0, {     0,      0}, {0xc6, 0x4b, 0x53, 0x00}}},
+-    {{{    69,     45,     18}, 0, {     0,      0}, {0xff, 0x7f, 0x03, 0x00}}},
+-    {{{    69,     46,    -37}, 0, {     0,      0}, {0xff, 0x7f, 0x03, 0x00}}},
+-    {{{     9,     46,    -33}, 0, {     0,      0}, {0xcd, 0x60, 0xc0, 0x00}}},
+-    {{{    69,     46,    -37}, 0, {     0,      0}, {0xf7, 0x27, 0x88, 0x00}}},
+-    {{{    65,     -9,    -56}, 0, {     0,      0}, {0xf8, 0x28, 0x88, 0x00}}},
+-    {{{    65,     -9,    -56}, 0, {     0,      0}, {0xef, 0xa0, 0xb0, 0x00}}},
+-    {{{    63,    -45,    -12}, 0, {     0,      0}, {0xef, 0xa0, 0xb0, 0x00}}},
+-    {{{     6,     -6,     30}, 0, {     0,      0}, {0xb4, 0xe4, 0x61, 0x00}}},
+-    {{{   -13,     10,     -9}, 0, {     0,      0}, {0x82, 0x08, 0x02, 0x00}}},
+-    {{{     5,     -3,    -50}, 0, {     0,      0}, {0xb2, 0xea, 0xa0, 0x00}}},
+-};
+-
+-// 0x0400F0D8
+-static const Vtx mario_right_leg_shared_dl_vertex_group2[] = {
+-    {{{    65,     -9,    -56}, 0, {     0,      0}, {0x75, 0xee, 0xd5, 0x00}}},
+-    {{{    83,      4,    -10}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
+-    {{{    63,    -45,    -12}, 0, {     0,      0}, {0x75, 0xd1, 0xfd, 0x00}}},
+-    {{{    66,    -11,     34}, 0, {     0,      0}, {0x77, 0xec, 0x26, 0x00}}},
+-    {{{    69,     45,     18}, 0, {     0,      0}, {0x7a, 0x18, 0x17, 0x00}}},
+-    {{{    69,     46,    -37}, 0, {     0,      0}, {0x79, 0x19, 0xe6, 0x00}}},
+-    {{{     4,    -36,    -10}, 0, {     0,      0}, {0xc0, 0x93, 0xfe, 0x00}}},
+-    {{{     5,     -3,    -50}, 0, {     0,      0}, {0xb2, 0xea, 0xa0, 0x00}}},
+-    {{{    65,     -9,    -56}, 0, {     0,      0}, {0xef, 0xa0, 0xb0, 0x00}}},
+-    {{{    65,     -9,    -56}, 0, {     0,      0}, {0xf8, 0x28, 0x88, 0x00}}},
+-    {{{     9,     46,    -33}, 0, {     0,      0}, {0xcd, 0x60, 0xc0, 0x00}}},
+-    {{{     9,     44,     16}, 0, {     0,      0}, {0xc6, 0x4b, 0x53, 0x00}}},
+-    {{{    69,     45,     18}, 0, {     0,      0}, {0xff, 0x7f, 0x03, 0x00}}},
+-    {{{     6,     -6,     30}, 0, {     0,      0}, {0xb4, 0xe4, 0x61, 0x00}}},
+-    {{{    66,    -11,     34}, 0, {     0,      0}, {0xfb, 0x22, 0x7a, 0x00}}},
+-    {{{    66,    -11,     34}, 0, {     0,      0}, {0xf2, 0x9b, 0x4a, 0x00}}},
+-};
+-
+-// 0x0400F1D8 - 0x0400F290
+-const Gfx mario_right_leg_shared_dl[] = {
+-    gsSPVertex(mario_right_leg_shared_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10,  8, 0x0),
+-    gsSP2Triangles(11, 12,  2, 0x0, 13, 14,  2, 0x0),
+-    gsSP2Triangles( 2, 14, 15, 0x0, 15, 14,  8, 0x0),
+-    gsSP2Triangles( 8, 14,  5, 0x0,  5, 14, 13, 0x0),
+-    gsSPVertex(mario_right_leg_shared_dl_vertex_group2, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+-    gsSP2Triangles( 3,  1,  4, 0x0,  4,  1,  5, 0x0),
+-    gsSP2Triangles( 5,  1,  0, 0x0,  6,  7,  8, 0x0),
+-    gsSP2Triangles( 9,  7, 10, 0x0, 10, 11, 12, 0x0),
+-    gsSP2Triangles(11, 13, 14, 0x0, 15, 13,  6, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400F290
+-static const Vtx mario_right_foot_dl_vertex_group1[] = {
+-    {{{    27,    -35,    -11}, 0, {     0,      0}, {0xdc, 0x87, 0x06, 0x00}}},
+-    {{{   -36,     11,     19}, 0, {     0,      0}, {0xb5, 0xd3, 0x5b, 0x00}}},
+-    {{{   -54,     14,    -10}, 0, {     0,      0}, {0x89, 0xd6, 0x03, 0x00}}},
+-    {{{   -34,     11,    -46}, 0, {     0,      0}, {0xb4, 0xd0, 0xa8, 0x00}}},
+-    {{{    43,    -18,    -55}, 0, {     0,      0}, {0x0a, 0xb2, 0x9d, 0x00}}},
+-    {{{    80,    -29,     -7}, 0, {     0,      0}, {0x36, 0x8e, 0x08, 0x00}}},
+-    {{{    44,    -11,     32}, 0, {     0,      0}, {0x01, 0xb8, 0x68, 0x00}}},
+-    {{{   -42,     64,    -29}, 0, {     0,      0}, {0x90, 0x14, 0xc9, 0x00}}},
+-    {{{   -40,     63,      5}, 0, {     0,      0}, {0x92, 0x15, 0x3b, 0x00}}},
+-    {{{   -14,     54,     29}, 0, {     0,      0}, {0xd5, 0xfe, 0x77, 0x00}}},
+-    {{{   -11,     53,    -56}, 0, {     0,      0}, {0xda, 0xfe, 0x87, 0x00}}},
+-    {{{   110,     11,    -36}, 0, {     0,      0}, {0x4e, 0xb0, 0xc6, 0x00}}},
+-    {{{    78,     22,    -61}, 0, {     0,      0}, {0x17, 0xd9, 0x8a, 0x00}}},
+-    {{{   109,     11,     20}, 0, {     0,      0}, {0x45, 0xaf, 0x44, 0x00}}},
+-    {{{    75,     23,     40}, 0, {     0,      0}, {0x0b, 0xda, 0x78, 0x00}}},
+-};
+-
+-// 0x0400F380
+-static const Vtx mario_right_foot_dl_vertex_group2[] = {
+-    {{{   -42,     64,    -29}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-    {{{   -40,     63,      5}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-    {{{   -11,     53,    -56}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-    {{{   -14,     54,     29}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-    {{{    78,     22,    -61}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-    {{{    75,     23,     40}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-    {{{   110,     11,    -36}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-    {{{   109,     11,     20}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-};
+-
+-// 0x0400F400 - 0x0400F4E8
+-const Gfx mario_right_foot_dl[] = {
+-    gsSPVertex(mario_right_foot_dl_vertex_group1, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
+-    gsSP2Triangles( 3,  4,  0, 0x0,  0,  4,  5, 0x0),
+-    gsSP2Triangles( 0,  6,  1, 0x0,  5,  6,  0, 0x0),
+-    gsSP2Triangles( 3,  2,  7, 0x0,  8,  7,  2, 0x0),
+-    gsSP2Triangles( 1,  9,  8, 0x0,  2,  1,  8, 0x0),
+-    gsSP2Triangles( 7, 10,  3, 0x0, 11,  5,  4, 0x0),
+-    gsSP2Triangles( 4, 12, 11, 0x0,  6,  5, 13, 0x0),
+-    gsSP2Triangles(11, 13,  5, 0x0, 13, 14,  6, 0x0),
+-    gsSP2Triangles(14,  9,  6, 0x0, 10,  4,  3, 0x0),
+-    gsSP2Triangles( 9,  1,  6, 0x0, 10, 12,  4, 0x0),
+-    gsSPVertex(mario_right_foot_dl_vertex_group2, 8, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  2, 0x0),
+-    gsSP2Triangles( 3,  4,  2, 0x0,  3,  5,  4, 0x0),
+-    gsSP2Triangles( 5,  6,  4, 0x0,  5,  7,  6, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400F4E8 - 0x0400F528
+-const Gfx mario_right_foot[] = {
+-    gsSPLight(&mario_brown1_lights_group.l, 1),
+-    gsSPLight(&mario_brown1_lights_group.a, 2),
+-    gsSPDisplayList(mario_right_foot_dl),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+-    gsDPSetEnvColor(255, 255, 255, 255),
+-    gsDPSetAlphaCompare(G_AC_NONE),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400F528 - 0x0400F568
+-const Gfx mario_metal_right_foot[] = {
+-    gsSPDisplayList(mario_right_foot_dl),
+-    gsDPPipeSync(),
+-    gsSPClearGeometryMode(G_TEXTURE_GEN),
+-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPSetEnvColor(255, 255, 255, 255),
+-    gsDPSetAlphaCompare(G_AC_NONE),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400F568
+-static const Vtx mario_yellow_button_dl_vertex[] = {
+-    {{{     9,     89,     41}, 0, {   180,    962}, {0x14, 0x78, 0x23, 0xff}}},
+-    {{{     3,     77,     62}, 0, {   682,    966}, {0x04, 0x6a, 0x44, 0xff}}},
+-    {{{    47,     75,     35}, 0, {    34,    106}, {0x39, 0x6a, 0x26, 0xff}}},
+-    {{{    28,     85,     30}, 0, {   -60,    572}, {0x2c, 0x76, 0x08, 0xff}}},
+-    {{{    17,     66,     76}, 0, {   966,    590}, {0x19, 0x58, 0x57, 0xff}}},
+-    {{{    32,     62,     74}, 0, {   902,    252}, {0x29, 0x53, 0x56, 0xff}}},
+-    {{{    48,     64,     59}, 0, {   548,      0}, {0x4d, 0x51, 0x3a, 0xff}}},
+-    {{{     9,     89,    -40}, 0, {   776,    920}, {0x10, 0x7b, 0xe7, 0xff}}},
+-    {{{    28,     85,    -29}, 0, {   990,    512}, {0x2d, 0x75, 0xf2, 0xff}}},
+-    {{{    47,     75,    -34}, 0, {   850,     72}, {0x3e, 0x6a, 0xe2, 0xff}}},
+-    {{{     3,     77,    -61}, 0, {   264,    972}, {0x03, 0x6a, 0xbb, 0xff}}},
+-    {{{    48,     64,    -58}, 0, {   312,      0}, {0x4d, 0x50, 0xc5, 0xff}}},
+-    {{{    32,     62,    -73}, 0, {   -24,    310}, {0x29, 0x52, 0xa9, 0xff}}},
+-    {{{    17,     66,    -75}, 0, {   -58,    642}, {0x17, 0x58, 0xa8, 0xff}}},
+-};
+-
+-// 0x0400F648
+-static const Vtx mario_tshirt_shared_dl_vertex_group1[] = {
+-    {{{    47,     75,    -34}, 0, {     0,      0}, {0x3e, 0x6a, 0xe2, 0xff}}},
+-    {{{    47,     75,     35}, 0, {     0,      0}, {0x39, 0x6a, 0x26, 0xff}}},
+-    {{{    82,     37,     27}, 0, {     0,      0}, {0x66, 0x48, 0x14, 0xff}}},
+-    {{{    82,     37,    -26}, 0, {     0,      0}, {0x69, 0x43, 0xec, 0xff}}},
+-    {{{   100,      1,     24}, 0, {     0,      0}, {0x7a, 0x17, 0x16, 0xff}}},
+-    {{{   100,      1,    -23}, 0, {     0,      0}, {0x7c, 0x09, 0xea, 0xff}}},
+-    {{{     6,    -10,    -92}, 0, {     0,      0}, {0x00, 0xeb, 0x83, 0xff}}},
+-    {{{    47,      3,    -88}, 0, {     0,      0}, {0x30, 0x09, 0x8b, 0xff}}},
+-    {{{    46,    -34,    -83}, 0, {     0,      0}, {0x24, 0xc8, 0x95, 0xff}}},
+-    {{{    12,     33,    -90}, 0, {     0,      0}, {0x11, 0x20, 0x87, 0xff}}},
+-    {{{    20,    -61,    -67}, 0, {     0,      0}, {0x0a, 0x9a, 0xb7, 0xff}}},
+-    {{{    66,    -52,    -50}, 0, {     0,      0}, {0x3b, 0x9a, 0xd3, 0xff}}},
+-    {{{    84,    -29,    -62}, 0, {     0,      0}, {0x5f, 0xde, 0xb4, 0xff}}},
+-    {{{    20,    -61,     68}, 0, {     0,      0}, {0x0a, 0x99, 0x49, 0xff}}},
+-    {{{    66,    -52,     51}, 0, {     0,      0}, {0x3b, 0x9a, 0x2d, 0xff}}},
+-    {{{    46,    -34,     84}, 0, {     0,      0}, {0x24, 0xc8, 0x6b, 0xff}}},
+-};
+-
+-// 0x0400F748
+-static const Vtx mario_tshirt_shared_dl_vertex_group2[] = {
+-    {{{    20,    -61,     68}, 0, {     0,      0}, {0x0a, 0x99, 0x49, 0xff}}},
+-    {{{    46,    -34,     84}, 0, {     0,      0}, {0x24, 0xc8, 0x6b, 0xff}}},
+-    {{{     6,    -11,     93}, 0, {     0,      0}, {0x00, 0xea, 0x7c, 0xff}}},
+-    {{{    47,      3,     89}, 0, {     0,      0}, {0x30, 0x08, 0x75, 0xff}}},
+-    {{{    84,    -29,     63}, 0, {     0,      0}, {0x5f, 0xde, 0x4c, 0xff}}},
+-    {{{    66,    -52,     51}, 0, {     0,      0}, {0x3b, 0x9a, 0x2d, 0xff}}},
+-    {{{    13,     33,     91}, 0, {     0,      0}, {0x12, 0x20, 0x79, 0xff}}},
+-    {{{   100,      1,    -23}, 0, {     0,      0}, {0x7c, 0x09, 0xea, 0xff}}},
+-    {{{   100,      1,     24}, 0, {     0,      0}, {0x7a, 0x17, 0x16, 0xff}}},
+-    {{{    93,    -36,     26}, 0, {     0,      0}, {0x6b, 0xbf, 0x0d, 0xff}}},
+-    {{{    93,    -36,    -25}, 0, {     0,      0}, {0x66, 0xb7, 0xf0, 0xff}}},
+-    {{{    54,    -63,      0}, 0, {     0,      0}, {0x30, 0x8b, 0x00, 0xff}}},
+-    {{{    80,     14,     62}, 0, {     0,      0}, {0x60, 0x28, 0x47, 0xff}}},
+-    {{{    44,     51,     75}, 0, {     0,      0}, {0x3c, 0x34, 0x62, 0xff}}},
+-};
+-
+-// 0x0400F828
+-static const Vtx mario_tshirt_shared_dl_vertex_group3[] = {
+-    {{{    80,     14,    -61}, 0, {     0,      0}, {0x60, 0x28, 0xb8, 0xff}}},
+-    {{{    47,      3,    -88}, 0, {     0,      0}, {0x30, 0x09, 0x8b, 0xff}}},
+-    {{{    43,     51,    -74}, 0, {     0,      0}, {0x3c, 0x32, 0x9d, 0xff}}},
+-    {{{    84,    -29,    -62}, 0, {     0,      0}, {0x5f, 0xde, 0xb4, 0xff}}},
+-    {{{    12,     33,    -90}, 0, {     0,      0}, {0x11, 0x20, 0x87, 0xff}}},
+-};
+-
+-// 0x0400F878
+-static const Vtx mario_pants_overalls_shared_dl_vertex_group1[] = {
+-    {{{    47,     75,    -34}, 0, {     0,      0}, {0x3e, 0x6a, 0xe2, 0xff}}},
+-    {{{    28,     85,     30}, 0, {     0,      0}, {0x2c, 0x76, 0x08, 0xff}}},
+-    {{{    47,     75,     35}, 0, {     0,      0}, {0x39, 0x6a, 0x26, 0xff}}},
+-    {{{    28,     85,    -29}, 0, {     0,      0}, {0x2d, 0x75, 0xf2, 0xff}}},
+-    {{{     9,     89,     41}, 0, {     0,      0}, {0x14, 0x78, 0x23, 0xff}}},
+-    {{{     9,     89,    -40}, 0, {     0,      0}, {0x10, 0x7b, 0xe7, 0xff}}},
+-    {{{   -15,     88,     35}, 0, {     0,      0}, {0xec, 0x7a, 0x1c, 0xff}}},
+-    {{{   -15,     87,    -35}, 0, {     0,      0}, {0xea, 0x76, 0xda, 0xff}}},
+-    {{{     3,     77,    -61}, 0, {     0,      0}, {0x03, 0x6a, 0xbb, 0xff}}},
+-    {{{   -43,     83,    -24}, 0, {     0,      0}, {0xcc, 0x72, 0xee, 0xff}}},
+-    {{{   -28,     63,    -74}, 0, {     0,      0}, {0xd1, 0x4f, 0xaa, 0xff}}},
+-    {{{   -40,     72,    -54}, 0, {     0,      0}, {0xc5, 0x5f, 0xc6, 0xff}}},
+-    {{{   -40,     72,     55}, 0, {     0,      0}, {0xc4, 0x5e, 0x3a, 0xff}}},
+-    {{{   -43,     83,     25}, 0, {     0,      0}, {0xbc, 0x69, 0x11, 0xff}}},
+-    {{{   -28,     63,     75}, 0, {     0,      0}, {0xd0, 0x50, 0x55, 0xff}}},
+-};
+-
+-// 0x0400F968
+-static const Vtx mario_pants_overalls_shared_dl_vertex_group2[] = {
+-    {{{    80,     14,    -61}, 0, {     0,      0}, {0x60, 0x28, 0xb8, 0xff}}},
+-    {{{    43,     51,    -74}, 0, {     0,      0}, {0x3c, 0x32, 0x9d, 0xff}}},
+-    {{{    48,     64,    -58}, 0, {     0,      0}, {0x4d, 0x50, 0xc5, 0xff}}},
+-    {{{     3,     77,     62}, 0, {     0,      0}, {0x04, 0x6a, 0x44, 0xff}}},
+-    {{{     9,     89,     41}, 0, {     0,      0}, {0x14, 0x78, 0x23, 0xff}}},
+-    {{{   -15,     88,     35}, 0, {     0,      0}, {0xec, 0x7a, 0x1c, 0xff}}},
+-    {{{    47,     75,     35}, 0, {     0,      0}, {0x39, 0x6a, 0x26, 0xff}}},
+-    {{{    48,     64,     59}, 0, {     0,      0}, {0x4d, 0x51, 0x3a, 0xff}}},
+-    {{{    82,     37,     27}, 0, {     0,      0}, {0x66, 0x48, 0x14, 0xff}}},
+-    {{{    32,     62,     74}, 0, {     0,      0}, {0x29, 0x53, 0x56, 0xff}}},
+-    {{{    44,     51,     75}, 0, {     0,      0}, {0x3c, 0x34, 0x62, 0xff}}},
+-    {{{    80,     14,     62}, 0, {     0,      0}, {0x60, 0x28, 0x47, 0xff}}},
+-    {{{   100,      1,     24}, 0, {     0,      0}, {0x7a, 0x17, 0x16, 0xff}}},
+-    {{{    82,     37,    -26}, 0, {     0,      0}, {0x69, 0x43, 0xec, 0xff}}},
+-    {{{    32,     62,    -73}, 0, {     0,      0}, {0x29, 0x52, 0xa9, 0xff}}},
+-    {{{    47,     75,    -34}, 0, {     0,      0}, {0x3e, 0x6a, 0xe2, 0xff}}},
+-};
+-
+-// 0x0400FA68
+-static const Vtx mario_pants_overalls_shared_dl_vertex_group3[] = {
+-    {{{    80,     14,    -61}, 0, {     0,      0}, {0x60, 0x28, 0xb8, 0xff}}},
+-    {{{    82,     37,    -26}, 0, {     0,      0}, {0x69, 0x43, 0xec, 0xff}}},
+-    {{{   100,      1,    -23}, 0, {     0,      0}, {0x7c, 0x09, 0xea, 0xff}}},
+-    {{{    20,    -61,    -67}, 0, {     0,      0}, {0x0a, 0x9a, 0xb7, 0xff}}},
+-    {{{    66,    -52,    -50}, 0, {     0,      0}, {0x3b, 0x9a, 0xd3, 0xff}}},
+-    {{{    54,    -63,      0}, 0, {     0,      0}, {0x30, 0x8b, 0x00, 0xff}}},
+-    {{{   -27,    -25,    -86}, 0, {     0,      0}, {0xcb, 0xd5, 0x96, 0xff}}},
+-    {{{     6,    -10,    -92}, 0, {     0,      0}, {0x00, 0xeb, 0x83, 0xff}}},
+-    {{{   -29,    -58,    -59}, 0, {     0,      0}, {0xc9, 0x9a, 0xcf, 0xff}}},
+-    {{{     8,    -74,      0}, 0, {     0,      0}, {0xfd, 0x82, 0x00, 0xff}}},
+-    {{{   -59,    -28,    -37}, 0, {     0,      0}, {0x90, 0xd5, 0xd9, 0xff}}},
+-    {{{   -30,    -66,      0}, 0, {     0,      0}, {0xb8, 0x98, 0x00, 0xff}}},
+-    {{{   -27,     26,    -89}, 0, {     0,      0}, {0xc7, 0x0f, 0x90, 0xff}}},
+-    {{{    12,     33,    -90}, 0, {     0,      0}, {0x11, 0x20, 0x87, 0xff}}},
+-    {{{    20,    -61,     68}, 0, {     0,      0}, {0x0a, 0x99, 0x49, 0xff}}},
+-    {{{    66,    -52,     51}, 0, {     0,      0}, {0x3b, 0x9a, 0x2d, 0xff}}},
+-};
+-
+-// 0x0400FB68
+-static const Vtx mario_pants_overalls_shared_dl_vertex_group4[] = {
+-    {{{     8,    -74,      0}, 0, {     0,      0}, {0xfd, 0x82, 0x00, 0xff}}},
+-    {{{    20,    -61,     68}, 0, {     0,      0}, {0x0a, 0x99, 0x49, 0xff}}},
+-    {{{   -29,    -58,     59}, 0, {     0,      0}, {0xc8, 0x99, 0x30, 0xff}}},
+-    {{{   -27,    -25,     87}, 0, {     0,      0}, {0xcb, 0xd3, 0x69, 0xff}}},
+-    {{{     6,    -11,     93}, 0, {     0,      0}, {0x00, 0xea, 0x7c, 0xff}}},
+-    {{{   -27,     26,     91}, 0, {     0,      0}, {0xc8, 0x0e, 0x70, 0xff}}},
+-    {{{    13,     33,     91}, 0, {     0,      0}, {0x12, 0x20, 0x79, 0xff}}},
+-    {{{   -59,    -28,     38}, 0, {     0,      0}, {0x8d, 0xd8, 0x21, 0xff}}},
+-    {{{   -30,    -66,      0}, 0, {     0,      0}, {0xb8, 0x98, 0x00, 0xff}}},
+-    {{{   -28,     63,    -74}, 0, {     0,      0}, {0xd1, 0x4f, 0xaa, 0xff}}},
+-    {{{   -27,     26,    -89}, 0, {     0,      0}, {0xc7, 0x0f, 0x90, 0xff}}},
+-    {{{   -71,     54,    -29}, 0, {     0,      0}, {0x8f, 0x2a, 0xda, 0xff}}},
+-    {{{   -59,    -28,    -37}, 0, {     0,      0}, {0x90, 0xd5, 0xd9, 0xff}}},
+-    {{{   -71,     54,     30}, 0, {     0,      0}, {0x94, 0x2a, 0x31, 0xff}}},
+-    {{{   -43,     83,     25}, 0, {     0,      0}, {0xbc, 0x69, 0x11, 0xff}}},
+-    {{{   -43,     83,    -24}, 0, {     0,      0}, {0xcc, 0x72, 0xee, 0xff}}},
+-};
+-
+-// 0x0400FC68
+-static const Vtx mario_pants_overalls_shared_dl_vertex_group5[] = {
+-    {{{   -71,     54,    -29}, 0, {     0,      0}, {0x8f, 0x2a, 0xda, 0xff}}},
+-    {{{   -43,     83,    -24}, 0, {     0,      0}, {0xcc, 0x72, 0xee, 0xff}}},
+-    {{{   -40,     72,    -54}, 0, {     0,      0}, {0xc5, 0x5f, 0xc6, 0xff}}},
+-    {{{   -59,    -28,    -37}, 0, {     0,      0}, {0x90, 0xd5, 0xd9, 0xff}}},
+-    {{{   -59,    -28,     38}, 0, {     0,      0}, {0x8d, 0xd8, 0x21, 0xff}}},
+-    {{{   -28,     63,    -74}, 0, {     0,      0}, {0xd1, 0x4f, 0xaa, 0xff}}},
+-    {{{   -43,     83,     25}, 0, {     0,      0}, {0xbc, 0x69, 0x11, 0xff}}},
+-    {{{   -71,     54,     30}, 0, {     0,      0}, {0x94, 0x2a, 0x31, 0xff}}},
+-    {{{   -30,    -66,      0}, 0, {     0,      0}, {0xb8, 0x98, 0x00, 0xff}}},
+-    {{{   -27,     26,     91}, 0, {     0,      0}, {0xc8, 0x0e, 0x70, 0xff}}},
+-    {{{   -28,     63,     75}, 0, {     0,      0}, {0xd0, 0x50, 0x55, 0xff}}},
+-    {{{   -40,     72,     55}, 0, {     0,      0}, {0xc4, 0x5e, 0x3a, 0xff}}},
+-    {{{    13,     33,     91}, 0, {     0,      0}, {0x12, 0x20, 0x79, 0xff}}},
+-    {{{    -4,     58,     84}, 0, {     0,      0}, {0xfb, 0x43, 0x6b, 0xff}}},
+-};
+-
+-// 0x0400FD48
+-static const Vtx mario_pants_overalls_shared_dl_vertex_group6[] = {
+-    {{{   -27,     26,    -89}, 0, {     0,      0}, {0xc7, 0x0f, 0x90, 0xff}}},
+-    {{{    -4,     58,    -82}, 0, {     0,      0}, {0xf9, 0x42, 0x94, 0xff}}},
+-    {{{    12,     33,    -90}, 0, {     0,      0}, {0x11, 0x20, 0x87, 0xff}}},
+-    {{{   -28,     63,    -74}, 0, {     0,      0}, {0xd1, 0x4f, 0xaa, 0xff}}},
+-    {{{    80,     14,    -61}, 0, {     0,      0}, {0x60, 0x28, 0xb8, 0xff}}},
+-    {{{   100,      1,    -23}, 0, {     0,      0}, {0x7c, 0x09, 0xea, 0xff}}},
+-    {{{    84,    -29,    -62}, 0, {     0,      0}, {0x5f, 0xde, 0xb4, 0xff}}},
+-    {{{    93,    -36,    -25}, 0, {     0,      0}, {0x66, 0xb7, 0xf0, 0xff}}},
+-    {{{    66,    -52,    -50}, 0, {     0,      0}, {0x3b, 0x9a, 0xd3, 0xff}}},
+-    {{{    54,    -63,      0}, 0, {     0,      0}, {0x30, 0x8b, 0x00, 0xff}}},
+-    {{{    66,    -52,     51}, 0, {     0,      0}, {0x3b, 0x9a, 0x2d, 0xff}}},
+-    {{{    93,    -36,     26}, 0, {     0,      0}, {0x6b, 0xbf, 0x0d, 0xff}}},
+-    {{{    84,    -29,     63}, 0, {     0,      0}, {0x5f, 0xde, 0x4c, 0xff}}},
+-    {{{   100,      1,     24}, 0, {     0,      0}, {0x7a, 0x17, 0x16, 0xff}}},
+-    {{{    80,     14,     62}, 0, {     0,      0}, {0x60, 0x28, 0x47, 0xff}}},
+-};
+-
+-// 0x0400FE38
+-static const Vtx mario_pants_overalls_shared_dl_vertex_group7[] = {
+-    {{{    17,     66,    -75}, 0, {     0,      0}, {0x17, 0x58, 0xa8, 0xff}}},
+-    {{{    -4,     58,    -82}, 0, {     0,      0}, {0xf9, 0x42, 0x94, 0xff}}},
+-    {{{     3,     77,    -61}, 0, {     0,      0}, {0x03, 0x6a, 0xbb, 0xff}}},
+-    {{{   -28,     63,    -74}, 0, {     0,      0}, {0xd1, 0x4f, 0xaa, 0xff}}},
+-    {{{    32,     62,     74}, 0, {     0,      0}, {0x29, 0x53, 0x56, 0xff}}},
+-    {{{    17,     66,     76}, 0, {     0,      0}, {0x19, 0x58, 0x57, 0xff}}},
+-    {{{    13,     33,     91}, 0, {     0,      0}, {0x12, 0x20, 0x79, 0xff}}},
+-    {{{   -28,     63,     75}, 0, {     0,      0}, {0xd0, 0x50, 0x55, 0xff}}},
+-    {{{    -4,     58,     84}, 0, {     0,      0}, {0xfb, 0x43, 0x6b, 0xff}}},
+-    {{{     3,     77,     62}, 0, {     0,      0}, {0x04, 0x6a, 0x44, 0xff}}},
+-    {{{   -15,     88,     35}, 0, {     0,      0}, {0xec, 0x7a, 0x1c, 0xff}}},
+-    {{{    12,     33,    -90}, 0, {     0,      0}, {0x11, 0x20, 0x87, 0xff}}},
+-    {{{    32,     62,    -73}, 0, {     0,      0}, {0x29, 0x52, 0xa9, 0xff}}},
+-    {{{    43,     51,    -74}, 0, {     0,      0}, {0x3c, 0x32, 0x9d, 0xff}}},
+-    {{{    44,     51,     75}, 0, {     0,      0}, {0x3c, 0x34, 0x62, 0xff}}},
+-};
+-
+-// 0x0400FF28 - 0x0400FF88
+-const Gfx mario_yellow_button_dl[] = {
+-    gsSPVertex(mario_yellow_button_dl_vertex, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
+-    gsSP2Triangles( 1,  4,  2, 0x0,  5,  6,  2, 0x0),
+-    gsSP2Triangles( 4,  5,  2, 0x0,  7,  8,  9, 0x0),
+-    gsSP2Triangles(10,  7,  9, 0x0,  9, 11, 12, 0x0),
+-    gsSP2Triangles(12, 13,  9, 0x0, 13, 10,  9, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0400FF88 - 0x04010260
+-const Gfx mario_pants_overalls_shared_dl[] = {
+-    gsSPVertex(mario_pants_overalls_shared_dl_vertex_group1, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
+-    gsSP2Triangles( 4,  1,  5, 0x0,  1,  3,  5, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  5,  7,  6, 0x0),
+-    gsSP2Triangles( 7,  5,  8, 0x0,  9,  6,  7, 0x0),
+-    gsSP2Triangles( 7,  8, 10, 0x0, 10, 11,  7, 0x0),
+-    gsSP2Triangles( 9,  7, 11, 0x0, 12,  6, 13, 0x0),
+-    gsSP2Triangles( 9, 13,  6, 0x0,  6, 12, 14, 0x0),
+-    gsSPVertex(mario_pants_overalls_shared_dl_vertex_group2, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10,  7, 0x0),
+-    gsSP2Triangles( 7, 10, 11, 0x0, 11,  8,  7, 0x0),
+-    gsSP2Triangles(12,  8, 11, 0x0, 13,  0,  2, 0x0),
+-    gsSP2Triangles( 2,  1, 14, 0x0,  2, 15, 13, 0x0),
+-    gsSPVertex(mario_pants_overalls_shared_dl_vertex_group3, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 3,  6,  7, 0x0,  3,  8,  6, 0x0),
+-    gsSP2Triangles( 5,  9,  3, 0x0,  8,  3,  9, 0x0),
+-    gsSP2Triangles( 6,  8, 10, 0x0, 11, 10,  8, 0x0),
+-    gsSP2Triangles( 9, 11,  8, 0x0,  6, 12,  7, 0x0),
+-    gsSP2Triangles(12,  6, 10, 0x0,  7, 12, 13, 0x0),
+-    gsSP2Triangles(14,  5, 15, 0x0, 14,  9,  5, 0x0),
+-    gsSPVertex(mario_pants_overalls_shared_dl_vertex_group4, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+-    gsSP2Triangles( 1,  4,  3, 0x0,  5,  4,  6, 0x0),
+-    gsSP2Triangles( 4,  5,  3, 0x0,  2,  3,  7, 0x0),
+-    gsSP2Triangles( 7,  3,  5, 0x0,  8,  2,  7, 0x0),
+-    gsSP2Triangles( 2,  8,  0, 0x0,  9, 10, 11, 0x0),
+-    gsSP2Triangles(12, 11, 10, 0x0, 11,  7, 13, 0x0),
+-    gsSP1Triangle(14, 15, 11, 0x0),
+-    gsSPVertex(mario_pants_overalls_shared_dl_vertex_group5, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  4, 0x0),
+-    gsSP2Triangles( 2,  5,  0, 0x0,  6,  0,  7, 0x0),
+-    gsSP2Triangles( 4,  3,  8, 0x0,  9,  7,  4, 0x0),
+-    gsSP2Triangles( 7, 10, 11, 0x0, 11,  6,  7, 0x0),
+-    gsSP2Triangles( 9, 12, 13, 0x0, 10,  9, 13, 0x0),
+-    gsSP1Triangle( 7,  9, 10, 0x0),
+-    gsSPVertex(mario_pants_overalls_shared_dl_vertex_group6, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  5,  7,  6, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  9,  8,  7, 0x0),
+-    gsSP2Triangles(10, 11, 12, 0x0, 12, 11, 13, 0x0),
+-    gsSP2Triangles(14, 12, 13, 0x0, 11, 10,  9, 0x0),
+-    gsSPVertex(mario_pants_overalls_shared_dl_vertex_group7, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  2,  1, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  8,  9, 0x0),
+-    gsSP2Triangles(10,  7,  9, 0x0,  9,  8,  5, 0x0),
+-    gsSP2Triangles( 5,  8,  6, 0x0, 11,  1,  0, 0x0),
+-    gsSP2Triangles(11, 12, 13, 0x0,  6, 14,  4, 0x0),
+-    gsSP1Triangle(11,  0, 12, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04010260 - 0x04010348
+-const Gfx mario_tshirt_shared_dl[] = {
+-    gsSPVertex(mario_tshirt_shared_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
+-    gsSP2Triangles( 4,  3,  2, 0x0,  4,  5,  3, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  6,  9,  7, 0x0),
+-    gsSP2Triangles( 6,  8, 10, 0x0, 11,  8, 12, 0x0),
+-    gsSP2Triangles(12,  8,  7, 0x0,  8, 11, 10, 0x0),
+-    gsSP1Triangle(13, 14, 15, 0x0),
+-    gsSPVertex(mario_tshirt_shared_dl_vertex_group2, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  2, 0x0),
+-    gsSP2Triangles( 3,  1,  4, 0x0,  4,  1,  5, 0x0),
+-    gsSP2Triangles( 6,  2,  3, 0x0,  7,  8,  9, 0x0),
+-    gsSP2Triangles( 7,  9, 10, 0x0, 11, 10,  9, 0x0),
+-    gsSP2Triangles(12,  3,  4, 0x0, 13,  3, 12, 0x0),
+-    gsSP1Triangle( 6,  3, 13, 0x0),
+-    gsSPVertex(mario_tshirt_shared_dl_vertex_group3, 5, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
+-    gsSP1Triangle( 1,  4,  2, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04010348 - 0x04010370
+-const Gfx mario_torso_dl[] = {
+-    gsSPDisplayList(mario_pants_overalls_shared_dl),
+-    gsSPLight(&mario_red_lights_group.l, 1),
+-    gsSPLight(&mario_red_lights_group.a, 2),
+-    gsSPDisplayList(mario_tshirt_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04010370 - 0x040103F0
+-const Gfx mario_torso[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_yellow_button),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_yellow_button_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_torso_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040103F0 - 0x04010410
+-const Gfx mario_metal_torso_shared_dl[] = {
+-    gsSPDisplayList(mario_yellow_button_dl),
+-    gsSPDisplayList(mario_pants_overalls_shared_dl),
+-    gsSPDisplayList(mario_tshirt_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04010410
+-static const Vtx mario_m_logo_dl_vertex[] = {
+-    {{{   195,     93,     32}, 0, {   744,    732}, {0x51, 0x54, 0x30, 0xff}}},
+-    {{{   153,     33,     95}, 0, {  1250,   1066}, {0x04, 0x46, 0x69, 0xff}}},
+-    {{{   252,     62,     70}, 0, {  1032,    152}, {0x39, 0x4a, 0x55, 0xff}}},
+-    {{{   272,     85,      0}, 0, {   472,    -16}, {0x5f, 0x54, 0x00, 0xff}}},
+-    {{{   252,     62,    -69}, 0, {   -78,    158}, {0x39, 0x4a, 0xab, 0xff}}},
+-    {{{   195,     93,    -31}, 0, {   232,    736}, {0x51, 0x54, 0xcf, 0xff}}},
+-    {{{   153,     33,    -94}, 0, {  -258,   1076}, {0x03, 0x46, 0x97, 0xff}}},
+-};
+-
+-// 0x04010480
+-static const Vtx mario_eyes_cap_on_dl_vertex[] = {
+-    {{{   145,    101,      0}, 0, {   480,    446}, {0x13, 0x7d, 0x00, 0xff}}},
+-    {{{   108,    105,      0}, 0, {   488,    854}, {0x69, 0x46, 0x00, 0xff}}},
+-    {{{    97,    103,     25}, 0, {   724,    958}, {0x40, 0x5a, 0x3d, 0xff}}},
+-    {{{    97,    103,    -24}, 0, {   256,    970}, {0x40, 0x5a, 0xc3, 0xff}}},
+-    {{{   175,     91,    -38}, 0, {   106,    130}, {0xc6, 0x6d, 0xe7, 0xff}}},
+-    {{{   144,     83,    -66}, 0, {  -146,    460}, {0x19, 0x5b, 0xad, 0xff}}},
+-    {{{   104,     87,    -69}, 0, {  -160,    898}, {0x30, 0x5c, 0xb7, 0xff}}},
+-    {{{   175,     91,     39}, 0, {   842,    112}, {0xc6, 0x6d, 0x19, 0xff}}},
+-    {{{   153,     33,    -94}, 0, {  -404,    342}, {0x03, 0x46, 0x97, 0xff}}},
+-    {{{   104,     87,     70}, 0, {  1138,    864}, {0x30, 0x5c, 0x49, 0xff}}},
+-    {{{   144,     83,     67}, 0, {  1108,    428}, {0x19, 0x5b, 0x53, 0xff}}},
+-    {{{   153,     33,     95}, 0, {  1362,    296}, {0x04, 0x46, 0x69, 0xff}}},
+-};
+-
+-// 0x04010540
+-static const Vtx mario_hair_sideburn_cap_on_dl_vertex[] = {
+-    {{{   120,    -12,   -109}, 0, {   916,    184}, {0xed, 0x24, 0x88, 0xff}}},
+-    {{{    96,     49,    -93}, 0, {   -70,    700}, {0x11, 0x27, 0x89, 0xff}}},
+-    {{{   153,     33,    -94}, 0, {    90,    -58}, {0x03, 0x46, 0x97, 0xff}}},
+-    {{{    85,    -23,   -110}, 0, {  1150,    582}, {0x06, 0x59, 0xa6, 0xff}}},
+-    {{{    42,      0,   -102}, 0, {   842,   1210}, {0xc3, 0x05, 0x92, 0xff}}},
+-    {{{    44,     44,    -96}, 0, {   118,   1334}, {0xda, 0x21, 0x8c, 0xff}}},
+-    {{{    96,     49,     94}, 0, {   -74,    726}, {0x10, 0x28, 0x77, 0xff}}},
+-    {{{    44,     44,     97}, 0, {   196,   1366}, {0xda, 0x21, 0x74, 0xff}}},
+-    {{{    42,      0,    103}, 0, {   968,   1192}, {0xc3, 0x05, 0x6e, 0xff}}},
+-    {{{    85,    -23,    111}, 0, {  1238,    518}, {0x04, 0x58, 0x5a, 0xff}}},
+-    {{{   120,    -11,    111}, 0, {   922,    122}, {0xed, 0x24, 0x78, 0xff}}},
+-    {{{   153,     33,     95}, 0, {    22,    -68}, {0x04, 0x46, 0x69, 0xff}}},
+-};
+-
+-// 0x04010600
+-static const Vtx mario_mustache_cap_on_dl_vertex_group1[] = {
+-    {{{    77,    108,     34}, 0, {   342,    368}, {0x0e, 0x16, 0x7c, 0xff}}},
+-    {{{    92,     88,     84}, 0, {   898,    -18}, {0x23, 0x59, 0x53, 0xff}}},
+-    {{{    97,    103,     25}, 0, {   224,    146}, {0x40, 0x5a, 0x3d, 0xff}}},
+-    {{{    48,     94,     76}, 0, {   888,    564}, {0xd7, 0x60, 0x47, 0xff}}},
+-    {{{    52,    111,     31}, 0, {   354,    690}, {0xa8, 0x33, 0x4b, 0xff}}},
+-    {{{    27,    100,     30}, 0, {   442,    982}, {0xb1, 0x60, 0x16, 0xff}}},
+-    {{{    41,    109,      0}, 0, {    70,    924}, {0x95, 0x44, 0x00, 0xff}}},
+-    {{{    44,     44,     97}, 0, {  1296,    438}, {0xda, 0x21, 0x74, 0xff}}},
+-    {{{     3,     54,     52}, 0, {   892,   1090}, {0x95, 0x1d, 0x3c, 0xff}}},
+-    {{{    52,    111,    -30}, 0, {   340,    684}, {0xa8, 0x32, 0xb5, 0xff}}},
+-    {{{    48,     94,    -75}, 0, {   856,    608}, {0xd7, 0x60, 0xb9, 0xff}}},
+-    {{{    27,    100,    -29}, 0, {   394,    998}, {0xb1, 0x60, 0xea, 0xff}}},
+-    {{{     3,     54,    -51}, 0, {   806,   1162}, {0x95, 0x1d, 0xc4, 0xff}}},
+-    {{{    44,     44,    -96}, 0, {  1250,    518}, {0xda, 0x21, 0x8c, 0xff}}},
+-    {{{    77,    108,    -33}, 0, {   362,    344}, {0x0e, 0x16, 0x84, 0xff}}},
+-    {{{    41,    109,      0}, 0, {    50,    900}, {0x95, 0x44, 0x00, 0xff}}},
+-};
+-
+-// 0x04010700
+-static const Vtx mario_mustache_cap_on_dl_vertex_group2[] = {
+-    {{{    48,     94,    -75}, 0, {   856,    608}, {0xd7, 0x60, 0xb9, 0xff}}},
+-    {{{    77,    108,    -33}, 0, {   362,    344}, {0x0e, 0x16, 0x84, 0xff}}},
+-    {{{    92,     88,    -83}, 0, {   922,     -4}, {0x23, 0x59, 0xad, 0xff}}},
+-    {{{    97,    103,    -24}, 0, {   274,    100}, {0x40, 0x5a, 0xc3, 0xff}}},
+-    {{{    44,     44,    -96}, 0, {  1250,    518}, {0xda, 0x21, 0x8c, 0xff}}},
+-};
+-
+-// 0x04010750
+-static const Vtx mario_face_cap_dl_vertex_group1[] = {
+-    {{{   164,    -89,    -74}, 0, {     0,      0}, {0x51, 0xa9, 0xd5, 0xff}}},
+-    {{{   122,   -139,    -48}, 0, {     0,      0}, {0x28, 0x94, 0xcd, 0xff}}},
+-    {{{   131,    -56,   -123}, 0, {     0,      0}, {0xde, 0xd4, 0x8f, 0xff}}},
+-    {{{   187,     -6,   -133}, 0, {     0,      0}, {0x1e, 0x04, 0x85, 0xff}}},
+-    {{{   120,    -12,   -109}, 0, {     0,      0}, {0xed, 0x24, 0x88, 0xff}}},
+-    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xd9, 0xb0, 0xa7, 0xff}}},
+-    {{{    77,   -138,    -50}, 0, {     0,      0}, {0xbc, 0x9e, 0xd8, 0xff}}},
+-    {{{    64,   -103,    -51}, 0, {     0,      0}, {0xde, 0x94, 0xc7, 0xff}}},
+-    {{{   122,   -139,     49}, 0, {     0,      0}, {0x2d, 0x8f, 0x22, 0xff}}},
+-    {{{    77,   -138,     51}, 0, {     0,      0}, {0xc1, 0xa4, 0x3c, 0xff}}},
+-    {{{    64,   -103,     52}, 0, {     0,      0}, {0xc9, 0x9a, 0x31, 0xff}}},
+-    {{{   131,    -56,    124}, 0, {     0,      0}, {0xdf, 0xd3, 0x71, 0xff}}},
+-    {{{   164,    -89,     75}, 0, {     0,      0}, {0x4e, 0xa6, 0x2b, 0xff}}},
+-    {{{    91,    -54,     86}, 0, {     0,      0}, {0xd9, 0xaf, 0x59, 0xff}}},
+-    {{{   187,     -6,    134}, 0, {     0,      0}, {0x1f, 0x04, 0x7a, 0xff}}},
+-    {{{   120,    -11,    111}, 0, {     0,      0}, {0xed, 0x24, 0x78, 0xff}}},
+-};
+-
+-// 0x04010850
+-static const Vtx mario_face_cap_dl_vertex_group2[] = {
+-    {{{   153,     33,    -94}, 0, {     0,      0}, {0x03, 0x46, 0x97, 0xff}}},
+-    {{{   187,     -6,   -133}, 0, {     0,      0}, {0x1e, 0x04, 0x85, 0xff}}},
+-    {{{   120,    -12,   -109}, 0, {     0,      0}, {0xed, 0x24, 0x88, 0xff}}},
+-    {{{   175,     91,    -38}, 0, {     0,      0}, {0xc6, 0x6d, 0xe7, 0xff}}},
+-    {{{   173,    132,    -65}, 0, {     0,      0}, {0xda, 0x5a, 0xb0, 0xff}}},
+-    {{{   195,     93,    -31}, 0, {     0,      0}, {0x51, 0x54, 0xcf, 0xff}}},
+-    {{{   252,     62,    -69}, 0, {     0,      0}, {0x39, 0x4a, 0xab, 0xff}}},
+-    {{{   164,    -89,    -74}, 0, {     0,      0}, {0x51, 0xa9, 0xd5, 0xff}}},
+-    {{{   271,      0,    -41}, 0, {     0,      0}, {0x6e, 0xcf, 0xdc, 0xff}}},
+-    {{{   187,     -6,    134}, 0, {     0,      0}, {0x1f, 0x04, 0x7a, 0xff}}},
+-    {{{   153,     33,     95}, 0, {     0,      0}, {0x04, 0x46, 0x69, 0xff}}},
+-    {{{   120,    -11,    111}, 0, {     0,      0}, {0xed, 0x24, 0x78, 0xff}}},
+-    {{{   252,     62,     70}, 0, {     0,      0}, {0x39, 0x4a, 0x55, 0xff}}},
+-    {{{   271,      0,     42}, 0, {     0,      0}, {0x71, 0xdc, 0x2b, 0xff}}},
+-    {{{   164,    -89,     75}, 0, {     0,      0}, {0x4e, 0xa6, 0x2b, 0xff}}},
+-};
+-
+-// 0x04010940
+-static const Vtx mario_face_cap_dl_vertex_group3[] = {
+-    {{{   195,     93,     32}, 0, {     0,      0}, {0x51, 0x54, 0x30, 0xff}}},
+-    {{{   173,    132,     66}, 0, {     0,      0}, {0xda, 0x5a, 0x50, 0xff}}},
+-    {{{   153,     33,     95}, 0, {     0,      0}, {0x04, 0x46, 0x69, 0xff}}},
+-    {{{   175,     91,     39}, 0, {     0,      0}, {0xc6, 0x6d, 0x19, 0xff}}},
+-    {{{   164,    -89,    -74}, 0, {     0,      0}, {0x51, 0xa9, 0xd5, 0xff}}},
+-    {{{   271,      0,    -41}, 0, {     0,      0}, {0x6e, 0xcf, 0xdc, 0xff}}},
+-    {{{   164,    -89,     75}, 0, {     0,      0}, {0x4e, 0xa6, 0x2b, 0xff}}},
+-    {{{   271,      0,     42}, 0, {     0,      0}, {0x71, 0xdc, 0x2b, 0xff}}},
+-    {{{   252,     62,    -69}, 0, {     0,      0}, {0x39, 0x4a, 0xab, 0xff}}},
+-    {{{   272,     85,      0}, 0, {     0,      0}, {0x5f, 0x54, 0x00, 0xff}}},
+-    {{{   182,    155,      0}, 0, {     0,      0}, {0xed, 0x7d, 0x00, 0xff}}},
+-    {{{   195,     93,    -31}, 0, {     0,      0}, {0x51, 0x54, 0xcf, 0xff}}},
+-    {{{   175,     91,    -38}, 0, {     0,      0}, {0xc6, 0x6d, 0xe7, 0xff}}},
+-    {{{   173,    132,    -65}, 0, {     0,      0}, {0xda, 0x5a, 0xb0, 0xff}}},
+-    {{{   252,     62,     70}, 0, {     0,      0}, {0x39, 0x4a, 0x55, 0xff}}},
+-};
+-
+-// 0x04010A30
+-static const Vtx mario_face_part_cap_on_dl_vertex_group1[] = {
+-    {{{    41,    109,      0}, 0, {     0,      0}, {0x95, 0x44, 0x00, 0xff}}},
+-    {{{    27,    100,    -29}, 0, {     0,      0}, {0xb1, 0x60, 0xea, 0xff}}},
+-    {{{    27,    100,     30}, 0, {     0,      0}, {0xb1, 0x60, 0x16, 0xff}}},
+-    {{{    -7,     62,      0}, 0, {     0,      0}, {0x85, 0x1d, 0x00, 0xff}}},
+-    {{{     3,     54,     52}, 0, {     0,      0}, {0x95, 0x1d, 0x3c, 0xff}}},
+-    {{{     3,     54,    -51}, 0, {     0,      0}, {0x95, 0x1d, 0xc4, 0xff}}},
+-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
+-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
+-    {{{    42,      0,    103}, 0, {     0,      0}, {0xc3, 0x05, 0x6e, 0xff}}},
+-    {{{    44,     44,     97}, 0, {     0,      0}, {0xda, 0x21, 0x74, 0xff}}},
+-    {{{    42,      0,   -102}, 0, {     0,      0}, {0xc3, 0x05, 0x92, 0xff}}},
+-    {{{    44,     44,    -96}, 0, {     0,      0}, {0xda, 0x21, 0x8c, 0xff}}},
+-    {{{    64,    -25,    135}, 0, {     0,      0}, {0xcc, 0xe5, 0x70, 0xff}}},
+-    {{{    91,    -54,     86}, 0, {     0,      0}, {0xd9, 0xaf, 0x59, 0xff}}},
+-    {{{   102,    -33,    135}, 0, {     0,      0}, {0x30, 0x18, 0x72, 0xff}}},
+-};
+-
+-// 0x04010B20
+-static const Vtx mario_face_part_cap_on_dl_vertex_group2[] = {
+-    {{{   102,    -33,   -134}, 0, {     0,      0}, {0x32, 0x19, 0x8f, 0xff}}},
+-    {{{   120,    -12,   -109}, 0, {     0,      0}, {0xed, 0x24, 0x88, 0xff}}},
+-    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xd9, 0xb0, 0xa7, 0xff}}},
+-    {{{    64,    -25,    135}, 0, {     0,      0}, {0xcc, 0xe5, 0x70, 0xff}}},
+-    {{{    56,    -45,     77}, 0, {     0,      0}, {0xe3, 0xca, 0x6e, 0xff}}},
+-    {{{    91,    -54,     86}, 0, {     0,      0}, {0xd9, 0xaf, 0x59, 0xff}}},
+-    {{{   120,    -11,    111}, 0, {     0,      0}, {0xed, 0x24, 0x78, 0xff}}},
+-    {{{    85,    -23,    111}, 0, {     0,      0}, {0x04, 0x58, 0x5a, 0xff}}},
+-    {{{   102,    -33,    135}, 0, {     0,      0}, {0x30, 0x18, 0x72, 0xff}}},
+-    {{{    42,      0,    103}, 0, {     0,      0}, {0xc3, 0x05, 0x6e, 0xff}}},
+-    {{{    85,    -23,   -110}, 0, {     0,      0}, {0x06, 0x59, 0xa6, 0xff}}},
+-    {{{    64,    -25,   -134}, 0, {     0,      0}, {0xcc, 0xe5, 0x90, 0xff}}},
+-    {{{    42,      0,   -102}, 0, {     0,      0}, {0xc3, 0x05, 0x92, 0xff}}},
+-    {{{    33,    165,      0}, 0, {     0,      0}, {0x8f, 0x38, 0x09, 0xff}}},
+-    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
+-    {{{    32,    132,      0}, 0, {     0,      0}, {0x84, 0xe8, 0xf8, 0xff}}},
+-};
+-
+-// 0x04010C20
+-static const Vtx mario_face_part_cap_on_dl_vertex_group3[] = {
+-    {{{    56,    -45,    -76}, 0, {     0,      0}, {0xe3, 0xca, 0x92, 0xff}}},
+-    {{{    64,    -25,   -134}, 0, {     0,      0}, {0xcc, 0xe5, 0x90, 0xff}}},
+-    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xd9, 0xb0, 0xa7, 0xff}}},
+-    {{{    42,      0,   -102}, 0, {     0,      0}, {0xc3, 0x05, 0x92, 0xff}}},
+-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
+-    {{{    56,    -45,     77}, 0, {     0,      0}, {0xe3, 0xca, 0x6e, 0xff}}},
+-    {{{    42,      0,    103}, 0, {     0,      0}, {0xc3, 0x05, 0x6e, 0xff}}},
+-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
+-    {{{    32,    132,      0}, 0, {     0,      0}, {0x84, 0xe8, 0xf8, 0xff}}},
+-    {{{    47,    131,     41}, 0, {     0,      0}, {0xb0, 0xe4, 0x5e, 0xff}}},
+-    {{{    33,    165,      0}, 0, {     0,      0}, {0x8f, 0x38, 0x09, 0xff}}},
+-    {{{    52,    111,     31}, 0, {     0,      0}, {0xa8, 0x33, 0x4b, 0xff}}},
+-    {{{    52,    111,    -30}, 0, {     0,      0}, {0xa8, 0x32, 0xb5, 0xff}}},
+-    {{{    41,    109,      0}, 0, {     0,      0}, {0x95, 0x44, 0x00, 0xff}}},
+-    {{{    77,    108,     34}, 0, {     0,      0}, {0x0e, 0x16, 0x7c, 0xff}}},
+-};
+-
+-// 0x04010D10
+-static const Vtx mario_face_part_cap_on_dl_vertex_group4[] = {
+-    {{{    92,     88,     84}, 0, {     0,      0}, {0x23, 0x59, 0x53, 0xff}}},
+-    {{{   104,     87,     70}, 0, {     0,      0}, {0x30, 0x5c, 0x49, 0xff}}},
+-    {{{    97,    103,     25}, 0, {     0,      0}, {0x40, 0x5a, 0x3d, 0xff}}},
+-    {{{   117,    128,      0}, 0, {     0,      0}, {0x7a, 0xe1, 0x06, 0xff}}},
+-    {{{   102,    129,     41}, 0, {     0,      0}, {0x45, 0xd6, 0x61, 0xff}}},
+-    {{{    77,    108,     34}, 0, {     0,      0}, {0x0e, 0x16, 0x7c, 0xff}}},
+-    {{{   108,    105,      0}, 0, {     0,      0}, {0x69, 0x46, 0x00, 0xff}}},
+-    {{{    97,    103,    -24}, 0, {     0,      0}, {0x40, 0x5a, 0xc3, 0xff}}},
+-    {{{   119,    161,      0}, 0, {     0,      0}, {0x79, 0x23, 0xf6, 0xff}}},
+-    {{{   104,    162,     41}, 0, {     0,      0}, {0x52, 0x27, 0x58, 0xff}}},
+-    {{{   102,    129,    -40}, 0, {     0,      0}, {0x50, 0xdc, 0xa6, 0xff}}},
+-    {{{    75,    130,     46}, 0, {     0,      0}, {0x00, 0xec, 0x7d, 0xff}}},
+-    {{{    78,    163,     46}, 0, {     0,      0}, {0x03, 0x55, 0x5d, 0xff}}},
+-    {{{   101,    179,      0}, 0, {     0,      0}, {0x27, 0x78, 0x00, 0xff}}},
+-    {{{    52,    164,     41}, 0, {     0,      0}, {0xc8, 0x3d, 0x5f, 0xff}}},
+-    {{{    47,    131,     41}, 0, {     0,      0}, {0xb0, 0xe4, 0x5e, 0xff}}},
+-};
+-
+-// 0x04010E10
+-static const Vtx mario_face_part_cap_on_dl_vertex_group5[] = {
+-    {{{    47,    131,     41}, 0, {     0,      0}, {0xb0, 0xe4, 0x5e, 0xff}}},
+-    {{{    52,    164,     41}, 0, {     0,      0}, {0xc8, 0x3d, 0x5f, 0xff}}},
+-    {{{    33,    165,      0}, 0, {     0,      0}, {0x8f, 0x38, 0x09, 0xff}}},
+-    {{{    75,    130,     46}, 0, {     0,      0}, {0x00, 0xec, 0x7d, 0xff}}},
+-    {{{    77,    108,     34}, 0, {     0,      0}, {0x0e, 0x16, 0x7c, 0xff}}},
+-    {{{    78,    163,     46}, 0, {     0,      0}, {0x03, 0x55, 0x5d, 0xff}}},
+-    {{{    60,    181,      0}, 0, {     0,      0}, {0xea, 0x7c, 0x00, 0xff}}},
+-    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
+-    {{{    96,     49,     94}, 0, {     0,      0}, {0x10, 0x28, 0x77, 0xff}}},
+-    {{{   153,     33,     95}, 0, {     0,      0}, {0x04, 0x46, 0x69, 0xff}}},
+-    {{{   144,     83,     67}, 0, {     0,      0}, {0x19, 0x5b, 0x53, 0xff}}},
+-    {{{   101,    179,      0}, 0, {     0,      0}, {0x27, 0x78, 0x00, 0xff}}},
+-    {{{   104,     87,     70}, 0, {     0,      0}, {0x30, 0x5c, 0x49, 0xff}}},
+-    {{{    92,     88,     84}, 0, {     0,      0}, {0x23, 0x59, 0x53, 0xff}}},
+-    {{{    44,     44,     97}, 0, {     0,      0}, {0xda, 0x21, 0x74, 0xff}}},
+-};
+-
+-// 0x04010F00
+-static const Vtx mario_face_part_cap_on_dl_vertex_group6[] = {
+-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
+-    {{{    31,    -84,      0}, 0, {     0,      0}, {0xa0, 0xae, 0x00, 0xff}}},
+-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
+-    {{{   144,     83,    -66}, 0, {     0,      0}, {0x19, 0x5b, 0xad, 0xff}}},
+-    {{{   153,     33,    -94}, 0, {     0,      0}, {0x03, 0x46, 0x97, 0xff}}},
+-    {{{    96,     49,    -93}, 0, {     0,      0}, {0x11, 0x27, 0x89, 0xff}}},
+-    {{{    92,     88,    -83}, 0, {     0,      0}, {0x23, 0x59, 0xad, 0xff}}},
+-    {{{   104,     87,    -69}, 0, {     0,      0}, {0x30, 0x5c, 0xb7, 0xff}}},
+-    {{{    44,     44,    -96}, 0, {     0,      0}, {0xda, 0x21, 0x8c, 0xff}}},
+-    {{{    75,    130,    -45}, 0, {     0,      0}, {0x00, 0xec, 0x83, 0xff}}},
+-    {{{    78,    163,    -45}, 0, {     0,      0}, {0x03, 0x54, 0xa2, 0xff}}},
+-    {{{   104,    162,    -40}, 0, {     0,      0}, {0x44, 0x31, 0xa1, 0xff}}},
+-    {{{    97,    103,    -24}, 0, {     0,      0}, {0x40, 0x5a, 0xc3, 0xff}}},
+-    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
+-    {{{    47,    131,    -40}, 0, {     0,      0}, {0xbc, 0xde, 0x9c, 0xff}}},
+-    {{{    60,    181,      0}, 0, {     0,      0}, {0xea, 0x7c, 0x00, 0xff}}},
+-};
+-
+-// 0x04011000
+-static const Vtx mario_face_part_cap_on_dl_vertex_group7[] = {
+-    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
+-    {{{    47,    131,    -40}, 0, {     0,      0}, {0xbc, 0xde, 0x9c, 0xff}}},
+-    {{{    32,    132,      0}, 0, {     0,      0}, {0x84, 0xe8, 0xf8, 0xff}}},
+-    {{{    77,    108,    -33}, 0, {     0,      0}, {0x0e, 0x16, 0x84, 0xff}}},
+-    {{{    52,    111,    -30}, 0, {     0,      0}, {0xa8, 0x32, 0xb5, 0xff}}},
+-    {{{    75,    130,    -45}, 0, {     0,      0}, {0x00, 0xec, 0x83, 0xff}}},
+-    {{{   104,    162,    -40}, 0, {     0,      0}, {0x44, 0x31, 0xa1, 0xff}}},
+-    {{{   102,    129,    -40}, 0, {     0,      0}, {0x50, 0xdc, 0xa6, 0xff}}},
+-    {{{   119,    161,      0}, 0, {     0,      0}, {0x79, 0x23, 0xf6, 0xff}}},
+-    {{{    97,    103,    -24}, 0, {     0,      0}, {0x40, 0x5a, 0xc3, 0xff}}},
+-    {{{    78,    163,    -45}, 0, {     0,      0}, {0x03, 0x54, 0xa2, 0xff}}},
+-    {{{    60,    181,      0}, 0, {     0,      0}, {0xea, 0x7c, 0x00, 0xff}}},
+-    {{{   101,    179,      0}, 0, {     0,      0}, {0x27, 0x78, 0x00, 0xff}}},
+-};
+-
+-// 0x040110D0
+-static const Vtx mario_face_back_hair_cap_on_dl_vertex_group1[] = {
+-    {{{    31,    -84,      0}, 0, {     0,      0}, {0xa0, 0xae, 0x00, 0xff}}},
+-    {{{    36,   -116,    -35}, 0, {     0,      0}, {0xfb, 0x8e, 0x37, 0xff}}},
+-    {{{    64,   -103,    -51}, 0, {     0,      0}, {0xde, 0x94, 0xc7, 0xff}}},
+-    {{{    31,    -85,     87}, 0, {     0,      0}, {0xdb, 0xfd, 0x79, 0xff}}},
+-    {{{    35,   -120,     68}, 0, {     0,      0}, {0xda, 0x94, 0x35, 0xff}}},
+-    {{{    58,   -114,     60}, 0, {     0,      0}, {0x57, 0xb4, 0x32, 0xff}}},
+-    {{{    64,   -103,     52}, 0, {     0,      0}, {0xc9, 0x9a, 0x31, 0xff}}},
+-    {{{    56,    -45,     77}, 0, {     0,      0}, {0xe3, 0xca, 0x6e, 0xff}}},
+-    {{{    36,   -116,     36}, 0, {     0,      0}, {0xfb, 0x8e, 0xc9, 0xff}}},
+-    {{{    91,    -54,     86}, 0, {     0,      0}, {0xd9, 0xaf, 0x59, 0xff}}},
+-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
+-    {{{    35,   -120,    -67}, 0, {     0,      0}, {0xda, 0x94, 0xcb, 0xff}}},
+-    {{{    58,   -114,    -59}, 0, {     0,      0}, {0x57, 0xb4, 0xce, 0xff}}},
+-    {{{    31,    -85,    -86}, 0, {     0,      0}, {0xdb, 0xfd, 0x87, 0xff}}},
+-    {{{    56,    -45,    -76}, 0, {     0,      0}, {0xe3, 0xca, 0x92, 0xff}}},
+-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
+-};
+-
+-// 0x040111D0
+-static const Vtx mario_face_back_hair_cap_on_dl_vertex_group2[] = {
+-    {{{    31,    -85,    -86}, 0, {     0,      0}, {0xdb, 0xfd, 0x87, 0xff}}},
+-    {{{    35,   -120,    -67}, 0, {     0,      0}, {0xda, 0x94, 0xcb, 0xff}}},
+-    {{{     9,    -88,    -58}, 0, {     0,      0}, {0x87, 0xdf, 0xf5, 0xff}}},
+-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
+-    {{{    56,    -45,    -76}, 0, {     0,      0}, {0xe3, 0xca, 0x92, 0xff}}},
+-    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xd9, 0xb0, 0xa7, 0xff}}},
+-    {{{    64,   -103,    -51}, 0, {     0,      0}, {0xde, 0x94, 0xc7, 0xff}}},
+-    {{{    31,    -84,      0}, 0, {     0,      0}, {0xa0, 0xae, 0x00, 0xff}}},
+-    {{{    36,   -116,     36}, 0, {     0,      0}, {0xfb, 0x8e, 0xc9, 0xff}}},
+-    {{{     9,    -88,     59}, 0, {     0,      0}, {0x87, 0xdf, 0x0b, 0xff}}},
+-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
+-    {{{    36,   -116,    -35}, 0, {     0,      0}, {0xfb, 0x8e, 0x37, 0xff}}},
+-    {{{    35,   -120,     68}, 0, {     0,      0}, {0xda, 0x94, 0x35, 0xff}}},
+-    {{{    31,    -85,     87}, 0, {     0,      0}, {0xdb, 0xfd, 0x79, 0xff}}},
+-};
+-
+-// 0x040112B0 - 0x040112E8
+-const Gfx mario_m_logo_dl[] = {
+-    gsSPVertex(mario_m_logo_dl_vertex, 7, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 2,  3,  0, 0x0,  3,  5,  0, 0x0),
+-    gsSP1Triangle( 4,  6,  5, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040112E8 - 0x04011350
+-const Gfx mario_eyes_cap_on_dl[] = {
+-    gsSPVertex(mario_eyes_cap_on_dl_vertex, 12, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 3,  0,  4, 0x0,  6,  3,  5, 0x0),
+-    gsSP2Triangles( 3,  1,  0, 0x0,  4,  0,  7, 0x0),
+-    gsSP2Triangles( 5,  4,  8, 0x0,  2,  9, 10, 0x0),
+-    gsSP2Triangles(10,  7,  2, 0x0, 11,  7, 10, 0x0),
+-    gsSP1Triangle( 7,  0,  2, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04011350 - 0x040113A0
+-const Gfx mario_hair_sideburn_cap_on_dl[] = {
+-    gsSPVertex(mario_hair_sideburn_cap_on_dl_vertex, 12, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  4, 0x0),
+-    gsSP2Triangles( 4,  5,  1, 0x0,  3,  1,  0, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  8,  9,  6, 0x0),
+-    gsSP2Triangles( 9, 10,  6, 0x0, 11,  6, 10, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040113A0 - 0x04011438
+-const Gfx mario_mustache_cap_on_dl[] = {
+-    gsSPVertex(mario_mustache_cap_on_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  0,  3, 0x0),
+-    gsSP2Triangles( 0,  4,  3, 0x0,  5,  3,  4, 0x0),
+-    gsSP2Triangles( 5,  4,  6, 0x0,  7,  3,  8, 0x0),
+-    gsSP2Triangles( 8,  3,  5, 0x0,  3,  7,  1, 0x0),
+-    gsSP2Triangles( 9, 10, 11, 0x0, 12, 10, 13, 0x0),
+-    gsSP2Triangles(11, 10, 12, 0x0, 10,  9, 14, 0x0),
+-    gsSP1Triangle(15,  9, 11, 0x0),
+-    gsSPVertex(mario_mustache_cap_on_dl_vertex_group2, 5, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+-    gsSP1Triangle( 2,  4,  0, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04011438 - 0x040116F8
+-const Gfx mario_face_part_cap_on_dl[] = {
+-    gsSPVertex(mario_face_part_cap_on_dl_vertex_group1, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+-    gsSP2Triangles( 3,  4,  2, 0x0,  1,  5,  3, 0x0),
+-    gsSP2Triangles( 6,  7,  3, 0x0,  7,  4,  3, 0x0),
+-    gsSP2Triangles( 6,  3,  5, 0x0,  4,  7,  8, 0x0),
+-    gsSP2Triangles( 9,  4,  8, 0x0, 10,  6,  5, 0x0),
+-    gsSP2Triangles(10,  5, 11, 0x0, 12, 13, 14, 0x0),
+-    gsSPVertex(mario_face_part_cap_on_dl_vertex_group2, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  5,  6,  8, 0x0),
+-    gsSP2Triangles( 3,  8,  7, 0x0,  9,  3,  7, 0x0),
+-    gsSP2Triangles( 3,  9,  4, 0x0, 10, 11, 12, 0x0),
+-    gsSP2Triangles( 0, 10,  1, 0x0, 10,  0, 11, 0x0),
+-    gsSP2Triangles(11,  0,  2, 0x0, 13, 14, 15, 0x0),
+-    gsSPVertex(mario_face_part_cap_on_dl_vertex_group3, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  3,  0,  7, 0x0),
+-    gsSP2Triangles( 8,  9, 10, 0x0, 11,  9,  8, 0x0),
+-    gsSP2Triangles(12, 13,  8, 0x0,  8, 13, 11, 0x0),
+-    gsSP1Triangle( 9, 11, 14, 0x0),
+-    gsSPVertex(mario_face_part_cap_on_dl_vertex_group4, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  2, 0x0),
+-    gsSP2Triangles( 5,  2,  4, 0x0,  2,  6,  3, 0x0),
+-    gsSP2Triangles( 3,  6,  7, 0x0,  8,  9,  3, 0x0),
+-    gsSP2Triangles( 9,  4,  3, 0x0,  7, 10,  3, 0x0),
+-    gsSP2Triangles( 3, 10,  8, 0x0, 11,  4,  9, 0x0),
+-    gsSP2Triangles(12, 11,  9, 0x0, 13,  9,  8, 0x0),
+-    gsSP2Triangles( 9, 13, 12, 0x0,  4, 11,  5, 0x0),
+-    gsSP1Triangle(14, 15, 11, 0x0),
+-    gsSPVertex(mario_face_part_cap_on_dl_vertex_group5, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  4, 0x0),
+-    gsSP2Triangles( 1,  5,  6, 0x0,  1,  3,  5, 0x0),
+-    gsSP2Triangles( 2,  1,  6, 0x0,  2,  6,  7, 0x0),
+-    gsSP2Triangles( 8,  9, 10, 0x0,  6,  5, 11, 0x0),
+-    gsSP2Triangles(12, 13,  8, 0x0, 10, 12,  8, 0x0),
+-    gsSP1Triangle(14,  8, 13, 0x0),
+-    gsSPVertex(mario_face_part_cap_on_dl_vertex_group6, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 5,  6,  7, 0x0,  6,  5,  8, 0x0),
+-    gsSP2Triangles( 5,  7,  3, 0x0,  9, 10, 11, 0x0),
+-    gsSP2Triangles( 6, 12,  7, 0x0, 13, 10,  9, 0x0),
+-    gsSP2Triangles(14, 13,  9, 0x0, 15, 10, 13, 0x0),
+-    gsSPVertex(mario_face_part_cap_on_dl_vertex_group7, 13, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+-    gsSP2Triangles( 1,  5,  3, 0x0,  2,  1,  4, 0x0),
+-    gsSP2Triangles( 5,  6,  7, 0x0,  7,  6,  8, 0x0),
+-    gsSP2Triangles( 7,  9,  3, 0x0,  5,  7,  3, 0x0),
+-    gsSP2Triangles(10, 11, 12, 0x0, 12,  6, 10, 0x0),
+-    gsSP1Triangle(12,  8,  6, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040116F8 - 0x04011870
+-const Gfx mario_face_cap_dl[] = {
+-    gsSPVertex(mario_face_cap_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  2,  4, 0x0),
+-    gsSP2Triangles( 4,  2,  5, 0x0,  3,  0,  2, 0x0),
+-    gsSP2Triangles( 2,  1,  6, 0x0,  6,  7,  2, 0x0),
+-    gsSP2Triangles( 5,  2,  7, 0x0,  6,  1,  8, 0x0),
+-    gsSP2Triangles( 8,  1,  0, 0x0,  6,  8,  9, 0x0),
+-    gsSP2Triangles(10,  7,  6, 0x0,  9, 10,  6, 0x0),
+-    gsSP2Triangles(11, 10,  9, 0x0,  9,  8, 11, 0x0),
+-    gsSP2Triangles(11,  8, 12, 0x0,  0, 12,  8, 0x0),
+-    gsSP2Triangles(13, 10, 11, 0x0, 11, 12, 14, 0x0),
+-    gsSP2Triangles(15, 11, 14, 0x0, 13, 11, 15, 0x0),
+-    gsSPVertex(mario_face_cap_dl_vertex_group2, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  0, 0x0),
+-    gsSP2Triangles( 4,  5,  0, 0x0,  0,  6,  1, 0x0),
+-    gsSP2Triangles( 7,  1,  8, 0x0,  8,  1,  6, 0x0),
+-    gsSP2Triangles( 9, 10, 11, 0x0,  9, 12, 10, 0x0),
+-    gsSP2Triangles(12,  9, 13, 0x0, 13,  9, 14, 0x0),
+-    gsSPVertex(mario_face_cap_dl_vertex_group3, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  5,  7,  6, 0x0),
+-    gsSP2Triangles( 8,  9,  5, 0x0,  0, 10,  1, 0x0),
+-    gsSP2Triangles( 1, 10,  3, 0x0, 11, 10,  0, 0x0),
+-    gsSP2Triangles(12,  3, 10, 0x0, 12, 10, 13, 0x0),
+-    gsSP2Triangles(13, 10, 11, 0x0,  5,  9,  7, 0x0),
+-    gsSP1Triangle( 7,  9, 14, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04011870 - 0x04011960
+-const Gfx mario_face_back_hair_cap_on_dl[] = {
+-    gsSPVertex(mario_face_back_hair_cap_on_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 5,  6,  7, 0x0,  5,  8,  6, 0x0),
+-    gsSP2Triangles( 5,  4,  8, 0x0,  7,  3,  5, 0x0),
+-    gsSP2Triangles( 0,  2,  6, 0x0,  6,  9,  7, 0x0),
+-    gsSP2Triangles( 0,  6,  8, 0x0,  3,  7, 10, 0x0),
+-    gsSP2Triangles( 1, 11, 12, 0x0, 12, 13, 14, 0x0),
+-    gsSP2Triangles(11, 13, 12, 0x0,  1, 12,  2, 0x0),
+-    gsSP2Triangles(14,  2, 12, 0x0, 15, 14, 13, 0x0),
+-    gsSPVertex(mario_face_back_hair_cap_on_dl_vertex_group2, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  3,  2, 0x0),
+-    gsSP2Triangles( 7,  8,  9, 0x0,  9, 10,  7, 0x0),
+-    gsSP2Triangles( 2,  1, 11, 0x0,  2, 11,  7, 0x0),
+-    gsSP2Triangles( 9, 12, 13, 0x0, 10,  9, 13, 0x0),
+-    gsSP1Triangle( 8, 12,  9, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04011960 - 0x040119A0
+-const Gfx mario_face_cap_on_dl[] = {
+-    gsSPDisplayList(mario_face_part_cap_on_dl),
+-    gsSPLight(&mario_red_lights_group.l, 1),
+-    gsSPLight(&mario_red_lights_group.a, 2),
+-    gsSPDisplayList(mario_face_cap_dl),
+-    gsSPLight(&mario_brown2_lights_group.l, 1),
+-    gsSPLight(&mario_brown2_lights_group.a, 2),
+-    gsSPDisplayList(mario_face_back_hair_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040119A0 - 0x04011A90
+-const Gfx mario_cap_on_eyes_front[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_m_logo_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_front),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_eyes_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_mustache_cap_on_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_face_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04011A90 - 0x04011B80
+-const Gfx mario_cap_on_eyes_half_closed[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_m_logo_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_half_closed),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_eyes_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_mustache_cap_on_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_face_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04011B80 - 0x04011C70
+-const Gfx mario_cap_on_eyes_closed[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_m_logo_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_closed),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_eyes_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_mustache_cap_on_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_face_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04011C70 - 0x04011D60
+-const Gfx mario_cap_on_eyes_right[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_m_logo_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_right),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_eyes_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_mustache_cap_on_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_face_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04011D60 - 0x04011E50
+-const Gfx mario_cap_on_eyes_left[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_m_logo_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_left),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_eyes_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_mustache_cap_on_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_face_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04011E50 - 0x04011F40
+-const Gfx mario_cap_on_eyes_up[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_m_logo_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_up),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_eyes_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_mustache_cap_on_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_face_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04011F40 - 0x04012030
+-const Gfx mario_cap_on_eyes_down[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_m_logo_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_down),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_eyes_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_mustache_cap_on_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_face_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04012030 - 0x04012120
+-const Gfx mario_cap_on_eyes_dead[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_m_logo_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_dead),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_eyes_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_mustache_cap_on_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_face_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04012120 - 0x04012160
+-const Gfx mario_metal_cap_on_shared_dl[] = {
+-    gsSPDisplayList(mario_m_logo_dl),
+-    gsSPDisplayList(mario_eyes_cap_on_dl),
+-    gsSPDisplayList(mario_hair_sideburn_cap_on_dl),
+-    gsSPDisplayList(mario_mustache_cap_on_dl),
+-    gsSPDisplayList(mario_face_part_cap_on_dl),
+-    gsSPDisplayList(mario_face_cap_dl),
+-    gsSPDisplayList(mario_face_back_hair_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// Unreferenced light group
+-UNUSED static const Lights1 mario_lights_unused1 = gdSPDefLights1(
+-    0x3f, 0x30, 0x1e,
+-    0xfe, 0xc1, 0x79, 0x28, 0x28, 0x28
+-);
+-
+-// Unreferenced light group
+-UNUSED static const Lights1 mario_lights_unused2 = gdSPDefLights1(
+-    0x1c, 0x01, 0x00,
+-    0x73, 0x06, 0x00, 0x28, 0x28, 0x28
+-);
+-
+-// 0x04012190
+-static const Vtx mario_eyes_cap_off_dl_vertex[] = {
+-    {{{   104,     87,    -69}, 0, {  -160,    898}, {0x30, 0x5c, 0xb7, 0xff}}},
+-    {{{    97,    103,    -24}, 0, {   256,    970}, {0x40, 0x5a, 0xc3, 0xff}}},
+-    {{{   144,     83,    -66}, 0, {  -146,    460}, {0x19, 0x5b, 0xad, 0xff}}},
+-    {{{   153,     33,     95}, 0, {  1362,    296}, {0x05, 0x38, 0x71, 0xff}}},
+-    {{{   175,     91,     39}, 0, {   842,    112}, {0x01, 0x75, 0x2f, 0xff}}},
+-    {{{   144,     83,     67}, 0, {  1108,    428}, {0x19, 0x5b, 0x53, 0xff}}},
+-    {{{   145,    101,      0}, 0, {   480,    446}, {0x13, 0x7d, 0x00, 0xff}}},
+-    {{{    97,    103,     25}, 0, {   724,    958}, {0x40, 0x5a, 0x3d, 0xff}}},
+-    {{{   175,     91,    -38}, 0, {   106,    130}, {0xf5, 0x73, 0xcc, 0xff}}},
+-    {{{   104,     87,     70}, 0, {  1138,    864}, {0x30, 0x5c, 0x49, 0xff}}},
+-    {{{   153,     33,    -94}, 0, {  -404,    342}, {0xfe, 0x36, 0x8e, 0xff}}},
+-    {{{   108,    105,      0}, 0, {   488,    854}, {0x69, 0x46, 0x00, 0xff}}},
+-};
+-
+-// 0x04012250
+-static const Vtx mario_hair_sideburn_cap_off_dl_vertex[] = {
+-    {{{    42,      0,    103}, 0, {   968,   1192}, {0xc3, 0x05, 0x6e, 0xff}}},
+-    {{{    85,    -23,    111}, 0, {  1238,    518}, {0x04, 0x58, 0x5a, 0xff}}},
+-    {{{    96,     49,     94}, 0, {   -74,    726}, {0x10, 0x28, 0x77, 0xff}}},
+-    {{{    44,     44,     97}, 0, {   196,   1366}, {0xda, 0x21, 0x74, 0xff}}},
+-    {{{   153,     33,     95}, 0, {    22,    -68}, {0x05, 0x38, 0x71, 0xff}}},
+-    {{{   120,    -11,    111}, 0, {   922,    122}, {0xff, 0x13, 0x7d, 0xff}}},
+-    {{{    42,      0,   -102}, 0, {   842,   1210}, {0xc3, 0x05, 0x92, 0xff}}},
+-    {{{    44,     44,    -96}, 0, {   118,   1334}, {0xda, 0x21, 0x8c, 0xff}}},
+-    {{{    96,     49,    -93}, 0, {   -70,    700}, {0x11, 0x27, 0x89, 0xff}}},
+-    {{{    85,    -23,   -110}, 0, {  1150,    582}, {0x06, 0x59, 0xa6, 0xff}}},
+-    {{{   120,    -12,   -109}, 0, {   916,    184}, {0xff, 0x13, 0x83, 0xff}}},
+-    {{{   153,     33,    -94}, 0, {    90,    -58}, {0xfe, 0x36, 0x8e, 0xff}}},
+-};
+-
+-// 0x04012310
+-static const Vtx mario_mustache_cap_off_dl_vertex_group1[] = {
+-    {{{    92,     88,    -83}, 0, {   992,    -10}, {0x23, 0x59, 0xad, 0xff}}},
+-    {{{    77,    108,    -33}, 0, {   360,    296}, {0x0e, 0x16, 0x84, 0xff}}},
+-    {{{    97,    103,    -24}, 0, {   298,     20}, {0x40, 0x5a, 0xc3, 0xff}}},
+-    {{{    48,     94,    -75}, 0, {   844,    640}, {0xd7, 0x60, 0xb9, 0xff}}},
+-    {{{    44,     44,    -96}, 0, {  1272,    592}, {0xda, 0x21, 0x8c, 0xff}}},
+-    {{{    52,    111,    -30}, 0, {   294,    656}, {0xa8, 0x32, 0xb5, 0xff}}},
+-    {{{    92,     88,     84}, 0, {   948,     -8}, {0x23, 0x59, 0x53, 0xff}}},
+-    {{{    77,    108,     34}, 0, {   330,    316}, {0x0e, 0x16, 0x7c, 0xff}}},
+-    {{{    48,     94,     76}, 0, {   848,    630}, {0xd7, 0x60, 0x47, 0xff}}},
+-    {{{    97,    103,     25}, 0, {   248,     50}, {0x40, 0x5a, 0x3d, 0xff}}},
+-    {{{    52,    111,     31}, 0, {   292,    670}, {0xa8, 0x33, 0x4b, 0xff}}},
+-    {{{    44,     44,     97}, 0, {  1276,    566}, {0xda, 0x21, 0x74, 0xff}}},
+-    {{{     3,     54,     52}, 0, {   768,   1210}, {0x95, 0x1d, 0x3c, 0xff}}},
+-    {{{    27,    100,     30}, 0, {   336,   1006}, {0xb1, 0x60, 0x16, 0xff}}},
+-    {{{     3,     54,    -51}, 0, {   720,   1228}, {0x95, 0x1d, 0xc4, 0xff}}},
+-    {{{    41,    109,      0}, 0, {   -30,    876}, {0x95, 0x44, 0x00, 0xff}}},
+-};
+-
+-// 0x04012410
+-static const Vtx mario_mustache_cap_off_dl_vertex_group2[] = {
+-    {{{    41,    109,      0}, 0, {   -38,    852}, {0x95, 0x44, 0x00, 0xff}}},
+-    {{{    52,    111,    -30}, 0, {   294,    656}, {0xa8, 0x32, 0xb5, 0xff}}},
+-    {{{    27,    100,    -29}, 0, {   310,   1002}, {0xb1, 0x60, 0xea, 0xff}}},
+-    {{{    48,     94,    -75}, 0, {   844,    640}, {0xd7, 0x60, 0xb9, 0xff}}},
+-    {{{     3,     54,    -51}, 0, {   720,   1228}, {0x95, 0x1d, 0xc4, 0xff}}},
+-};
+-
+-// 0x04012460
+-static const Vtx mario_face_part_cap_off_dl_vertex_group1[] = {
+-    {{{    97,    103,     25}, 0, {     0,      0}, {0x40, 0x5a, 0x3d, 0xff}}},
+-    {{{   108,    105,      0}, 0, {     0,      0}, {0x69, 0x46, 0x00, 0xff}}},
+-    {{{   117,    128,      0}, 0, {     0,      0}, {0x7a, 0xe1, 0x06, 0xff}}},
+-    {{{    92,     88,    -83}, 0, {     0,      0}, {0x23, 0x59, 0xad, 0xff}}},
+-    {{{    97,    103,    -24}, 0, {     0,      0}, {0x40, 0x5a, 0xc3, 0xff}}},
+-    {{{   104,     87,    -69}, 0, {     0,      0}, {0x30, 0x5c, 0xb7, 0xff}}},
+-    {{{    96,     49,    -93}, 0, {     0,      0}, {0x11, 0x27, 0x89, 0xff}}},
+-    {{{    44,     44,    -96}, 0, {     0,      0}, {0xda, 0x21, 0x8c, 0xff}}},
+-    {{{   102,    129,    -40}, 0, {     0,      0}, {0x50, 0xdc, 0xa6, 0xff}}},
+-    {{{    77,    108,    -33}, 0, {     0,      0}, {0x0e, 0x16, 0x84, 0xff}}},
+-    {{{   144,     83,    -66}, 0, {     0,      0}, {0x19, 0x5b, 0xad, 0xff}}},
+-    {{{    44,     44,     97}, 0, {     0,      0}, {0xda, 0x21, 0x74, 0xff}}},
+-    {{{    96,     49,     94}, 0, {     0,      0}, {0x10, 0x28, 0x77, 0xff}}},
+-    {{{    92,     88,     84}, 0, {     0,      0}, {0x23, 0x59, 0x53, 0xff}}},
+-    {{{   104,     87,     70}, 0, {     0,      0}, {0x30, 0x5c, 0x49, 0xff}}},
+-};
+-
+-// 0x04012550
+-static const Vtx mario_face_part_cap_off_dl_vertex_group2[] = {
+-    {{{    -7,     62,      0}, 0, {     0,      0}, {0x85, 0x1d, 0x00, 0xff}}},
+-    {{{     3,     54,     52}, 0, {     0,      0}, {0x95, 0x1d, 0x3c, 0xff}}},
+-    {{{    27,    100,     30}, 0, {     0,      0}, {0xb1, 0x60, 0x16, 0xff}}},
+-    {{{   144,     83,     67}, 0, {     0,      0}, {0x19, 0x5b, 0x53, 0xff}}},
+-    {{{   104,     87,     70}, 0, {     0,      0}, {0x30, 0x5c, 0x49, 0xff}}},
+-    {{{    96,     49,     94}, 0, {     0,      0}, {0x10, 0x28, 0x77, 0xff}}},
+-    {{{   117,    128,      0}, 0, {     0,      0}, {0x7a, 0xe1, 0x06, 0xff}}},
+-    {{{   102,    129,     41}, 0, {     0,      0}, {0x45, 0xd6, 0x61, 0xff}}},
+-    {{{    97,    103,     25}, 0, {     0,      0}, {0x40, 0x5a, 0x3d, 0xff}}},
+-    {{{    77,    108,     34}, 0, {     0,      0}, {0x0e, 0x16, 0x7c, 0xff}}},
+-    {{{    44,     44,     97}, 0, {     0,      0}, {0xda, 0x21, 0x74, 0xff}}},
+-    {{{    42,      0,    103}, 0, {     0,      0}, {0xc3, 0x05, 0x6e, 0xff}}},
+-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
+-    {{{    64,    -25,    135}, 0, {     0,      0}, {0xcc, 0xe5, 0x70, 0xff}}},
+-    {{{    56,    -45,     77}, 0, {     0,      0}, {0xe3, 0xca, 0x6e, 0xff}}},
+-    {{{    85,    -23,    111}, 0, {     0,      0}, {0x04, 0x58, 0x5a, 0xff}}},
+-};
+-
+-// 0x04012650
+-static const Vtx mario_face_part_cap_off_dl_vertex_group3[] = {
+-    {{{    96,     49,     94}, 0, {     0,      0}, {0x10, 0x28, 0x77, 0xff}}},
+-    {{{   153,     33,     95}, 0, {     0,      0}, {0x05, 0x38, 0x71, 0xff}}},
+-    {{{   144,     83,     67}, 0, {     0,      0}, {0x19, 0x5b, 0x53, 0xff}}},
+-    {{{    64,    -25,    135}, 0, {     0,      0}, {0xcc, 0xe5, 0x70, 0xff}}},
+-    {{{    91,    -54,     86}, 0, {     0,      0}, {0xe9, 0xa9, 0x59, 0xff}}},
+-    {{{   102,    -33,    135}, 0, {     0,      0}, {0x30, 0x18, 0x72, 0xff}}},
+-    {{{    56,    -45,     77}, 0, {     0,      0}, {0xe3, 0xca, 0x6e, 0xff}}},
+-    {{{    85,    -23,    111}, 0, {     0,      0}, {0x04, 0x58, 0x5a, 0xff}}},
+-    {{{   120,    -11,    111}, 0, {     0,      0}, {0xff, 0x13, 0x7d, 0xff}}},
+-    {{{    52,    111,    -30}, 0, {     0,      0}, {0xa8, 0x32, 0xb5, 0xff}}},
+-    {{{    41,    109,      0}, 0, {     0,      0}, {0x95, 0x44, 0x00, 0xff}}},
+-    {{{    32,    132,      0}, 0, {     0,      0}, {0x84, 0xe8, 0xf8, 0xff}}},
+-    {{{    85,    -23,   -110}, 0, {     0,      0}, {0x06, 0x59, 0xa6, 0xff}}},
+-    {{{    64,    -25,   -134}, 0, {     0,      0}, {0xcc, 0xe5, 0x90, 0xff}}},
+-    {{{    42,      0,   -102}, 0, {     0,      0}, {0xc3, 0x05, 0x92, 0xff}}},
+-};
+-
+-// 0x04012740
+-static const Vtx mario_face_part_cap_off_dl_vertex_group4[] = {
+-    {{{    27,    100,     30}, 0, {     0,      0}, {0xb1, 0x60, 0x16, 0xff}}},
+-    {{{    27,    100,    -29}, 0, {     0,      0}, {0xb1, 0x60, 0xea, 0xff}}},
+-    {{{    -7,     62,      0}, 0, {     0,      0}, {0x85, 0x1d, 0x00, 0xff}}},
+-    {{{     3,     54,    -51}, 0, {     0,      0}, {0x95, 0x1d, 0xc4, 0xff}}},
+-    {{{    41,    109,      0}, 0, {     0,      0}, {0x95, 0x44, 0x00, 0xff}}},
+-    {{{   144,     83,    -66}, 0, {     0,      0}, {0x19, 0x5b, 0xad, 0xff}}},
+-    {{{   153,     33,    -94}, 0, {     0,      0}, {0xfe, 0x36, 0x8e, 0xff}}},
+-    {{{    96,     49,    -93}, 0, {     0,      0}, {0x11, 0x27, 0x89, 0xff}}},
+-    {{{    42,      0,   -102}, 0, {     0,      0}, {0xc3, 0x05, 0x92, 0xff}}},
+-    {{{    44,     44,    -96}, 0, {     0,      0}, {0xda, 0x21, 0x8c, 0xff}}},
+-    {{{    64,    -25,   -134}, 0, {     0,      0}, {0xcc, 0xe5, 0x90, 0xff}}},
+-    {{{   102,    -33,   -134}, 0, {     0,      0}, {0x32, 0x19, 0x8f, 0xff}}},
+-    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xe8, 0xaa, 0xa7, 0xff}}},
+-    {{{    85,    -23,   -110}, 0, {     0,      0}, {0x06, 0x59, 0xa6, 0xff}}},
+-    {{{   120,    -12,   -109}, 0, {     0,      0}, {0xff, 0x13, 0x83, 0xff}}},
+-};
+-
+-// 0x04012830
+-static const Vtx mario_face_part_cap_off_dl_vertex_group5[] = {
+-    {{{    33,    165,      0}, 0, {     0,      0}, {0x8f, 0x38, 0x09, 0xff}}},
+-    {{{    60,    181,      0}, 0, {     0,      0}, {0xea, 0x7c, 0x00, 0xff}}},
+-    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
+-    {{{   102,    -33,   -134}, 0, {     0,      0}, {0x32, 0x19, 0x8f, 0xff}}},
+-    {{{   120,    -12,   -109}, 0, {     0,      0}, {0xff, 0x13, 0x83, 0xff}}},
+-    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xe8, 0xaa, 0xa7, 0xff}}},
+-    {{{    56,    -45,    -76}, 0, {     0,      0}, {0xe3, 0xca, 0x92, 0xff}}},
+-    {{{    64,    -25,   -134}, 0, {     0,      0}, {0xcc, 0xe5, 0x90, 0xff}}},
+-    {{{    42,      0,   -102}, 0, {     0,      0}, {0xc3, 0x05, 0x92, 0xff}}},
+-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
+-    {{{     3,     54,    -51}, 0, {     0,      0}, {0x95, 0x1d, 0xc4, 0xff}}},
+-    {{{    -7,     62,      0}, 0, {     0,      0}, {0x85, 0x1d, 0x00, 0xff}}},
+-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
+-    {{{    52,    164,     41}, 0, {     0,      0}, {0xc8, 0x3d, 0x5f, 0xff}}},
+-    {{{    78,    163,     46}, 0, {     0,      0}, {0x03, 0x55, 0x5d, 0xff}}},
+-    {{{   101,    179,      0}, 0, {     0,      0}, {0x27, 0x78, 0x00, 0xff}}},
+-};
+-
+-// 0x04012930
+-static const Vtx mario_face_part_cap_off_dl_vertex_group6[] = {
+-    {{{   104,    162,     41}, 0, {     0,      0}, {0x52, 0x27, 0x58, 0xff}}},
+-    {{{   101,    179,      0}, 0, {     0,      0}, {0x27, 0x78, 0x00, 0xff}}},
+-    {{{    78,    163,     46}, 0, {     0,      0}, {0x03, 0x55, 0x5d, 0xff}}},
+-    {{{    52,    164,     41}, 0, {     0,      0}, {0xc8, 0x3d, 0x5f, 0xff}}},
+-    {{{    75,    130,     46}, 0, {     0,      0}, {0x00, 0xec, 0x7d, 0xff}}},
+-    {{{   119,    161,      0}, 0, {     0,      0}, {0x79, 0x23, 0xf6, 0xff}}},
+-    {{{   104,    162,    -40}, 0, {     0,      0}, {0x44, 0x31, 0xa1, 0xff}}},
+-    {{{    78,    163,    -45}, 0, {     0,      0}, {0x03, 0x54, 0xa2, 0xff}}},
+-    {{{    60,    181,      0}, 0, {     0,      0}, {0xea, 0x7c, 0x00, 0xff}}},
+-    {{{    47,    131,     41}, 0, {     0,      0}, {0xb0, 0xe4, 0x5e, 0xff}}},
+-    {{{    33,    165,      0}, 0, {     0,      0}, {0x8f, 0x38, 0x09, 0xff}}},
+-    {{{   102,    129,     41}, 0, {     0,      0}, {0x45, 0xd6, 0x61, 0xff}}},
+-    {{{    77,    108,     34}, 0, {     0,      0}, {0x0e, 0x16, 0x7c, 0xff}}},
+-    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
+-    {{{    32,    132,      0}, 0, {     0,      0}, {0x84, 0xe8, 0xf8, 0xff}}},
+-    {{{   117,    128,      0}, 0, {     0,      0}, {0x7a, 0xe1, 0x06, 0xff}}},
+-};
+-
+-// 0x04012A30
+-static const Vtx mario_face_part_cap_off_dl_vertex_group7[] = {
+-    {{{    52,    111,     31}, 0, {     0,      0}, {0xa8, 0x33, 0x4b, 0xff}}},
+-    {{{    47,    131,     41}, 0, {     0,      0}, {0xb0, 0xe4, 0x5e, 0xff}}},
+-    {{{    32,    132,      0}, 0, {     0,      0}, {0x84, 0xe8, 0xf8, 0xff}}},
+-    {{{    77,    108,     34}, 0, {     0,      0}, {0x0e, 0x16, 0x7c, 0xff}}},
+-    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
+-    {{{    78,    163,    -45}, 0, {     0,      0}, {0x03, 0x54, 0xa2, 0xff}}},
+-    {{{    75,    130,    -45}, 0, {     0,      0}, {0x00, 0xec, 0x83, 0xff}}},
+-    {{{   104,    162,    -40}, 0, {     0,      0}, {0x44, 0x31, 0xa1, 0xff}}},
+-    {{{    60,    181,      0}, 0, {     0,      0}, {0xea, 0x7c, 0x00, 0xff}}},
+-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
+-    {{{    31,    -84,      0}, 0, {     0,      0}, {0xa0, 0xae, 0x00, 0xff}}},
+-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
+-    {{{    41,    109,      0}, 0, {     0,      0}, {0x95, 0x44, 0x00, 0xff}}},
+-    {{{    47,    131,    -40}, 0, {     0,      0}, {0xbc, 0xde, 0x9c, 0xff}}},
+-    {{{   102,    129,    -40}, 0, {     0,      0}, {0x50, 0xdc, 0xa6, 0xff}}},
+-    {{{    77,    108,    -33}, 0, {     0,      0}, {0x0e, 0x16, 0x84, 0xff}}},
+-};
+-
+-// 0x04012B30
+-static const Vtx mario_face_part_cap_off_dl_vertex_group8[] = {
+-    {{{   102,    129,    -40}, 0, {     0,      0}, {0x50, 0xdc, 0xa6, 0xff}}},
+-    {{{   104,    162,    -40}, 0, {     0,      0}, {0x44, 0x31, 0xa1, 0xff}}},
+-    {{{   119,    161,      0}, 0, {     0,      0}, {0x79, 0x23, 0xf6, 0xff}}},
+-    {{{   117,    128,      0}, 0, {     0,      0}, {0x7a, 0xe1, 0x06, 0xff}}},
+-    {{{    32,    132,      0}, 0, {     0,      0}, {0x84, 0xe8, 0xf8, 0xff}}},
+-    {{{    47,    131,    -40}, 0, {     0,      0}, {0xbc, 0xde, 0x9c, 0xff}}},
+-    {{{    52,    111,    -30}, 0, {     0,      0}, {0xa8, 0x32, 0xb5, 0xff}}},
+-    {{{    77,    108,    -33}, 0, {     0,      0}, {0x0e, 0x16, 0x84, 0xff}}},
+-    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
+-};
+-
+-// 0x04012BC0
+-static const Vtx mario_face_hair_cap_off_dl_vertex_group1[] = {
+-    {{{   153,     33,    -94}, 0, {     0,      0}, {0xfe, 0x36, 0x8e, 0xff}}},
+-    {{{   200,     70,    -97}, 0, {     0,      0}, {0x07, 0x48, 0x99, 0xff}}},
+-    {{{   182,     -9,   -115}, 0, {     0,      0}, {0x2f, 0xfe, 0x8b, 0xff}}},
+-    {{{   153,     33,     95}, 0, {     0,      0}, {0x05, 0x38, 0x71, 0xff}}},
+-    {{{   200,     75,     84}, 0, {     0,      0}, {0x10, 0x52, 0x5f, 0xff}}},
+-    {{{   151,     72,     70}, 0, {     0,      0}, {0xe4, 0x5c, 0x51, 0xff}}},
+-    {{{   120,    -11,    111}, 0, {     0,      0}, {0xff, 0x13, 0x7d, 0xff}}},
+-    {{{   181,     -9,    116}, 0, {     0,      0}, {0x2d, 0x01, 0x76, 0xff}}},
+-    {{{   175,     91,     39}, 0, {     0,      0}, {0x01, 0x75, 0x2f, 0xff}}},
+-    {{{   209,     86,     60}, 0, {     0,      0}, {0x38, 0x60, 0x3c, 0xff}}},
+-    {{{   227,     35,     75}, 0, {     0,      0}, {0x6d, 0x12, 0x3d, 0xff}}},
+-    {{{   175,     91,    -38}, 0, {     0,      0}, {0xf5, 0x73, 0xcc, 0xff}}},
+-    {{{   151,     72,    -68}, 0, {     0,      0}, {0xd6, 0x5b, 0xb3, 0xff}}},
+-    {{{   221,     35,    -73}, 0, {     0,      0}, {0x71, 0x03, 0xc8, 0xff}}},
+-    {{{   211,     91,    -71}, 0, {     0,      0}, {0x31, 0x46, 0xa3, 0xff}}},
+-    {{{   227,    -14,    -58}, 0, {     0,      0}, {0x72, 0xf1, 0xcc, 0xff}}},
+-};
+-
+-// 0x04012CC0
+-static const Vtx mario_face_hair_cap_off_dl_vertex_group2[] = {
+-    {{{   120,    -12,   -109}, 0, {     0,      0}, {0xff, 0x13, 0x83, 0xff}}},
+-    {{{   153,     33,    -94}, 0, {     0,      0}, {0xfe, 0x36, 0x8e, 0xff}}},
+-    {{{   182,     -9,   -115}, 0, {     0,      0}, {0x2f, 0xfe, 0x8b, 0xff}}},
+-    {{{   227,    -14,     59}, 0, {     0,      0}, {0x72, 0xec, 0x32, 0xff}}},
+-    {{{   241,    -34,      0}, 0, {     0,      0}, {0x7a, 0xe0, 0x00, 0xff}}},
+-    {{{   237,     64,      0}, 0, {     0,      0}, {0x7e, 0xf9, 0xff, 0xff}}},
+-    {{{   189,   -102,     73}, 0, {     0,      0}, {0x50, 0xbb, 0x44, 0xff}}},
+-    {{{   181,     -9,    116}, 0, {     0,      0}, {0x2d, 0x01, 0x76, 0xff}}},
+-    {{{   227,     35,     75}, 0, {     0,      0}, {0x6d, 0x12, 0x3d, 0xff}}},
+-    {{{   189,   -102,    -71}, 0, {     0,      0}, {0x50, 0xb9, 0xbd, 0xff}}},
+-    {{{   227,    -14,    -58}, 0, {     0,      0}, {0x72, 0xf1, 0xcc, 0xff}}},
+-    {{{   200,   -117,      0}, 0, {     0,      0}, {0x3f, 0x93, 0x00, 0xff}}},
+-    {{{   221,     35,    -73}, 0, {     0,      0}, {0x71, 0x03, 0xc8, 0xff}}},
+-    {{{   248,    104,    -43}, 0, {     0,      0}, {0x76, 0x2c, 0xf3, 0xff}}},
+-    {{{   231,     81,     33}, 0, {     0,      0}, {0x71, 0x27, 0x2a, 0xff}}},
+-};
+-
+-// 0x04012DB0
+-static const Vtx mario_face_hair_cap_off_dl_vertex_group3[] = {
+-    {{{   221,     35,    -73}, 0, {     0,      0}, {0x71, 0x03, 0xc8, 0xff}}},
+-    {{{   211,     91,    -71}, 0, {     0,      0}, {0x31, 0x46, 0xa3, 0xff}}},
+-    {{{   232,     69,    -34}, 0, {     0,      0}, {0x72, 0xe4, 0xd1, 0xff}}},
+-    {{{   237,     64,      0}, 0, {     0,      0}, {0x7e, 0xf9, 0xff, 0xff}}},
+-    {{{   175,     91,    -38}, 0, {     0,      0}, {0xf5, 0x73, 0xcc, 0xff}}},
+-    {{{   201,    125,    -13}, 0, {     0,      0}, {0xe4, 0x7b, 0xfb, 0xff}}},
+-    {{{   160,     96,      0}, 0, {     0,      0}, {0xb7, 0x67, 0xfe, 0xff}}},
+-    {{{   189,   -102,    -71}, 0, {     0,      0}, {0x50, 0xb9, 0xbd, 0xff}}},
+-    {{{   116,   -124,    -67}, 0, {     0,      0}, {0xfc, 0x8f, 0xc8, 0xff}}},
+-    {{{   145,    -84,   -104}, 0, {     0,      0}, {0xef, 0xcf, 0x8d, 0xff}}},
+-    {{{   182,     -9,   -115}, 0, {     0,      0}, {0x2f, 0xfe, 0x8b, 0xff}}},
+-    {{{   200,   -117,      0}, 0, {     0,      0}, {0x3f, 0x93, 0x00, 0xff}}},
+-    {{{   189,   -102,     73}, 0, {     0,      0}, {0x50, 0xbb, 0x44, 0xff}}},
+-    {{{   116,   -126,     68}, 0, {     0,      0}, {0xfb, 0x8f, 0x38, 0xff}}},
+-    {{{   119,   -134,      0}, 0, {     0,      0}, {0xe8, 0x84, 0xff, 0xff}}},
+-    {{{   145,    -83,    105}, 0, {     0,      0}, {0xef, 0xd0, 0x73, 0xff}}},
+-};
+-
+-// 0x04012EB0
+-static const Vtx mario_face_hair_cap_off_dl_vertex_group4[] = {
+-    {{{   145,    -83,    105}, 0, {     0,      0}, {0xef, 0xd0, 0x73, 0xff}}},
+-    {{{   189,   -102,     73}, 0, {     0,      0}, {0x50, 0xbb, 0x44, 0xff}}},
+-    {{{   181,     -9,    116}, 0, {     0,      0}, {0x2d, 0x01, 0x76, 0xff}}},
+-    {{{   201,    125,    -13}, 0, {     0,      0}, {0xe4, 0x7b, 0xfb, 0xff}}},
+-    {{{   209,     86,     60}, 0, {     0,      0}, {0x38, 0x60, 0x3c, 0xff}}},
+-    {{{   248,    104,    -43}, 0, {     0,      0}, {0x76, 0x2c, 0xf3, 0xff}}},
+-    {{{   231,     81,     33}, 0, {     0,      0}, {0x71, 0x27, 0x2a, 0xff}}},
+-    {{{   232,     69,    -34}, 0, {     0,      0}, {0x72, 0xe4, 0xd1, 0xff}}},
+-    {{{   211,     91,    -71}, 0, {     0,      0}, {0x31, 0x46, 0xa3, 0xff}}},
+-    {{{   237,     64,      0}, 0, {     0,      0}, {0x7e, 0xf9, 0xff, 0xff}}},
+-    {{{   227,     35,     75}, 0, {     0,      0}, {0x6d, 0x12, 0x3d, 0xff}}},
+-    {{{   175,     91,     39}, 0, {     0,      0}, {0x01, 0x75, 0x2f, 0xff}}},
+-    {{{   160,     96,      0}, 0, {     0,      0}, {0xb7, 0x67, 0xfe, 0xff}}},
+-    {{{    64,   -103,     52}, 0, {     0,      0}, {0xf3, 0x8b, 0x2e, 0xff}}},
+-    {{{    64,   -103,    -51}, 0, {     0,      0}, {0xf3, 0x8b, 0xd2, 0xff}}},
+-    {{{   119,   -134,      0}, 0, {     0,      0}, {0xe8, 0x84, 0xff, 0xff}}},
+-};
+-
+-// 0x04012FB0
+-static const Vtx mario_face_hair_cap_off_dl_vertex_group5[] = {
+-    {{{   145,    -83,    105}, 0, {     0,      0}, {0xef, 0xd0, 0x73, 0xff}}},
+-    {{{   181,     -9,    116}, 0, {     0,      0}, {0x2d, 0x01, 0x76, 0xff}}},
+-    {{{   120,    -11,    111}, 0, {     0,      0}, {0xff, 0x13, 0x7d, 0xff}}},
+-    {{{    64,   -103,    -51}, 0, {     0,      0}, {0xf3, 0x8b, 0xd2, 0xff}}},
+-    {{{   116,   -124,    -67}, 0, {     0,      0}, {0xfc, 0x8f, 0xc8, 0xff}}},
+-    {{{   119,   -134,      0}, 0, {     0,      0}, {0xe8, 0x84, 0xff, 0xff}}},
+-    {{{   145,    -84,   -104}, 0, {     0,      0}, {0xef, 0xcf, 0x8d, 0xff}}},
+-    {{{   182,     -9,   -115}, 0, {     0,      0}, {0x2f, 0xfe, 0x8b, 0xff}}},
+-    {{{   120,    -12,   -109}, 0, {     0,      0}, {0xff, 0x13, 0x83, 0xff}}},
+-    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xe8, 0xaa, 0xa7, 0xff}}},
+-    {{{    64,   -103,     52}, 0, {     0,      0}, {0xf3, 0x8b, 0x2e, 0xff}}},
+-    {{{   116,   -126,     68}, 0, {     0,      0}, {0xfb, 0x8f, 0x38, 0xff}}},
+-    {{{    91,    -54,     86}, 0, {     0,      0}, {0xe9, 0xa9, 0x59, 0xff}}},
+-    {{{    31,    -84,      0}, 0, {     0,      0}, {0xa0, 0xae, 0x00, 0xff}}},
+-    {{{    36,   -116,     36}, 0, {     0,      0}, {0xfb, 0x8e, 0xc9, 0xff}}},
+-    {{{     9,    -88,     59}, 0, {     0,      0}, {0x87, 0xdf, 0x0b, 0xff}}},
+-};
+-
+-// 0x040130B0
+-static const Vtx mario_face_hair_cap_off_dl_vertex_group6[] = {
+-    {{{    64,   -103,     52}, 0, {     0,      0}, {0xf3, 0x8b, 0x2e, 0xff}}},
+-    {{{    91,    -54,     86}, 0, {     0,      0}, {0xe9, 0xa9, 0x59, 0xff}}},
+-    {{{    56,    -45,     77}, 0, {     0,      0}, {0xe3, 0xca, 0x6e, 0xff}}},
+-    {{{    31,    -84,      0}, 0, {     0,      0}, {0xa0, 0xae, 0x00, 0xff}}},
+-    {{{    36,   -116,     36}, 0, {     0,      0}, {0xfb, 0x8e, 0xc9, 0xff}}},
+-    {{{    58,   -114,     60}, 0, {     0,      0}, {0x57, 0xb4, 0x32, 0xff}}},
+-    {{{    36,   -116,    -35}, 0, {     0,      0}, {0xfb, 0x8e, 0x37, 0xff}}},
+-    {{{    64,   -103,    -51}, 0, {     0,      0}, {0xf3, 0x8b, 0xd2, 0xff}}},
+-    {{{    56,    -45,    -76}, 0, {     0,      0}, {0xe3, 0xca, 0x92, 0xff}}},
+-    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xe8, 0xaa, 0xa7, 0xff}}},
+-    {{{    58,   -114,    -59}, 0, {     0,      0}, {0x57, 0xb4, 0xce, 0xff}}},
+-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
+-    {{{     9,    -88,    -58}, 0, {     0,      0}, {0x87, 0xdf, 0xf5, 0xff}}},
+-    {{{     9,    -88,     59}, 0, {     0,      0}, {0x87, 0xdf, 0x0b, 0xff}}},
+-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
+-    {{{    35,   -120,    -67}, 0, {     0,      0}, {0xda, 0x94, 0xcb, 0xff}}},
+-};
+-
+-// 0x040131B0
+-static const Vtx mario_face_hair_cap_off_dl_vertex_group7[] = {
+-    {{{    36,   -116,     36}, 0, {     0,      0}, {0xfb, 0x8e, 0xc9, 0xff}}},
+-    {{{    35,   -120,     68}, 0, {     0,      0}, {0xda, 0x94, 0x35, 0xff}}},
+-    {{{     9,    -88,     59}, 0, {     0,      0}, {0x87, 0xdf, 0x0b, 0xff}}},
+-    {{{    58,   -114,     60}, 0, {     0,      0}, {0x57, 0xb4, 0x32, 0xff}}},
+-    {{{    35,   -120,    -67}, 0, {     0,      0}, {0xda, 0x94, 0xcb, 0xff}}},
+-    {{{    31,    -85,    -86}, 0, {     0,      0}, {0xdb, 0xfd, 0x87, 0xff}}},
+-    {{{    58,   -114,    -59}, 0, {     0,      0}, {0x57, 0xb4, 0xce, 0xff}}},
+-    {{{     9,    -88,    -58}, 0, {     0,      0}, {0x87, 0xdf, 0xf5, 0xff}}},
+-    {{{    56,    -45,    -76}, 0, {     0,      0}, {0xe3, 0xca, 0x92, 0xff}}},
+-    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
+-    {{{    31,    -85,     87}, 0, {     0,      0}, {0xdb, 0xfd, 0x79, 0xff}}},
+-    {{{    56,    -45,     77}, 0, {     0,      0}, {0xe3, 0xca, 0x6e, 0xff}}},
+-    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
+-};
+-
+-// 0x04013280
+-static const Vtx mario_face_part_cap_off_dl_vertex_group9[] = {
+-    {{{    44,     44,     97}, 0, {     0,      0}, {0xda, 0x21, 0x74, 0xff}}},
+-    {{{    48,     94,     76}, 0, {     0,      0}, {0xd7, 0x60, 0x47, 0xff}}},
+-    {{{     3,     54,     52}, 0, {     0,      0}, {0x95, 0x1d, 0x3c, 0xff}}},
+-};
+-
+-// 0x040132B0 - 0x04013318
+-const Gfx mario_eyes_cap_off_dl[] = {
+-    gsSPVertex(mario_eyes_cap_off_dl_vertex, 12, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 4,  6,  7, 0x0,  8,  6,  4, 0x0),
+-    gsSP2Triangles( 5,  4,  7, 0x0,  7,  9,  5, 0x0),
+-    gsSP2Triangles( 2,  8, 10, 0x0,  1,  6,  8, 0x0),
+-    gsSP2Triangles( 1,  8,  2, 0x0,  6, 11,  7, 0x0),
+-    gsSP1Triangle( 1, 11,  6, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04013318 - 0x040133A8
+-const Gfx mario_mustache_cap_off_dl[] = {
+-    gsSPVertex(mario_mustache_cap_off_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
+-    gsSP2Triangles( 0,  4,  3, 0x0,  3,  5,  1, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  7,  6,  9, 0x0),
+-    gsSP2Triangles( 7, 10,  8, 0x0,  8, 11,  6, 0x0),
+-    gsSP2Triangles(12,  8, 13, 0x0, 13,  8, 10, 0x0),
+-    gsSP2Triangles(14,  3,  4, 0x0, 13, 10, 15, 0x0),
+-    gsSPVertex(mario_mustache_cap_off_dl_vertex_group2, 5, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  2, 0x0),
+-    gsSP1Triangle( 2,  3,  4, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040133A8 - 0x040133F8
+-const Gfx mario_hair_sideburn_cap_off_dl[] = {
+-    gsSPVertex(mario_hair_sideburn_cap_off_dl_vertex, 12, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
+-    gsSP2Triangles( 4,  2,  5, 0x0,  1,  5,  2, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  8,  9,  6, 0x0),
+-    gsSP2Triangles( 9,  8, 10, 0x0, 10,  8, 11, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040133F8 - 0x040136D0
+-const Gfx mario_face_part_cap_off_dl[] = {
+-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group1, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  3,  5, 0x0,  3,  6,  7, 0x0),
+-    gsSP2Triangles( 4,  8,  2, 0x0,  8,  4,  9, 0x0),
+-    gsSP2Triangles( 2,  1,  4, 0x0,  6,  5, 10, 0x0),
+-    gsSP2Triangles(11, 12, 13, 0x0, 14, 13, 12, 0x0),
+-    gsSP1Triangle(13, 14,  0, 0x0),
+-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group2, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  9,  8,  7, 0x0),
+-    gsSP2Triangles(10,  1, 11, 0x0,  1, 12, 11, 0x0),
+-    gsSP2Triangles(12,  1,  0, 0x0, 13, 11, 14, 0x0),
+-    gsSP2Triangles(12, 14, 11, 0x0, 11, 13, 15, 0x0),
+-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group3, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 3,  6,  4, 0x0,  3,  5,  7, 0x0),
+-    gsSP2Triangles( 8,  7,  5, 0x0,  4,  8,  5, 0x0),
+-    gsSP2Triangles( 9, 10, 11, 0x0, 12, 13, 14, 0x0),
+-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group4, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  2, 0x0),
+-    gsSP2Triangles( 4,  1,  0, 0x0,  5,  6,  7, 0x0),
+-    gsSP2Triangles( 8,  3,  9, 0x0, 10, 11, 12, 0x0),
+-    gsSP2Triangles(13, 11, 10, 0x0, 11, 13, 14, 0x0),
+-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group5, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  5, 0x0,  8,  7,  6, 0x0),
+-    gsSP2Triangles( 8,  9, 10, 0x0,  8,  6,  9, 0x0),
+-    gsSP2Triangles( 9, 11, 10, 0x0,  9, 12, 11, 0x0),
+-    gsSP2Triangles( 0, 13,  1, 0x0, 13, 14,  1, 0x0),
+-    gsSP1Triangle( 1, 14, 15, 0x0),
+-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group6, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  2, 0x0),
+-    gsSP2Triangles( 2,  4,  0, 0x0,  1,  0,  5, 0x0),
+-    gsSP2Triangles( 1,  6,  7, 0x0,  1,  5,  6, 0x0),
+-    gsSP2Triangles( 7,  8,  1, 0x0,  3,  9,  4, 0x0),
+-    gsSP2Triangles( 9,  3, 10, 0x0,  4, 11,  0, 0x0),
+-    gsSP2Triangles(11,  4, 12, 0x0,  4,  9, 12, 0x0),
+-    gsSP2Triangles(10, 13, 14, 0x0,  0, 11, 15, 0x0),
+-    gsSP2Triangles( 5,  0, 15, 0x0, 14,  9, 10, 0x0),
+-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group7, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  0,  3, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  6,  5,  7, 0x0),
+-    gsSP2Triangles( 8,  5,  4, 0x0,  9, 10, 11, 0x0),
+-    gsSP2Triangles( 2, 12,  0, 0x0, 13,  4,  6, 0x0),
+-    gsSP2Triangles( 6, 14, 15, 0x0,  6,  7, 14, 0x0),
+-    gsSP1Triangle(13,  6, 15, 0x0),
+-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group8, 9, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  6,  5, 0x0),
+-    gsSP1Triangle( 8,  5,  4, 0x0),
+-    gsSPVertex(mario_face_part_cap_off_dl_vertex_group9, 3, 0),
+-    gsSP1Triangle( 0,  1,  2, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040136D0 - 0x040139C0
+-const Gfx mario_face_hair_cap_off_dl[] = {
+-    gsSPVertex(mario_face_hair_cap_off_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 3,  6,  7, 0x0,  3,  7,  4, 0x0),
+-    gsSP2Triangles( 8,  4,  9, 0x0,  7, 10,  4, 0x0),
+-    gsSP2Triangles( 4, 10,  9, 0x0,  8,  5,  4, 0x0),
+-    gsSP2Triangles(11,  1, 12, 0x0,  1,  0, 12, 0x0),
+-    gsSP2Triangles( 1, 13,  2, 0x0,  1, 11, 14, 0x0),
+-    gsSP2Triangles(13,  1, 14, 0x0, 15,  2, 13, 0x0),
+-    gsSPVertex(mario_face_hair_cap_off_dl_vertex_group2, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 4,  3,  6, 0x0,  3,  7,  6, 0x0),
+-    gsSP2Triangles( 8,  7,  3, 0x0,  5,  8,  3, 0x0),
+-    gsSP2Triangles( 9, 10,  4, 0x0, 11,  4,  6, 0x0),
+-    gsSP2Triangles(11,  9,  4, 0x0, 10,  5,  4, 0x0),
+-    gsSP2Triangles(10, 12,  5, 0x0,  5, 13, 14, 0x0),
+-    gsSP2Triangles( 8,  5, 14, 0x0,  9,  2, 10, 0x0),
+-    gsSPVertex(mario_face_hair_cap_off_dl_vertex_group3, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
+-    gsSP2Triangles( 1,  4,  5, 0x0,  4,  6,  5, 0x0),
+-    gsSP2Triangles( 7,  8,  9, 0x0, 10,  7,  9, 0x0),
+-    gsSP2Triangles( 8,  7, 11, 0x0, 11, 12, 13, 0x0),
+-    gsSP2Triangles(14, 11, 13, 0x0, 14,  8, 11, 0x0),
+-    gsSP1Triangle(15, 13, 12, 0x0),
+-    gsSPVertex(mario_face_hair_cap_off_dl_vertex_group4, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 4,  6,  5, 0x0,  7,  8,  5, 0x0),
+-    gsSP2Triangles( 8,  3,  5, 0x0,  9,  7,  5, 0x0),
+-    gsSP2Triangles(10,  6,  4, 0x0,  4,  3, 11, 0x0),
+-    gsSP2Triangles( 3, 12, 11, 0x0, 13, 14, 15, 0x0),
+-    gsSPVertex(mario_face_hair_cap_off_dl_vertex_group5, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  4,  3, 0x0,  7,  6,  8, 0x0),
+-    gsSP2Triangles( 9,  6,  3, 0x0,  6,  9,  8, 0x0),
+-    gsSP2Triangles(10, 11,  0, 0x0, 12,  0,  2, 0x0),
+-    gsSP2Triangles(10,  0, 12, 0x0, 10,  5, 11, 0x0),
+-    gsSP2Triangles(13, 14, 15, 0x0, 13,  3, 10, 0x0),
+-    gsSPVertex(mario_face_hair_cap_off_dl_vertex_group6, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  4, 0x0),
+-    gsSP2Triangles( 5,  0,  2, 0x0,  5,  4,  0, 0x0),
+-    gsSP2Triangles( 3,  6,  7, 0x0,  8,  9,  7, 0x0),
+-    gsSP2Triangles( 6, 10,  7, 0x0,  8,  7, 10, 0x0),
+-    gsSP2Triangles( 3, 11, 12, 0x0, 13, 14,  3, 0x0),
+-    gsSP2Triangles(12,  6,  3, 0x0,  6, 15, 10, 0x0),
+-    gsSP1Triangle(12, 15,  6, 0x0),
+-    gsSPVertex(mario_face_hair_cap_off_dl_vertex_group7, 13, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  5,  4,  7, 0x0),
+-    gsSP2Triangles( 6,  5,  8, 0x0,  9,  8,  5, 0x0),
+-    gsSP2Triangles( 5,  7,  9, 0x0, 10, 11, 12, 0x0),
+-    gsSP2Triangles(11, 10,  3, 0x0, 12,  2, 10, 0x0),
+-    gsSP2Triangles( 2,  1, 10, 0x0, 10,  1,  3, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040139C0 - 0x040139E8
+-const Gfx mario_face_cap_off_dl[] = {
+-    gsSPDisplayList(mario_face_part_cap_off_dl),
+-    gsSPLight(&mario_brown2_lights_group.l, 1),
+-    gsSPLight(&mario_brown2_lights_group.a, 2),
+-    gsSPDisplayList(mario_face_hair_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040139E8 - 0x04013AB8
+-const Gfx mario_cap_off_eyes_front[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_front),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_eyes_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_mustache_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_face_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04013AB8 - 0x04013B88
+-const Gfx mario_cap_off_eyes_half_closed[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_half_closed),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_eyes_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_mustache_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_face_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04013B88 - 0x04013C58
+-const Gfx mario_cap_off_eyes_closed[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_closed),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_eyes_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_mustache_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_face_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04013C58 - 0x04013D28
+-const Gfx mario_cap_off_eyes_right[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_right),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_eyes_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_mustache_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_face_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04013D28 - 0x04013DF8
+-const Gfx mario_cap_off_eyes_left[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_left),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_eyes_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_mustache_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_face_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04013DF8 - 0x04013EC8
+-const Gfx mario_cap_off_eyes_up[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_up),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_eyes_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_mustache_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_face_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04013EC8 - 0x04013F98
+-const Gfx mario_cap_off_eyes_down[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_down),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_eyes_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_mustache_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_face_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04013F98 - 0x04014068
+-const Gfx mario_cap_off_eyes_dead[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_dead),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_eyes_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_mustache_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_hair_sideburn),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_face_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04014068 - 0x04014098
+-const Gfx mario_metal_cap_off_shared_dl[] = {
+-    gsSPDisplayList(mario_eyes_cap_off_dl),
+-    gsSPDisplayList(mario_mustache_cap_off_dl),
+-    gsSPDisplayList(mario_hair_sideburn_cap_off_dl),
+-    gsSPDisplayList(mario_face_part_cap_off_dl),
+-    gsSPDisplayList(mario_face_hair_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04014098
+-static const Vtx mario_medium_poly_butt_dl_vertex_group1[] = {
+-    {{{     0,     78,     37}, 0, {     0,      0}, {0xc7, 0x6f, 0x14, 0x00}}},
+-    {{{    44,     80,     46}, 0, {     0,      0}, {0x36, 0x68, 0x2e, 0x00}}},
+-    {{{    43,     80,    -45}, 0, {     0,      0}, {0x2c, 0x70, 0xdb, 0x00}}},
+-    {{{    -6,    -84,     50}, 0, {     0,      0}, {0xd5, 0x90, 0x26, 0x00}}},
+-    {{{    41,    -86,    -45}, 0, {     0,      0}, {0x35, 0x90, 0xe7, 0x00}}},
+-    {{{    41,    -86,     45}, 0, {     0,      0}, {0x44, 0x9b, 0x1f, 0x00}}},
+-    {{{   -33,    -45,    -31}, 0, {     0,      0}, {0x87, 0xe9, 0xe3, 0x00}}},
+-    {{{   -33,    -45,     31}, 0, {     0,      0}, {0x86, 0xe5, 0x15, 0x00}}},
+-    {{{   -32,     43,    -22}, 0, {     0,      0}, {0x8b, 0x2d, 0xf0, 0x00}}},
+-    {{{    -2,     41,     95}, 0, {     0,      0}, {0xba, 0x3b, 0x57, 0x00}}},
+-    {{{    -5,    -45,     97}, 0, {     0,      0}, {0xc7, 0xde, 0x6b, 0x00}}},
+-    {{{    44,     36,     95}, 0, {     0,      0}, {0x3d, 0x22, 0x69, 0x00}}},
+-    {{{    -5,    -45,    -97}, 0, {     0,      0}, {0xc7, 0xdd, 0x95, 0x00}}},
+-    {{{    -2,     41,    -95}, 0, {     0,      0}, {0xba, 0x3b, 0xaa, 0x00}}},
+-    {{{    44,     35,    -96}, 0, {     0,      0}, {0x3c, 0x22, 0x96, 0x00}}},
+-    {{{    -6,    -84,    -50}, 0, {     0,      0}, {0xc1, 0x9a, 0xd9, 0x00}}},
+-};
+-
+-// 0x04014198
+-static const Vtx mario_medium_poly_butt_dl_vertex_group2[] = {
+-    {{{    -2,     41,     95}, 0, {     0,      0}, {0xba, 0x3b, 0x57, 0x00}}},
+-    {{{     0,     78,     37}, 0, {     0,      0}, {0xc7, 0x6f, 0x14, 0x00}}},
+-    {{{   -32,     43,     22}, 0, {     0,      0}, {0x8c, 0x2c, 0x18, 0x00}}},
+-    {{{     0,     78,    -37}, 0, {     0,      0}, {0xc5, 0x6c, 0xe2, 0x00}}},
+-    {{{    -2,     41,    -95}, 0, {     0,      0}, {0xba, 0x3b, 0xaa, 0x00}}},
+-    {{{   -32,     43,    -22}, 0, {     0,      0}, {0x8b, 0x2d, 0xf0, 0x00}}},
+-    {{{   -33,    -45,     31}, 0, {     0,      0}, {0x86, 0xe5, 0x15, 0x00}}},
+-    {{{   -33,    -45,    -31}, 0, {     0,      0}, {0x87, 0xe9, 0xe3, 0x00}}},
+-    {{{    -6,    -84,    -50}, 0, {     0,      0}, {0xc1, 0x9a, 0xd9, 0x00}}},
+-    {{{    43,    -48,    -97}, 0, {     0,      0}, {0x3b, 0xc1, 0xa4, 0x00}}},
+-    {{{    41,    -86,    -45}, 0, {     0,      0}, {0x35, 0x90, 0xe7, 0x00}}},
+-    {{{    -6,    -84,     50}, 0, {     0,      0}, {0xd5, 0x90, 0x26, 0x00}}},
+-    {{{    41,    -86,     45}, 0, {     0,      0}, {0x44, 0x9b, 0x1f, 0x00}}},
+-    {{{    43,    -48,     97}, 0, {     0,      0}, {0x3b, 0xc2, 0x5c, 0x00}}},
+-    {{{    44,     36,     95}, 0, {     0,      0}, {0x3d, 0x22, 0x69, 0x00}}},
+-    {{{    44,     80,     46}, 0, {     0,      0}, {0x36, 0x68, 0x2e, 0x00}}},
+-};
+-
+-// 0x04014298
+-static const Vtx mario_medium_poly_butt_dl_vertex_group3[] = {
+-    {{{    -2,     41,    -95}, 0, {     0,      0}, {0xba, 0x3b, 0xaa, 0x00}}},
+-    {{{    43,     80,    -45}, 0, {     0,      0}, {0x2c, 0x70, 0xdb, 0x00}}},
+-    {{{    44,     35,    -96}, 0, {     0,      0}, {0x3c, 0x22, 0x96, 0x00}}},
+-    {{{     0,     78,    -37}, 0, {     0,      0}, {0xc5, 0x6c, 0xe2, 0x00}}},
+-    {{{    44,     80,     46}, 0, {     0,      0}, {0x36, 0x68, 0x2e, 0x00}}},
+-    {{{     0,     78,     37}, 0, {     0,      0}, {0xc7, 0x6f, 0x14, 0x00}}},
+-    {{{    -2,     41,     95}, 0, {     0,      0}, {0xba, 0x3b, 0x57, 0x00}}},
+-    {{{   -32,     43,    -22}, 0, {     0,      0}, {0x8b, 0x2d, 0xf0, 0x00}}},
+-    {{{    43,    -48,     97}, 0, {     0,      0}, {0x3b, 0xc2, 0x5c, 0x00}}},
+-    {{{    -5,    -45,     97}, 0, {     0,      0}, {0xc7, 0xde, 0x6b, 0x00}}},
+-    {{{    -6,    -84,     50}, 0, {     0,      0}, {0xd5, 0x90, 0x26, 0x00}}},
+-    {{{    -6,    -84,    -50}, 0, {     0,      0}, {0xc1, 0x9a, 0xd9, 0x00}}},
+-    {{{    -5,    -45,    -97}, 0, {     0,      0}, {0xc7, 0xdd, 0x95, 0x00}}},
+-    {{{    43,    -48,    -97}, 0, {     0,      0}, {0x3b, 0xc1, 0xa4, 0x00}}},
+-    {{{   -33,    -45,     31}, 0, {     0,      0}, {0x86, 0xe5, 0x15, 0x00}}},
+-    {{{   -33,    -45,    -31}, 0, {     0,      0}, {0x87, 0xe9, 0xe3, 0x00}}},
+-};
+-
+-// 0x04014398
+-static const Vtx mario_medium_poly_butt_dl_vertex_group4[] = {
+-    {{{    -5,    -45,     97}, 0, {     0,      0}, {0xc7, 0xde, 0x6b, 0x00}}},
+-    {{{    43,    -48,     97}, 0, {     0,      0}, {0x3b, 0xc2, 0x5c, 0x00}}},
+-    {{{    44,     36,     95}, 0, {     0,      0}, {0x3d, 0x22, 0x69, 0x00}}},
+-    {{{   -33,    -45,     31}, 0, {     0,      0}, {0x86, 0xe5, 0x15, 0x00}}},
+-    {{{   -32,     43,     22}, 0, {     0,      0}, {0x8c, 0x2c, 0x18, 0x00}}},
+-    {{{   -32,     43,    -22}, 0, {     0,      0}, {0x8b, 0x2d, 0xf0, 0x00}}},
+-    {{{    -6,    -84,     50}, 0, {     0,      0}, {0xd5, 0x90, 0x26, 0x00}}},
+-    {{{    -6,    -84,    -50}, 0, {     0,      0}, {0xc1, 0x9a, 0xd9, 0x00}}},
+-    {{{    41,    -86,    -45}, 0, {     0,      0}, {0x35, 0x90, 0xe7, 0x00}}},
+-    {{{    43,     80,    -45}, 0, {     0,      0}, {0x2c, 0x70, 0xdb, 0x00}}},
+-    {{{     0,     78,    -37}, 0, {     0,      0}, {0xc5, 0x6c, 0xe2, 0x00}}},
+-    {{{     0,     78,     37}, 0, {     0,      0}, {0xc7, 0x6f, 0x14, 0x00}}},
+-    {{{    85,     -5,      0}, 0, {     0,      0}, {0x7f, 0xfe, 0x00, 0x00}}},
+-    {{{    44,     35,    -96}, 0, {     0,      0}, {0x3c, 0x22, 0x96, 0x00}}},
+-    {{{    43,    -48,    -97}, 0, {     0,      0}, {0x3b, 0xc1, 0xa4, 0x00}}},
+-    {{{    41,    -86,     45}, 0, {     0,      0}, {0x44, 0x9b, 0x1f, 0x00}}},
+-};
+-
+-// 0x04014498
+-static const Vtx mario_medium_poly_butt_dl_vertex_group5[] = {
+-    {{{    44,     36,     95}, 0, {     0,      0}, {0x3d, 0x22, 0x69, 0x00}}},
+-    {{{    85,     -5,      0}, 0, {     0,      0}, {0x7f, 0xfe, 0x00, 0x00}}},
+-    {{{    44,     80,     46}, 0, {     0,      0}, {0x36, 0x68, 0x2e, 0x00}}},
+-    {{{    43,     80,    -45}, 0, {     0,      0}, {0x2c, 0x70, 0xdb, 0x00}}},
+-};
+-
+-// 0x040144D8 - 0x04014638
+-const Gfx mario_medium_poly_butt_dl[] = {
+-    gsSPVertex(mario_medium_poly_butt_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10, 11, 0x0),
+-    gsSP2Triangles(12, 13, 14, 0x0, 12, 15,  6, 0x0),
+-    gsSP1Triangle( 3, 10,  7, 0x0),
+-    gsSPVertex(mario_medium_poly_butt_dl_vertex_group2, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 0,  2,  6, 0x0,  7,  5,  4, 0x0),
+-    gsSP2Triangles( 7,  8,  6, 0x0,  9, 10,  8, 0x0),
+-    gsSP2Triangles(11, 12, 13, 0x0,  2,  1,  5, 0x0),
+-    gsSP1Triangle(14, 15,  0, 0x0),
+-    gsSPVertex(mario_medium_poly_butt_dl_vertex_group3, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  5,  3,  7, 0x0),
+-    gsSP2Triangles( 8,  9, 10, 0x0, 11, 12, 13, 0x0),
+-    gsSP2Triangles(11, 10, 14, 0x0,  0, 12, 15, 0x0),
+-    gsSP2Triangles(14,  9,  6, 0x0,  2, 13, 12, 0x0),
+-    gsSPVertex(mario_medium_poly_butt_dl_vertex_group4, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10, 11, 0x0),
+-    gsSP2Triangles( 9, 12, 13, 0x0, 13, 12, 14, 0x0),
+-    gsSP2Triangles(14, 12,  8, 0x0,  8, 12, 15, 0x0),
+-    gsSP2Triangles(15, 12,  1, 0x0,  1, 12,  2, 0x0),
+-    gsSPVertex(mario_medium_poly_butt_dl_vertex_group5, 4, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04014638 - 0x04014668
+-const Gfx mario_medium_poly_butt[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPLight(&mario_blue_lights_group.l, 1),
+-    gsSPLight(&mario_blue_lights_group.a, 2),
+-    gsSPDisplayList(mario_medium_poly_butt_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04014668 - 0x040146E0
+-const Gfx mario_metal_medium_poly_butt[] = {
+-    gsDPPipeSync(),
+-    gsSPSetGeometryMode(G_TEXTURE_GEN),
+-    gsDPSetCombineMode(G_CC_DECALFADE, G_CC_DECALFADE),
+-    gsDPLoadTextureBlock(mario_texture_metal, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_ON),
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPDisplayList(mario_medium_poly_butt_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040146E0
+-static const Vtx mario_medium_poly_left_arm_shared_dl_vertex[] = {
+-    {{{    -6,    -32,    -22}, 0, {     0,      0}, {0x08, 0x84, 0x18, 0x00}}},
+-    {{{    60,    -27,    -18}, 0, {     0,      0}, {0x3d, 0xc5, 0xa3, 0x00}}},
+-    {{{    60,    -18,     26}, 0, {     0,      0}, {0x5c, 0xbe, 0x36, 0x00}}},
+-    {{{    -6,    -32,    -22}, 0, {     0,      0}, {0x07, 0xf5, 0x82, 0x00}}},
+-    {{{    -7,     21,    -27}, 0, {     0,      0}, {0x07, 0xf5, 0x82, 0x00}}},
+-    {{{    59,     16,    -22}, 0, {     0,      0}, {0x5b, 0x4f, 0xda, 0x00}}},
+-    {{{    -7,     20,     18}, 0, {     0,      0}, {0x0c, 0x73, 0x32, 0x00}}},
+-    {{{    59,     14,     14}, 0, {     0,      0}, {0x38, 0x4b, 0x55, 0x00}}},
+-    {{{    -6,    -21,     33}, 0, {     0,      0}, {0x0b, 0x2a, 0x77, 0x00}}},
+-    {{{    -7,     21,    -27}, 0, {     0,      0}, {0x0a, 0x7e, 0x04, 0x00}}},
+-    {{{    -6,    -21,     33}, 0, {     0,      0}, {0x08, 0x84, 0x18, 0x00}}},
+-    {{{    -7,     21,    -27}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
+-    {{{    -6,    -32,    -22}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
+-    {{{    -6,    -21,     33}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
+-    {{{    -7,     20,     18}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
+-};
+-
+-// 0x040147D0 - 0x04014840
+-const Gfx mario_medium_poly_left_arm_shared_dl[] = {
+-    gsSPVertex(mario_medium_poly_left_arm_shared_dl_vertex, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+-    gsSP2Triangles( 4,  5,  1, 0x0,  6,  7,  5, 0x0),
+-    gsSP2Triangles( 8,  2,  7, 0x0,  6,  8,  7, 0x0),
+-    gsSP2Triangles( 9,  6,  5, 0x0, 10,  0,  2, 0x0),
+-    gsSP2Triangles( 5,  2,  1, 0x0, 11, 12, 13, 0x0),
+-    gsSP2Triangles(13, 14, 11, 0x0,  5,  7,  2, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04014840 - 0x04014860
+-const Gfx mario_medium_poly_left_arm[] = {
+-    gsSPLight(&mario_red_lights_group.l, 1),
+-    gsSPLight(&mario_red_lights_group.a, 2),
+-    gsSPDisplayList(mario_medium_poly_left_arm_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04014860
+-static const Vtx mario_medium_poly_left_forearm_shared_dl_vertex[] = {
+-    {{{    -9,    -29,    -18}, 0, {     0,      0}, {0x05, 0x84, 0x19, 0x00}}},
+-    {{{    53,    -26,    -17}, 0, {     0,      0}, {0x59, 0xd0, 0xb5, 0x00}}},
+-    {{{    53,    -17,     24}, 0, {     0,      0}, {0x3d, 0xab, 0x47, 0x00}}},
+-    {{{    -9,    -29,    -18}, 0, {     0,      0}, {0x04, 0xf3, 0x82, 0x00}}},
+-    {{{    -9,     16,    -24}, 0, {     0,      0}, {0x04, 0xf4, 0x82, 0x00}}},
+-    {{{    53,     13,    -21}, 0, {     0,      0}, {0x3b, 0x64, 0xce, 0x00}}},
+-    {{{    -9,     15,     15}, 0, {     0,      0}, {0x07, 0x75, 0x30, 0x00}}},
+-    {{{    53,     13,     12}, 0, {     0,      0}, {0x52, 0x41, 0x47, 0x00}}},
+-    {{{    -9,    -19,     28}, 0, {     0,      0}, {0x07, 0x2c, 0x76, 0x00}}},
+-    {{{    -9,     16,    -24}, 0, {     0,      0}, {0x06, 0x7e, 0x02, 0x00}}},
+-    {{{    -9,    -19,     28}, 0, {     0,      0}, {0x05, 0x84, 0x1a, 0x00}}},
+-    {{{    -9,     16,    -24}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
+-    {{{    -9,    -29,    -18}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
+-    {{{    -9,    -19,     28}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
+-    {{{    -9,     15,     15}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
+-};
+-
+-// 0x04014950 - 0x040149C0
+-const Gfx mario_medium_poly_left_forearm_shared_dl[] = {
+-    gsSPVertex(mario_medium_poly_left_forearm_shared_dl_vertex, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+-    gsSP2Triangles( 4,  5,  1, 0x0,  6,  7,  5, 0x0),
+-    gsSP2Triangles( 8,  2,  7, 0x0,  6,  8,  7, 0x0),
+-    gsSP2Triangles( 9,  6,  5, 0x0, 10,  0,  2, 0x0),
+-    gsSP2Triangles( 1,  7,  2, 0x0,  1,  5,  7, 0x0),
+-    gsSP2Triangles(11, 12, 13, 0x0, 13, 14, 11, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040149C0
+-static const Vtx mario_medium_poly_left_hand_closed_shared_dl_vertex_group1[] = {
+-    {{{    31,     10,     40}, 0, {     0,      0}, {0xd8, 0xed, 0x76, 0x00}}},
+-    {{{    12,      1,     26}, 0, {     0,      0}, {0xf1, 0xf7, 0x7d, 0x00}}},
+-    {{{    27,    -32,     -3}, 0, {     0,      0}, {0x06, 0x82, 0x0b, 0x00}}},
+-    {{{    11,      2,    -28}, 0, {     0,      0}, {0xca, 0xf6, 0x8e, 0x00}}},
+-    {{{    44,    -22,    -46}, 0, {     0,      0}, {0xde, 0xb9, 0x9d, 0x00}}},
+-    {{{    18,     37,    -31}, 0, {     0,      0}, {0xc7, 0x28, 0x97, 0x00}}},
+-    {{{    -2,     36,     -2}, 0, {     0,      0}, {0xb0, 0x61, 0x03, 0x00}}},
+-    {{{    -5,     -5,     34}, 0, {     0,      0}, {0x2f, 0x13, 0x74, 0x00}}},
+-    {{{    -6,     -5,    -32}, 0, {     0,      0}, {0x1c, 0x0e, 0x86, 0x00}}},
+-    {{{    81,     32,     40}, 0, {     0,      0}, {0x48, 0x1f, 0x63, 0x00}}},
+-    {{{    55,     84,      9}, 0, {     0,      0}, {0x14, 0x74, 0x2c, 0x00}}},
+-    {{{   102,    -23,      6}, 0, {     0,      0}, {0x64, 0xc4, 0x31, 0x00}}},
+-    {{{    95,     43,    -12}, 0, {     0,      0}, {0x6e, 0x36, 0xe0, 0x00}}},
+-    {{{    54,     58,    -32}, 0, {     0,      0}, {0x02, 0x4e, 0x9d, 0x00}}},
+-    {{{    84,    -10,    -41}, 0, {     0,      0}, {0x39, 0xe2, 0x93, 0x00}}},
+-    {{{    53,    -42,      9}, 0, {     0,      0}, {0x04, 0x83, 0x0f, 0x00}}},
+-};
+-
+-// 0x04014AC0
+-static const Vtx mario_medium_poly_left_hand_closed_shared_dl_vertex_group2[] = {
+-    {{{    31,     10,     40}, 0, {     0,      0}, {0xd8, 0xed, 0x76, 0x00}}},
+-    {{{    55,     84,      9}, 0, {     0,      0}, {0x14, 0x74, 0x2c, 0x00}}},
+-    {{{     7,     62,     10}, 0, {     0,      0}, {0xa7, 0x5a, 0x00, 0x00}}},
+-    {{{    27,    -32,     -3}, 0, {     0,      0}, {0x06, 0x82, 0x0b, 0x00}}},
+-    {{{    14,    -51,     -2}, 0, {     0,      0}, {0x37, 0xd5, 0x97, 0x00}}},
+-    {{{    -6,     -5,    -32}, 0, {     0,      0}, {0x1c, 0x0e, 0x86, 0x00}}},
+-    {{{   -26,     40,     -1}, 0, {     0,      0}, {0x05, 0x48, 0x98, 0x00}}},
+-    {{{    -2,     36,     -2}, 0, {     0,      0}, {0xb0, 0x61, 0x03, 0x00}}},
+-    {{{   -26,     40,     -1}, 0, {     0,      0}, {0x11, 0x50, 0x60, 0x00}}},
+-    {{{    -5,     -5,     34}, 0, {     0,      0}, {0x2f, 0x13, 0x74, 0x00}}},
+-    {{{    14,    -51,     -2}, 0, {     0,      0}, {0x49, 0xd5, 0x5e, 0x00}}},
+-    {{{    18,     37,    -31}, 0, {     0,      0}, {0xc7, 0x28, 0x97, 0x00}}},
+-    {{{    44,    -22,    -46}, 0, {     0,      0}, {0xde, 0xb9, 0x9d, 0x00}}},
+-    {{{    53,    -42,      9}, 0, {     0,      0}, {0x04, 0x83, 0x0f, 0x00}}},
+-    {{{    54,     58,    -32}, 0, {     0,      0}, {0x02, 0x4e, 0x9d, 0x00}}},
+-};
+-
+-// 0x04014BB0
+-static const Vtx mario_medium_poly_left_hand_closed_shared_dl_vertex_group3[] = {
+-    {{{    54,     58,    -32}, 0, {     0,      0}, {0x02, 0x4e, 0x9d, 0x00}}},
+-    {{{    95,     43,    -12}, 0, {     0,      0}, {0x6e, 0x36, 0xe0, 0x00}}},
+-    {{{    84,    -10,    -41}, 0, {     0,      0}, {0x39, 0xe2, 0x93, 0x00}}},
+-    {{{     7,     62,     10}, 0, {     0,      0}, {0xa7, 0x5a, 0x00, 0x00}}},
+-    {{{    55,     84,      9}, 0, {     0,      0}, {0x14, 0x74, 0x2c, 0x00}}},
+-    {{{    53,    -42,      9}, 0, {     0,      0}, {0x04, 0x83, 0x0f, 0x00}}},
+-    {{{   102,    -23,      6}, 0, {     0,      0}, {0x64, 0xc4, 0x31, 0x00}}},
+-    {{{    18,     37,    -31}, 0, {     0,      0}, {0xc7, 0x28, 0x97, 0x00}}},
+-    {{{    44,    -22,    -46}, 0, {     0,      0}, {0xde, 0xb9, 0x9d, 0x00}}},
+-    {{{    11,      2,    -28}, 0, {     0,      0}, {0xca, 0xf6, 0x8e, 0x00}}},
+-    {{{    -5,     -5,     34}, 0, {     0,      0}, {0x8c, 0xce, 0x01, 0x00}}},
+-    {{{    -6,     -5,    -32}, 0, {     0,      0}, {0x8c, 0xce, 0x01, 0x00}}},
+-    {{{    14,    -51,     -2}, 0, {     0,      0}, {0x8c, 0xce, 0x01, 0x00}}},
+-    {{{   -26,     40,     -1}, 0, {     0,      0}, {0x8c, 0xce, 0x01, 0x00}}},
+-};
+-
+-// 0x04014C90 - 0x04014DC0
+-const Gfx mario_medium_poly_left_hand_closed_shared_dl[] = {
+-    gsSPVertex(mario_medium_poly_left_hand_closed_shared_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  4, 0x0),
+-    gsSP2Triangles( 5,  3,  6, 0x0,  6,  1,  0, 0x0),
+-    gsSP2Triangles( 2,  1,  7, 0x0,  7,  1,  6, 0x0),
+-    gsSP2Triangles( 6,  3,  8, 0x0,  3,  2,  8, 0x0),
+-    gsSP2Triangles( 0,  9, 10, 0x0, 11,  9,  0, 0x0),
+-    gsSP2Triangles(10, 12, 13, 0x0, 14, 12, 11, 0x0),
+-    gsSP2Triangles(11, 12,  9, 0x0,  9, 12, 10, 0x0),
+-    gsSP1Triangle(15, 11,  0, 0x0),
+-    gsSPVertex(mario_medium_poly_left_hand_closed_shared_dl_vertex_group2, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 5,  6,  7, 0x0,  7,  8,  9, 0x0),
+-    gsSP2Triangles( 9, 10,  3, 0x0,  7,  0,  2, 0x0),
+-    gsSP2Triangles( 7,  2, 11, 0x0,  3, 12, 13, 0x0),
+-    gsSP2Triangles( 3, 13,  0, 0x0, 11,  2, 14, 0x0),
+-    gsSPVertex(mario_medium_poly_left_hand_closed_shared_dl_vertex_group3, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  0, 0x0),
+-    gsSP2Triangles( 5,  2,  6, 0x0,  7,  8,  9, 0x0),
+-    gsSP2Triangles( 7,  2,  8, 0x0,  7,  0,  2, 0x0),
+-    gsSP2Triangles( 5,  8,  2, 0x0, 10, 11, 12, 0x0),
+-    gsSP1Triangle(10, 13, 11, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04014DC0 - 0x04014DE0
+-const Gfx mario_medium_poly_left_hand_closed[] = {
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPDisplayList(mario_medium_poly_left_hand_closed_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04014DE0
+-static const Vtx mario_medium_poly_right_arm_shared_dl_vertex[] = {
+-    {{{    60,    -28,     22}, 0, {     0,      0}, {0x3b, 0xc7, 0x60, 0x00}}},
+-    {{{    60,    -19,    -19}, 0, {     0,      0}, {0x5a, 0xbc, 0xc7, 0x00}}},
+-    {{{    60,     14,     24}, 0, {     0,      0}, {0x5b, 0x4f, 0x26, 0x00}}},
+-    {{{    -7,    -31,     24}, 0, {     0,      0}, {0x04, 0x84, 0xe6, 0x00}}},
+-    {{{    -7,    -20,    -27}, 0, {     0,      0}, {0x04, 0x84, 0xe6, 0x00}}},
+-    {{{    -8,     21,    -15}, 0, {     0,      0}, {0x11, 0x73, 0xce, 0x00}}},
+-    {{{    -8,     22,     27}, 0, {     0,      0}, {0x0e, 0x7e, 0xfd, 0x00}}},
+-    {{{    60,     13,     -9}, 0, {     0,      0}, {0x3c, 0x46, 0xaa, 0x00}}},
+-    {{{    -7,    -20,    -27}, 0, {     0,      0}, {0x0e, 0x23, 0x88, 0x00}}},
+-    {{{    -8,     22,     27}, 0, {     0,      0}, {0x03, 0xfa, 0x7e, 0x00}}},
+-    {{{    -7,    -31,     24}, 0, {     0,      0}, {0x03, 0xfa, 0x7e, 0x00}}},
+-    {{{    -7,    -20,    -27}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
+-    {{{    -7,    -31,     24}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
+-    {{{    -8,     22,     27}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
+-    {{{    -8,     21,    -15}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
+-};
+-
+-// 0x04014ED0 - 0x04014F40
+-const Gfx mario_medium_poly_right_arm_shared_dl[] = {
+-    gsSPVertex(mario_medium_poly_right_arm_shared_dl_vertex, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  4, 0x0),
+-    gsSP2Triangles( 2,  5,  6, 0x0,  7,  8,  5, 0x0),
+-    gsSP2Triangles( 7,  1,  8, 0x0,  2,  7,  5, 0x0),
+-    gsSP2Triangles( 0,  2,  9, 0x0,  0,  9, 10, 0x0),
+-    gsSP2Triangles( 1,  0,  3, 0x0, 11, 12, 13, 0x0),
+-    gsSP2Triangles(13, 14, 11, 0x0,  1,  7,  2, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04014F40 - 0x04014F60
+-const Gfx mario_medium_poly_right_arm[] = {
+-    gsSPLight(&mario_red_lights_group.l, 1),
+-    gsSPLight(&mario_red_lights_group.a, 2),
+-    gsSPDisplayList(mario_medium_poly_right_arm_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04014F60
+-static const Vtx mario_medium_poly_right_forearm_shared_dl_vertex[] = {
+-    {{{    -5,    -18,    -24}, 0, {     0,      0}, {0x81, 0xfe, 0x03, 0x00}}},
+-    {{{    -3,    -29,     21}, 0, {     0,      0}, {0x81, 0xfe, 0x03, 0x00}}},
+-    {{{    -4,     17,     26}, 0, {     0,      0}, {0x81, 0xfe, 0x03, 0x00}}},
+-    {{{    52,     13,    -10}, 0, {     0,      0}, {0x51, 0x40, 0xb7, 0x00}}},
+-    {{{    53,     13,     22}, 0, {     0,      0}, {0x3d, 0x63, 0x31, 0x00}}},
+-    {{{    53,    -26,     19}, 0, {     0,      0}, {0x5b, 0xd0, 0x49, 0x00}}},
+-    {{{    52,    -17,    -21}, 0, {     0,      0}, {0x3a, 0xac, 0xb6, 0x00}}},
+-    {{{    -3,    -29,     21}, 0, {     0,      0}, {0x04, 0x85, 0xe4, 0x00}}},
+-    {{{    -5,    -18,    -24}, 0, {     0,      0}, {0x03, 0x85, 0xe3, 0x00}}},
+-    {{{    -5,     17,    -12}, 0, {     0,      0}, {0x09, 0x75, 0xd1, 0x00}}},
+-    {{{    -4,     17,     26}, 0, {     0,      0}, {0x08, 0x7e, 0x00, 0x00}}},
+-    {{{    -5,    -18,    -24}, 0, {     0,      0}, {0x06, 0x2a, 0x89, 0x00}}},
+-    {{{    -4,     17,     26}, 0, {     0,      0}, {0x06, 0xf5, 0x7e, 0x00}}},
+-    {{{    -3,    -29,     21}, 0, {     0,      0}, {0x06, 0xf4, 0x7e, 0x00}}},
+-    {{{    -5,     17,    -12}, 0, {     0,      0}, {0x81, 0xfe, 0x03, 0x00}}},
+-};
+-
+-// 0x04015050 - 0x040150C0
+-const Gfx mario_medium_poly_right_forearm_shared_dl[] = {
+-    gsSPVertex(mario_medium_poly_right_forearm_shared_dl_vertex, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  3,  5, 0x0,  6,  7,  8, 0x0),
+-    gsSP2Triangles( 4,  9, 10, 0x0,  3, 11,  9, 0x0),
+-    gsSP2Triangles( 3,  6, 11, 0x0,  4,  3,  9, 0x0),
+-    gsSP2Triangles( 5,  4, 12, 0x0,  5, 12, 13, 0x0),
+-    gsSP2Triangles( 6,  5,  7, 0x0,  2, 14,  0, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040150C0
+-static const Vtx mario_medium_poly_right_hand_closed_dl_vertex_group1[] = {
+-    {{{    -7,     -4,     36}, 0, {     0,      0}, {0x8c, 0xcd, 0xfd, 0x00}}},
+-    {{{   -26,     40,      0}, 0, {     0,      0}, {0x8c, 0xcd, 0xfd, 0x00}}},
+-    {{{    -4,     -7,    -34}, 0, {     0,      0}, {0x8c, 0xcd, 0xfd, 0x00}}},
+-    {{{    14,    -51,      7}, 0, {     0,      0}, {0x8c, 0xcd, 0xfd, 0x00}}},
+-    {{{    81,     -8,     49}, 0, {     0,      0}, {0x36, 0xe6, 0x6f, 0x00}}},
+-    {{{    42,    -20,     54}, 0, {     0,      0}, {0xd9, 0xbb, 0x62, 0x00}}},
+-    {{{    54,    -42,     -4}, 0, {     0,      0}, {0x04, 0x82, 0xf6, 0x00}}},
+-    {{{    52,     59,     37}, 0, {     0,      0}, {0xff, 0x55, 0x5e, 0x00}}},
+-    {{{    16,     38,     35}, 0, {     0,      0}, {0xc1, 0x2d, 0x63, 0x00}}},
+-    {{{    10,      3,     33}, 0, {     0,      0}, {0xc3, 0xfa, 0x6e, 0x00}}},
+-    {{{   102,    -23,      0}, 0, {     0,      0}, {0x65, 0xc1, 0xd7, 0x00}}},
+-    {{{    55,     84,     -8}, 0, {     0,      0}, {0x15, 0x73, 0xd1, 0x00}}},
+-    {{{     7,     62,    -11}, 0, {     0,      0}, {0xa7, 0x5a, 0xf9, 0x00}}},
+-    {{{    94,     43,     18}, 0, {     0,      0}, {0x6d, 0x38, 0x21, 0x00}}},
+-    {{{    32,      8,    -40}, 0, {     0,      0}, {0xda, 0xe8, 0x8a, 0x00}}},
+-    {{{    26,    -32,      8}, 0, {     0,      0}, {0x08, 0x82, 0xfa, 0x00}}},
+-};
+-
+-// 0x040151C0
+-static const Vtx mario_medium_poly_right_hand_closed_dl_vertex_group2[] = {
+-    {{{    16,     38,     35}, 0, {     0,      0}, {0xc1, 0x2d, 0x63, 0x00}}},
+-    {{{     7,     62,    -11}, 0, {     0,      0}, {0xa7, 0x5a, 0xf9, 0x00}}},
+-    {{{    -3,     37,      3}, 0, {     0,      0}, {0xb0, 0x62, 0xf7, 0x00}}},
+-    {{{    32,      8,    -40}, 0, {     0,      0}, {0xda, 0xe8, 0x8a, 0x00}}},
+-    {{{    26,    -32,      8}, 0, {     0,      0}, {0x08, 0x82, 0xfa, 0x00}}},
+-    {{{    14,    -51,      7}, 0, {     0,      0}, {0x4f, 0xd0, 0xaa, 0x00}}},
+-    {{{    -4,     -7,    -34}, 0, {     0,      0}, {0x37, 0x10, 0x8f, 0x00}}},
+-    {{{   -26,     40,      0}, 0, {     0,      0}, {0x15, 0x51, 0xa1, 0x00}}},
+-    {{{   -26,     40,      0}, 0, {     0,      0}, {0x02, 0x4f, 0x62, 0x00}}},
+-    {{{    -7,     -4,     36}, 0, {     0,      0}, {0x19, 0x13, 0x7a, 0x00}}},
+-    {{{    14,    -51,      7}, 0, {     0,      0}, {0x36, 0xd7, 0x6b, 0x00}}},
+-    {{{    55,     84,     -8}, 0, {     0,      0}, {0x15, 0x73, 0xd1, 0x00}}},
+-    {{{   102,    -23,      0}, 0, {     0,      0}, {0x65, 0xc1, 0xd7, 0x00}}},
+-    {{{    54,    -42,     -4}, 0, {     0,      0}, {0x04, 0x82, 0xf6, 0x00}}},
+-    {{{    94,     43,     18}, 0, {     0,      0}, {0x6d, 0x38, 0x21, 0x00}}},
+-    {{{    83,     30,    -39}, 0, {     0,      0}, {0x4e, 0x1c, 0xa1, 0x00}}},
+-};
+-
+-// 0x040152C0
+-static const Vtx mario_medium_poly_right_hand_closed_dl_vertex_group3[] = {
+-    {{{   102,    -23,      0}, 0, {     0,      0}, {0x65, 0xc1, 0xd7, 0x00}}},
+-    {{{    94,     43,     18}, 0, {     0,      0}, {0x6d, 0x38, 0x21, 0x00}}},
+-    {{{    81,     -8,     49}, 0, {     0,      0}, {0x36, 0xe6, 0x6f, 0x00}}},
+-    {{{    52,     59,     37}, 0, {     0,      0}, {0xff, 0x55, 0x5e, 0x00}}},
+-    {{{    55,     84,     -8}, 0, {     0,      0}, {0x15, 0x73, 0xd1, 0x00}}},
+-    {{{    32,      8,    -40}, 0, {     0,      0}, {0xda, 0xe8, 0x8a, 0x00}}},
+-    {{{    83,     30,    -39}, 0, {     0,      0}, {0x4e, 0x1c, 0xa1, 0x00}}},
+-    {{{    -7,     -4,     36}, 0, {     0,      0}, {0x19, 0x13, 0x7a, 0x00}}},
+-    {{{    26,    -32,      8}, 0, {     0,      0}, {0x08, 0x82, 0xfa, 0x00}}},
+-    {{{    10,      3,     33}, 0, {     0,      0}, {0xc3, 0xfa, 0x6e, 0x00}}},
+-    {{{    -3,     37,      3}, 0, {     0,      0}, {0xb0, 0x62, 0xf7, 0x00}}},
+-    {{{    13,      0,    -26}, 0, {     0,      0}, {0xf5, 0xf2, 0x83, 0x00}}},
+-    {{{    -4,     -7,    -34}, 0, {     0,      0}, {0x37, 0x10, 0x8f, 0x00}}},
+-    {{{    16,     38,     35}, 0, {     0,      0}, {0xc1, 0x2d, 0x63, 0x00}}},
+-    {{{    42,    -20,     54}, 0, {     0,      0}, {0xd9, 0xbb, 0x62, 0x00}}},
+-};
+-
+-// 0x040153B0 - 0x040154E0
+-const Gfx mario_medium_poly_right_hand_closed_dl[] = {
+-    gsSPVertex(mario_medium_poly_right_hand_closed_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  4,  7,  8, 0x0),
+-    gsSP2Triangles( 5,  4,  8, 0x0,  9,  5,  8, 0x0),
+-    gsSP2Triangles(10,  4,  6, 0x0,  7, 11, 12, 0x0),
+-    gsSP2Triangles( 4, 13,  7, 0x0,  7, 12,  8, 0x0),
+-    gsSP2Triangles(14,  6, 15, 0x0,  6,  5, 15, 0x0),
+-    gsSPVertex(mario_medium_poly_right_hand_closed_dl_vertex_group2, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  2, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  6,  7,  2, 0x0),
+-    gsSP2Triangles( 2,  8,  9, 0x0,  9, 10,  4, 0x0),
+-    gsSP2Triangles( 1, 11,  3, 0x0,  3, 12, 13, 0x0),
+-    gsSP2Triangles(11, 14, 15, 0x0, 15, 14, 12, 0x0),
+-    gsSPVertex(mario_medium_poly_right_hand_closed_dl_vertex_group3, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  4, 0x0),
+-    gsSP2Triangles( 5,  6,  0, 0x0,  4,  6,  5, 0x0),
+-    gsSP2Triangles( 7,  8,  9, 0x0,  7,  9, 10, 0x0),
+-    gsSP2Triangles(10, 11, 12, 0x0, 12, 11,  8, 0x0),
+-    gsSP2Triangles( 5, 11, 10, 0x0, 10,  9, 13, 0x0),
+-    gsSP2Triangles(14,  9,  8, 0x0,  8, 11,  5, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040154E0 - 0x04015500
+-const Gfx mario_medium_poly_right_hand_closed[] = {
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPDisplayList(mario_medium_poly_right_hand_closed_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04015500 - 0x04015530
+-const Gfx mario_metal_medium_poly_right_hand_closed[] = {
+-    gsSPDisplayList(mario_medium_poly_right_hand_closed_dl),
+-    gsDPPipeSync(),
+-    gsSPClearGeometryMode(G_TEXTURE_GEN),
+-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04015530
+-static const Vtx mario_medium_poly_left_thigh_dl_vertex[] = {
+-    {{{    18,    -12,     58}, 0, {     0,      0}, {0x13, 0xdd, 0x78, 0x00}}},
+-    {{{    22,    -52,      8}, 0, {     0,      0}, {0x1c, 0x85, 0x01, 0x00}}},
+-    {{{    99,    -35,      8}, 0, {     0,      0}, {0x3e, 0x92, 0x01, 0x00}}},
+-    {{{    14,     51,     38}, 0, {     0,      0}, {0x08, 0x75, 0x30, 0x00}}},
+-    {{{    92,     47,     33}, 0, {     0,      0}, {0x36, 0x4b, 0x56, 0x00}}},
+-    {{{    14,     50,    -23}, 0, {     0,      0}, {0x0a, 0x65, 0xb5, 0x00}}},
+-    {{{    92,     47,    -16}, 0, {     0,      0}, {0x47, 0x55, 0xc5, 0x00}}},
+-    {{{    19,    -13,    -42}, 0, {     0,      0}, {0x15, 0xdb, 0x89, 0x00}}},
+-    {{{    96,     -3,    -31}, 0, {     0,      0}, {0x68, 0xf1, 0xba, 0x00}}},
+-    {{{    96,     -3,     48}, 0, {     0,      0}, {0x71, 0xf8, 0x38, 0x00}}},
+-    {{{    19,    -13,    -42}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
+-    {{{    22,    -52,      8}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
+-    {{{    18,    -12,     58}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
+-    {{{    14,     51,     38}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
+-    {{{    14,     50,    -23}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
+-};
+-
+-// 0x04015620 - 0x040156B0
+-const Gfx mario_medium_poly_left_thigh_dl[] = {
+-    gsSPVertex(mario_medium_poly_left_thigh_dl_vertex, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  4, 0x0),
+-    gsSP2Triangles( 5,  3,  6, 0x0,  7,  5,  6, 0x0),
+-    gsSP2Triangles( 1,  7,  2, 0x0,  7,  8,  2, 0x0),
+-    gsSP2Triangles( 6,  8,  7, 0x0,  3,  4,  6, 0x0),
+-    gsSP2Triangles( 0,  9,  4, 0x0,  2,  9,  0, 0x0),
+-    gsSP2Triangles( 9,  2,  8, 0x0, 10, 11, 12, 0x0),
+-    gsSP2Triangles(12, 13, 10, 0x0, 13, 14, 10, 0x0),
+-    gsSP2Triangles( 8,  6,  9, 0x0,  6,  4,  9, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040156B0 - 0x040156E0
+-const Gfx mario_medium_poly_left_thigh[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPLight(&mario_blue_lights_group.l, 1),
+-    gsSPLight(&mario_blue_lights_group.a, 2),
+-    gsSPDisplayList(mario_medium_poly_left_thigh_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040156E0 - 0x04015758
+-const Gfx mario_metal_medium_poly_left_thigh[] = {
+-    gsDPPipeSync(),
+-    gsSPSetGeometryMode(G_TEXTURE_GEN),
+-    gsDPSetCombineMode(G_CC_DECALFADE, G_CC_DECALFADE),
+-    gsDPLoadTextureBlock(mario_texture_metal, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_ON),
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPDisplayList(mario_medium_poly_left_thigh_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04015758
+-static const Vtx mario_medium_poly_left_leg_shared_dl_vertex[] = {
+-    {{{     5,    -35,      9}, 0, {     0,      0}, {0xca, 0x8e, 0x00, 0x00}}},
+-    {{{    65,    -44,     10}, 0, {     0,      0}, {0xee, 0x83, 0x01, 0x00}}},
+-    {{{    66,     -9,     54}, 0, {     0,      0}, {0xf2, 0xdc, 0x78, 0x00}}},
+-    {{{     9,     46,     33}, 0, {     0,      0}, {0xd5, 0x61, 0x45, 0x00}}},
+-    {{{    69,     47,     37}, 0, {     0,      0}, {0xf9, 0x66, 0x4b, 0x00}}},
+-    {{{    70,     47,    -18}, 0, {     0,      0}, {0xfb, 0x74, 0xcf, 0x00}}},
+-    {{{    10,     46,    -16}, 0, {     0,      0}, {0xaf, 0x40, 0xb7, 0x00}}},
+-    {{{    67,     -9,    -36}, 0, {     0,      0}, {0xf4, 0xda, 0x88, 0x00}}},
+-    {{{     7,     -4,    -31}, 0, {     0,      0}, {0x9b, 0xee, 0xb6, 0x00}}},
+-    {{{     7,     -4,     49}, 0, {     0,      0}, {0x8f, 0xf5, 0x37, 0x00}}},
+-    {{{    66,     -9,     54}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
+-    {{{    65,    -44,     10}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
+-    {{{    67,     -9,    -36}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
+-    {{{    70,     47,    -18}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
+-    {{{    69,     47,     37}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
+-};
+-
+-// 0x04015848 - 0x040158D8
+-const Gfx mario_medium_poly_left_leg_shared_dl[] = {
+-    gsSPVertex(mario_medium_poly_left_leg_shared_dl_vertex, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  2,  4, 0x0),
+-    gsSP2Triangles( 3,  4,  5, 0x0,  6,  5,  7, 0x0),
+-    gsSP2Triangles( 0,  7,  1, 0x0,  0,  8,  7, 0x0),
+-    gsSP2Triangles( 7,  8,  6, 0x0,  5,  6,  3, 0x0),
+-    gsSP2Triangles( 3,  9,  2, 0x0,  2,  9,  0, 0x0),
+-    gsSP2Triangles(10, 11, 12, 0x0,  8,  0,  9, 0x0),
+-    gsSP2Triangles( 9,  6,  8, 0x0,  9,  3,  6, 0x0),
+-    gsSP2Triangles(12, 13, 10, 0x0, 13, 14, 10, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040158D8
+-static const Vtx mario_medium_poly_left_foot_shared_dl_vertex_group1[] = {
+-    {{{   108,     10,     36}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{   108,      9,    -20}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{    75,     21,    -41}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{    76,     22,     61}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{   -14,     55,    -27}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{   -13,     55,     49}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{   -41,     65,      9}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{    41,    -18,     54}, 0, {     0,      0}, {0x04, 0xb4, 0x65, 0x00}}},
+-    {{{    76,     22,     61}, 0, {     0,      0}, {0x12, 0xdd, 0x78, 0x00}}},
+-    {{{   -13,     55,     49}, 0, {     0,      0}, {0xce, 0x07, 0x74, 0x00}}},
+-    {{{    42,    -11,    -33}, 0, {     0,      0}, {0xff, 0xb8, 0x98, 0x00}}},
+-    {{{   -37,     12,    -16}, 0, {     0,      0}, {0xa1, 0xcf, 0xbd, 0x00}}},
+-    {{{   -14,     55,    -27}, 0, {     0,      0}, {0xcc, 0x02, 0x8d, 0x00}}},
+-    {{{   -36,     13,     39}, 0, {     0,      0}, {0xa0, 0xd0, 0x42, 0x00}}},
+-    {{{    75,     21,    -41}, 0, {     0,      0}, {0x09, 0xda, 0x88, 0x00}}},
+-    {{{   108,      9,    -20}, 0, {     0,      0}, {0x44, 0xad, 0xbe, 0x00}}},
+-};
+-
+-// 0x040159D8
+-static const Vtx mario_medium_poly_left_foot_shared_dl_vertex_group2[] = {
+-    {{{    78,    -30,      7}, 0, {     0,      0}, {0x34, 0x8d, 0xfb, 0x00}}},
+-    {{{   108,      9,    -20}, 0, {     0,      0}, {0x44, 0xad, 0xbe, 0x00}}},
+-    {{{   108,     10,     36}, 0, {     0,      0}, {0x4c, 0xaf, 0x3c, 0x00}}},
+-    {{{    42,    -11,    -33}, 0, {     0,      0}, {0xff, 0xb8, 0x98, 0x00}}},
+-    {{{    76,     22,     61}, 0, {     0,      0}, {0x12, 0xdd, 0x78, 0x00}}},
+-    {{{    41,    -18,     54}, 0, {     0,      0}, {0x04, 0xb4, 0x65, 0x00}}},
+-    {{{   -36,     13,     39}, 0, {     0,      0}, {0xa0, 0xd0, 0x42, 0x00}}},
+-    {{{   -13,     55,     49}, 0, {     0,      0}, {0xce, 0x07, 0x74, 0x00}}},
+-    {{{   -41,     65,      9}, 0, {     0,      0}, {0x83, 0x15, 0x00, 0x00}}},
+-    {{{   -14,     55,    -27}, 0, {     0,      0}, {0xcc, 0x02, 0x8d, 0x00}}},
+-    {{{   -37,     12,    -16}, 0, {     0,      0}, {0xa1, 0xcf, 0xbd, 0x00}}},
+-    {{{    25,    -34,     11}, 0, {     0,      0}, {0xdd, 0x87, 0xfb, 0x00}}},
+-};
+-
+-// 0x04015A98 - 0x04015B60
+-const Gfx mario_medium_poly_left_foot_shared_dl[] = {
+-    gsSPVertex(mario_medium_poly_left_foot_shared_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
+-    gsSP2Triangles( 3,  2,  4, 0x0,  5,  3,  4, 0x0),
+-    gsSP2Triangles( 6,  5,  4, 0x0,  7,  8,  9, 0x0),
+-    gsSP2Triangles(10, 11, 12, 0x0, 13,  7,  9, 0x0),
+-    gsSP2Triangles(10, 12, 14, 0x0, 10, 14, 15, 0x0),
+-    gsSPVertex(mario_medium_poly_left_foot_shared_dl_vertex_group2, 12, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  0,  3, 0x0),
+-    gsSP2Triangles( 2,  4,  5, 0x0,  5,  0,  2, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  8,  9, 10, 0x0),
+-    gsSP2Triangles(11,  3,  0, 0x0, 10,  3, 11, 0x0),
+-    gsSP2Triangles( 0,  5, 11, 0x0, 11,  5,  6, 0x0),
+-    gsSP2Triangles(11,  6, 10, 0x0,  6,  8, 10, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04015B60 - 0x04015B80
+-const Gfx mario_medium_poly_left_foot[] = {
+-    gsSPLight(&mario_brown1_lights_group.l, 1),
+-    gsSPLight(&mario_brown1_lights_group.a, 2),
+-    gsSPDisplayList(mario_medium_poly_left_foot_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04015B80
+-static const Vtx mario_medium_poly_right_thigh_shared_dl_vertex[] = {
+-    {{{    18,    -11,    -58}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
+-    {{{    23,    -52,     -9}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
+-    {{{    20,    -14,     41}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
+-    {{{    97,     -3,     30}, 0, {     0,      0}, {0x69, 0xf1, 0x45, 0x00}}},
+-    {{{    99,    -33,    -10}, 0, {     0,      0}, {0x40, 0x93, 0xfc, 0x00}}},
+-    {{{    95,     -1,    -49}, 0, {     0,      0}, {0x71, 0xfb, 0xc7, 0x00}}},
+-    {{{    18,    -11,    -58}, 0, {     0,      0}, {0x12, 0xe0, 0x87, 0x00}}},
+-    {{{    91,     49,    -33}, 0, {     0,      0}, {0x34, 0x4e, 0xab, 0x00}}},
+-    {{{    92,     48,     16}, 0, {     0,      0}, {0x47, 0x55, 0x3d, 0x00}}},
+-    {{{    13,     52,    -37}, 0, {     0,      0}, {0x06, 0x76, 0xd3, 0x00}}},
+-    {{{    20,    -14,     41}, 0, {     0,      0}, {0x16, 0xd9, 0x76, 0x00}}},
+-    {{{    23,    -52,     -9}, 0, {     0,      0}, {0x1d, 0x85, 0xfd, 0x00}}},
+-    {{{    14,     50,     24}, 0, {     0,      0}, {0x0a, 0x63, 0x4d, 0x00}}},
+-    {{{    13,     52,    -37}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
+-    {{{    14,     50,     24}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
+-};
+-
+-// 0x04015C70 - 0x04015D00
+-const Gfx mario_medium_poly_right_thigh_shared_dl[] = {
+-    gsSPVertex(mario_medium_poly_right_thigh_shared_dl_vertex, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  5,  4, 0x0,  7,  5,  6, 0x0),
+-    gsSP2Triangles( 8,  7,  9, 0x0, 10,  3,  8, 0x0),
+-    gsSP2Triangles( 4,  3, 10, 0x0,  4, 10, 11, 0x0),
+-    gsSP2Triangles( 8, 12, 10, 0x0,  8,  9, 12, 0x0),
+-    gsSP2Triangles( 7,  6,  9, 0x0,  4, 11,  6, 0x0),
+-    gsSP2Triangles( 5,  8,  3, 0x0,  5,  7,  8, 0x0),
+-    gsSP2Triangles( 2, 13,  0, 0x0,  2, 14, 13, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04015D00 - 0x04015D20
+-const Gfx mario_medium_poly_right_thigh[] = {
+-    gsSPLight(&mario_blue_lights_group.l, 1),
+-    gsSPLight(&mario_blue_lights_group.a, 2),
+-    gsSPDisplayList(mario_medium_poly_right_thigh_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04015D20
+-static const Vtx mario_medium_poly_right_leg_shared_dl_vertex[] = {
+-    {{{     6,     -1,    -50}, 0, {     0,      0}, {0x8e, 0xf7, 0xca, 0x00}}},
+-    {{{     5,    -34,    -11}, 0, {     0,      0}, {0xc9, 0x8e, 0xfe, 0x00}}},
+-    {{{     7,     -4,     30}, 0, {     0,      0}, {0x9b, 0xed, 0x4a, 0x00}}},
+-    {{{    67,     -9,     34}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
+-    {{{    64,    -43,    -12}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
+-    {{{    66,     -7,    -56}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
+-    {{{    66,     -7,    -56}, 0, {     0,      0}, {0xf1, 0xde, 0x87, 0x00}}},
+-    {{{    10,     48,    -33}, 0, {     0,      0}, {0xd6, 0x63, 0xbe, 0x00}}},
+-    {{{    10,     46,     16}, 0, {     0,      0}, {0xb1, 0x3f, 0x4b, 0x00}}},
+-    {{{    71,     47,     18}, 0, {     0,      0}, {0xfd, 0x73, 0x33, 0x00}}},
+-    {{{    67,     -9,     34}, 0, {     0,      0}, {0xf4, 0xd8, 0x77, 0x00}}},
+-    {{{    64,    -43,    -12}, 0, {     0,      0}, {0xec, 0x83, 0xfd, 0x00}}},
+-    {{{    70,     49,    -37}, 0, {     0,      0}, {0xfa, 0x67, 0xb8, 0x00}}},
+-    {{{    71,     47,     18}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
+-    {{{    70,     49,    -37}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
+-};
+-
+-// 0x04015E10 - 0x04015EA0
+-const Gfx mario_medium_poly_right_leg_shared_dl[] = {
+-    gsSPVertex(mario_medium_poly_right_leg_shared_dl_vertex, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 1,  0,  6, 0x0,  6,  0,  7, 0x0),
+-    gsSP2Triangles( 7,  8,  9, 0x0,  8,  2, 10, 0x0),
+-    gsSP2Triangles(10,  2,  1, 0x0, 11, 10,  1, 0x0),
+-    gsSP2Triangles(10,  9,  8, 0x0,  9, 12,  7, 0x0),
+-    gsSP2Triangles(12,  6,  7, 0x0,  6, 11,  1, 0x0),
+-    gsSP2Triangles( 5, 13,  3, 0x0,  5, 14, 13, 0x0),
+-    gsSP2Triangles( 2,  8,  0, 0x0,  8,  7,  0, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04015EA0
+-static const Vtx mario_medium_poly_right_foot_dl_vertex_group1[] = {
+-    {{{   -38,     12,     14}, 0, {     0,      0}, {0xa1, 0xcf, 0x43, 0x00}}},
+-    {{{   -43,     65,    -12}, 0, {     0,      0}, {0x83, 0x13, 0xff, 0x00}}},
+-    {{{   -36,     12,    -41}, 0, {     0,      0}, {0xa1, 0xce, 0xbe, 0x00}}},
+-    {{{    25,    -34,    -11}, 0, {     0,      0}, {0xdf, 0x86, 0x07, 0x00}}},
+-    {{{    41,    -18,    -55}, 0, {     0,      0}, {0x07, 0xb3, 0x9c, 0x00}}},
+-    {{{    79,    -29,     -7}, 0, {     0,      0}, {0x36, 0x8e, 0x08, 0x00}}},
+-    {{{    42,    -10,     32}, 0, {     0,      0}, {0xff, 0xba, 0x69, 0x00}}},
+-    {{{   -15,     55,     24}, 0, {     0,      0}, {0xcb, 0x04, 0x73, 0x00}}},
+-    {{{   -14,     54,    -51}, 0, {     0,      0}, {0xcf, 0x04, 0x8c, 0x00}}},
+-    {{{   108,     11,    -36}, 0, {     0,      0}, {0x4e, 0xb0, 0xc6, 0x00}}},
+-    {{{    76,     23,    -62}, 0, {     0,      0}, {0x14, 0xdb, 0x89, 0x00}}},
+-    {{{   107,     12,     20}, 0, {     0,      0}, {0x45, 0xaf, 0x44, 0x00}}},
+-    {{{    74,     24,     40}, 0, {     0,      0}, {0x08, 0xdc, 0x79, 0x00}}},
+-    {{{   -15,     55,     24}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-    {{{   -14,     54,    -51}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-    {{{   -43,     65,    -12}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-};
+-
+-// 0x04015FA0
+-static const Vtx mario_medium_poly_right_foot_dl_vertex_group2[] = {
+-    {{{   -15,     55,     24}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-    {{{    76,     23,    -62}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-    {{{   -14,     54,    -51}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-    {{{    74,     24,     40}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-    {{{   108,     11,    -36}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-    {{{   107,     12,     20}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-};
+-
+-// 0x04016000 - 0x040160C8
+-const Gfx mario_medium_poly_right_foot_dl[] = {
+-    gsSPVertex(mario_medium_poly_right_foot_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
+-    gsSP2Triangles( 2,  4,  3, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 3,  6,  0, 0x0,  5,  6,  3, 0x0),
+-    gsSP2Triangles( 0,  7,  1, 0x0,  1,  8,  2, 0x0),
+-    gsSP2Triangles( 9,  5,  4, 0x0,  4, 10,  9, 0x0),
+-    gsSP2Triangles( 6,  5, 11, 0x0,  9, 11,  5, 0x0),
+-    gsSP2Triangles(11, 12,  6, 0x0, 12,  7,  6, 0x0),
+-    gsSP2Triangles( 8,  4,  2, 0x0,  7,  0,  6, 0x0),
+-    gsSP2Triangles( 8, 10,  4, 0x0, 13, 14, 15, 0x0),
+-    gsSPVertex(mario_medium_poly_right_foot_dl_vertex_group2, 6, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
+-    gsSP2Triangles( 3,  4,  1, 0x0,  3,  5,  4, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040160C8 - 0x04016108
+-const Gfx mario_medium_poly_right_foot[] = {
+-    gsSPLight(&mario_brown1_lights_group.l, 1),
+-    gsSPLight(&mario_brown1_lights_group.a, 2),
+-    gsSPDisplayList(mario_medium_poly_right_foot_dl),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+-    gsDPSetEnvColor(255, 255, 255, 255),
+-    gsDPSetAlphaCompare(G_AC_NONE),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04016108 - 0x04016148
+-const Gfx mario_metal_medium_poly_right_foot[] = {
+-    gsSPDisplayList(mario_medium_poly_right_foot_dl),
+-    gsDPPipeSync(),
+-    gsSPClearGeometryMode(G_TEXTURE_GEN),
+-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPSetEnvColor(255, 255, 255, 255),
+-    gsDPSetAlphaCompare(G_AC_NONE),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04016148
+-static const Vtx mario_seg4_vertex_04016148[] = {
+-    {{{    75,     24,    -60}, 0, {   -74,   -930}, {0x60, 0x27, 0xb8, 0xff}}},
+-    {{{    36,     47,    -76}, 0, {  -174,    168}, {0x2e, 0x36, 0x98, 0xff}}},
+-    {{{    44,     78,    -35}, 0, {   988,     92}, {0x45, 0x65, 0xe2, 0xff}}},
+-    {{{   -26,     49,    -87}, 0, {  -538,   1590}, {0xc4, 0x29, 0x99, 0xff}}},
+-    {{{     1,     87,    -53}, 0, {   638,   1164}, {0x0e, 0x74, 0xd1, 0xff}}},
+-    {{{     1,     87,     54}, 0, {  2522,    702}, {0x11, 0x74, 0x2f, 0xff}}},
+-    {{{     1,     87,     54}, 0, {   272,   1122}, {0x11, 0x74, 0x2f, 0xff}}},
+-    {{{    44,     78,     37}, 0, {   -92,    108}, {0x47, 0x5f, 0x2a, 0xff}}},
+-    {{{    44,     78,    -35}, 0, { -1398,   -128}, {0x45, 0x65, 0xe2, 0xff}}},
+-    {{{   -26,     49,     88}, 0, {  1514,   1490}, {0xc4, 0x29, 0x67, 0xff}}},
+-    {{{    36,     47,     77}, 0, {  1110,    130}, {0x2f, 0x37, 0x68, 0xff}}},
+-    {{{    75,     24,     60}, 0, {   968,   -926}, {0x62, 0x27, 0x46, 0xff}}},
+-};
+-
+-// 0x04016208
+-static const Vtx mario_seg4_vertex_04016208[] = {
+-    {{{    82,     37,     28}, 0, {     0,      0}, {0x71, 0x36, 0x0e, 0xff}}},
+-    {{{    82,     37,    -28}, 0, {     0,      0}, {0x71, 0x35, 0xea, 0xff}}},
+-    {{{    44,     78,    -35}, 0, {     0,      0}, {0x45, 0x65, 0xe2, 0xff}}},
+-    {{{    44,     78,     37}, 0, {     0,      0}, {0x47, 0x5f, 0x2a, 0xff}}},
+-    {{{    95,    -39,    -25}, 0, {     0,      0}, {0x79, 0xe6, 0xe8, 0xff}}},
+-    {{{    95,    -39,     25}, 0, {     0,      0}, {0x75, 0xdb, 0x1d, 0xff}}},
+-    {{{    54,    -68,      0}, 0, {     0,      0}, {0x2d, 0x8a, 0x00, 0xff}}},
+-    {{{    56,     -4,     79}, 0, {     0,      0}, {0x39, 0x04, 0x71, 0xff}}},
+-    {{{    75,     24,     60}, 0, {     0,      0}, {0x62, 0x27, 0x46, 0xff}}},
+-    {{{    36,     47,     77}, 0, {     0,      0}, {0x2f, 0x37, 0x68, 0xff}}},
+-    {{{     9,      0,     94}, 0, {     0,      0}, {0x0e, 0x03, 0x7e, 0xff}}},
+-    {{{    22,    -41,     87}, 0, {     0,      0}, {0x1f, 0xc9, 0x6d, 0xff}}},
+-    {{{    83,    -29,     58}, 0, {     0,      0}, {0x54, 0xc8, 0x4c, 0xff}}},
+-    {{{    83,    -29,    -58}, 0, {     0,      0}, {0x52, 0xc9, 0xb2, 0xff}}},
+-    {{{    40,    -66,    -47}, 0, {     0,      0}, {0x1d, 0x91, 0xcb, 0xff}}},
+-    {{{    22,    -41,    -86}, 0, {     0,      0}, {0x1e, 0xca, 0x92, 0xff}}},
+-};
+-
+-// 0x04016308
+-static const Vtx mario_seg4_vertex_04016308[] = {
+-    {{{    36,     47,    -76}, 0, {     0,      0}, {0x2e, 0x36, 0x98, 0xff}}},
+-    {{{    75,     24,    -60}, 0, {     0,      0}, {0x60, 0x27, 0xb8, 0xff}}},
+-    {{{    56,     -4,    -77}, 0, {     0,      0}, {0x38, 0x04, 0x8f, 0xff}}},
+-    {{{     9,      0,    -93}, 0, {     0,      0}, {0x0e, 0x03, 0x82, 0xff}}},
+-    {{{    83,    -29,    -58}, 0, {     0,      0}, {0x52, 0xc9, 0xb2, 0xff}}},
+-    {{{    22,    -41,    -86}, 0, {     0,      0}, {0x1e, 0xca, 0x92, 0xff}}},
+-    {{{    22,    -41,     87}, 0, {     0,      0}, {0x1f, 0xc9, 0x6d, 0xff}}},
+-    {{{    40,    -66,     48}, 0, {     0,      0}, {0x1d, 0x91, 0x35, 0xff}}},
+-    {{{    83,    -29,     58}, 0, {     0,      0}, {0x54, 0xc8, 0x4c, 0xff}}},
+-};
+-
+-// 0x04016398
+-static const Vtx mario_seg4_vertex_04016398[] = {
+-    {{{    83,    -29,    -58}, 0, {     0,      0}, {0x52, 0xc9, 0xb2, 0xff}}},
+-    {{{    95,    -39,    -25}, 0, {     0,      0}, {0x79, 0xe6, 0xe8, 0xff}}},
+-    {{{    54,    -68,      0}, 0, {     0,      0}, {0x2d, 0x8a, 0x00, 0xff}}},
+-    {{{    75,     24,    -60}, 0, {     0,      0}, {0x60, 0x27, 0xb8, 0xff}}},
+-    {{{    82,     37,    -28}, 0, {     0,      0}, {0x71, 0x35, 0xea, 0xff}}},
+-    {{{    40,    -66,    -47}, 0, {     0,      0}, {0x1d, 0x91, 0xcb, 0xff}}},
+-    {{{    44,     78,    -35}, 0, {     0,      0}, {0x45, 0x65, 0xe2, 0xff}}},
+-    {{{    75,     24,     60}, 0, {     0,      0}, {0x62, 0x27, 0x46, 0xff}}},
+-    {{{    82,     37,     28}, 0, {     0,      0}, {0x71, 0x36, 0x0e, 0xff}}},
+-    {{{    44,     78,     37}, 0, {     0,      0}, {0x47, 0x5f, 0x2a, 0xff}}},
+-    {{{    83,    -29,     58}, 0, {     0,      0}, {0x54, 0xc8, 0x4c, 0xff}}},
+-    {{{    95,    -39,     25}, 0, {     0,      0}, {0x75, 0xdb, 0x1d, 0xff}}},
+-    {{{    40,    -66,     48}, 0, {     0,      0}, {0x1d, 0x91, 0x35, 0xff}}},
+-    {{{     1,     87,    -53}, 0, {     0,      0}, {0x0e, 0x74, 0xd1, 0xff}}},
+-    {{{   -30,     88,     42}, 0, {     0,      0}, {0xd3, 0x72, 0x1f, 0xff}}},
+-    {{{     1,     87,     54}, 0, {     0,      0}, {0x11, 0x74, 0x2f, 0xff}}},
+-};
+-
+-// 0x04016498
+-static const Vtx mario_seg4_vertex_04016498[] = {
+-    {{{     1,     87,    -53}, 0, {     0,      0}, {0x0e, 0x74, 0xd1, 0xff}}},
+-    {{{   -30,     88,    -41}, 0, {     0,      0}, {0xc7, 0x6a, 0xda, 0xff}}},
+-    {{{   -30,     88,     42}, 0, {     0,      0}, {0xd3, 0x72, 0x1f, 0xff}}},
+-    {{{   -26,     49,    -87}, 0, {     0,      0}, {0xc4, 0x29, 0x99, 0xff}}},
+-    {{{   -71,     56,      0}, 0, {     0,      0}, {0x89, 0x2b, 0x00, 0xff}}},
+-    {{{   -26,     49,     88}, 0, {     0,      0}, {0xc4, 0x29, 0x67, 0xff}}},
+-    {{{     1,     87,     54}, 0, {     0,      0}, {0x11, 0x74, 0x2f, 0xff}}},
+-    {{{   -59,    -44,      0}, 0, {     0,      0}, {0x88, 0xd8, 0x00, 0xff}}},
+-    {{{   -26,    -72,    -38}, 0, {     0,      0}, {0xda, 0x8b, 0xe5, 0xff}}},
+-    {{{   -26,    -72,     39}, 0, {     0,      0}, {0xda, 0x8b, 0x1b, 0xff}}},
+-    {{{   -26,    -41,     85}, 0, {     0,      0}, {0xcc, 0xc2, 0x61, 0xff}}},
+-    {{{   -26,    -41,    -84}, 0, {     0,      0}, {0xcc, 0xc2, 0x9f, 0xff}}},
+-    {{{    40,    -66,     48}, 0, {     0,      0}, {0x1d, 0x91, 0x35, 0xff}}},
+-    {{{    22,    -41,     87}, 0, {     0,      0}, {0x1f, 0xc9, 0x6d, 0xff}}},
+-    {{{     9,      0,     94}, 0, {     0,      0}, {0x0e, 0x03, 0x7e, 0xff}}},
+-    {{{    54,    -68,      0}, 0, {     0,      0}, {0x2d, 0x8a, 0x00, 0xff}}},
+-};
+-
+-// 0x04016598
+-static const Vtx mario_seg4_vertex_04016598[] = {
+-    {{{   -26,     49,     88}, 0, {     0,      0}, {0xc4, 0x29, 0x67, 0xff}}},
+-    {{{     9,      0,     94}, 0, {     0,      0}, {0x0e, 0x03, 0x7e, 0xff}}},
+-    {{{    36,     47,     77}, 0, {     0,      0}, {0x2f, 0x37, 0x68, 0xff}}},
+-    {{{     9,      0,    -93}, 0, {     0,      0}, {0x0e, 0x03, 0x82, 0xff}}},
+-    {{{   -26,     49,    -87}, 0, {     0,      0}, {0xc4, 0x29, 0x99, 0xff}}},
+-    {{{    36,     47,    -76}, 0, {     0,      0}, {0x2e, 0x36, 0x98, 0xff}}},
+-    {{{   -26,    -41,    -84}, 0, {     0,      0}, {0xcc, 0xc2, 0x9f, 0xff}}},
+-    {{{    22,    -41,    -86}, 0, {     0,      0}, {0x1e, 0xca, 0x92, 0xff}}},
+-    {{{    40,    -66,    -47}, 0, {     0,      0}, {0x1d, 0x91, 0xcb, 0xff}}},
+-    {{{   -26,    -72,    -38}, 0, {     0,      0}, {0xda, 0x8b, 0xe5, 0xff}}},
+-    {{{    54,    -68,      0}, 0, {     0,      0}, {0x2d, 0x8a, 0x00, 0xff}}},
+-    {{{   -26,    -72,     39}, 0, {     0,      0}, {0xda, 0x8b, 0x1b, 0xff}}},
+-    {{{    40,    -66,     48}, 0, {     0,      0}, {0x1d, 0x91, 0x35, 0xff}}},
+-};
+-
+-// 0x04016668 - 0x040166B8
+-const Gfx mario_medium_poly_yellow_button_dl[] = {
+-    gsSPVertex(mario_seg4_vertex_04016148, 12, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+-    gsSP2Triangles( 2,  1,  4, 0x0,  4,  5,  2, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10,  6, 0x0),
+-    gsSP2Triangles( 6, 10,  7, 0x0,  7, 10, 11, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040166B8 - 0x04016800
+-const Gfx mario_medium_poly_pants_overalls_shared_dl[] = {
+-    gsSPVertex(mario_seg4_vertex_04016398, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  0,  3, 0x0),
+-    gsSP2Triangles( 3,  4,  1, 0x0,  2,  5,  0, 0x0),
+-    gsSP2Triangles( 4,  3,  6, 0x0,  7,  8,  9, 0x0),
+-    gsSP2Triangles( 7, 10, 11, 0x0,  8,  7, 11, 0x0),
+-    gsSP2Triangles(11, 10,  2, 0x0, 10, 12,  2, 0x0),
+-    gsSP1Triangle(13, 14, 15, 0x0),
+-    gsSPVertex(mario_seg4_vertex_04016498, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
+-    gsSP2Triangles( 4,  2,  1, 0x0,  1,  3,  4, 0x0),
+-    gsSP2Triangles( 5,  2,  4, 0x0,  6,  2,  5, 0x0),
+-    gsSP2Triangles( 4,  3,  7, 0x0,  8,  9,  7, 0x0),
+-    gsSP2Triangles( 5,  4,  7, 0x0,  9, 10,  7, 0x0),
+-    gsSP2Triangles(11,  8,  7, 0x0,  3, 11,  7, 0x0),
+-    gsSP2Triangles( 7, 10,  5, 0x0, 10,  9, 12, 0x0),
+-    gsSP2Triangles(10, 13, 14, 0x0, 12, 13, 10, 0x0),
+-    gsSP2Triangles( 5, 10, 14, 0x0,  9,  8, 15, 0x0),
+-    gsSPVertex(mario_seg4_vertex_04016598, 13, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  4,  3, 0x0,  6,  3,  7, 0x0),
+-    gsSP2Triangles( 8,  9,  6, 0x0,  6,  7,  8, 0x0),
+-    gsSP2Triangles( 9,  8, 10, 0x0, 11, 10, 12, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04016800 - 0x040168A0
+-const Gfx mario_medium_poly_tshirt_shared_dl[] = {
+-    gsSPVertex(mario_seg4_vertex_04016208, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
+-    gsSP2Triangles( 1,  0,  4, 0x0,  0,  5,  4, 0x0),
+-    gsSP2Triangles( 6,  4,  5, 0x0,  7,  8,  9, 0x0),
+-    gsSP2Triangles( 9, 10,  7, 0x0,  7, 10, 11, 0x0),
+-    gsSP2Triangles( 7, 12,  8, 0x0, 11, 12,  7, 0x0),
+-    gsSP1Triangle(13, 14, 15, 0x0),
+-    gsSPVertex(mario_seg4_vertex_04016308, 9, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
+-    gsSP2Triangles( 1,  4,  2, 0x0,  2,  4,  5, 0x0),
+-    gsSP2Triangles( 5,  3,  2, 0x0,  6,  7,  8, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040168A0 - 0x040168C8
+-const Gfx mario_medium_poly_torso_dl[] = {
+-    gsSPDisplayList(mario_medium_poly_pants_overalls_shared_dl),
+-    gsSPLight(&mario_red_lights_group.l, 1),
+-    gsSPLight(&mario_red_lights_group.a, 2),
+-    gsSPDisplayList(mario_medium_poly_tshirt_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040168C8 - 0x04016948
+-const Gfx mario_medium_poly_torso[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_yellow_button),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_medium_poly_yellow_button_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_medium_poly_torso_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04016948 - 0x04016968
+-const Gfx mario_metal_medium_poly_torso[] = {
+-    gsSPDisplayList(mario_medium_poly_yellow_button_dl),
+-    gsSPDisplayList(mario_medium_poly_pants_overalls_shared_dl),
+-    gsSPDisplayList(mario_medium_poly_tshirt_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04016968
+-static const Vtx mario_low_poly_butt_dl_vertex[] = {
+-    {{{   -37,    -37,      0}, 0, {     0,      0}, {0x82, 0xf5, 0x00, 0x00}}},
+-    {{{    -2,     52,     92}, 0, {     0,      0}, {0xb1, 0x3c, 0x4e, 0x00}}},
+-    {{{   -35,     55,      0}, 0, {     0,      0}, {0x97, 0x45, 0x00, 0x00}}},
+-    {{{    -7,    -86,     85}, 0, {     0,      0}, {0xbf, 0xc4, 0x5a, 0x00}}},
+-    {{{    49,     46,     96}, 0, {     0,      0}, {0x4b, 0x1d, 0x61, 0x00}}},
+-    {{{    -7,    -86,    -85}, 0, {     0,      0}, {0xcf, 0xaa, 0xb2, 0x00}}},
+-    {{{    -2,     52,    -92}, 0, {     0,      0}, {0xb0, 0x3b, 0xb2, 0x00}}},
+-    {{{    48,     44,    -98}, 0, {     0,      0}, {0x29, 0x22, 0x8e, 0x00}}},
+-    {{{    46,    -71,    -89}, 0, {     0,      0}, {0x73, 0xd9, 0xdd, 0x00}}},
+-    {{{    46,    -71,     89}, 0, {     0,      0}, {0x44, 0xa1, 0x2f, 0x00}}},
+-    {{{    49,     96,      0}, 0, {     0,      0}, {0x2b, 0x77, 0x00, 0x00}}},
+-};
+-
+-// 0x04016A18 - 0x04016AB8
+-const Gfx mario_low_poly_butt_dl[] = {
+-    gsSPVertex(mario_low_poly_butt_dl_vertex, 11, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  4, 0x0),
+-    gsSP2Triangles( 5,  6,  7, 0x0,  0,  2,  6, 0x0),
+-    gsSP2Triangles( 6,  5,  0, 0x0,  0,  3,  1, 0x0),
+-    gsSP2Triangles( 7,  8,  5, 0x0,  3,  9,  4, 0x0),
+-    gsSP2Triangles( 8,  7, 10, 0x0,  4,  9,  8, 0x0),
+-    gsSP2Triangles( 5,  9,  3, 0x0,  3,  0,  5, 0x0),
+-    gsSP2Triangles( 5,  8,  9, 0x0, 10,  7,  6, 0x0),
+-    gsSP2Triangles(10,  4,  8, 0x0,  2,  1, 10, 0x0),
+-    gsSP2Triangles( 6,  2, 10, 0x0,  1,  4, 10, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04016AB8 - 0x04016AE8
+-const Gfx mario_low_poly_butt[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPLight(&mario_blue_lights_group.l, 1),
+-    gsSPLight(&mario_blue_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_butt_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04016AE8 - 0x04016B60
+-const Gfx mario_metal_low_poly_butt[] = {
+-    gsDPPipeSync(),
+-    gsSPSetGeometryMode(G_TEXTURE_GEN),
+-    gsDPSetCombineMode(G_CC_DECALFADE, G_CC_DECALFADE),
+-    gsDPLoadTextureBlock(mario_texture_metal, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_ON),
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_butt_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04016B60
+-static const Vtx mario_low_poly_left_arm_shared_dl_vertex[] = {
+-    {{{    -6,     28,     10}, 0, {     0,      0}, {0x09, 0x65, 0xb5, 0x00}}},
+-    {{{    72,     21,      8}, 0, {     0,      0}, {0x44, 0x4d, 0x48, 0x00}}},
+-    {{{    71,    -11,    -34}, 0, {     0,      0}, {0x3f, 0x57, 0xbe, 0x00}}},
+-    {{{    -8,    -30,     31}, 0, {     0,      0}, {0x09, 0x26, 0x78, 0x00}}},
+-    {{{    71,    -30,     23}, 0, {     0,      0}, {0x5e, 0x15, 0x51, 0x00}}},
+-    {{{    -6,     28,     10}, 0, {     0,      0}, {0x07, 0x29, 0x77, 0x00}}},
+-    {{{    -8,     -7,    -41}, 0, {     0,      0}, {0x0b, 0x67, 0xb8, 0x00}}},
+-    {{{    -8,    -30,     31}, 0, {     0,      0}, {0xa4, 0xad, 0xe5, 0x00}}},
+-    {{{    -6,     28,     10}, 0, {     0,      0}, {0x81, 0x02, 0x00, 0x00}}},
+-    {{{    -8,     -7,    -41}, 0, {     0,      0}, {0xa4, 0xad, 0xe5, 0x00}}},
+-    {{{    71,    -11,    -34}, 0, {     0,      0}, {0xfd, 0x88, 0xd9, 0x00}}},
+-    {{{    71,    -30,     23}, 0, {     0,      0}, {0xfd, 0x88, 0xd9, 0x00}}},
+-};
+-
+-// 0x04016C20 - 0x04016C70
+-const Gfx mario_low_poly_left_arm_shared_dl[] = {
+-    gsSPVertex(mario_low_poly_left_arm_shared_dl_vertex, 12, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+-    gsSP2Triangles( 5,  3,  1, 0x0,  6,  0,  2, 0x0),
+-    gsSP2Triangles( 7,  8,  9, 0x0,  2,  1,  4, 0x0),
+-    gsSP2Triangles( 7,  9, 10, 0x0,  7, 10, 11, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04016C70 - 0x04016C90
+-const Gfx mario_low_poly_left_arm[] = {
+-    gsSPLight(&mario_red_lights_group.l, 1),
+-    gsSPLight(&mario_red_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_left_arm_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04016C90
+-static const Vtx mario_low_poly_left_forearm_shared_dl_vertex[] = {
+-    {{{    -5,     20,      6}, 0, {     0,      0}, {0x05, 0x62, 0xb0, 0x00}}},
+-    {{{    67,     16,      5}, 0, {     0,      0}, {0x43, 0x4b, 0x4c, 0x00}}},
+-    {{{    67,    -14,    -31}, 0, {     0,      0}, {0x3c, 0x55, 0xba, 0x00}}},
+-    {{{    -5,    -30,     21}, 0, {     0,      0}, {0x05, 0x20, 0x7a, 0x00}}},
+-    {{{    67,    -30,     17}, 0, {     0,      0}, {0x5c, 0x14, 0x54, 0x00}}},
+-    {{{    -5,     20,      6}, 0, {     0,      0}, {0x04, 0x22, 0x7a, 0x00}}},
+-    {{{    -5,    -12,    -35}, 0, {     0,      0}, {0x07, 0x63, 0xb2, 0x00}}},
+-    {{{    -5,    -30,     21}, 0, {     0,      0}, {0xa5, 0xad, 0xe5, 0x00}}},
+-    {{{    -5,     20,      6}, 0, {     0,      0}, {0x81, 0x01, 0x00, 0x00}}},
+-    {{{    -5,    -12,    -35}, 0, {     0,      0}, {0xa5, 0xad, 0xe5, 0x00}}},
+-    {{{    67,    -30,     17}, 0, {     0,      0}, {0xfe, 0x88, 0xd9, 0x00}}},
+-    {{{    67,    -14,    -31}, 0, {     0,      0}, {0xfe, 0x88, 0xd9, 0x00}}},
+-};
+-
+-// 0x04016D50 - 0x04016DA0
+-const Gfx mario_low_poly_left_forearm_shared_dl[] = {
+-    gsSPVertex(mario_low_poly_left_forearm_shared_dl_vertex, 12, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+-    gsSP2Triangles( 5,  3,  1, 0x0,  6,  0,  2, 0x0),
+-    gsSP2Triangles( 7,  8,  9, 0x0,  2,  1,  4, 0x0),
+-    gsSP2Triangles(10,  7,  9, 0x0, 10,  9, 11, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04016DA0
+-static const Vtx mario_low_poly_left_hand_closed_shared_dl_vertex[] = {
+-    {{{    -6,     34,    -25}, 0, {     0,      0}, {0xa0, 0x13, 0xb0, 0x00}}},
+-    {{{    -9,     39,     24}, 0, {     0,      0}, {0xb3, 0x43, 0x4a, 0x00}}},
+-    {{{    91,     80,    -34}, 0, {     0,      0}, {0x13, 0x7c, 0xee, 0x00}}},
+-    {{{    90,     35,     33}, 0, {     0,      0}, {0x41, 0x14, 0x6b, 0x00}}},
+-    {{{    20,    -34,     21}, 0, {     0,      0}, {0xd4, 0x9a, 0x3c, 0x00}}},
+-    {{{   122,      4,    -45}, 0, {     0,      0}, {0x63, 0xbb, 0x25, 0x00}}},
+-    {{{   122,      4,    -45}, 0, {     0,      0}, {0xf2, 0x15, 0x84, 0x00}}},
+-    {{{    20,    -31,    -44}, 0, {     0,      0}, {0xcb, 0xae, 0xb1, 0x00}}},
+-};
+-
+-// 0x04016E20 - 0x04016E80
+-const Gfx mario_low_poly_left_hand_closed_shared_dl[] = {
+-    gsSPVertex(mario_low_poly_left_hand_closed_shared_dl_vertex, 8, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  2, 0x0),
+-    gsSP2Triangles( 4,  5,  3, 0x0,  0,  6,  7, 0x0),
+-    gsSP2Triangles( 0,  2,  6, 0x0,  4,  7,  5, 0x0),
+-    gsSP2Triangles( 3,  1,  4, 0x0,  2,  3,  5, 0x0),
+-    gsSP2Triangles( 0,  7,  4, 0x0,  4,  1,  0, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04016E80 - 0x04016EA0
+-const Gfx mario_low_poly_left_hand_closed[] = {
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_left_hand_closed_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04016EA0
+-static const Vtx mario_low_poly_right_arm_shared_dl_vertex[] = {
+-    {{{    65,     30,     23}, 0, {     0,      0}, {0x5e, 0xeb, 0x51, 0x00}}},
+-    {{{    66,    -21,      8}, 0, {     0,      0}, {0x45, 0xb3, 0x49, 0x00}}},
+-    {{{    65,     11,    -34}, 0, {     0,      0}, {0x40, 0xa9, 0xbf, 0x00}}},
+-    {{{   -10,      7,    -41}, 0, {     0,      0}, {0xa4, 0x52, 0xe5, 0x00}}},
+-    {{{    -9,    -28,     10}, 0, {     0,      0}, {0x81, 0xfe, 0x00, 0x00}}},
+-    {{{   -10,     30,     30}, 0, {     0,      0}, {0xa4, 0x52, 0xe5, 0x00}}},
+-    {{{    -9,    -28,     10}, 0, {     0,      0}, {0x09, 0x9a, 0xb6, 0x00}}},
+-    {{{   -10,      7,    -41}, 0, {     0,      0}, {0x0c, 0x99, 0xb8, 0x00}}},
+-    {{{   -10,     30,     30}, 0, {     0,      0}, {0x0a, 0xdb, 0x78, 0x00}}},
+-    {{{    -9,    -28,     10}, 0, {     0,      0}, {0x07, 0xd8, 0x78, 0x00}}},
+-    {{{    65,     30,     23}, 0, {     0,      0}, {0xfc, 0x78, 0xd9, 0x00}}},
+-    {{{    65,     11,    -34}, 0, {     0,      0}, {0xfc, 0x78, 0xd9, 0x00}}},
+-};
+-
+-// 0x04016F60 - 0x04016FB0
+-const Gfx mario_low_poly_right_arm_shared_dl[] = {
+-    gsSPVertex(mario_low_poly_right_arm_shared_dl_vertex, 12, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 2,  6,  7, 0x0,  1,  8,  9, 0x0),
+-    gsSP2Triangles( 1,  0,  8, 0x0,  2,  1,  6, 0x0),
+-    gsSP2Triangles( 5, 10, 11, 0x0,  5, 11,  3, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04016FB0 - 0x04016FD0
+-const Gfx mario_low_poly_right_arm[] = {
+-    gsSPLight(&mario_red_lights_group.l, 1),
+-    gsSPLight(&mario_red_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_right_arm_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04016FD0
+-static const Vtx mario_low_poly_right_forearm_shared_dl_vertex[] = {
+-    {{{   -13,     12,    -35}, 0, {     0,      0}, {0xa5, 0x53, 0xe5, 0x00}}},
+-    {{{   -13,    -20,      6}, 0, {     0,      0}, {0x81, 0xff, 0x00, 0x00}}},
+-    {{{   -13,     30,     21}, 0, {     0,      0}, {0xa5, 0x53, 0xe5, 0x00}}},
+-    {{{    54,     14,    -31}, 0, {     0,      0}, {0x3d, 0xaa, 0xba, 0x00}}},
+-    {{{   -13,    -20,      6}, 0, {     0,      0}, {0x05, 0x9e, 0xb1, 0x00}}},
+-    {{{   -13,     12,    -35}, 0, {     0,      0}, {0x07, 0x9c, 0xb3, 0x00}}},
+-    {{{    55,    -16,      5}, 0, {     0,      0}, {0x43, 0xb5, 0x4c, 0x00}}},
+-    {{{   -13,     30,     21}, 0, {     0,      0}, {0x05, 0xe0, 0x7a, 0x00}}},
+-    {{{   -13,    -20,      6}, 0, {     0,      0}, {0x04, 0xde, 0x7a, 0x00}}},
+-    {{{    54,     30,     17}, 0, {     0,      0}, {0x5c, 0xed, 0x54, 0x00}}},
+-    {{{    54,     30,     17}, 0, {     0,      0}, {0xfe, 0x78, 0xd8, 0x00}}},
+-    {{{    54,     14,    -31}, 0, {     0,      0}, {0xfe, 0x78, 0xd8, 0x00}}},
+-};
+-
+-// 0x04017090 - 0x040170E0
+-const Gfx mario_low_poly_right_forearm_shared_dl[] = {
+-    gsSPVertex(mario_low_poly_right_forearm_shared_dl_vertex, 12, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  6,  9,  7, 0x0),
+-    gsSP2Triangles( 3,  6,  4, 0x0,  2, 10, 11, 0x0),
+-    gsSP2Triangles( 2, 11,  0, 0x0,  9,  6,  3, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040170E0
+-static const Vtx mario_low_poly_right_hand_closed_dl_vertex[] = {
+-    {{{    85,    -38,    -32}, 0, {     0,      0}, {0x3d, 0xe3, 0x96, 0x00}}},
+-    {{{   -15,    -35,    -22}, 0, {     0,      0}, {0x99, 0xdc, 0xc1, 0x00}}},
+-    {{{    17,     37,    -22}, 0, {     0,      0}, {0xfe, 0x69, 0xb9, 0x00}}},
+-    {{{   116,    -10,     36}, 0, {     0,      0}, {0x66, 0x47, 0x16, 0x00}}},
+-    {{{    82,    -85,     44}, 0, {     0,      0}, {0x13, 0x8a, 0xd8, 0x00}}},
+-    {{{   -15,    -35,     43}, 0, {     0,      0}, {0x9d, 0xec, 0x4c, 0x00}}},
+-    {{{    82,    -85,     44}, 0, {     0,      0}, {0x02, 0x15, 0x7d, 0x00}}},
+-    {{{    14,     30,     26}, 0, {     0,      0}, {0xca, 0x50, 0x51, 0x00}}},
+-};
+-
+-// 0x04017160 - 0x040171C0
+-const Gfx mario_low_poly_right_hand_closed_dl[] = {
+-    gsSPVertex(mario_low_poly_right_hand_closed_dl_vertex, 8, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
+-    gsSP2Triangles( 4,  0,  3, 0x0,  4,  5,  1, 0x0),
+-    gsSP2Triangles( 6,  3,  7, 0x0,  5,  6,  7, 0x0),
+-    gsSP2Triangles( 0,  4,  1, 0x0,  3,  2,  7, 0x0),
+-    gsSP2Triangles( 1,  5,  7, 0x0,  7,  2,  1, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040171C0 - 0x040171E0
+-const Gfx mario_low_poly_right_hand_closed[] = {
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_right_hand_closed_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040171E0 - 0x04017210
+-const Gfx mario_metal_low_poly_right_hand_closed[] = {
+-    gsSPDisplayList(mario_low_poly_right_hand_closed_dl),
+-    gsDPPipeSync(),
+-    gsSPClearGeometryMode(G_TEXTURE_GEN),
+-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04017210
+-static const Vtx mario_low_poly_left_thigh_dl_vertex[] = {
+-    {{{    10,     51,     45}, 0, {     0,      0}, {0x08, 0x73, 0x34, 0x00}}},
+-    {{{    17,    -44,     58}, 0, {     0,      0}, {0x0a, 0x11, 0x7d, 0x00}}},
+-    {{{    94,     48,     38}, 0, {     0,      0}, {0x38, 0x40, 0x5d, 0x00}}},
+-    {{{    11,     51,    -27}, 0, {     0,      0}, {0x0b, 0x5e, 0xad, 0x00}}},
+-    {{{    95,     48,    -19}, 0, {     0,      0}, {0x4a, 0x4f, 0xbf, 0x00}}},
+-    {{{    18,    -45,    -38}, 0, {     0,      0}, {0x0c, 0x0f, 0x83, 0x00}}},
+-    {{{   101,    -28,    -28}, 0, {     0,      0}, {0x5b, 0xca, 0xbc, 0x00}}},
+-    {{{   100,    -28,     48}, 0, {     0,      0}, {0x63, 0xbd, 0x29, 0x00}}},
+-    {{{    17,    -44,     58}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
+-    {{{    10,     51,     45}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
+-    {{{    18,    -45,    -38}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
+-    {{{    11,     51,    -27}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
+-    {{{    18,    -45,    -38}, 0, {     0,      0}, {0x18, 0x84, 0x01, 0x00}}},
+-    {{{    17,    -44,     58}, 0, {     0,      0}, {0x18, 0x84, 0x01, 0x00}}},
+-};
+-
+-// 0x040172F0 - 0x04017360
+-const Gfx mario_low_poly_left_thigh_dl[] = {
+-    gsSPVertex(mario_low_poly_left_thigh_dl_vertex, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  4, 0x0),
+-    gsSP2Triangles( 5,  3,  4, 0x0,  4,  6,  5, 0x0),
+-    gsSP2Triangles( 0,  2,  4, 0x0,  1,  7,  2, 0x0),
+-    gsSP2Triangles( 8,  9, 10, 0x0,  9, 11, 10, 0x0),
+-    gsSP2Triangles( 6,  4,  7, 0x0,  4,  2,  7, 0x0),
+-    gsSP2Triangles(12,  7, 13, 0x0, 12,  6,  7, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04017360 - 0x04017390
+-const Gfx mario_low_poly_left_thigh[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPLight(&mario_blue_lights_group.l, 1),
+-    gsSPLight(&mario_blue_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_left_thigh_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04017390 - 0x04017408
+-const Gfx mario_metal_low_poly_left_thigh[] = {
+-    gsDPPipeSync(),
+-    gsSPSetGeometryMode(G_TEXTURE_GEN),
+-    gsDPSetCombineMode(G_CC_DECALFADE, G_CC_DECALFADE),
+-    gsDPLoadTextureBlock(mario_texture_metal, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_ON),
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_left_thigh_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04017408
+-static const Vtx mario_low_poly_left_leg_shared_dl_vertex[] = {
+-    {{{     7,     47,     38}, 0, {     0,      0}, {0xcf, 0x59, 0x4b, 0x00}}},
+-    {{{    70,    -39,     53}, 0, {     0,      0}, {0xf8, 0x10, 0x7d, 0x00}}},
+-    {{{    75,     52,     42}, 0, {     0,      0}, {0xf4, 0x5e, 0x53, 0x00}}},
+-    {{{    75,     52,    -23}, 0, {     0,      0}, {0xf5, 0x72, 0xca, 0x00}}},
+-    {{{     7,     47,    -20}, 0, {     0,      0}, {0xab, 0x34, 0xb2, 0x00}}},
+-    {{{    71,    -39,    -34}, 0, {     0,      0}, {0xfa, 0x0f, 0x83, 0x00}}},
+-    {{{     3,    -29,    -29}, 0, {     0,      0}, {0xbb, 0xa4, 0xcd, 0x00}}},
+-    {{{     2,    -29,     48}, 0, {     0,      0}, {0x92, 0xdb, 0x31, 0x00}}},
+-    {{{    71,    -39,    -34}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
+-    {{{    75,     52,    -23}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
+-    {{{    70,    -39,     53}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
+-    {{{    75,     52,     42}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
+-    {{{    71,    -39,    -34}, 0, {     0,      0}, {0xed, 0x83, 0x00, 0x00}}},
+-    {{{    70,    -39,     53}, 0, {     0,      0}, {0xed, 0x83, 0x00, 0x00}}},
+-};
+-
+-// 0x040174E8 - 0x04017558
+-const Gfx mario_low_poly_left_leg_shared_dl[] = {
+-    gsSPVertex(mario_low_poly_left_leg_shared_dl_vertex, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
+-    gsSP2Triangles( 4,  3,  5, 0x0,  5,  6,  4, 0x0),
+-    gsSP2Triangles( 3,  4,  0, 0x0,  0,  7,  1, 0x0),
+-    gsSP2Triangles( 7,  4,  6, 0x0,  7,  0,  4, 0x0),
+-    gsSP2Triangles( 8,  9, 10, 0x0,  9, 11, 10, 0x0),
+-    gsSP2Triangles( 6, 12, 13, 0x0, 13,  7,  6, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04017558
+-static const Vtx mario_low_poly_left_foot_shared_dl_vertex[] = {
+-    {{{   110,     11,     56}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{   109,     10,    -33}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{   -50,     69,    -36}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{   -49,     70,     63}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+-    {{{    74,    -39,     51}, 0, {     0,      0}, {0x13, 0xb0, 0x60, 0x00}}},
+-    {{{   110,     11,     56}, 0, {     0,      0}, {0x5b, 0xbb, 0x36, 0x00}}},
+-    {{{   -49,     70,     63}, 0, {     0,      0}, {0x00, 0xf4, 0x7e, 0x00}}},
+-    {{{    73,    -40,    -25}, 0, {     0,      0}, {0x18, 0x96, 0xc0, 0x00}}},
+-    {{{   -56,     20,    -30}, 0, {     0,      0}, {0xa4, 0xc5, 0xc2, 0x00}}},
+-    {{{   -50,     69,    -36}, 0, {     0,      0}, {0xfe, 0xf0, 0x83, 0x00}}},
+-    {{{   -54,     20,     58}, 0, {     0,      0}, {0x99, 0xc2, 0x26, 0x00}}},
+-    {{{   109,     10,    -33}, 0, {     0,      0}, {0x44, 0xc2, 0xaa, 0x00}}},
+-    {{{   -50,     69,    -36}, 0, {     0,      0}, {0x82, 0x0e, 0x01, 0x00}}},
+-    {{{   -49,     70,     63}, 0, {     0,      0}, {0x82, 0x0e, 0x01, 0x00}}},
+-};
+-
+-// 0x04017638 - 0x040176A8
+-const Gfx mario_low_poly_left_foot_shared_dl[] = {
+-    gsSPVertex(mario_low_poly_left_foot_shared_dl_vertex, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  8,  9, 0x0),
+-    gsSP2Triangles(10,  4,  6, 0x0,  7,  9, 11, 0x0),
+-    gsSP2Triangles(12, 10, 13, 0x0,  7, 10,  8, 0x0),
+-    gsSP2Triangles( 7, 11,  5, 0x0,  5,  4,  7, 0x0),
+-    gsSP2Triangles( 7,  4, 10, 0x0, 12,  8, 10, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040176A8 - 0x040176C8
+-const Gfx mario_low_poly_left_foot[] = {
+-    gsSPLight(&mario_brown1_lights_group.l, 1),
+-    gsSPLight(&mario_brown1_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_left_foot_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040176C8
+-static const Vtx mario_low_poly_right_thigh_shared_dl_vertex[] = {
+-    {{{   102,    -25,    -48}, 0, {     0,      0}, {0x64, 0xbf, 0xd5, 0x00}}},
+-    {{{   103,    -27,     25}, 0, {     0,      0}, {0x5c, 0xc9, 0x42, 0x00}}},
+-    {{{    25,    -45,     35}, 0, {     0,      0}, {0x1b, 0x85, 0xfd, 0x00}}},
+-    {{{    24,    -42,    -56}, 0, {     0,      0}, {0x1b, 0x85, 0xfd, 0x00}}},
+-    {{{    95,     50,    -36}, 0, {     0,      0}, {0x37, 0x42, 0xa3, 0x00}}},
+-    {{{    96,     49,     18}, 0, {     0,      0}, {0x4a, 0x4e, 0x41, 0x00}}},
+-    {{{    25,    -45,     35}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
+-    {{{    17,     51,     27}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
+-    {{{    15,     53,    -42}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
+-    {{{    24,    -42,    -56}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
+-    {{{    24,    -42,    -56}, 0, {     0,      0}, {0x09, 0x13, 0x83, 0x00}}},
+-    {{{    15,     53,    -42}, 0, {     0,      0}, {0x07, 0x74, 0xce, 0x00}}},
+-    {{{    25,    -45,     35}, 0, {     0,      0}, {0x0d, 0x0c, 0x7d, 0x00}}},
+-    {{{    17,     51,     27}, 0, {     0,      0}, {0x0b, 0x5c, 0x55, 0x00}}},
+-};
+-
+-// 0x040177A8 - 0x04017818
+-const Gfx mario_low_poly_right_thigh_shared_dl[] = {
+-    gsSPVertex(mario_low_poly_right_thigh_shared_dl_vertex, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
+-    gsSP2Triangles( 0,  4,  5, 0x0,  0,  5,  1, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  6,  8,  9, 0x0),
+-    gsSP2Triangles( 4,  0, 10, 0x0,  5,  4, 11, 0x0),
+-    gsSP2Triangles(12,  1,  5, 0x0,  5, 13, 12, 0x0),
+-    gsSP2Triangles( 5, 11, 13, 0x0,  4, 10, 11, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04017818 - 0x04017838
+-const Gfx mario_low_poly_right_thigh[] = {
+-    gsSPLight(&mario_blue_lights_group.l, 1),
+-    gsSPLight(&mario_blue_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_right_thigh_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04017838
+-static const Vtx mario_low_poly_right_leg_shared_dl_vertex[] = {
+-    {{{     2,    -29,     27}, 0, {     0,      0}, {0xba, 0xa3, 0x31, 0x00}}},
+-    {{{     1,    -26,    -50}, 0, {     0,      0}, {0x91, 0xdd, 0xcf, 0x00}}},
+-    {{{    68,    -37,    -56}, 0, {     0,      0}, {0xec, 0x83, 0xfd, 0x00}}},
+-    {{{    70,    -40,     30}, 0, {     0,      0}, {0xec, 0x83, 0xfd, 0x00}}},
+-    {{{    68,    -37,    -56}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
+-    {{{    74,     54,    -43}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
+-    {{{    75,     52,     21}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
+-    {{{    70,    -40,     30}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
+-    {{{     6,     47,     19}, 0, {     0,      0}, {0xad, 0x33, 0x50, 0x00}}},
+-    {{{     6,     49,    -38}, 0, {     0,      0}, {0xcf, 0x5b, 0xb7, 0x00}}},
+-    {{{    68,    -37,    -56}, 0, {     0,      0}, {0xf8, 0x13, 0x83, 0x00}}},
+-    {{{    75,     52,     21}, 0, {     0,      0}, {0xf7, 0x71, 0x38, 0x00}}},
+-    {{{    70,    -40,     30}, 0, {     0,      0}, {0xfb, 0x0c, 0x7e, 0x00}}},
+-    {{{    74,     54,    -43}, 0, {     0,      0}, {0xf4, 0x60, 0xaf, 0x00}}},
+-};
+-
+-// 0x04017918 - 0x04017988
+-const Gfx mario_low_poly_right_leg_shared_dl[] = {
+-    gsSPVertex(mario_low_poly_right_leg_shared_dl_vertex, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  4,  6,  7, 0x0),
+-    gsSP2Triangles( 8,  9,  1, 0x0,  0,  8,  1, 0x0),
+-    gsSP2Triangles(10,  1,  9, 0x0,  9,  8, 11, 0x0),
+-    gsSP2Triangles( 8,  0, 12, 0x0, 12, 11,  8, 0x0),
+-    gsSP2Triangles(11, 13,  9, 0x0, 13, 10,  9, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04017988
+-static const Vtx mario_low_poly_right_foot_dl_vertex[] = {
+-    {{{   -55,     19,    -59}, 0, {     0,      0}, {0x9a, 0xc0, 0xda, 0x00}}},
+-    {{{   -57,     20,     28}, 0, {     0,      0}, {0xa4, 0xc5, 0x3e, 0x00}}},
+-    {{{   -52,     69,     34}, 0, {     0,      0}, {0x82, 0x0c, 0xfd, 0x00}}},
+-    {{{    73,    -38,    -50}, 0, {     0,      0}, {0x15, 0xae, 0xa2, 0x00}}},
+-    {{{    71,    -37,     25}, 0, {     0,      0}, {0x19, 0x98, 0x42, 0x00}}},
+-    {{{   108,     12,    -55}, 0, {     0,      0}, {0x5c, 0xbc, 0xcc, 0x00}}},
+-    {{{   106,     13,     33}, 0, {     0,      0}, {0x44, 0xc5, 0x58, 0x00}}},
+-    {{{   -50,     68,    -65}, 0, {     0,      0}, {0x82, 0x0c, 0xfd, 0x00}}},
+-    {{{   -52,     69,     34}, 0, {     0,      0}, {0xfd, 0xf2, 0x7e, 0x00}}},
+-    {{{   -50,     68,    -65}, 0, {     0,      0}, {0x02, 0xf2, 0x82, 0x00}}},
+-    {{{   -52,     69,     34}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-    {{{   108,     12,    -55}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-    {{{   -50,     68,    -65}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-    {{{   106,     13,     33}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+-};
+-
+-// 0x04017A68 - 0x04017AD8
+-const Gfx mario_low_poly_right_foot_dl[] = {
+-    gsSPVertex(mario_low_poly_right_foot_dl_vertex, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  4, 0x0),
+-    gsSP2Triangles( 4,  3,  5, 0x0,  5,  6,  4, 0x0),
+-    gsSP2Triangles( 1,  0,  4, 0x0,  7,  0,  2, 0x0),
+-    gsSP2Triangles( 6,  8,  4, 0x0,  9,  3,  0, 0x0),
+-    gsSP2Triangles( 8,  1,  4, 0x0,  9,  5,  3, 0x0),
+-    gsSP2Triangles(10, 11, 12, 0x0, 10, 13, 11, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04017AD8 - 0x04017B18
+-const Gfx mario_low_poly_right_foot[] = {
+-    gsSPLight(&mario_brown1_lights_group.l, 1),
+-    gsSPLight(&mario_brown1_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_right_foot_dl),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+-    gsDPSetEnvColor(255, 255, 255, 255),
+-    gsDPSetAlphaCompare(G_AC_NONE),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04017B18 - 0x04017B58
+-const Gfx mario_metal_low_poly_right_foot[] = {
+-    gsSPDisplayList(mario_low_poly_right_foot_dl),
+-    gsDPPipeSync(),
+-    gsSPClearGeometryMode(G_TEXTURE_GEN),
+-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPSetEnvColor(255, 255, 255, 255),
+-    gsDPSetAlphaCompare(G_AC_NONE),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04017B58
+-static const Vtx mario_seg4_vertex_04017B58[] = {
+-    {{{   -28,     41,    -88}, 0, {  -396,   1646}, {0xb7, 0x31, 0xa5, 0xff}}},
+-    {{{     0,     98,      0}, 0, {  1968,    722}, {0xf0, 0x7d, 0x00, 0xff}}},
+-    {{{    35,     64,    -82}, 0, {  -390,    132}, {0x29, 0x4b, 0xa3, 0xff}}},
+-    {{{    39,     90,      0}, 0, {  1698,   -280}, {0x4a, 0x67, 0x00, 0xff}}},
+-    {{{   -28,     41,     89}, 0, {  1610,   1512}, {0xd1, 0x37, 0x67, 0xff}}},
+-    {{{    35,     64,     83}, 0, {  1070,    -68}, {0x29, 0x4b, 0x5d, 0xff}}},
+-    {{{     0,     98,      0}, 0, { -1064,    968}, {0xf0, 0x7d, 0x00, 0xff}}},
+-    {{{    39,     90,      0}, 0, { -1146,   -124}, {0x4a, 0x67, 0x00, 0xff}}},
+-};
+-
+-// 0x04017BD8
+-static const Vtx mario_seg4_vertex_04017BD8[] = {
+-    {{{   -28,    -71,     81}, 0, {     0,      0}, {0x9a, 0xbd, 0x20, 0xff}}},
+-    {{{   -28,     41,    -88}, 0, {     0,      0}, {0xb7, 0x31, 0xa5, 0xff}}},
+-    {{{   -28,    -71,    -80}, 0, {     0,      0}, {0xb7, 0xb5, 0xba, 0xff}}},
+-    {{{    39,    -79,    -73}, 0, {     0,      0}, {0x27, 0xb3, 0xa4, 0xff}}},
+-    {{{   -28,     41,     89}, 0, {     0,      0}, {0xd1, 0x37, 0x67, 0xff}}},
+-    {{{   -28,     89,      0}, 0, {     0,      0}, {0x97, 0x46, 0x00, 0xff}}},
+-    {{{    39,    -79,     74}, 0, {     0,      0}, {0x37, 0xba, 0x59, 0xff}}},
+-    {{{    35,     64,     83}, 0, {     0,      0}, {0x29, 0x4b, 0x5d, 0xff}}},
+-    {{{     0,     98,      0}, 0, {     0,      0}, {0xf0, 0x7d, 0x00, 0xff}}},
+-    {{{    35,     64,    -82}, 0, {     0,      0}, {0x29, 0x4b, 0xa3, 0xff}}},
+-    {{{    89,    -45,    -42}, 0, {     0,      0}, {0x70, 0xd0, 0xdf, 0xff}}},
+-    {{{    89,    -45,     43}, 0, {     0,      0}, {0x75, 0xe4, 0x28, 0xff}}},
+-    {{{    74,     26,    -59}, 0, {     0,      0}, {0x61, 0x25, 0xb9, 0xff}}},
+-    {{{    39,     90,      0}, 0, {     0,      0}, {0x4a, 0x67, 0x00, 0xff}}},
+-    {{{    74,     26,     60}, 0, {     0,      0}, {0x61, 0x25, 0x47, 0xff}}},
+-};
+-
+-// 0x04017CC8
+-static const Vtx mario_seg4_vertex_04017CC8[] = {
+-    {{{    74,     26,     60}, 0, {     0,      0}, {0x61, 0x25, 0x47, 0xff}}},
+-    {{{    87,     42,      0}, 0, {     0,      0}, {0x76, 0x2d, 0x00, 0xff}}},
+-    {{{    39,     90,      0}, 0, {     0,      0}, {0x4a, 0x67, 0x00, 0xff}}},
+-    {{{    39,    -79,    -73}, 0, {     0,      0}, {0x27, 0xb3, 0xa4, 0xff}}},
+-    {{{    35,     64,    -82}, 0, {     0,      0}, {0x29, 0x4b, 0xa3, 0xff}}},
+-    {{{    74,     26,    -59}, 0, {     0,      0}, {0x61, 0x25, 0xb9, 0xff}}},
+-    {{{    89,    -45,    -42}, 0, {     0,      0}, {0x70, 0xd0, 0xdf, 0xff}}},
+-    {{{    39,    -79,     74}, 0, {     0,      0}, {0x37, 0xba, 0x59, 0xff}}},
+-    {{{    89,    -45,     43}, 0, {     0,      0}, {0x75, 0xe4, 0x28, 0xff}}},
+-    {{{    35,     64,     83}, 0, {     0,      0}, {0x29, 0x4b, 0x5d, 0xff}}},
+-};
+-
+-// 0x04017D68 - 0x04017D98
+-const Gfx mario_low_poly_yellow_button_dl[] = {
+-    gsSPVertex(mario_seg4_vertex_04017B58, 8, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  2,  1, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  6,  5,  7, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04017D98 - 0x04017E20
+-const Gfx mario_low_poly_pants_overalls_shared_dl[] = {
+-    gsSPVertex(mario_seg4_vertex_04017BD8, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
+-    gsSP2Triangles( 0,  4,  5, 0x0,  3,  6,  0, 0x0),
+-    gsSP2Triangles( 4,  0,  6, 0x0,  0,  5,  1, 0x0),
+-    gsSP2Triangles( 7,  4,  6, 0x0,  5,  4,  8, 0x0),
+-    gsSP2Triangles( 8,  1,  5, 0x0,  3,  1,  9, 0x0),
+-    gsSP2Triangles( 3,  2,  1, 0x0,  6,  3, 10, 0x0),
+-    gsSP2Triangles(10, 11,  6, 0x0, 12,  9, 13, 0x0),
+-    gsSP1Triangle(13,  7, 14, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04017E20 - 0x04017E78
+-const Gfx mario_low_poly_tshirt_shared_dl[] = {
+-    gsSPVertex(mario_seg4_vertex_04017CC8, 10, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 5,  6,  3, 0x0,  2,  1,  5, 0x0),
+-    gsSP2Triangles( 6,  5,  1, 0x0,  7,  8,  0, 0x0),
+-    gsSP2Triangles( 7,  0,  9, 0x0,  8,  6,  1, 0x0),
+-    gsSP1Triangle( 1,  0,  8, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04017E78 - 0x04017EA0
+-const Gfx mario_low_poly_torso_dl[] = {
+-    gsSPDisplayList(mario_low_poly_pants_overalls_shared_dl),
+-    gsSPLight(&mario_red_lights_group.l, 1),
+-    gsSPLight(&mario_red_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_tshirt_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04017EA0 - 0x04017F20
+-const Gfx mario_low_poly_torso[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_yellow_button),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_yellow_button_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_low_poly_torso_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04017F20 - 0x04017F40
+-const Gfx mario_metal_low_poly_torso[] = {
+-    gsSPDisplayList(mario_low_poly_yellow_button_dl),
+-    gsSPDisplayList(mario_low_poly_pants_overalls_shared_dl),
+-    gsSPDisplayList(mario_low_poly_tshirt_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04017F40
+-static const Vtx mario_low_poly_mario_m_logo_dl_vertex[] = {
+-    {{{   272,     48,     53}, 0, {   904,      0}, {0x42, 0x51, 0x47, 0xff}}},
+-    {{{   174,     79,     -9}, 0, {   452,    816}, {0x51, 0x61, 0xfa, 0xff}}},
+-    {{{   146,     27,     92}, 0, {  1238,    962}, {0x03, 0x3a, 0x70, 0xff}}},
+-    {{{   272,     48,    -52}, 0, {    -2,      0}, {0x62, 0x27, 0xba, 0xff}}},
+-    {{{   146,     27,    -91}, 0, {  -334,    962}, {0x03, 0x39, 0x8f, 0xff}}},
+-};
+-
+-// 0x04017F90
+-static const Vtx mario_low_poly_eyes_cap_on_dl_vertex[] = {
+-    {{{   146,     27,     92}, 0, {  1316,    212}, {0x03, 0x3a, 0x70, 0xff}}},
+-    {{{   168,     79,      0}, 0, {   458,     68}, {0xd9, 0x78, 0x00, 0xff}}},
+-    {{{    88,    101,     33}, 0, {   762,    990}, {0x38, 0x55, 0x4b, 0xff}}},
+-    {{{    88,    101,    -32}, 0, {   154,    990}, {0x1e, 0x5d, 0xb1, 0xff}}},
+-    {{{   146,     27,    -91}, 0, {  -398,    212}, {0x03, 0x39, 0x8f, 0xff}}},
+-};
+-
+-// 0x04017FE0
+-static const Vtx mario_low_poly_mustache_cap_on_dl_vertex[] = {
+-    {{{    88,    101,    -32}, 0, {   398,    214}, {0x1e, 0x5d, 0xb1, 0xff}}},
+-    {{{   146,     27,    -91}, 0, {  1408,   -550}, {0x03, 0x39, 0x8f, 0xff}}},
+-    {{{    34,     39,    -98}, 0, {  1306,    732}, {0xcd, 0x40, 0xa0, 0xff}}},
+-    {{{    44,    113,      0}, 0, {    10,    800}, {0x9c, 0x4d, 0x00, 0xff}}},
+-    {{{    -5,     58,      0}, 0, {   300,   1456}, {0x88, 0x28, 0x00, 0xff}}},
+-    {{{    88,    101,     33}, 0, {   294,    258}, {0x38, 0x55, 0x4b, 0xff}}},
+-    {{{    44,    113,      0}, 0, {    34,    840}, {0x9c, 0x4d, 0x00, 0xff}}},
+-    {{{    34,     39,     99}, 0, {  1314,    634}, {0xcd, 0x40, 0x60, 0xff}}},
+-    {{{   146,     27,     92}, 0, {  1132,   -556}, {0x03, 0x3a, 0x70, 0xff}}},
+-    {{{    -5,     58,      0}, 0, {   470,   1412}, {0x88, 0x28, 0x00, 0xff}}},
+-};
+-
+-// 0x04018080
+-static const Vtx mario_low_poly_face_cap_dl_vertex[] = {
+-    {{{   272,     48,    -52}, 0, {     0,      0}, {0x62, 0x27, 0xba, 0xff}}},
+-    {{{   272,     48,     53}, 0, {     0,      0}, {0x42, 0x51, 0x47, 0xff}}},
+-    {{{   149,    -87,    138}, 0, {     0,      0}, {0x43, 0xb6, 0x4d, 0xff}}},
+-    {{{   146,     27,    -91}, 0, {     0,      0}, {0x03, 0x39, 0x8f, 0xff}}},
+-    {{{   149,    -87,   -137}, 0, {     0,      0}, {0x33, 0xc2, 0x9f, 0xff}}},
+-    {{{   146,     27,     92}, 0, {     0,      0}, {0x03, 0x3a, 0x70, 0xff}}},
+-    {{{    58,   -114,     81}, 0, {     0,      0}, {0xba, 0xad, 0x40, 0xff}}},
+-    {{{    98,   -165,      0}, 0, {     0,      0}, {0xfd, 0x82, 0x00, 0xff}}},
+-    {{{    58,   -114,    -80}, 0, {     0,      0}, {0xbc, 0xb8, 0xb2, 0xff}}},
+-    {{{   168,     79,      0}, 0, {     0,      0}, {0xd9, 0x78, 0x00, 0xff}}},
+-    {{{   175,    154,      0}, 0, {     0,      0}, {0xe1, 0x6c, 0xc6, 0xff}}},
+-    {{{   174,     79,     -9}, 0, {     0,      0}, {0x51, 0x61, 0xfa, 0xff}}},
+-};
+-
+-// 0x04018140
+-static const Vtx mario_low_poly_face_part_cap_on_dl_vertex[] = {
+-    {{{    94,    146,     33}, 0, {     0,      0}, {0xff, 0x44, 0x6b, 0xff}}},
+-    {{{    50,    153,      0}, 0, {     0,      0}, {0xad, 0x5f, 0x00, 0xff}}},
+-    {{{    44,    113,      0}, 0, {     0,      0}, {0x9c, 0x4d, 0x00, 0xff}}},
+-    {{{    88,    101,     33}, 0, {     0,      0}, {0x38, 0x55, 0x4b, 0xff}}},
+-    {{{    94,    146,    -32}, 0, {     0,      0}, {0x3b, 0x35, 0x9e, 0xff}}},
+-    {{{    88,    101,    -32}, 0, {     0,      0}, {0x1e, 0x5d, 0xb1, 0xff}}},
+-    {{{    34,     39,     99}, 0, {     0,      0}, {0xcd, 0x40, 0x60, 0xff}}},
+-    {{{    -5,     58,      0}, 0, {     0,      0}, {0x88, 0x28, 0x00, 0xff}}},
+-    {{{     7,    -85,     79}, 0, {     0,      0}, {0xaa, 0xdc, 0x54, 0xff}}},
+-    {{{   146,     27,     92}, 0, {     0,      0}, {0x03, 0x3a, 0x70, 0xff}}},
+-    {{{     7,    -85,    -78}, 0, {     0,      0}, {0xa9, 0xc7, 0xb9, 0xff}}},
+-    {{{    34,     39,    -98}, 0, {     0,      0}, {0xcd, 0x40, 0xa0, 0xff}}},
+-    {{{   146,     27,    -91}, 0, {     0,      0}, {0x03, 0x39, 0x8f, 0xff}}},
+-};
+-
+-// 0x04018210
+-static const Vtx mario_low_poly_face_back_hair_cap_on_dl_vertex[] = {
+-    {{{    58,   -114,     81}, 0, {     0,      0}, {0xba, 0xad, 0x40, 0xff}}},
+-    {{{     7,    -85,     79}, 0, {     0,      0}, {0xaa, 0xdc, 0x54, 0xff}}},
+-    {{{     7,    -85,    -78}, 0, {     0,      0}, {0xa9, 0xc7, 0xb9, 0xff}}},
+-    {{{    58,   -114,    -80}, 0, {     0,      0}, {0xbc, 0xb8, 0xb2, 0xff}}},
+-    {{{   146,     27,     92}, 0, {     0,      0}, {0x03, 0x3a, 0x70, 0xff}}},
+-    {{{   146,     27,    -91}, 0, {     0,      0}, {0x03, 0x39, 0x8f, 0xff}}},
+-};
+-
+-// 0x04018270 - 0x04018298
+-const Gfx mario_low_poly_mario_m_logo_dl[] = {
+-    gsSPVertex(mario_low_poly_mario_m_logo_dl_vertex, 5, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+-    gsSP1Triangle( 3,  1,  0, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04018298 - 0x040182C0
+-const Gfx mario_low_poly_eyes_cap_on_dl[] = {
+-    gsSPVertex(mario_low_poly_eyes_cap_on_dl_vertex, 5, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  4, 0x0),
+-    gsSP1Triangle( 3,  2,  1, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040182C0 - 0x04018300
+-const Gfx mario_low_poly_mustache_cap_on_dl[] = {
+-    gsSPVertex(mario_low_poly_mustache_cap_on_dl_vertex, 10, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
+-    gsSP2Triangles( 2,  4,  3, 0x0,  5,  6,  7, 0x0),
+-    gsSP2Triangles( 7,  8,  5, 0x0,  6,  9,  7, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04018300 - 0x04018370
+-const Gfx mario_low_poly_face_part_cap_on_dl[] = {
+-    gsSPVertex(mario_low_poly_face_part_cap_on_dl_vertex, 13, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
+-    gsSP2Triangles( 2,  1,  4, 0x0,  2,  4,  5, 0x0),
+-    gsSP2Triangles( 4,  1,  0, 0x0,  4,  0,  3, 0x0),
+-    gsSP2Triangles( 5,  4,  3, 0x0,  6,  7,  8, 0x0),
+-    gsSP2Triangles( 9,  6,  8, 0x0,  8,  7, 10, 0x0),
+-    gsSP2Triangles(10,  7, 11, 0x0, 10, 11, 12, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04018370 - 0x040183F0
+-const Gfx mario_low_poly_face_cap_dl[] = {
+-    gsSPVertex(mario_low_poly_face_cap_dl_vertex, 12, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  4, 0x0),
+-    gsSP2Triangles( 4,  0,  2, 0x0,  2,  1,  5, 0x0),
+-    gsSP2Triangles( 6,  2,  5, 0x0,  6,  7,  2, 0x0),
+-    gsSP2Triangles( 7,  4,  2, 0x0,  3,  4,  8, 0x0),
+-    gsSP2Triangles( 4,  7,  8, 0x0,  9, 10,  3, 0x0),
+-    gsSP2Triangles(10, 11,  3, 0x0,  8,  7,  6, 0x0),
+-    gsSP2Triangles(10,  5, 11, 0x0, 10,  9,  5, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040183F0 - 0x04018420
+-const Gfx mario_low_poly_face_back_hair_cap_on_dl[] = {
+-    gsSPVertex(mario_low_poly_face_back_hair_cap_on_dl_vertex, 6, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
+-    gsSP2Triangles( 4,  1,  0, 0x0,  3,  2,  5, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04018420 - 0x04018460
+-const Gfx mario_low_poly_face_cap_on_dl[] = {
+-    gsSPDisplayList(mario_low_poly_face_part_cap_on_dl),
+-    gsSPLight(&mario_red_lights_group.l, 1),
+-    gsSPLight(&mario_red_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_face_cap_dl),
+-    gsSPLight(&mario_brown2_lights_group.l, 1),
+-    gsSPLight(&mario_brown2_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_face_back_hair_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04018460 - 0x04018530
+-const Gfx mario_low_poly_cap_on_eyes_front[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_front),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_low_poly_face_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04018530 - 0x04018600
+-const Gfx mario_low_poly_cap_on_eyes_half_closed[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_half_closed),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_low_poly_face_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04018600 - 0x040186D0
+-const Gfx mario_low_poly_cap_on_eyes_closed[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_closed),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_low_poly_face_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040186D0 - 0x040187A0
+-const Gfx mario_low_poly_cap_on_eyes_right[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_right),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_low_poly_face_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040187A0 - 0x04018870
+-const Gfx mario_low_poly_cap_on_eyes_left[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_left),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_low_poly_face_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04018870 - 0x04018940
+-const Gfx mario_low_poly_cap_on_eyes_up[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_up),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_low_poly_face_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04018940 - 0x04018A10
+-const Gfx mario_low_poly_cap_on_eyes_down[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_down),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_low_poly_face_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04018A10 - 0x04018AE0
+-const Gfx mario_low_poly_cap_on_eyes_dead[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_dead),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_low_poly_face_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04018AE0 - 0x04018B18
+-const Gfx mario_metal_low_poly_cap_on[] = {
+-    gsSPDisplayList(mario_low_poly_mario_m_logo_dl),
+-    gsSPDisplayList(mario_low_poly_eyes_cap_on_dl),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_on_dl),
+-    gsSPDisplayList(mario_low_poly_face_part_cap_on_dl),
+-    gsSPDisplayList(mario_low_poly_face_cap_dl),
+-    gsSPDisplayList(mario_low_poly_face_back_hair_cap_on_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04018B18
+-static const Vtx mario_low_poly_mario_eyes_cap_off_dl_vertex[] = {
+-    {{{   146,     27,     92}, 0, {  1316,    212}, {0x16, 0x25, 0x77, 0xff}}},
+-    {{{   168,     79,      0}, 0, {   458,     68}, {0x27, 0x78, 0x00, 0xff}}},
+-    {{{    88,    101,     33}, 0, {   762,    990}, {0x38, 0x55, 0x4b, 0xff}}},
+-    {{{    88,    101,    -32}, 0, {   154,    990}, {0x1e, 0x5d, 0xb1, 0xff}}},
+-    {{{   146,     27,    -91}, 0, {  -398,    212}, {0x14, 0x26, 0x89, 0xff}}},
+-};
+-
+-// 0x04018B68
+-static const Vtx mario_low_poly_mustache_cap_off_dl_vertex[] = {
+-    {{{    34,     39,    -98}, 0, {  1306,    732}, {0xcd, 0x40, 0xa0, 0xff}}},
+-    {{{    44,    113,      0}, 0, {    10,    800}, {0x9c, 0x4d, 0x00, 0xff}}},
+-    {{{    88,    101,    -32}, 0, {   398,    214}, {0x1e, 0x5d, 0xb1, 0xff}}},
+-    {{{    -5,     58,      0}, 0, {   300,   1456}, {0x88, 0x28, 0x00, 0xff}}},
+-    {{{   146,     27,    -91}, 0, {  1408,   -550}, {0x14, 0x26, 0x89, 0xff}}},
+-    {{{    88,    101,     33}, 0, {   294,    258}, {0x38, 0x55, 0x4b, 0xff}}},
+-    {{{    44,    113,      0}, 0, {    34,    840}, {0x9c, 0x4d, 0x00, 0xff}}},
+-    {{{    34,     39,     99}, 0, {  1314,    634}, {0xcd, 0x40, 0x60, 0xff}}},
+-    {{{    -5,     58,      0}, 0, {   470,   1412}, {0x88, 0x28, 0x00, 0xff}}},
+-    {{{   146,     27,     92}, 0, {  1132,   -556}, {0x16, 0x25, 0x77, 0xff}}},
+-};
+-
+-// 0x04018C08
+-static const Vtx mario_low_poly_face_part_cap_off_dl_vertex[] = {
+-    {{{    44,    113,      0}, 0, {     0,      0}, {0x9c, 0x4d, 0x00, 0xff}}},
+-    {{{    94,    146,    -32}, 0, {     0,      0}, {0x3b, 0x35, 0x9e, 0xff}}},
+-    {{{    88,    101,    -32}, 0, {     0,      0}, {0x1e, 0x5d, 0xb1, 0xff}}},
+-    {{{    50,    153,      0}, 0, {     0,      0}, {0xad, 0x5f, 0x00, 0xff}}},
+-    {{{    88,    101,     33}, 0, {     0,      0}, {0x38, 0x55, 0x4b, 0xff}}},
+-    {{{    94,    146,     33}, 0, {     0,      0}, {0xff, 0x44, 0x6b, 0xff}}},
+-    {{{   146,     27,     92}, 0, {     0,      0}, {0x16, 0x25, 0x77, 0xff}}},
+-    {{{    34,     39,     99}, 0, {     0,      0}, {0xcd, 0x40, 0x60, 0xff}}},
+-    {{{     7,    -85,     79}, 0, {     0,      0}, {0xaa, 0xdc, 0x54, 0xff}}},
+-    {{{    -5,     58,      0}, 0, {     0,      0}, {0x88, 0x28, 0x00, 0xff}}},
+-    {{{     7,    -85,    -78}, 0, {     0,      0}, {0xa9, 0xc7, 0xb9, 0xff}}},
+-    {{{    34,     39,    -98}, 0, {     0,      0}, {0xcd, 0x40, 0xa0, 0xff}}},
+-    {{{   146,     27,    -91}, 0, {     0,      0}, {0x14, 0x26, 0x89, 0xff}}},
+-};
+-
+-// 0x04018CD8
+-static const Vtx mario_low_poly_face_hair_cap_off_dl_vertex[] = {
+-    {{{    58,   -114,     81}, 0, {     0,      0}, {0xd3, 0x9b, 0x3d, 0xff}}},
+-    {{{     7,    -85,     79}, 0, {     0,      0}, {0xaa, 0xdc, 0x54, 0xff}}},
+-    {{{     7,    -85,    -78}, 0, {     0,      0}, {0xa9, 0xc7, 0xb9, 0xff}}},
+-    {{{   146,     27,     92}, 0, {     0,      0}, {0x16, 0x25, 0x77, 0xff}}},
+-    {{{   167,   -121,     77}, 0, {     0,      0}, {0x3c, 0xad, 0x4a, 0xff}}},
+-    {{{    58,   -114,    -80}, 0, {     0,      0}, {0xd8, 0xa3, 0xb5, 0xff}}},
+-    {{{    90,   -136,      0}, 0, {     0,      0}, {0xf0, 0x83, 0x00, 0xff}}},
+-    {{{   146,     27,    -91}, 0, {     0,      0}, {0x14, 0x26, 0x89, 0xff}}},
+-    {{{   167,   -121,    -81}, 0, {     0,      0}, {0x3a, 0xad, 0xb5, 0xff}}},
+-    {{{   218,     48,    -52}, 0, {     0,      0}, {0x5f, 0x3b, 0xc6, 0xff}}},
+-    {{{   168,     79,      0}, 0, {     0,      0}, {0x27, 0x78, 0x00, 0xff}}},
+-    {{{   192,    -28,    -80}, 0, {     0,      0}, {0x55, 0xf7, 0xa3, 0xff}}},
+-    {{{   223,    -38,     -1}, 0, {     0,      0}, {0x7b, 0xe2, 0x00, 0xff}}},
+-    {{{   218,     48,     53}, 0, {     0,      0}, {0x60, 0x39, 0x3a, 0xff}}},
+-    {{{   192,    -28,     78}, 0, {     0,      0}, {0x56, 0xf4, 0x5c, 0xff}}},
+-};
+-
+-// 0x04018DC8 - 0x04018DF0
+-const Gfx mario_low_poly_mario_eyes_cap_off_dl[] = {
+-    gsSPVertex(mario_low_poly_mario_eyes_cap_off_dl_vertex, 5, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  4, 0x0),
+-    gsSP1Triangle( 3,  2,  1, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04018DF0 - 0x04018E30
+-const Gfx mario_low_poly_mustache_cap_off_dl[] = {
+-    gsSPVertex(mario_low_poly_mustache_cap_off_dl_vertex, 10, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
+-    gsSP2Triangles( 2,  4,  0, 0x0,  5,  6,  7, 0x0),
+-    gsSP2Triangles( 6,  8,  7, 0x0,  7,  9,  5, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04018E30 - 0x04018EA0
+-const Gfx mario_low_poly_face_part_cap_off_dl[] = {
+-    gsSPVertex(mario_low_poly_face_part_cap_off_dl_vertex, 13, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
+-    gsSP2Triangles( 4,  5,  0, 0x0,  5,  3,  0, 0x0),
+-    gsSP2Triangles( 1,  3,  5, 0x0,  2,  1,  4, 0x0),
+-    gsSP2Triangles( 1,  5,  4, 0x0,  6,  7,  8, 0x0),
+-    gsSP2Triangles( 7,  9,  8, 0x0,  8,  9, 10, 0x0),
+-    gsSP2Triangles(10,  9, 11, 0x0, 10, 11, 12, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04018EA0 - 0x04018F68
+-const Gfx mario_low_poly_face_hair_cap_off_dl[] = {
+-    gsSPVertex(mario_low_poly_face_hair_cap_off_dl_vertex, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
+-    gsSP2Triangles( 0,  4,  3, 0x0,  0,  2,  5, 0x0),
+-    gsSP2Triangles( 5,  6,  0, 0x0,  0,  6,  4, 0x0),
+-    gsSP2Triangles( 5,  2,  7, 0x0,  7,  8,  5, 0x0),
+-    gsSP2Triangles( 8,  6,  5, 0x0,  9,  7, 10, 0x0),
+-    gsSP2Triangles( 7,  9, 11, 0x0,  7, 11,  8, 0x0),
+-    gsSP2Triangles( 6,  8,  4, 0x0,  8, 11, 12, 0x0),
+-    gsSP2Triangles( 4,  8, 12, 0x0, 11,  9, 12, 0x0),
+-    gsSP2Triangles(13, 14, 12, 0x0, 14,  4, 12, 0x0),
+-    gsSP2Triangles( 4, 14,  3, 0x0, 13, 10,  3, 0x0),
+-    gsSP2Triangles(14, 13,  3, 0x0,  9, 10, 13, 0x0),
+-    gsSP1Triangle( 9, 13, 12, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04018F68 - 0x04018F90
+-const Gfx mario_low_poly_face_cap_off_dl[] = {
+-    gsSPDisplayList(mario_low_poly_face_part_cap_off_dl),
+-    gsSPLight(&mario_brown2_lights_group.l, 1),
+-    gsSPLight(&mario_brown2_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_face_hair_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04018F90 - 0x04019040
+-const Gfx mario_low_poly_cap_off_eyes_front[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_front),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_low_poly_face_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04019040 - 0x040190F0
+-const Gfx mario_low_poly_cap_off_eyes_half_closed[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_half_closed),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_low_poly_face_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040190F0 - 0x040191A0
+-const Gfx mario_low_poly_cap_off_eyes_closed[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_closed),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_low_poly_face_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040191A0 - 0x04019250
+-const Gfx mario_low_poly_cap_off_eyes_right[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_right),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_low_poly_face_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04019250 - 0x04019300
+-const Gfx mario_low_poly_cap_off_eyes_left[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_left),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_low_poly_face_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04019300 - 0x040193B0
+-const Gfx mario_low_poly_cap_off_eyes_up[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_up),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_low_poly_face_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x040193B0 - 0x04019460
+-const Gfx mario_low_poly_cap_off_eyes_down[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_down),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_low_poly_face_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04019460 - 0x04019510
+-const Gfx mario_low_poly_cap_off_eyes_dead[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_eyes_dead),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_beige_lights_group.l, 1),
+-    gsSPLight(&mario_beige_lights_group.a, 2),
+-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_mustache),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_low_poly_face_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04019510 - 0x04019538
+-const Gfx mario_metal_low_poly_cap_off[] = {
+-    gsSPDisplayList(mario_low_poly_mario_eyes_cap_off_dl),
+-    gsSPDisplayList(mario_low_poly_mustache_cap_off_dl),
+-    gsSPDisplayList(mario_low_poly_face_part_cap_off_dl),
+-    gsSPDisplayList(mario_low_poly_face_hair_cap_off_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04019538
+-static const Vtx mario_left_hand_open_shared_dl_vertex_group1[] = {
+-    {{{   121,     73,    -21}, 0, {     0,      0}, {0x47, 0x60, 0x2b, 0x00}}},
+-    {{{    70,     89,    -20}, 0, {     0,      0}, {0xec, 0x7c, 0xf6, 0x00}}},
+-    {{{    77,     41,     21}, 0, {     0,      0}, {0x1d, 0x2a, 0x74, 0x00}}},
+-    {{{   141,     34,     -7}, 0, {     0,      0}, {0x77, 0x0c, 0x29, 0x00}}},
+-    {{{    78,     59,    -34}, 0, {     0,      0}, {0xfe, 0x0b, 0x82, 0x00}}},
+-    {{{   119,     70,    -42}, 0, {     0,      0}, {0x3d, 0x44, 0xa9, 0x00}}},
+-    {{{   133,     28,    -40}, 0, {     0,      0}, {0x45, 0xc9, 0xa6, 0x00}}},
+-    {{{    83,    -17,     10}, 0, {     0,      0}, {0x4d, 0xbd, 0x4a, 0x00}}},
+-    {{{    26,    -32,      6}, 0, {     0,      0}, {0x34, 0xa6, 0x47, 0x00}}},
+-    {{{    45,    -34,     10}, 0, {     0,      0}, {0xfe, 0x9a, 0x4a, 0x00}}},
+-    {{{    26,     16,     28}, 0, {     0,      0}, {0xda, 0x0c, 0x78, 0x00}}},
+-    {{{    41,    -37,    -36}, 0, {     0,      0}, {0xd8, 0x9b, 0xbf, 0x00}}},
+-    {{{    20,    -27,    -27}, 0, {     0,      0}, {0x09, 0xbf, 0x94, 0x00}}},
+-    {{{    25,     -1,    -44}, 0, {     0,      0}, {0xe4, 0xe0, 0x89, 0x00}}},
+-};
+-
+-// 0x04019618
+-static const Vtx mario_left_hand_open_shared_dl_vertex_group2[] = {
+-    {{{    -3,     35,     -9}, 0, {     0,      0}, {0xcd, 0x72, 0x13, 0x00}}},
+-    {{{     6,     53,     -9}, 0, {     0,      0}, {0xaf, 0x61, 0x00, 0x00}}},
+-    {{{    11,     29,    -52}, 0, {     0,      0}, {0xba, 0x2a, 0xa0, 0x00}}},
+-    {{{    26,     16,     28}, 0, {     0,      0}, {0xda, 0x0c, 0x78, 0x00}}},
+-    {{{     1,    -33,    -23}, 0, {     0,      0}, {0x9c, 0xbb, 0xe0, 0x00}}},
+-    {{{     6,    -38,      7}, 0, {     0,      0}, {0xae, 0xab, 0x2b, 0x00}}},
+-    {{{    -6,     -3,     17}, 0, {     0,      0}, {0x90, 0xda, 0x2d, 0x00}}},
+-    {{{     2,      3,     26}, 0, {     0,      0}, {0xf5, 0x17, 0x7c, 0x00}}},
+-    {{{    20,    -46,     12}, 0, {     0,      0}, {0x26, 0x9e, 0x45, 0x00}}},
+-    {{{    26,    -32,      6}, 0, {     0,      0}, {0x34, 0xa6, 0x47, 0x00}}},
+-    {{{   -17,     40,     -8}, 0, {     0,      0}, {0xbc, 0x68, 0x16, 0x00}}},
+-    {{{   -10,     14,    -43}, 0, {     0,      0}, {0xd3, 0x19, 0x8d, 0x00}}},
+-    {{{    20,    -27,    -27}, 0, {     0,      0}, {0x09, 0xbf, 0x94, 0x00}}},
+-    {{{    13,    -39,    -31}, 0, {     0,      0}, {0x18, 0x9a, 0xba, 0x00}}},
+-    {{{   -20,     22,     -7}, 0, {     0,      0}, {0x83, 0x06, 0x14, 0x00}}},
+-    {{{    70,     89,    -20}, 0, {     0,      0}, {0xec, 0x7c, 0xf6, 0x00}}},
+-};
+-
+-// 0x04019718
+-static const Vtx mario_left_hand_open_shared_dl_vertex_group3[] = {
+-    {{{    45,    -34,     10}, 0, {     0,      0}, {0xfe, 0x9a, 0x4a, 0x00}}},
+-    {{{    83,    -17,     10}, 0, {     0,      0}, {0x4d, 0xbd, 0x4a, 0x00}}},
+-    {{{    26,     16,     28}, 0, {     0,      0}, {0xda, 0x0c, 0x78, 0x00}}},
+-    {{{    89,    -47,    -37}, 0, {     0,      0}, {0x56, 0xaa, 0xdf, 0x00}}},
+-    {{{    76,    -18,    -48}, 0, {     0,      0}, {0x27, 0x0a, 0x88, 0x00}}},
+-    {{{    89,     -6,    -27}, 0, {     0,      0}, {0x5c, 0xf5, 0xab, 0x00}}},
+-    {{{     6,     53,     -9}, 0, {     0,      0}, {0xaf, 0x61, 0x00, 0x00}}},
+-    {{{    26,     41,    -41}, 0, {     0,      0}, {0x05, 0x34, 0x8d, 0x00}}},
+-    {{{    11,     29,    -52}, 0, {     0,      0}, {0xba, 0x2a, 0xa0, 0x00}}},
+-    {{{   141,     34,     -7}, 0, {     0,      0}, {0x77, 0x0c, 0x29, 0x00}}},
+-    {{{    77,     41,     21}, 0, {     0,      0}, {0x1d, 0x2a, 0x74, 0x00}}},
+-    {{{   133,     28,    -40}, 0, {     0,      0}, {0x45, 0xc9, 0xa6, 0x00}}},
+-    {{{    69,     10,    -36}, 0, {     0,      0}, {0x35, 0x1c, 0x91, 0x00}}},
+-    {{{    78,     59,    -34}, 0, {     0,      0}, {0xfe, 0x0b, 0x82, 0x00}}},
+-    {{{   121,     73,    -21}, 0, {     0,      0}, {0x47, 0x60, 0x2b, 0x00}}},
+-    {{{   119,     70,    -42}, 0, {     0,      0}, {0x3d, 0x44, 0xa9, 0x00}}},
+-};
+-
+-// 0x04019818
+-static const Vtx mario_left_hand_open_shared_dl_vertex_group4[] = {
+-    {{{    25,     -1,    -44}, 0, {     0,      0}, {0xe4, 0xe0, 0x89, 0x00}}},
+-    {{{    11,     29,    -52}, 0, {     0,      0}, {0xba, 0x2a, 0xa0, 0x00}}},
+-    {{{    26,     41,    -41}, 0, {     0,      0}, {0x05, 0x34, 0x8d, 0x00}}},
+-    {{{    78,     59,    -34}, 0, {     0,      0}, {0xfe, 0x0b, 0x82, 0x00}}},
+-    {{{    69,     10,    -36}, 0, {     0,      0}, {0x35, 0x1c, 0x91, 0x00}}},
+-    {{{    89,    -47,    -37}, 0, {     0,      0}, {0x56, 0xaa, 0xdf, 0x00}}},
+-    {{{    41,    -37,    -36}, 0, {     0,      0}, {0xd8, 0x9b, 0xbf, 0x00}}},
+-    {{{    76,    -18,    -48}, 0, {     0,      0}, {0x27, 0x0a, 0x88, 0x00}}},
+-    {{{    45,    -34,     10}, 0, {     0,      0}, {0xfe, 0x9a, 0x4a, 0x00}}},
+-    {{{    89,     -6,    -27}, 0, {     0,      0}, {0x5c, 0xf5, 0xab, 0x00}}},
+-    {{{    83,    -17,     10}, 0, {     0,      0}, {0x4d, 0xbd, 0x4a, 0x00}}},
+-    {{{    70,     89,    -20}, 0, {     0,      0}, {0xec, 0x7c, 0xf6, 0x00}}},
+-    {{{     6,     53,     -9}, 0, {     0,      0}, {0xaf, 0x61, 0x00, 0x00}}},
+-    {{{   133,     28,    -40}, 0, {     0,      0}, {0x45, 0xc9, 0xa6, 0x00}}},
+-    {{{    77,     41,     21}, 0, {     0,      0}, {0x1d, 0x2a, 0x74, 0x00}}},
+-    {{{    26,     16,     28}, 0, {     0,      0}, {0xda, 0x0c, 0x78, 0x00}}},
+-};
+-
+-// 0x04019918
+-static const Vtx mario_left_hand_open_shared_dl_vertex_group5[] = {
+-    {{{     6,    -38,      7}, 0, {     0,      0}, {0xae, 0xab, 0x2b, 0x00}}},
+-    {{{     1,    -33,    -23}, 0, {     0,      0}, {0x9c, 0xbb, 0xe0, 0x00}}},
+-    {{{    13,    -39,    -31}, 0, {     0,      0}, {0x18, 0x9a, 0xba, 0x00}}},
+-    {{{   -15,      4,    -32}, 0, {     0,      0}, {0x89, 0xdd, 0xe7, 0x00}}},
+-    {{{   -10,     14,    -43}, 0, {     0,      0}, {0xd3, 0x19, 0x8d, 0x00}}},
+-    {{{   -20,     22,     -7}, 0, {     0,      0}, {0x83, 0x06, 0x14, 0x00}}},
+-    {{{    -6,     -3,     17}, 0, {     0,      0}, {0x90, 0xda, 0x2d, 0x00}}},
+-    {{{     2,      3,     26}, 0, {     0,      0}, {0xf5, 0x17, 0x7c, 0x00}}},
+-    {{{    20,    -27,    -27}, 0, {     0,      0}, {0x09, 0xbf, 0x94, 0x00}}},
+-    {{{    26,    -32,      6}, 0, {     0,      0}, {0x34, 0xa6, 0x47, 0x00}}},
+-    {{{     1,     15,    -37}, 0, {     0,      0}, {0xd2, 0x09, 0x8b, 0x00}}},
+-    {{{    -3,     35,     -9}, 0, {     0,      0}, {0xcd, 0x72, 0x13, 0x00}}},
+-    {{{    11,      5,     17}, 0, {     0,      0}, {0xff, 0x1b, 0x7c, 0x00}}},
+-    {{{    26,     16,     28}, 0, {     0,      0}, {0xda, 0x0c, 0x78, 0x00}}},
+-    {{{    11,     29,    -52}, 0, {     0,      0}, {0xba, 0x2a, 0xa0, 0x00}}},
+-    {{{    25,     -1,    -44}, 0, {     0,      0}, {0xe4, 0xe0, 0x89, 0x00}}},
+-};
+-
+-// 0x04019A18
+-static const Vtx mario_left_hand_open_shared_dl_vertex_group6[] = {
+-    {{{    26,    -32,      6}, 0, {     0,      0}, {0x34, 0xa6, 0x47, 0x00}}},
+-    {{{    20,    -27,    -27}, 0, {     0,      0}, {0x09, 0xbf, 0x94, 0x00}}},
+-    {{{    41,    -37,    -36}, 0, {     0,      0}, {0xd8, 0x9b, 0xbf, 0x00}}},
+-    {{{    26,     16,     28}, 0, {     0,      0}, {0xda, 0x0c, 0x78, 0x00}}},
+-    {{{    11,      5,     17}, 0, {     0,      0}, {0xff, 0x1b, 0x7c, 0x00}}},
+-};
+-
+-// 0x04019A68 - 0x04019CA0
+-const Gfx mario_left_hand_open_shared_dl[] = {
+-    gsSPVertex(mario_left_hand_open_shared_dl_vertex_group1, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  6,  3,  7, 0x0),
+-    gsSP2Triangles( 1,  0,  5, 0x0,  5,  4,  1, 0x0),
+-    gsSP2Triangles( 5,  3,  6, 0x0,  8,  9, 10, 0x0),
+-    gsSP2Triangles( 8, 11,  9, 0x0, 12, 13, 11, 0x0),
+-    gsSPVertex(mario_left_hand_open_shared_dl_vertex_group2, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  8,  9, 0x0),
+-    gsSP2Triangles( 0, 10,  7, 0x0, 11, 10,  0, 0x0),
+-    gsSP2Triangles(12, 13, 11, 0x0,  9,  8, 13, 0x0),
+-    gsSP2Triangles( 7,  5,  8, 0x0, 10, 14,  7, 0x0),
+-    gsSP2Triangles(11, 14, 10, 0x0, 13,  4, 11, 0x0),
+-    gsSP2Triangles( 8,  5, 13, 0x0,  3, 15,  1, 0x0),
+-    gsSPVertex(mario_left_hand_open_shared_dl_vertex_group3, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
+-    gsSP2Triangles( 4,  5,  3, 0x0,  6,  7,  8, 0x0),
+-    gsSP2Triangles( 1,  9, 10, 0x0,  5, 11,  1, 0x0),
+-    gsSP2Triangles(12, 13,  5, 0x0, 14,  9, 15, 0x0),
+-    gsSP1Triangle( 4,  7, 12, 0x0),
+-    gsSPVertex(mario_left_hand_open_shared_dl_vertex_group4, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  4, 0x0),
+-    gsSP2Triangles( 5,  6,  7, 0x0,  7,  0,  2, 0x0),
+-    gsSP2Triangles( 8,  6,  5, 0x0,  5,  9, 10, 0x0),
+-    gsSP2Triangles(11,  3,  2, 0x0,  2, 12, 11, 0x0),
+-    gsSP2Triangles( 3, 13,  9, 0x0,  6,  0,  7, 0x0),
+-    gsSP2Triangles( 7,  4,  9, 0x0, 10, 14, 15, 0x0),
+-    gsSP1Triangle(15, 14, 11, 0x0),
+-    gsSPVertex(mario_left_hand_open_shared_dl_vertex_group5, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  4, 0x0),
+-    gsSP2Triangles( 4,  3,  5, 0x0,  5,  6,  7, 0x0),
+-    gsSP2Triangles( 7,  6,  0, 0x0,  2,  8,  9, 0x0),
+-    gsSP2Triangles( 4, 10,  8, 0x0, 11, 10,  4, 0x0),
+-    gsSP2Triangles( 7, 12, 11, 0x0,  9, 12,  7, 0x0),
+-    gsSP2Triangles( 6,  3,  1, 0x0,  6,  5,  3, 0x0),
+-    gsSP2Triangles(11, 12, 13, 0x0, 14, 10, 11, 0x0),
+-    gsSP2Triangles( 8, 10, 15, 0x0, 10, 14, 15, 0x0),
+-    gsSPVertex(mario_left_hand_open_shared_dl_vertex_group6, 5, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  0, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04019CA0 - 0x04019CC0
+-const Gfx mario_left_hand_open[] = {
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPDisplayList(mario_left_hand_open_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x04019CC0
+-static const Vtx mario_right_hand_open_dl_vertex_group1[] = {
+-    {{{    81,     37,    -28}, 0, {     0,      0}, {0x18, 0x20, 0x88, 0x00}}},
+-    {{{    76,     88,      9}, 0, {     0,      0}, {0xef, 0x7d, 0x00, 0x00}}},
+-    {{{   125,     71,      9}, 0, {     0,      0}, {0x47, 0x5a, 0xcb, 0x00}}},
+-    {{{   143,     31,     -1}, 0, {     0,      0}, {0x75, 0x06, 0xd2, 0x00}}},
+-    {{{   136,     28,     31}, 0, {     0,      0}, {0x4a, 0xcf, 0x5a, 0x00}}},
+-    {{{   124,     69,     30}, 0, {     0,      0}, {0x44, 0x49, 0x4d, 0x00}}},
+-    {{{    84,     59,     25}, 0, {     0,      0}, {0x04, 0x15, 0x7c, 0x00}}},
+-    {{{    86,    -19,    -13}, 0, {     0,      0}, {0x49, 0xb6, 0xb8, 0x00}}},
+-    {{{    30,     13,    -30}, 0, {     0,      0}, {0xd3, 0x03, 0x8a, 0x00}}},
+-    {{{    48,    -35,     -9}, 0, {     0,      0}, {0xf7, 0x94, 0xbe, 0x00}}},
+-    {{{    30,    -32,     -4}, 0, {     0,      0}, {0x2f, 0x9f, 0xbe, 0x00}}},
+-    {{{    46,    -35,     37}, 0, {     0,      0}, {0xd8, 0xa2, 0x4a, 0x00}}},
+-    {{{    32,      2,     43}, 0, {     0,      0}, {0xe9, 0xeb, 0x7a, 0x00}}},
+-    {{{    26,    -24,     28}, 0, {     0,      0}, {0x0d, 0xc8, 0x70, 0x00}}},
+-};
+-
+-// 0x04019DA0
+-static const Vtx mario_right_hand_open_dl_vertex_group2[] = {
+-    {{{    20,     33,     48}, 0, {     0,      0}, {0xbf, 0x32, 0x60, 0x00}}},
+-    {{{    13,     53,      5}, 0, {     0,      0}, {0xb0, 0x62, 0xfc, 0x00}}},
+-    {{{     3,     36,      6}, 0, {     0,      0}, {0xce, 0x71, 0xe6, 0x00}}},
+-    {{{    30,     13,    -30}, 0, {     0,      0}, {0xd3, 0x03, 0x8a, 0x00}}},
+-    {{{     0,     -4,    -15}, 0, {     0,      0}, {0x8d, 0xda, 0xdc, 0x00}}},
+-    {{{    11,    -38,     -3}, 0, {     0,      0}, {0xa9, 0xaa, 0xe0, 0x00}}},
+-    {{{     7,    -30,     26}, 0, {     0,      0}, {0x9b, 0xc0, 0x29, 0x00}}},
+-    {{{    30,    -32,     -4}, 0, {     0,      0}, {0x2f, 0x9f, 0xbe, 0x00}}},
+-    {{{    25,    -46,     -9}, 0, {     0,      0}, {0x21, 0x97, 0xc1, 0x00}}},
+-    {{{     7,      1,    -26}, 0, {     0,      0}, {0xee, 0x0d, 0x84, 0x00}}},
+-    {{{    -9,     41,      5}, 0, {     0,      0}, {0xbc, 0x66, 0xe5, 0x00}}},
+-    {{{    -1,     18,     42}, 0, {     0,      0}, {0xd9, 0x23, 0x73, 0x00}}},
+-    {{{    19,    -36,     33}, 0, {     0,      0}, {0x1a, 0xa0, 0x4d, 0x00}}},
+-    {{{    26,    -24,     28}, 0, {     0,      0}, {0x0d, 0xc8, 0x70, 0x00}}},
+-    {{{   -12,     23,      6}, 0, {     0,      0}, {0x83, 0x07, 0xf1, 0x00}}},
+-    {{{    76,     88,      9}, 0, {     0,      0}, {0xef, 0x7d, 0x00, 0x00}}},
+-};
+-
+-// 0x04019EA0
+-static const Vtx mario_right_hand_open_dl_vertex_group3[] = {
+-    {{{    30,     13,    -30}, 0, {     0,      0}, {0xd3, 0x03, 0x8a, 0x00}}},
+-    {{{    86,    -19,    -13}, 0, {     0,      0}, {0x49, 0xb6, 0xb8, 0x00}}},
+-    {{{    48,    -35,     -9}, 0, {     0,      0}, {0xf7, 0x94, 0xbe, 0x00}}},
+-    {{{    93,    -45,     36}, 0, {     0,      0}, {0x57, 0xac, 0x23, 0x00}}},
+-    {{{    93,     -5,     22}, 0, {     0,      0}, {0x61, 0xfa, 0x50, 0x00}}},
+-    {{{    81,    -15,     45}, 0, {     0,      0}, {0x2f, 0x13, 0x74, 0x00}}},
+-    {{{    20,     33,     48}, 0, {     0,      0}, {0xbf, 0x32, 0x60, 0x00}}},
+-    {{{    34,     43,     36}, 0, {     0,      0}, {0x0c, 0x3d, 0x6e, 0x00}}},
+-    {{{    13,     53,      5}, 0, {     0,      0}, {0xb0, 0x62, 0xfc, 0x00}}},
+-    {{{    81,     37,    -28}, 0, {     0,      0}, {0x18, 0x20, 0x88, 0x00}}},
+-    {{{   143,     31,     -1}, 0, {     0,      0}, {0x75, 0x06, 0xd2, 0x00}}},
+-    {{{   136,     28,     31}, 0, {     0,      0}, {0x4a, 0xcf, 0x5a, 0x00}}},
+-    {{{    84,     59,     25}, 0, {     0,      0}, {0x04, 0x15, 0x7c, 0x00}}},
+-    {{{    75,     11,     32}, 0, {     0,      0}, {0x3c, 0x23, 0x69, 0x00}}},
+-    {{{   124,     69,     30}, 0, {     0,      0}, {0x44, 0x49, 0x4d, 0x00}}},
+-    {{{   125,     71,      9}, 0, {     0,      0}, {0x47, 0x5a, 0xcb, 0x00}}},
+-};
+-
+-// 0x04019FA0
+-static const Vtx mario_right_hand_open_dl_vertex_group4[] = {
+-    {{{    34,     43,     36}, 0, {     0,      0}, {0x0c, 0x3d, 0x6e, 0x00}}},
+-    {{{    20,     33,     48}, 0, {     0,      0}, {0xbf, 0x32, 0x60, 0x00}}},
+-    {{{    32,      2,     43}, 0, {     0,      0}, {0xe9, 0xeb, 0x7a, 0x00}}},
+-    {{{    75,     11,     32}, 0, {     0,      0}, {0x3c, 0x23, 0x69, 0x00}}},
+-    {{{    84,     59,     25}, 0, {     0,      0}, {0x04, 0x15, 0x7c, 0x00}}},
+-    {{{    81,    -15,     45}, 0, {     0,      0}, {0x2f, 0x13, 0x74, 0x00}}},
+-    {{{    46,    -35,     37}, 0, {     0,      0}, {0xd8, 0xa2, 0x4a, 0x00}}},
+-    {{{    93,    -45,     36}, 0, {     0,      0}, {0x57, 0xac, 0x23, 0x00}}},
+-    {{{    48,    -35,     -9}, 0, {     0,      0}, {0xf7, 0x94, 0xbe, 0x00}}},
+-    {{{    86,    -19,    -13}, 0, {     0,      0}, {0x49, 0xb6, 0xb8, 0x00}}},
+-    {{{    93,     -5,     22}, 0, {     0,      0}, {0x61, 0xfa, 0x50, 0x00}}},
+-    {{{    76,     88,      9}, 0, {     0,      0}, {0xef, 0x7d, 0x00, 0x00}}},
+-    {{{    13,     53,      5}, 0, {     0,      0}, {0xb0, 0x62, 0xfc, 0x00}}},
+-    {{{   136,     28,     31}, 0, {     0,      0}, {0x4a, 0xcf, 0x5a, 0x00}}},
+-    {{{    30,     13,    -30}, 0, {     0,      0}, {0xd3, 0x03, 0x8a, 0x00}}},
+-    {{{    81,     37,    -28}, 0, {     0,      0}, {0x18, 0x20, 0x88, 0x00}}},
+-};
+-
+-// 0x0401A0A0
+-static const Vtx mario_right_hand_open_dl_vertex_group5[] = {
+-    {{{    19,    -36,     33}, 0, {     0,      0}, {0x1a, 0xa0, 0x4d, 0x00}}},
+-    {{{     7,    -30,     26}, 0, {     0,      0}, {0x9b, 0xc0, 0x29, 0x00}}},
+-    {{{    11,    -38,     -3}, 0, {     0,      0}, {0xa9, 0xaa, 0xe0, 0x00}}},
+-    {{{    -1,     18,     42}, 0, {     0,      0}, {0xd9, 0x23, 0x73, 0x00}}},
+-    {{{    -7,      7,     32}, 0, {     0,      0}, {0x8a, 0xe2, 0x20, 0x00}}},
+-    {{{   -12,     23,      6}, 0, {     0,      0}, {0x83, 0x07, 0xf1, 0x00}}},
+-    {{{     7,      1,    -26}, 0, {     0,      0}, {0xee, 0x0d, 0x84, 0x00}}},
+-    {{{     0,     -4,    -15}, 0, {     0,      0}, {0x8d, 0xda, 0xdc, 0x00}}},
+-    {{{    30,    -32,     -4}, 0, {     0,      0}, {0x2f, 0x9f, 0xbe, 0x00}}},
+-    {{{    26,    -24,     28}, 0, {     0,      0}, {0x0d, 0xc8, 0x70, 0x00}}},
+-    {{{     9,     18,     35}, 0, {     0,      0}, {0xd8, 0x13, 0x76, 0x00}}},
+-    {{{     3,     36,      6}, 0, {     0,      0}, {0xce, 0x71, 0xe6, 0x00}}},
+-    {{{    16,      4,    -17}, 0, {     0,      0}, {0xf9, 0x11, 0x83, 0x00}}},
+-    {{{    30,     13,    -30}, 0, {     0,      0}, {0xd3, 0x03, 0x8a, 0x00}}},
+-    {{{    20,     33,     48}, 0, {     0,      0}, {0xbf, 0x32, 0x60, 0x00}}},
+-    {{{    32,      2,     43}, 0, {     0,      0}, {0xe9, 0xeb, 0x7a, 0x00}}},
+-};
+-
+-// 0x0401A1A0
+-static const Vtx mario_right_hand_open_dl_vertex_group6[] = {
+-    {{{    46,    -35,     37}, 0, {     0,      0}, {0xd8, 0xa2, 0x4a, 0x00}}},
+-    {{{    26,    -24,     28}, 0, {     0,      0}, {0x0d, 0xc8, 0x70, 0x00}}},
+-    {{{    30,    -32,     -4}, 0, {     0,      0}, {0x2f, 0x9f, 0xbe, 0x00}}},
+-    {{{    16,      4,    -17}, 0, {     0,      0}, {0xf9, 0x11, 0x83, 0x00}}},
+-    {{{    30,     13,    -30}, 0, {     0,      0}, {0xd3, 0x03, 0x8a, 0x00}}},
+-};
+-
+-// 0x0401A1F0 - 0x0401A428
+-const Gfx mario_right_hand_open_dl[] = {
+-    gsSPVertex(mario_right_hand_open_dl_vertex_group1, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  3,  4, 0x0),
+-    gsSP2Triangles( 5,  2,  1, 0x0,  1,  6,  5, 0x0),
+-    gsSP2Triangles( 4,  3,  5, 0x0,  8,  9, 10, 0x0),
+-    gsSP2Triangles( 9, 11, 10, 0x0, 11, 12, 13, 0x0),
+-    gsSPVertex(mario_right_hand_open_dl_vertex_group2, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  2, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  8,  9, 0x0),
+-    gsSP2Triangles( 9, 10,  2, 0x0,  2, 10, 11, 0x0),
+-    gsSP2Triangles(11, 12, 13, 0x0, 12,  8,  7, 0x0),
+-    gsSP2Triangles( 8,  5,  9, 0x0,  9, 14, 10, 0x0),
+-    gsSP2Triangles(10, 14, 11, 0x0, 11,  6, 12, 0x0),
+-    gsSP2Triangles(12,  5,  8, 0x0,  1, 15,  3, 0x0),
+-    gsSPVertex(mario_right_hand_open_dl_vertex_group3, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+-    gsSP2Triangles( 3,  4,  5, 0x0,  6,  7,  8, 0x0),
+-    gsSP2Triangles( 9, 10,  1, 0x0,  1, 11,  4, 0x0),
+-    gsSP2Triangles( 4, 12, 13, 0x0, 14, 10, 15, 0x0),
+-    gsSP1Triangle(13,  7,  5, 0x0),
+-    gsSPVertex(mario_right_hand_open_dl_vertex_group4, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  0, 0x0),
+-    gsSP2Triangles( 5,  6,  7, 0x0,  0,  2,  5, 0x0),
+-    gsSP2Triangles( 7,  6,  8, 0x0,  9, 10,  7, 0x0),
+-    gsSP2Triangles( 0,  4, 11, 0x0, 11, 12,  0, 0x0),
+-    gsSP2Triangles(10, 13,  4, 0x0,  5,  2,  6, 0x0),
+-    gsSP2Triangles(10,  3,  5, 0x0, 14, 15,  9, 0x0),
+-    gsSP1Triangle(11, 15, 14, 0x0),
+-    gsSPVertex(mario_right_hand_open_dl_vertex_group5, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+-    gsSP2Triangles( 5,  4,  3, 0x0,  6,  7,  5, 0x0),
+-    gsSP2Triangles( 2,  7,  6, 0x0,  8,  9,  0, 0x0),
+-    gsSP2Triangles( 9, 10,  3, 0x0,  3, 10, 11, 0x0),
+-    gsSP2Triangles(11, 12,  6, 0x0,  6, 12,  8, 0x0),
+-    gsSP2Triangles( 1,  4,  7, 0x0,  4,  5,  7, 0x0),
+-    gsSP2Triangles(13, 12, 11, 0x0, 11, 10, 14, 0x0),
+-    gsSP2Triangles(15, 10,  9, 0x0, 15, 14, 10, 0x0),
+-    gsSPVertex(mario_right_hand_open_dl_vertex_group6, 5, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  4, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401A428 - 0x0401A448
+-const Gfx mario_right_hand_open[] = {
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPDisplayList(mario_right_hand_open_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401A448 - 0x0401A478
+-const Gfx mario_metal_right_hand_open[] = {
+-    gsSPDisplayList(mario_right_hand_open_dl),
+-    gsDPPipeSync(),
+-    gsSPClearGeometryMode(G_TEXTURE_GEN),
+-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401A478
+-static const Vtx mario_right_hand_cap_m_logo_dl_vertex[] = {
+-    {{{   131,     47,     -1}, 0, {  1104,    228}, {0xd7, 0x60, 0xb8, 0xff}}},
+-    {{{   107,    -19,    -33}, 0, {   474,     32}, {0xd1, 0x0e, 0x8c, 0xff}}},
+-    {{{    78,     11,     40}, 0, {   772,    818}, {0xd0, 0x3e, 0x9d, 0xff}}},
+-    {{{    70,    -52,     35}, 0, {   196,    800}, {0xc5, 0xde, 0x96, 0xff}}},
+-    {{{   114,    -92,    -11}, 0, {  -148,    188}, {0xc4, 0xb8, 0xac, 0xff}}},
+-};
+-
+-// 0x0401A4C8
+-static const Vtx mario_right_hand_cap_hand_position_dl_vertex_group1[] = {
+-    {{{     1,     24,     35}, 0, {     0,      0}, {0xd4, 0x3c, 0x66, 0xff}}},
+-    {{{    29,      7,     48}, 0, {     0,      0}, {0xc3, 0xfa, 0x6e, 0xff}}},
+-    {{{    29,     62,     34}, 0, {     0,      0}, {0xcd, 0x4c, 0x57, 0xff}}},
+-    {{{    11,     60,     -3}, 0, {     0,      0}, {0xab, 0x59, 0xe6, 0xff}}},
+-    {{{    56,     11,     65}, 0, {     0,      0}, {0xfc, 0x1b, 0x7b, 0xff}}},
+-    {{{    54,     54,     44}, 0, {     0,      0}, {0x1f, 0x50, 0x5c, 0xff}}},
+-    {{{    58,     81,      0}, 0, {     0,      0}, {0x13, 0x7a, 0xe8, 0xff}}},
+-    {{{    -2,     41,      0}, 0, {     0,      0}, {0xee, 0x71, 0xca, 0xff}}},
+-    {{{    35,      9,    -36}, 0, {     0,      0}, {0xe4, 0xf4, 0x85, 0xff}}},
+-    {{{   -13,     26,     41}, 0, {     0,      0}, {0xee, 0x3c, 0x6e, 0xff}}},
+-    {{{    23,    -25,     35}, 0, {     0,      0}, {0x04, 0xc2, 0x6e, 0xff}}},
+-    {{{    75,    -32,     65}, 0, {     0,      0}, {0x08, 0xae, 0x60, 0xff}}},
+-    {{{    16,      1,    -22}, 0, {     0,      0}, {0x04, 0x00, 0x82, 0xff}}},
+-    {{{     4,     -3,    -32}, 0, {     0,      0}, {0x11, 0x06, 0x83, 0xff}}},
+-    {{{   -19,     47,     -4}, 0, {     0,      0}, {0xad, 0x54, 0xd3, 0xff}}},
+-};
+-
+-// 0x0401A5B8
+-static const Vtx mario_right_hand_cap_hand_position_dl_vertex_group2[] = {
+-    {{{   103,    -25,      1}, 0, {     0,      0}, {0x67, 0xc4, 0xd6, 0xff}}},
+-    {{{    95,     -8,     52}, 0, {     0,      0}, {0x60, 0x06, 0x52, 0xff}}},
+-    {{{    75,    -32,     65}, 0, {     0,      0}, {0x08, 0xae, 0x60, 0xff}}},
+-    {{{    31,    -39,      0}, 0, {     0,      0}, {0x42, 0xa3, 0xca, 0xff}}},
+-    {{{    23,    -25,     35}, 0, {     0,      0}, {0x04, 0xc2, 0x6e, 0xff}}},
+-    {{{    13,    -37,     41}, 0, {     0,      0}, {0x12, 0xb1, 0x61, 0xff}}},
+-    {{{    55,    -43,     -3}, 0, {     0,      0}, {0x00, 0x86, 0xe0, 0xff}}},
+-    {{{   -13,     26,     41}, 0, {     0,      0}, {0xee, 0x3c, 0x6e, 0xff}}},
+-    {{{     4,     -3,    -32}, 0, {     0,      0}, {0x11, 0x06, 0x83, 0xff}}},
+-    {{{    16,      1,    -22}, 0, {     0,      0}, {0x04, 0x00, 0x82, 0xff}}},
+-    {{{    35,      9,    -36}, 0, {     0,      0}, {0xe4, 0xf4, 0x85, 0xff}}},
+-    {{{    24,    -55,     -4}, 0, {     0,      0}, {0x04, 0x8b, 0xd1, 0xff}}},
+-    {{{    56,     11,     65}, 0, {     0,      0}, {0xfc, 0x1b, 0x7b, 0xff}}},
+-    {{{   -15,    -12,      7}, 0, {     0,      0}, {0x8c, 0xcf, 0xf8, 0xff}}},
+-    {{{    85,     15,     52}, 0, {     0,      0}, {0x40, 0x30, 0x62, 0xff}}},
+-    {{{    54,     54,     44}, 0, {     0,      0}, {0x1f, 0x50, 0x5c, 0xff}}},
+-};
+-
+-// 0x0401A6B8
+-static const Vtx mario_right_hand_cap_hand_position_dl_vertex_group3[] = {
+-    {{{    35,      9,    -36}, 0, {     0,      0}, {0xe4, 0xf4, 0x85, 0xff}}},
+-    {{{    85,     30,    -32}, 0, {     0,      0}, {0x4f, 0x21, 0xa3, 0xff}}},
+-    {{{   103,    -25,      1}, 0, {     0,      0}, {0x67, 0xc4, 0xd6, 0xff}}},
+-    {{{    58,     81,      0}, 0, {     0,      0}, {0x13, 0x7a, 0xe8, 0xff}}},
+-    {{{    24,    -55,     -4}, 0, {     0,      0}, {0x04, 0x8b, 0xd1, 0xff}}},
+-    {{{   -15,    -12,      7}, 0, {     0,      0}, {0x8c, 0xcf, 0xf8, 0xff}}},
+-    {{{     4,     -3,    -32}, 0, {     0,      0}, {0x11, 0x06, 0x83, 0xff}}},
+-    {{{   -19,     47,     -4}, 0, {     0,      0}, {0xad, 0x54, 0xd3, 0xff}}},
+-    {{{   -13,     26,     41}, 0, {     0,      0}, {0xee, 0x3c, 0x6e, 0xff}}},
+-    {{{    13,    -37,     41}, 0, {     0,      0}, {0x12, 0xb1, 0x61, 0xff}}},
+-    {{{    96,     39,     24}, 0, {     0,      0}, {0x6b, 0x39, 0x21, 0xff}}},
+-    {{{    54,     54,     44}, 0, {     0,      0}, {0x1f, 0x50, 0x5c, 0xff}}},
+-    {{{    95,     -8,     52}, 0, {     0,      0}, {0x60, 0x06, 0x52, 0xff}}},
+-    {{{    85,     15,     52}, 0, {     0,      0}, {0x40, 0x30, 0x62, 0xff}}},
+-};
+-
+-// 0x0401A798
+-static const Vtx mario_right_hand_cap_top_dl_vertex_group1[] = {
+-    {{{    29,    -82,     43}, 0, {     0,      0}, {0x95, 0xbd, 0x00, 0xff}}},
+-    {{{    70,    -52,     35}, 0, {     0,      0}, {0xc5, 0xde, 0x96, 0xff}}},
+-    {{{   106,   -124,     90}, 0, {     0,      0}, {0x9d, 0xb2, 0x09, 0xff}}},
+-    {{{    65,    -53,     55}, 0, {     0,      0}, {0xb7, 0x01, 0x67, 0xff}}},
+-    {{{   151,   -168,     67}, 0, {     0,      0}, {0xf4, 0x87, 0xdc, 0xff}}},
+-    {{{   137,   -137,    134}, 0, {     0,      0}, {0x9f, 0xdf, 0x49, 0xff}}},
+-    {{{   114,    -92,    -11}, 0, {     0,      0}, {0xc4, 0xb8, 0xac, 0xff}}},
+-    {{{   228,   -121,    117}, 0, {     0,      0}, {0x66, 0xcd, 0xcb, 0xff}}},
+-    {{{   182,    -72,     -8}, 0, {     0,      0}, {0x4d, 0xd9, 0xa4, 0xff}}},
+-    {{{   181,   -167,    138}, 0, {     0,      0}, {0x06, 0x88, 0x26, 0xff}}},
+-    {{{   171,   -129,    178}, 0, {     0,      0}, {0xb3, 0xd1, 0x58, 0xff}}},
+-    {{{   160,     65,    148}, 0, {     0,      0}, {0xb3, 0x47, 0x47, 0xff}}},
+-    {{{   211,     81,    156}, 0, {     0,      0}, {0x22, 0x6c, 0x37, 0xff}}},
+-    {{{   183,    100,     86}, 0, {     0,      0}, {0x11, 0x7c, 0xed, 0xff}}},
+-    {{{   129,     65,    103}, 0, {     0,      0}, {0xa7, 0x50, 0x27, 0xff}}},
+-};
+-
+-// 0x0401A888
+-static const Vtx mario_right_hand_cap_top_dl_vertex_group2[] = {
+-    {{{    78,     11,     40}, 0, {     0,      0}, {0xd0, 0x3e, 0x9d, 0xff}}},
+-    {{{   129,     65,    103}, 0, {     0,      0}, {0xa7, 0x50, 0x27, 0xff}}},
+-    {{{   131,     47,     -1}, 0, {     0,      0}, {0xd7, 0x60, 0xb8, 0xff}}},
+-    {{{    45,     49,     53}, 0, {     0,      0}, {0xa8, 0x5a, 0x0a, 0xff}}},
+-    {{{    73,     11,     60}, 0, {     0,      0}, {0xbb, 0xfb, 0x6a, 0xff}}},
+-    {{{   183,    100,     86}, 0, {     0,      0}, {0x11, 0x7c, 0xed, 0xff}}},
+-    {{{   192,     42,    190}, 0, {     0,      0}, {0xb3, 0x23, 0x5d, 0xff}}},
+-    {{{   211,     81,    156}, 0, {     0,      0}, {0x22, 0x6c, 0x37, 0xff}}},
+-    {{{   160,     65,    148}, 0, {     0,      0}, {0xb3, 0x47, 0x47, 0xff}}},
+-    {{{    18,    -13,     33}, 0, {     0,      0}, {0x84, 0x10, 0xed, 0xff}}},
+-    {{{    70,    -52,     35}, 0, {     0,      0}, {0xc5, 0xde, 0x96, 0xff}}},
+-    {{{   192,     11,     -2}, 0, {     0,      0}, {0x4b, 0x29, 0xa3, 0xff}}},
+-    {{{   107,    -19,    -33}, 0, {     0,      0}, {0xd1, 0x0e, 0x8c, 0xff}}},
+-    {{{   228,   -121,    117}, 0, {     0,      0}, {0x66, 0xcd, 0xcb, 0xff}}},
+-    {{{   246,     29,    128}, 0, {     0,      0}, {0x72, 0x20, 0xd4, 0xff}}},
+-    {{{   285,     -6,    196}, 0, {     0,      0}, {0x79, 0x23, 0x0b, 0xff}}},
+-};
+-
+-// 0x0401A988
+-static const Vtx mario_right_hand_cap_top_dl_vertex_group3[] = {
+-    {{{    65,    -53,     55}, 0, {     0,      0}, {0xb7, 0x01, 0x67, 0xff}}},
+-    {{{    18,    -13,     33}, 0, {     0,      0}, {0x84, 0x10, 0xed, 0xff}}},
+-    {{{    29,    -82,     43}, 0, {     0,      0}, {0x95, 0xbd, 0x00, 0xff}}},
+-    {{{    70,    -52,     35}, 0, {     0,      0}, {0xc5, 0xde, 0x96, 0xff}}},
+-    {{{    73,     11,     60}, 0, {     0,      0}, {0xbb, 0xfb, 0x6a, 0xff}}},
+-    {{{   114,    -92,    -11}, 0, {     0,      0}, {0xc4, 0xb8, 0xac, 0xff}}},
+-    {{{   107,    -19,    -33}, 0, {     0,      0}, {0xd1, 0x0e, 0x8c, 0xff}}},
+-    {{{   182,    -72,     -8}, 0, {     0,      0}, {0x4d, 0xd9, 0xa4, 0xff}}},
+-    {{{   192,     11,     -2}, 0, {     0,      0}, {0x4b, 0x29, 0xa3, 0xff}}},
+-    {{{   246,     29,    128}, 0, {     0,      0}, {0x72, 0x20, 0xd4, 0xff}}},
+-    {{{   228,   -121,    117}, 0, {     0,      0}, {0x66, 0xcd, 0xcb, 0xff}}},
+-    {{{   211,     81,    156}, 0, {     0,      0}, {0x22, 0x6c, 0x37, 0xff}}},
+-    {{{   285,     -6,    196}, 0, {     0,      0}, {0x79, 0x23, 0x0b, 0xff}}},
+-    {{{   273,   -105,    188}, 0, {     0,      0}, {0x5f, 0xbf, 0x34, 0xff}}},
+-    {{{   181,   -167,    138}, 0, {     0,      0}, {0x06, 0x88, 0x26, 0xff}}},
+-    {{{   228,      1,    228}, 0, {     0,      0}, {0x14, 0x22, 0x78, 0xff}}},
+-};
+-
+-// 0x0401AA88
+-static const Vtx mario_right_hand_cap_top_dl_vertex_group4[] = {
+-    {{{   181,   -167,    138}, 0, {     0,      0}, {0x06, 0x88, 0x26, 0xff}}},
+-    {{{   273,   -105,    188}, 0, {     0,      0}, {0x5f, 0xbf, 0x34, 0xff}}},
+-    {{{   216,   -104,    220}, 0, {     0,      0}, {0xe5, 0xcc, 0x70, 0xff}}},
+-    {{{   228,      1,    228}, 0, {     0,      0}, {0x14, 0x22, 0x78, 0xff}}},
+-    {{{   285,     -6,    196}, 0, {     0,      0}, {0x79, 0x23, 0x0b, 0xff}}},
+-    {{{   211,     81,    156}, 0, {     0,      0}, {0x22, 0x6c, 0x37, 0xff}}},
+-    {{{   192,     42,    190}, 0, {     0,      0}, {0xb3, 0x23, 0x5d, 0xff}}},
+-    {{{   171,   -129,    178}, 0, {     0,      0}, {0xb3, 0xd1, 0x58, 0xff}}},
+-};
+-
+-// 0x0401AB08
+-static const Vtx mario_right_hand_cap_bottom_dl_vertex[] = {
+-    {{{    65,    -53,     55}, 0, {     0,      0}, {0xb7, 0x01, 0x67, 0xff}}},
+-    {{{   106,   -124,     90}, 0, {     0,      0}, {0x9d, 0xb2, 0x09, 0xff}}},
+-    {{{   137,   -137,    134}, 0, {     0,      0}, {0x9f, 0xdf, 0x49, 0xff}}},
+-    {{{    73,     11,     60}, 0, {     0,      0}, {0xbb, 0xfb, 0x6a, 0xff}}},
+-    {{{   129,     65,    103}, 0, {     0,      0}, {0xa7, 0x50, 0x27, 0xff}}},
+-    {{{   160,     65,    148}, 0, {     0,      0}, {0xb3, 0x47, 0x47, 0xff}}},
+-    {{{   192,     42,    190}, 0, {     0,      0}, {0xb3, 0x23, 0x5d, 0xff}}},
+-    {{{   171,   -129,    178}, 0, {     0,      0}, {0xb3, 0xd1, 0x58, 0xff}}},
+-    {{{   216,   -104,    220}, 0, {     0,      0}, {0xe5, 0xcc, 0x70, 0xff}}},
+-    {{{   228,      1,    228}, 0, {     0,      0}, {0x14, 0x22, 0x78, 0xff}}},
+-};
+-
+-// 0x0401ABA8 - 0x0401ABD0
+-const Gfx mario_right_hand_cap_m_logo_dl[] = {
+-    gsSPVertex(mario_right_hand_cap_m_logo_dl_vertex, 5, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  2, 0x0),
+-    gsSP1Triangle( 1,  4,  3, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401ABD0 - 0x0401AD40
+-const Gfx mario_right_hand_cap_top_dl[] = {
+-    gsSPVertex(mario_right_hand_cap_top_dl_vertex_group1, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
+-    gsSP2Triangles( 2,  4,  5, 0x0,  6,  2,  1, 0x0),
+-    gsSP2Triangles( 2,  6,  4, 0x0,  7,  4,  8, 0x0),
+-    gsSP2Triangles( 8,  4,  6, 0x0,  4,  9,  5, 0x0),
+-    gsSP2Triangles( 4,  7,  9, 0x0,  5,  9, 10, 0x0),
+-    gsSP2Triangles(11, 12, 13, 0x0, 13, 14, 11, 0x0),
+-    gsSPVertex(mario_right_hand_cap_top_dl_vertex_group2, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  4, 0x0),
+-    gsSP2Triangles( 0,  3,  1, 0x0,  5,  2,  1, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  0,  9,  3, 0x0),
+-    gsSP2Triangles(10,  9,  0, 0x0, 11, 12,  2, 0x0),
+-    gsSP2Triangles( 2,  5, 11, 0x0,  3,  9,  4, 0x0),
+-    gsSP2Triangles(13, 14, 15, 0x0, 11,  5, 14, 0x0),
+-    gsSP1Triangle( 7, 14,  5, 0x0),
+-    gsSPVertex(mario_right_hand_cap_top_dl_vertex_group3, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+-    gsSP2Triangles( 0,  4,  1, 0x0,  5,  6,  7, 0x0),
+-    gsSP2Triangles( 7,  8,  9, 0x0,  7,  6,  8, 0x0),
+-    gsSP2Triangles(10,  7,  9, 0x0, 11, 12,  9, 0x0),
+-    gsSP2Triangles(10, 13, 14, 0x0, 12, 13, 10, 0x0),
+-    gsSP1Triangle(13, 12, 15, 0x0),
+-    gsSPVertex(mario_right_hand_cap_top_dl_vertex_group4, 8, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+-    gsSP2Triangles( 3,  4,  5, 0x0,  3,  5,  6, 0x0),
+-    gsSP1Triangle( 7,  0,  2, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401AD40 - 0x0401AED0
+-const Gfx mario_right_hand_cap_hand_position_dl[] = {
+-    gsSPVertex(mario_right_hand_cap_hand_position_dl_vertex_group1, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
+-    gsSP2Triangles( 2,  1,  4, 0x0,  2,  5,  6, 0x0),
+-    gsSP2Triangles( 6,  3,  2, 0x0,  5,  2,  4, 0x0),
+-    gsSP2Triangles( 3,  7,  0, 0x0,  3,  6,  8, 0x0),
+-    gsSP2Triangles( 3,  8,  7, 0x0,  9,  0,  7, 0x0),
+-    gsSP2Triangles(10,  0,  9, 0x0,  1,  0, 10, 0x0),
+-    gsSP2Triangles(11,  1, 10, 0x0, 11,  4,  1, 0x0),
+-    gsSP2Triangles( 7, 12, 13, 0x0,  8, 12,  7, 0x0),
+-    gsSP2Triangles(13, 14,  7, 0x0,  7, 14,  9, 0x0),
+-    gsSPVertex(mario_right_hand_cap_hand_position_dl_vertex_group2, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 4,  3,  6, 0x0,  6,  2,  4, 0x0),
+-    gsSP2Triangles( 7,  5,  4, 0x0,  8,  9,  3, 0x0),
+-    gsSP2Triangles( 3,  9, 10, 0x0, 10,  6,  3, 0x0),
+-    gsSP2Triangles( 5, 11,  3, 0x0,  3, 11,  8, 0x0),
+-    gsSP2Triangles(10,  0,  6, 0x0,  6,  0,  2, 0x0),
+-    gsSP2Triangles( 2,  1, 12, 0x0,  5, 13, 11, 0x0),
+-    gsSP2Triangles( 1, 14, 12, 0x0, 14, 15, 12, 0x0),
+-    gsSPVertex(mario_right_hand_cap_hand_position_dl_vertex_group3, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  1,  0, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  6,  5,  7, 0x0),
+-    gsSP2Triangles( 7,  5,  8, 0x0,  8,  5,  9, 0x0),
+-    gsSP2Triangles( 3, 10,  1, 0x0, 11, 10,  3, 0x0),
+-    gsSP2Triangles( 1, 10,  2, 0x0,  2, 10, 12, 0x0),
+-    gsSP2Triangles(12, 10, 13, 0x0, 10, 11, 13, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401AED0 - 0x0401AF20
+-const Gfx mario_right_hand_cap_bottom_dl[] = {
+-    gsSPVertex(mario_right_hand_cap_bottom_dl_vertex, 10, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
+-    gsSP2Triangles( 4,  3,  2, 0x0,  5,  4,  2, 0x0),
+-    gsSP2Triangles( 6,  5,  2, 0x0,  6,  2,  7, 0x0),
+-    gsSP2Triangles( 8,  9,  6, 0x0,  6,  7,  8, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401AF20 - 0x0401AF60
+-const Gfx mario_right_hand_cap_dl[] = {
+-    gsSPDisplayList(mario_right_hand_cap_top_dl),
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPDisplayList(mario_right_hand_cap_hand_position_dl),
+-    gsSPLight(&mario_brown2_lights_group.l, 1),
+-    gsSPLight(&mario_brown2_lights_group.a, 2),
+-    gsSPDisplayList(mario_right_hand_cap_bottom_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401AF60
+-static const Vtx mario_right_hand_cap_wings_half_1_dl_vertex[] = {
+-    {{{   368,    146,      7}, 0, {   990,      0}, {0xbe, 0x65, 0xda, 0xff}}},
+-    {{{   166,     37,     68}, 0, {     0,   2012}, {0xbe, 0x65, 0xda, 0xff}}},
+-    {{{   212,     96,    143}, 0, {   990,   2012}, {0xbe, 0x65, 0xda, 0xff}}},
+-    {{{   368,    146,      7}, 0, {   990,      0}, {0xbe, 0x64, 0xd9, 0xff}}},
+-    {{{   322,     87,    -67}, 0, {     0,      0}, {0xbe, 0x64, 0xd9, 0xff}}},
+-    {{{   166,     37,     68}, 0, {     0,   2012}, {0xbe, 0x64, 0xd9, 0xff}}},
+-    {{{   178,   -177,    128}, 0, {   990,   2012}, {0xa8, 0xb4, 0xcf, 0xff}}},
+-    {{{   149,   -100,     60}, 0, {     0,   2012}, {0xa8, 0xb4, 0xcf, 0xff}}},
+-    {{{   319,   -248,    -14}, 0, {   990,      0}, {0xa8, 0xb4, 0xcf, 0xff}}},
+-    {{{   290,   -171,    -81}, 0, {     0,      0}, {0xa8, 0xb4, 0xcf, 0xff}}},
+-};
+-
+-// 0x0401B000
+-static const Vtx mario_right_hand_cap_wings_half_2_dl_vertex[] = {
+-    {{{   414,    206,     82}, 0, {   990,      0}, {0xbe, 0x64, 0xd9, 0xff}}},
+-    {{{   212,     96,    143}, 0, {     0,   2012}, {0xbe, 0x64, 0xd9, 0xff}}},
+-    {{{   258,    156,    218}, 0, {   990,   2012}, {0xbe, 0x64, 0xd9, 0xff}}},
+-    {{{   368,    146,      7}, 0, {     0,      0}, {0xbe, 0x64, 0xd9, 0xff}}},
+-    {{{   178,   -177,    128}, 0, {     0,   2012}, {0xa8, 0xb3, 0xcf, 0xff}}},
+-    {{{   319,   -248,    -14}, 0, {     0,      0}, {0xa8, 0xb3, 0xcf, 0xff}}},
+-    {{{   349,   -325,     53}, 0, {   990,      0}, {0xa8, 0xb3, 0xcf, 0xff}}},
+-    {{{   207,   -253,    195}, 0, {   990,   2012}, {0xa8, 0xb3, 0xcf, 0xff}}},
+-};
+-
+-// 0x0401B080 - 0x0401B0B0
+-const Gfx mario_right_hand_cap_wings_half_1_dl[] = {
+-    gsSPVertex(mario_right_hand_cap_wings_half_1_dl_vertex, 10, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  7,  9,  8, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401B0B0 - 0x0401B0E0
+-const Gfx mario_right_hand_cap_wings_half_2_dl[] = {
+-    gsSPVertex(mario_right_hand_cap_wings_half_2_dl_vertex, 8, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  7,  4,  6, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401B0E0 - 0x0401B138
+-const Gfx mario_right_hand_cap_wings_intial_dl[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_MODULATERGBFADEA, G_CC_MODULATERGBFADEA),
+-    gsSPClearGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 6, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (64 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401B138 - 0x0401B158
+-const Gfx mario_right_hand_cap_wings_end_dl[] = {
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsSPSetGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401B158 - 0x0401B1D8
+-const Gfx mario_right_hand_cap[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBFADEA, G_CC_BLENDRGBFADEA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_right_hand_cap_m_logo_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPDisplayList(mario_right_hand_cap_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401B1D8 - 0x0401B230
+-const Gfx mario_right_hand_cap_wings[] = {
+-    gsSPDisplayList(mario_right_hand_cap_wings_intial_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_wings_half_1),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_right_hand_cap_wings_half_1_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_wings_half_2),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_right_hand_cap_wings_half_2_dl),
+-    gsSPDisplayList(mario_right_hand_cap_wings_end_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401B230 - 0x0401B278
+-const Gfx mario_metal_right_hand_cap_shared_dl[] = {
+-    gsSPDisplayList(mario_right_hand_cap_m_logo_dl),
+-    gsSPDisplayList(mario_right_hand_cap_top_dl),
+-    gsSPDisplayList(mario_right_hand_cap_hand_position_dl),
+-    gsSPDisplayList(mario_right_hand_cap_bottom_dl),
+-    gsDPPipeSync(),
+-    gsSPClearGeometryMode(G_TEXTURE_GEN),
+-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401B278 - 0x0401B2D0
+-const Gfx mario_metal_right_hand_cap_shared_dl_wings[] = {
+-    gsSPDisplayList(mario_right_hand_cap_wings_intial_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_metal_wings_half_1),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_right_hand_cap_wings_half_1_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_metal_wings_half_2),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_right_hand_cap_wings_half_2_dl),
+-    gsSPDisplayList(mario_right_hand_cap_wings_end_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401B2D0
+-static const Vtx mario_right_hand_peace_shared_dl_vertex_group1[] = {
+-    {{{   -21,      9,     33}, 0, {     0,      0}, {0x8a, 0xe1, 0x1f, 0x00}}},
+-    {{{   -25,     24,      0}, 0, {     0,      0}, {0x84, 0xf8, 0xea, 0x00}}},
+-    {{{    -8,    -12,    -20}, 0, {     0,      0}, {0x93, 0xcf, 0xd7, 0x00}}},
+-    {{{     0,    -35,     32}, 0, {     0,      0}, {0x9d, 0xba, 0x22, 0xff}}},
+-    {{{     6,    -49,      0}, 0, {     0,      0}, {0xa9, 0xa7, 0xec, 0xff}}},
+-    {{{    88,    -34,     39}, 0, {     0,      0}, {0x38, 0xa1, 0x3d, 0xff}}},
+-    {{{    90,     -3,     52}, 0, {     0,      0}, {0x50, 0x07, 0x61, 0xff}}},
+-    {{{    45,    -29,     52}, 0, {     0,      0}, {0xeb, 0xb9, 0x66, 0xff}}},
+-    {{{    23,    -29,     36}, 0, {     0,      0}, {0x12, 0xec, 0x7b, 0xff}}},
+-    {{{    18,     30,     41}, 0, {     0,      0}, {0xc1, 0x2b, 0x64, 0xff}}},
+-    {{{    46,     49,     45}, 0, {     0,      0}, {0xf8, 0x44, 0x6a, 0xff}}},
+-    {{{     0,     21,     37}, 0, {     0,      0}, {0xfe, 0x44, 0x6a, 0xff}}},
+-    {{{    56,    -47,     -5}, 0, {     0,      0}, {0x0c, 0x87, 0xde, 0xff}}},
+-    {{{    56,     80,      1}, 0, {     0,      0}, {0x1a, 0x6a, 0x40, 0xff}}},
+-    {{{     8,     58,     -2}, 0, {     0,      0}, {0xbc, 0x55, 0x40, 0xff}}},
+-    {{{    84,     48,     24}, 0, {     0,      0}, {0x32, 0x3d, 0x62, 0xff}}},
+-};
+-
+-// 0x0401B3D0
+-static const Vtx mario_right_hand_peace_shared_dl_vertex_group2[] = {
+-    {{{    33,      7,    -37}, 0, {     0,      0}, {0xde, 0xf5, 0x87, 0xff}}},
+-    {{{    56,    -47,     -5}, 0, {     0,      0}, {0x0c, 0x87, 0xde, 0x00}}},
+-    {{{    32,    -43,      0}, 0, {     0,      0}, {0xdd, 0xba, 0x9d, 0x00}}},
+-    {{{    45,    -29,     52}, 0, {     0,      0}, {0xeb, 0xb9, 0x66, 0xff}}},
+-    {{{    32,    -43,      0}, 0, {     0,      0}, {0xeb, 0x89, 0x24, 0xff}}},
+-    {{{    18,     30,     41}, 0, {     0,      0}, {0xc1, 0x2b, 0x64, 0xff}}},
+-    {{{     8,     58,     -2}, 0, {     0,      0}, {0xbc, 0x55, 0x40, 0xff}}},
+-    {{{    -4,     38,      0}, 0, {     0,      0}, {0xd3, 0x66, 0x3c, 0xff}}},
+-    {{{     8,     58,     -2}, 0, {     0,      0}, {0xd0, 0x30, 0x96, 0xff}}},
+-    {{{    -4,     38,      0}, 0, {     0,      0}, {0xb3, 0x18, 0x9f, 0xff}}},
+-    {{{    24,    -59,     -3}, 0, {     0,      0}, {0xc4, 0xb9, 0xab, 0xff}}},
+-    {{{     6,    -49,      0}, 0, {     0,      0}, {0xa9, 0xa7, 0xec, 0xff}}},
+-    {{{    -8,    -12,    -20}, 0, {     0,      0}, {0x93, 0xcf, 0xd7, 0xff}}},
+-    {{{     2,     -5,    -33}, 0, {     0,      0}, {0xad, 0xda, 0xa9, 0xff}}},
+-};
+-
+-// 0x0401B4B0
+-static const Vtx mario_right_hand_peace_shared_dl_vertex_group3[] = {
+-    {{{   -22,     43,     -3}, 0, {     0,      0}, {0x31, 0x4d, 0xa8, 0xff}}},
+-    {{{    -4,     38,      0}, 0, {     0,      0}, {0x31, 0x4d, 0xa8, 0x00}}},
+-    {{{    14,     -1,    -22}, 0, {     0,      0}, {0x47, 0x20, 0x9d, 0x00}}},
+-    {{{     2,     -5,    -33}, 0, {     0,      0}, {0x47, 0x20, 0x9d, 0xff}}},
+-    {{{   -22,     43,     -3}, 0, {     0,      0}, {0x86, 0x10, 0xe4, 0xff}}},
+-    {{{   -25,     24,      0}, 0, {     0,      0}, {0x84, 0xf8, 0xea, 0xff}}},
+-    {{{   -21,      9,     33}, 0, {     0,      0}, {0x8a, 0xe1, 0x1f, 0xff}}},
+-    {{{   -15,     23,     43}, 0, {     0,      0}, {0xd6, 0x31, 0x6c, 0xff}}},
+-    {{{     0,    -35,     32}, 0, {     0,      0}, {0x9d, 0xba, 0x22, 0xff}}},
+-    {{{    15,    -39,     42}, 0, {     0,      0}, {0x0c, 0xbe, 0x6b, 0xff}}},
+-    {{{     6,    -49,      0}, 0, {     0,      0}, {0xa9, 0xa7, 0xec, 0xff}}},
+-    {{{    24,    -59,     -3}, 0, {     0,      0}, {0xce, 0x92, 0x24, 0xff}}},
+-    {{{     8,     58,     -2}, 0, {     0,      0}, {0xd0, 0x30, 0x96, 0xff}}},
+-    {{{    56,     80,      1}, 0, {     0,      0}, {0xfe, 0x41, 0x94, 0xff}}},
+-    {{{    33,      7,    -37}, 0, {     0,      0}, {0xde, 0xf5, 0x87, 0xff}}},
+-};
+-
+-// 0x0401B5A0
+-static const Vtx mario_right_hand_peace_shared_dl_vertex_group4[] = {
+-    {{{   101,    -29,     15}, 0, {     0,      0}, {0x53, 0xa3, 0x15, 0xff}}},
+-    {{{    88,    -34,     39}, 0, {     0,      0}, {0x38, 0xa1, 0x3d, 0x00}}},
+-    {{{    56,    -47,     -5}, 0, {     0,      0}, {0x0c, 0x87, 0xde, 0x00}}},
+-    {{{    56,     80,      1}, 0, {     0,      0}, {0xfe, 0x41, 0x94, 0xff}}},
+-    {{{    84,     60,     -7}, 0, {     0,      0}, {0xfb, 0x44, 0x96, 0xff}}},
+-    {{{    89,     18,    -34}, 0, {     0,      0}, {0x0a, 0x1b, 0x85, 0xff}}},
+-    {{{   105,     17,      3}, 0, {     0,      0}, {0x0a, 0x7c, 0x14, 0xff}}},
+-    {{{    98,     10,     29}, 0, {     0,      0}, {0x0a, 0x7a, 0x21, 0xff}}},
+-    {{{   153,      7,     24}, 0, {     0,      0}, {0x0c, 0x7a, 0x1e, 0xff}}},
+-    {{{    46,     49,     45}, 0, {     0,      0}, {0xf8, 0x44, 0x6a, 0xff}}},
+-    {{{    84,     48,     24}, 0, {     0,      0}, {0x32, 0x3d, 0x62, 0xff}}},
+-    {{{    56,     80,      1}, 0, {     0,      0}, {0x1a, 0x6a, 0x40, 0xff}}},
+-    {{{    33,      7,    -37}, 0, {     0,      0}, {0xde, 0xf5, 0x87, 0xff}}},
+-    {{{    94,    -22,    -18}, 0, {     0,      0}, {0x07, 0xcd, 0x8d, 0xff}}},
+-    {{{    14,     -1,    -22}, 0, {     0,      0}, {0xbe, 0xe5, 0x98, 0xff}}},
+-    {{{    -4,     38,      0}, 0, {     0,      0}, {0xb3, 0x18, 0x9f, 0xff}}},
+-};
+-
+-// 0x0401B6A0
+-static const Vtx mario_right_hand_peace_shared_dl_vertex_group5[] = {
+-    {{{    -4,     38,      0}, 0, {     0,      0}, {0xd3, 0x66, 0x3c, 0xff}}},
+-    {{{     0,     21,     37}, 0, {     0,      0}, {0xfe, 0x44, 0x6a, 0x00}}},
+-    {{{    18,     30,     41}, 0, {     0,      0}, {0xc1, 0x2b, 0x64, 0x00}}},
+-    {{{    45,    -29,     52}, 0, {     0,      0}, {0xeb, 0xb9, 0x66, 0xff}}},
+-    {{{    23,    -29,     36}, 0, {     0,      0}, {0xe3, 0x8b, 0x25, 0xff}}},
+-    {{{    32,    -43,      0}, 0, {     0,      0}, {0xeb, 0x89, 0x24, 0xff}}},
+-    {{{    32,    -43,      0}, 0, {     0,      0}, {0xdd, 0xba, 0x9d, 0xff}}},
+-    {{{    14,     -1,    -22}, 0, {     0,      0}, {0xbe, 0xe5, 0x98, 0xff}}},
+-    {{{    33,      7,    -37}, 0, {     0,      0}, {0xde, 0xf5, 0x87, 0xff}}},
+-    {{{   166,    -13,    -17}, 0, {     0,      0}, {0x7a, 0x08, 0x21, 0xff}}},
+-    {{{   162,     14,    -11}, 0, {     0,      0}, {0x79, 0x01, 0x25, 0xff}}},
+-    {{{   153,      7,     24}, 0, {     0,      0}, {0x7a, 0x08, 0x21, 0xff}}},
+-    {{{   155,    -15,     21}, 0, {     0,      0}, {0x79, 0x06, 0x23, 0xff}}},
+-    {{{    84,     60,     -7}, 0, {     0,      0}, {0xc2, 0x66, 0x28, 0xff}}},
+-    {{{    84,     48,     24}, 0, {     0,      0}, {0xc2, 0x66, 0x28, 0xff}}},
+-    {{{   126,     84,     -3}, 0, {     0,      0}, {0xc2, 0x66, 0x28, 0xff}}},
+-};
+-
+-// 0x0401B7A0
+-static const Vtx mario_right_hand_peace_shared_dl_vertex_group6[] = {
+-    {{{   146,     59,     -8}, 0, {     0,      0}, {0x5d, 0x4d, 0x26, 0xff}}},
+-    {{{   126,     84,     -3}, 0, {     0,      0}, {0x5f, 0x47, 0x2a, 0x00}}},
+-    {{{   123,     72,     21}, 0, {     0,      0}, {0x5d, 0x4d, 0x26, 0x00}}},
+-    {{{   126,     84,     -3}, 0, {     0,      0}, {0xfd, 0x37, 0x8e, 0xff}}},
+-    {{{    89,     18,    -34}, 0, {     0,      0}, {0x0a, 0x1b, 0x85, 0xff}}},
+-    {{{    84,     60,     -7}, 0, {     0,      0}, {0xfb, 0x44, 0x96, 0xff}}},
+-    {{{   146,     59,     -8}, 0, {     0,      0}, {0x15, 0x2a, 0x8b, 0xff}}},
+-    {{{   162,     14,    -11}, 0, {     0,      0}, {0x0a, 0x7d, 0x0d, 0xff}}},
+-    {{{    89,     18,    -34}, 0, {     0,      0}, {0x06, 0x7e, 0xff, 0xff}}},
+-    {{{   105,     17,      3}, 0, {     0,      0}, {0x0a, 0x7c, 0x14, 0xff}}},
+-    {{{   162,     14,    -11}, 0, {     0,      0}, {0x26, 0x1e, 0x8b, 0xff}}},
+-    {{{   166,    -13,    -17}, 0, {     0,      0}, {0x18, 0xf9, 0x84, 0xff}}},
+-    {{{    56,     80,      1}, 0, {     0,      0}, {0x1a, 0x6a, 0x40, 0xff}}},
+-    {{{    84,     48,     24}, 0, {     0,      0}, {0x32, 0x3d, 0x62, 0xff}}},
+-    {{{    84,     60,     -7}, 0, {     0,      0}, {0x4d, 0x5d, 0x24, 0xff}}},
+-};
+-
+-// 0x0401B890
+-static const Vtx mario_right_hand_peace_shared_dl_vertex_group7[] = {
+-    {{{   139,     53,     25}, 0, {     0,      0}, {0x5b, 0xa8, 0x02, 0xff}}},
+-    {{{   105,     17,      3}, 0, {     0,      0}, {0x59, 0xa6, 0xf7, 0x00}}},
+-    {{{   146,     59,     -8}, 0, {     0,      0}, {0x57, 0xa6, 0xf0, 0x00}}},
+-    {{{    33,      7,    -37}, 0, {     0,      0}, {0xde, 0xf5, 0x87, 0xff}}},
+-    {{{    89,     18,    -34}, 0, {     0,      0}, {0x0a, 0x1b, 0x85, 0xff}}},
+-    {{{    94,    -22,    -18}, 0, {     0,      0}, {0x07, 0xcd, 0x8d, 0xff}}},
+-    {{{    88,    -34,     39}, 0, {     0,      0}, {0x38, 0xa1, 0x3d, 0xff}}},
+-    {{{   101,    -29,     15}, 0, {     0,      0}, {0x53, 0xa3, 0x15, 0xff}}},
+-    {{{    90,     -3,     52}, 0, {     0,      0}, {0x50, 0x07, 0x61, 0xff}}},
+-    {{{    94,    -22,    -18}, 0, {     0,      0}, {0x1c, 0x85, 0x00, 0xff}}},
+-    {{{   155,    -15,     21}, 0, {     0,      0}, {0x19, 0x85, 0xf1, 0xff}}},
+-    {{{   166,    -13,    -17}, 0, {     0,      0}, {0x10, 0x83, 0x00, 0xff}}},
+-    {{{   101,    -29,     15}, 0, {     0,      0}, {0xff, 0xe2, 0x7b, 0xff}}},
+-    {{{   153,      7,     24}, 0, {     0,      0}, {0xff, 0xe2, 0x7b, 0xff}}},
+-    {{{    98,     10,     29}, 0, {     0,      0}, {0x07, 0xd6, 0x77, 0xff}}},
+-};
+-
+-// 0x0401B980
+-static const Vtx mario_right_hand_peace_shared_dl_vertex_group8[] = {
+-    {{{   139,     53,     25}, 0, {     0,      0}, {0xfc, 0x13, 0x7d, 0xff}}},
+-    {{{   123,     72,     21}, 0, {     0,      0}, {0xfc, 0x15, 0x7d, 0x00}}},
+-    {{{    84,     48,     24}, 0, {     0,      0}, {0x32, 0x3d, 0x62, 0x00}}},
+-    {{{    98,     10,     29}, 0, {     0,      0}, {0x55, 0x16, 0x5b, 0xff}}},
+-    {{{   101,    -29,     15}, 0, {     0,      0}, {0xff, 0xe2, 0x7b, 0xff}}},
+-    {{{   155,    -15,     21}, 0, {     0,      0}, {0xf5, 0xef, 0x7d, 0xff}}},
+-    {{{   153,      7,     24}, 0, {     0,      0}, {0xff, 0xe2, 0x7b, 0xff}}},
+-    {{{    90,     -3,     52}, 0, {     0,      0}, {0x50, 0x07, 0x61, 0xff}}},
+-    {{{   101,    -29,     15}, 0, {     0,      0}, {0x53, 0xa3, 0x15, 0xff}}},
+-    {{{   146,     59,     -8}, 0, {     0,      0}, {0x57, 0xa6, 0xf0, 0xff}}},
+-    {{{   105,     17,      3}, 0, {     0,      0}, {0x59, 0xa6, 0xf7, 0xff}}},
+-    {{{    89,     18,    -34}, 0, {     0,      0}, {0x51, 0xa6, 0xdd, 0xff}}},
+-    {{{   166,    -13,    -17}, 0, {     0,      0}, {0x18, 0xf9, 0x84, 0xff}}},
+-    {{{    94,    -22,    -18}, 0, {     0,      0}, {0x07, 0xcd, 0x8d, 0xff}}},
+-    {{{    89,     18,    -34}, 0, {     0,      0}, {0x0a, 0x1b, 0x85, 0xff}}},
+-};
+-
+-// 0x0401BA70
+-static const Vtx mario_right_hand_peace_shared_dl_vertex_group9[] = {
+-    {{{    84,     48,     24}, 0, {     0,      0}, {0xc2, 0x66, 0x28, 0xff}}},
+-    {{{   123,     72,     21}, 0, {     0,      0}, {0xc3, 0x66, 0x29, 0x00}}},
+-    {{{   126,     84,     -3}, 0, {     0,      0}, {0xc2, 0x66, 0x28, 0x00}}},
+-    {{{   139,     53,     25}, 0, {     0,      0}, {0x5b, 0xa8, 0x02, 0xff}}},
+-    {{{    98,     10,     29}, 0, {     0,      0}, {0x5b, 0xa8, 0x02, 0xff}}},
+-    {{{   105,     17,      3}, 0, {     0,      0}, {0x59, 0xa6, 0xf7, 0xff}}},
+-    {{{   105,     17,      3}, 0, {     0,      0}, {0x0a, 0x7c, 0x14, 0xff}}},
+-    {{{   153,      7,     24}, 0, {     0,      0}, {0x0c, 0x7a, 0x1e, 0xff}}},
+-    {{{   162,     14,    -11}, 0, {     0,      0}, {0x0a, 0x7d, 0x0d, 0xff}}},
+-    {{{   123,     72,     21}, 0, {     0,      0}, {0x5d, 0x4d, 0x26, 0xff}}},
+-    {{{   139,     53,     25}, 0, {     0,      0}, {0x5a, 0x52, 0x21, 0xff}}},
+-    {{{   146,     59,     -8}, 0, {     0,      0}, {0x5d, 0x4d, 0x26, 0xff}}},
+-    {{{    24,    -59,     -3}, 0, {     0,      0}, {0x68, 0xc7, 0x2c, 0xff}}},
+-    {{{    32,    -43,      0}, 0, {     0,      0}, {0x68, 0xc7, 0x2c, 0xff}}},
+-    {{{    23,    -29,     36}, 0, {     0,      0}, {0x12, 0xec, 0x7b, 0xff}}},
+-    {{{    15,    -39,     42}, 0, {     0,      0}, {0x0c, 0xbe, 0x6b, 0xff}}},
+-};
+-
+-// 0x0401BB70
+-static const Vtx mario_right_hand_peace_shared_dl_vertex_group10[] = {
+-    {{{     2,     -5,    -33}, 0, {     0,      0}, {0x47, 0x20, 0x9d, 0xff}}},
+-    {{{    14,     -1,    -22}, 0, {     0,      0}, {0x47, 0x20, 0x9d, 0x00}}},
+-    {{{    32,    -43,      0}, 0, {     0,      0}, {0x52, 0xee, 0xa2, 0x00}}},
+-    {{{    24,    -59,     -3}, 0, {     0,      0}, {0x52, 0xee, 0xa2, 0xff}}},
+-    {{{     2,     -5,    -33}, 0, {     0,      0}, {0xad, 0xda, 0xa9, 0xff}}},
+-    {{{    -8,    -12,    -20}, 0, {     0,      0}, {0x93, 0xcf, 0xd7, 0xff}}},
+-    {{{   -25,     24,      0}, 0, {     0,      0}, {0x84, 0xf8, 0xea, 0xff}}},
+-    {{{   -22,     43,     -3}, 0, {     0,      0}, {0x86, 0x10, 0xe4, 0xff}}},
+-    {{{   -15,     23,     43}, 0, {     0,      0}, {0xd6, 0x31, 0x6c, 0xff}}},
+-    {{{     0,     21,     37}, 0, {     0,      0}, {0xfe, 0x44, 0x6a, 0xff}}},
+-    {{{    -4,     38,      0}, 0, {     0,      0}, {0xd3, 0x66, 0x3c, 0xff}}},
+-    {{{   -22,     43,     -3}, 0, {     0,      0}, {0x1a, 0x72, 0x2f, 0xff}}},
+-    {{{    15,    -39,     42}, 0, {     0,      0}, {0x0c, 0xbe, 0x6b, 0xff}}},
+-    {{{    23,    -29,     36}, 0, {     0,      0}, {0x12, 0xec, 0x7b, 0xff}}},
+-};
+-
+-// 0x0401BC50
+-static const Vtx mario_right_hand_peace_shared_dl_vertex_group11[] = {
+-    {{{   101,    -29,     15}, 0, {     0,      0}, {0x53, 0xa3, 0x15, 0xff}}},
+-    {{{    56,    -47,     -5}, 0, {     0,      0}, {0x0c, 0x87, 0xde, 0x00}}},
+-    {{{    94,    -22,    -18}, 0, {     0,      0}, {0x1c, 0x85, 0x00, 0x00}}},
+-};
+-
+-// 0x0401BC80 - 0x0401BF30
+-const Gfx mario_right_hand_peace_shared_dl[] = {
+-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
+-    gsSP2Triangles( 2,  4,  3, 0x0,  5,  6,  7, 0x0),
+-    gsSP2Triangles( 8,  7,  9, 0x0,  7,  6, 10, 0x0),
+-    gsSP2Triangles( 7, 10,  9, 0x0, 11,  8,  9, 0x0),
+-    gsSP2Triangles( 7, 12,  5, 0x0, 10, 13, 14, 0x0),
+-    gsSP2Triangles( 6, 15, 10, 0x0, 10, 14,  9, 0x0),
+-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group2, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  4, 0x0),
+-    gsSP2Triangles( 5,  6,  7, 0x0,  8,  0,  9, 0x0),
+-    gsSP2Triangles(10, 11, 12, 0x0, 10, 12, 13, 0x0),
+-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group3, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  4,  6,  7, 0x0),
+-    gsSP2Triangles( 7,  6,  8, 0x0,  7,  8,  9, 0x0),
+-    gsSP2Triangles( 9,  8, 10, 0x0,  9, 10, 11, 0x0),
+-    gsSP1Triangle(12, 13, 14, 0x0),
+-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group4, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10, 11, 0x0),
+-    gsSP2Triangles( 2, 12, 13, 0x0,  3,  5, 12, 0x0),
+-    gsSP1Triangle(12, 14, 15, 0x0),
+-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group5, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10, 11, 0x0),
+-    gsSP2Triangles( 9, 11, 12, 0x0, 13, 14, 15, 0x0),
+-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group6, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 4,  3,  6, 0x0,  7,  8,  9, 0x0),
+-    gsSP2Triangles( 4, 10, 11, 0x0, 12, 13, 14, 0x0),
+-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group7, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10,  7, 0x0),
+-    gsSP2Triangles(10,  9, 11, 0x0, 12, 13, 14, 0x0),
+-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group8, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  3,  2,  7, 0x0),
+-    gsSP2Triangles( 8,  3,  7, 0x0,  9, 10, 11, 0x0),
+-    gsSP1Triangle(12, 13, 14, 0x0),
+-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group9, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10, 11, 0x0),
+-    gsSP2Triangles(12, 13, 14, 0x0, 12, 14, 15, 0x0),
+-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group10, 14, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  4,  6,  7, 0x0),
+-    gsSP2Triangles( 8,  9, 10, 0x0,  8, 10, 11, 0x0),
+-    gsSP2Triangles(12, 13,  9, 0x0, 12,  9,  8, 0x0),
+-    gsSPVertex(mario_right_hand_peace_shared_dl_vertex_group11, 3, 0),
+-    gsSP1Triangle( 0,  1,  2, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401BF30 - 0x0401BF50
+-const Gfx mario_right_hand_peace[] = {
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPDisplayList(mario_right_hand_peace_shared_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401BF50
+-static const Vtx mario_cap_unused_m_logo_dl_vertex[] = {
+-    {{{    33,     35,    118}, 0, {   728,    758}, {0x30, 0x26, 0x6e, 0xff}}},
+-    {{{    96,     22,     45}, 0, {  1240,    876}, {0x48, 0xa4, 0x31, 0xff}}},
+-    {{{    71,    101,    113}, 0, {  1028,    148}, {0x55, 0x16, 0x5b, 0xff}}},
+-    {{{     0,    110,    143}, 0, {   460,     68}, {0x00, 0x34, 0x73, 0xff}}},
+-    {{{   -31,     35,    118}, 0, {   206,    762}, {0xd0, 0x26, 0x6f, 0xff}}},
+-    {{{   -70,    101,    113}, 0, {  -106,    158}, {0xab, 0x16, 0x5b, 0xff}}},
+-    {{{   -95,     22,     46}, 0, {  -302,    890}, {0xa8, 0xb9, 0x38, 0xff}}},
+-};
+-
+-// 0x0401BFC0
+-static const Vtx mario_cap_unused_base_top_dl_vertex_group1[] = {
+-    {{{   -66,      2,    139}, 0, {     0,      0}, {0xb0, 0xbb, 0x45, 0xff}}},
+-    {{{     0,      0,    163}, 0, {     0,      0}, {0x00, 0xba, 0x69, 0xff}}},
+-    {{{   -31,     35,    118}, 0, {     0,      0}, {0xd0, 0x26, 0x6f, 0xff}}},
+-    {{{   -32,     17,    109}, 0, {     0,      0}, {0x00, 0x83, 0xf0, 0xff}}},
+-    {{{    33,     17,    109}, 0, {     0,      0}, {0xfb, 0x84, 0xea, 0xff}}},
+-    {{{   -95,     22,     46}, 0, {     0,      0}, {0xa8, 0xb9, 0x38, 0xff}}},
+-    {{{  -101,     10,     -7}, 0, {     0,      0}, {0xd8, 0x89, 0x11, 0xff}}},
+-    {{{   -70,    101,    113}, 0, {     0,      0}, {0xab, 0x16, 0x5b, 0xff}}},
+-    {{{  -135,     70,     23}, 0, {     0,      0}, {0x84, 0x15, 0x10, 0xff}}},
+-    {{{  -125,     38,    -45}, 0, {     0,      0}, {0x8d, 0xec, 0xd1, 0xff}}},
+-    {{{   -86,      1,    -60}, 0, {     0,      0}, {0xce, 0x8c, 0xf6, 0xff}}},
+-    {{{   -41,    144,     64}, 0, {     0,      0}, {0xdc, 0x79, 0x00, 0xff}}},
+-    {{{   -76,     84,    -60}, 0, {     0,      0}, {0xd5, 0x6e, 0xd3, 0xff}}},
+-    {{{   136,     70,     22}, 0, {     0,      0}, {0x7b, 0x16, 0x10, 0xff}}},
+-    {{{    71,    101,    113}, 0, {     0,      0}, {0x55, 0x16, 0x5b, 0xff}}},
+-    {{{    96,     22,     45}, 0, {     0,      0}, {0x48, 0xa4, 0x31, 0xff}}},
+-};
+-
+-// 0x0401C0C0
+-static const Vtx mario_cap_unused_base_top_dl_vertex_group2[] = {
+-    {{{    42,    144,     64}, 0, {     0,      0}, {0x2b, 0x76, 0x0d, 0xff}}},
+-    {{{   136,     70,     22}, 0, {     0,      0}, {0x7b, 0x16, 0x10, 0xff}}},
+-    {{{    76,     84,    -60}, 0, {     0,      0}, {0x2a, 0x6c, 0xcf, 0xff}}},
+-    {{{   103,     10,     -6}, 0, {     0,      0}, {0x42, 0x96, 0x12, 0xff}}},
+-    {{{   126,     38,    -46}, 0, {     0,      0}, {0x73, 0xec, 0xd0, 0xff}}},
+-    {{{    71,    101,    113}, 0, {     0,      0}, {0x55, 0x16, 0x5b, 0xff}}},
+-    {{{    96,     22,     45}, 0, {     0,      0}, {0x48, 0xa4, 0x31, 0xff}}},
+-    {{{    67,      2,    139}, 0, {     0,      0}, {0x50, 0xba, 0x44, 0xff}}},
+-    {{{    33,     17,    109}, 0, {     0,      0}, {0xfb, 0x84, 0xea, 0xff}}},
+-    {{{    33,     35,    118}, 0, {     0,      0}, {0x30, 0x26, 0x6e, 0xff}}},
+-    {{{    86,      1,    -60}, 0, {     0,      0}, {0x20, 0x86, 0xfe, 0xff}}},
+-    {{{     0,      0,    163}, 0, {     0,      0}, {0x00, 0xba, 0x69, 0xff}}},
+-    {{{   -31,     35,    118}, 0, {     0,      0}, {0xd0, 0x26, 0x6f, 0xff}}},
+-    {{{    53,      0,   -118}, 0, {     0,      0}, {0x2c, 0xb5, 0xa5, 0xff}}},
+-    {{{    49,     62,   -139}, 0, {     0,      0}, {0x32, 0x49, 0xa6, 0xff}}},
+-};
+-
+-// 0x0401C1B0
+-static const Vtx mario_cap_unused_base_top_dl_vertex_group3[] = {
+-    {{{   -76,     84,    -60}, 0, {     0,      0}, {0xd5, 0x6e, 0xd3, 0xff}}},
+-    {{{   -41,    144,     64}, 0, {     0,      0}, {0xdc, 0x79, 0x00, 0xff}}},
+-    {{{    76,     84,    -60}, 0, {     0,      0}, {0x2a, 0x6c, 0xcf, 0xff}}},
+-    {{{     0,    110,    143}, 0, {     0,      0}, {0x00, 0x34, 0x73, 0xff}}},
+-    {{{    42,    144,     64}, 0, {     0,      0}, {0x2b, 0x76, 0x0d, 0xff}}},
+-    {{{   -70,    101,    113}, 0, {     0,      0}, {0xab, 0x16, 0x5b, 0xff}}},
+-    {{{    71,    101,    113}, 0, {     0,      0}, {0x55, 0x16, 0x5b, 0xff}}},
+-    {{{    49,     62,   -139}, 0, {     0,      0}, {0x32, 0x49, 0xa6, 0xff}}},
+-    {{{   126,     38,    -46}, 0, {     0,      0}, {0x73, 0xec, 0xd0, 0xff}}},
+-    {{{   -52,      0,   -118}, 0, {     0,      0}, {0xd2, 0x9d, 0xc1, 0xff}}},
+-    {{{   -49,     62,   -138}, 0, {     0,      0}, {0xce, 0x1a, 0x8f, 0xff}}},
+-    {{{    53,      0,   -118}, 0, {     0,      0}, {0x2c, 0xb5, 0xa5, 0xff}}},
+-    {{{  -125,     38,    -45}, 0, {     0,      0}, {0x8d, 0xec, 0xd1, 0xff}}},
+-    {{{    86,      1,    -60}, 0, {     0,      0}, {0x20, 0x86, 0xfe, 0xff}}},
+-    {{{   -86,      1,    -60}, 0, {     0,      0}, {0xce, 0x8c, 0xf6, 0xff}}},
+-};
+-
+-// 0x0401C2A0
+-static const Vtx mario_cap_unused_base_bottom_dl_vertex[] = {
+-    {{{    86,      1,    -60}, 0, {     0,      0}, {0x20, 0x86, 0xfe, 0xff}}},
+-    {{{   -86,      1,    -60}, 0, {     0,      0}, {0xce, 0x8c, 0xf6, 0xff}}},
+-    {{{   -52,      0,   -118}, 0, {     0,      0}, {0xd2, 0x9d, 0xc1, 0xff}}},
+-    {{{    33,     17,    109}, 0, {     0,      0}, {0xfb, 0x84, 0xea, 0xff}}},
+-    {{{   -32,     17,    109}, 0, {     0,      0}, {0x00, 0x83, 0xf0, 0xff}}},
+-    {{{  -101,     10,     -7}, 0, {     0,      0}, {0xd8, 0x89, 0x11, 0xff}}},
+-    {{{    96,     22,     45}, 0, {     0,      0}, {0x48, 0xa4, 0x31, 0xff}}},
+-    {{{   103,     10,     -6}, 0, {     0,      0}, {0x42, 0x96, 0x12, 0xff}}},
+-    {{{    53,      0,   -118}, 0, {     0,      0}, {0x2c, 0xb5, 0xa5, 0xff}}},
+-};
+-
+-// 0x0401C330 - 0x0401C368
+-const Gfx mario_cap_unused_m_logo_dl[] = {
+-    gsSPVertex(mario_cap_unused_m_logo_dl_vertex, 7, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  0, 0x0),
+-    gsSP2Triangles( 3,  5,  4, 0x0,  2,  3,  0, 0x0),
+-    gsSP1Triangle( 5,  6,  4, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401C368 - 0x0401C4C8
+-const Gfx mario_cap_unused_base_top_dl[] = {
+-    gsSPVertex(mario_cap_unused_base_top_dl_vertex_group1, 16, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+-    gsSP2Triangles( 3,  1,  0, 0x0,  3,  5,  6, 0x0),
+-    gsSP2Triangles( 3,  0,  5, 0x0,  5,  7,  8, 0x0),
+-    gsSP2Triangles( 5,  8,  6, 0x0,  0,  2,  5, 0x0),
+-    gsSP2Triangles( 6,  9, 10, 0x0,  8,  9,  6, 0x0),
+-    gsSP2Triangles(11,  8,  7, 0x0,  8, 12,  9, 0x0),
+-    gsSP2Triangles(12,  8, 11, 0x0, 13, 14, 15, 0x0),
+-    gsSPVertex(mario_cap_unused_base_top_dl_vertex_group2, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+-    gsSP2Triangles( 4,  2,  1, 0x0,  5,  1,  0, 0x0),
+-    gsSP2Triangles( 1,  6,  3, 0x0,  6,  7,  8, 0x0),
+-    gsSP2Triangles( 9,  7,  6, 0x0, 10,  4,  3, 0x0),
+-    gsSP2Triangles( 9, 11,  7, 0x0,  7, 11,  8, 0x0),
+-    gsSP2Triangles(12, 11,  9, 0x0, 13, 14,  4, 0x0),
+-    gsSPVertex(mario_cap_unused_base_top_dl_vertex_group3, 15, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  1,  3,  4, 0x0),
+-    gsSP2Triangles( 5,  3,  1, 0x0,  1,  4,  2, 0x0),
+-    gsSP2Triangles( 4,  3,  6, 0x0,  0,  2,  7, 0x0),
+-    gsSP2Triangles( 8,  7,  2, 0x0,  9, 10, 11, 0x0),
+-    gsSP2Triangles(12, 10,  9, 0x0,  7, 10,  0, 0x0),
+-    gsSP2Triangles(10,  7, 11, 0x0,  0, 10, 12, 0x0),
+-    gsSP2Triangles(11,  8, 13, 0x0, 14, 12,  9, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401C4C8 - 0x0401C510
+-const Gfx mario_cap_unused_base_bottom_dl[] = {
+-    gsSPVertex(mario_cap_unused_base_bottom_dl_vertex, 9, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  3,  5, 0x0,  7,  6,  5, 0x0),
+-    gsSP2Triangles( 0,  7,  5, 0x0,  0,  5,  1, 0x0),
+-    gsSP1Triangle( 2,  8,  0, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401C510 - 0x0401C538
+-const Gfx mario_cap_unused_base_dl[] = {
+-    gsSPDisplayList(mario_cap_unused_base_top_dl),
+-    gsSPLight(&mario_brown2_lights_group.l, 1),
+-    gsSPLight(&mario_brown2_lights_group.a, 2),
+-    gsSPDisplayList(mario_cap_unused_base_bottom_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401C538
+-static const Vtx mario_wings_half_1_unused_dl_vertex[] = {
+-    {{{   199,    247,    -55}, 0, {   990,      0}, {0x59, 0xed, 0x58, 0xff}}},
+-    {{{   131,    274,     20}, 0, {     0,      0}, {0x59, 0xed, 0x58, 0xff}}},
+-    {{{    69,     71,     38}, 0, {     0,   2012}, {0x59, 0xed, 0x58, 0xff}}},
+-    {{{   199,    247,    -55}, 0, {   990,      0}, {0x58, 0xee, 0x58, 0xff}}},
+-    {{{    69,     71,     38}, 0, {     0,   2012}, {0x58, 0xee, 0x58, 0xff}}},
+-    {{{   138,     44,    -37}, 0, {   990,   2012}, {0x58, 0xee, 0x58, 0xff}}},
+-    {{{  -137,     44,    -37}, 0, {   990,   2012}, {0xa8, 0xee, 0x58, 0xff}}},
+-    {{{   -68,     71,     38}, 0, {     0,   2012}, {0xa8, 0xee, 0x58, 0xff}}},
+-    {{{  -198,    247,    -55}, 0, {   990,      0}, {0xa8, 0xee, 0x58, 0xff}}},
+-    {{{   -68,     71,     38}, 0, {     0,   2012}, {0xa7, 0xed, 0x58, 0xff}}},
+-    {{{  -130,    274,     20}, 0, {     0,      0}, {0xa7, 0xed, 0x58, 0xff}}},
+-    {{{  -198,    247,    -55}, 0, {   990,      0}, {0xa7, 0xed, 0x58, 0xff}}},
+-};
+-
+-// 0x0401C5F8
+-static const Vtx mario_wings_half_2_unused_dl_vertex[] = {
+-    {{{   268,    219,   -132}, 0, {   990,      0}, {0x59, 0xed, 0x57, 0xff}}},
+-    {{{   199,    247,    -55}, 0, {     0,      0}, {0x59, 0xed, 0x57, 0xff}}},
+-    {{{   138,     44,    -37}, 0, {     0,   2012}, {0x59, 0xed, 0x57, 0xff}}},
+-    {{{   207,     16,   -114}, 0, {   990,   2012}, {0x59, 0xed, 0x57, 0xff}}},
+-    {{{  -206,     16,   -114}, 0, {   990,   2012}, {0xa7, 0xed, 0x57, 0xff}}},
+-    {{{  -137,     44,    -37}, 0, {     0,   2012}, {0xa7, 0xed, 0x57, 0xff}}},
+-    {{{  -267,    219,   -132}, 0, {   990,      0}, {0xa7, 0xed, 0x57, 0xff}}},
+-    {{{  -198,    247,    -55}, 0, {     0,      0}, {0xa7, 0xed, 0x57, 0xff}}},
+-};
+-
+-// 0x0401C678 - 0x0401C6A8
+-const Gfx mario_wings_half_1_unused_dl[] = {
+-    gsSPVertex(mario_wings_half_1_unused_dl_vertex, 12, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+-    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10, 11, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401C6A8 - 0x0401C6D8
+-const Gfx mario_wings_half_2_unused_dl[] = {
+-    gsSPVertex(mario_wings_half_2_unused_dl_vertex, 8, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
+-    gsSP2Triangles( 4,  5,  6, 0x0,  5,  7,  6, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401C6D8 - 0x0401C730
+-const Gfx mario_cap_wings_unused_intial_dl[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_MODULATERGBA, G_CC_MODULATERGBA),
+-    gsSPClearGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 6, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (64 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401C730 - 0x0401C758
+-const Gfx mario_cap_wings_unused_end_dl[] = {
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+-    gsSPSetGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401C758 - 0x0401C7E8 # Unreferenced, possibly a early duplicate of the cap object used in segment 03
+-const Gfx mario_cap_unused_dl[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_BLENDRGBA, G_CC_BLENDRGBA),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_m_logo),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPLight(&mario_red_lights_group.l, 1),
+-    gsSPLight(&mario_red_lights_group.a, 2),
+-    gsSPDisplayList(mario_cap_unused_m_logo_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+-    gsSPDisplayList(mario_cap_unused_base_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401C7E8 - 0x0401C890 # Unreferenced, possibly an early duplicate of the cap object used in segment 03
+-const Gfx mario_metal_cap_unused_dl[] = {
+-    gsDPPipeSync(),
+-    gsSPSetGeometryMode(G_TEXTURE_GEN),
+-    gsDPSetCombineMode(G_CC_MODULATERGB, G_CC_MODULATERGB),
+-    gsDPLoadTextureBlock(mario_texture_metal, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_ON),
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsSPDisplayList(mario_cap_unused_m_logo_dl),
+-    gsSPDisplayList(mario_cap_unused_base_top_dl),
+-    gsSPDisplayList(mario_cap_unused_base_bottom_dl),
+-    gsDPPipeSync(),
+-    gsSPClearGeometryMode(G_TEXTURE_GEN),
+-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401C890 - 0x0401C8E8 # Unreferenced, unused like the duplicated cap, same case
+-const Gfx mario_cap_wings_unused[] = {
+-    gsSPDisplayList(mario_cap_wings_unused_intial_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_wings_half_1),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_wings_half_1_unused_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_wings_half_2),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_wings_half_2_unused_dl),
+-    gsSPDisplayList(mario_cap_wings_unused_end_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401C8E8 - 0x0401C940 # Unreferenced, unused like the duplicated cap, same case
+-const Gfx mario_metal_cap_wings_unused[] = {
+-    gsSPDisplayList(mario_cap_wings_unused_intial_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_metal_wings_half_1),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_wings_half_1_unused_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_metal_wings_half_2),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_wings_half_2_unused_dl),
+-    gsSPDisplayList(mario_cap_wings_unused_end_dl),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401C940
+-static const Vtx mario_wings_half_1_dl_vertex[] = {
+-    {{{  -105,    212,      0}, 0, {     0,      0}, {0x00, 0x00, 0x7f, 0xff}}},
+-    {{{  -105,      0,      0}, 0, {     0,   2012}, {0x00, 0x00, 0x7f, 0xff}}},
+-    {{{     0,      0,      0}, 0, {   990,   2012}, {0x00, 0x00, 0x7f, 0xff}}},
+-    {{{     0,    212,      0}, 0, {   990,      0}, {0x00, 0x00, 0x7f, 0xff}}},
+-};
+-
+-// 0x0401C980
+-static const Vtx mario_wings_half_2_dl_vertex[] = {
+-    {{{     0,      0,      0}, 0, {     0,   2012}, {0x00, 0x00, 0x7f, 0xff}}},
+-    {{{   106,    212,      0}, 0, {   990,      0}, {0x00, 0x00, 0x7f, 0xff}}},
+-    {{{     0,    212,      0}, 0, {     0,      0}, {0x00, 0x00, 0x7f, 0xff}}},
+-    {{{   106,      0,      0}, 0, {   990,   2012}, {0x00, 0x00, 0x7f, 0xff}}},
+-};
+-
+-// 0x0401C9C0 - 0x0401C9E0
+-const Gfx mario_wings_half_1_dl[] = {
+-    gsSPVertex(mario_wings_half_1_dl_vertex, 4, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401C9E0 - 0x0401CA00
+-const Gfx mario_wings_half_2_dl[] = {
+-    gsSPVertex(mario_wings_half_2_dl_vertex, 4, 0),
+-    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401CA00 - 0x0401CAB8
+-const Gfx mario_cap_wings[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_DECALRGBA, G_CC_DECALRGBA),
+-    gsSPClearGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 6, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (64 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_wings_half_1),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_wings_half_1_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_wings_half_2),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_wings_half_2_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+-    gsSPSetGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401CAB8 - 0x0401CB70
+-const Gfx mario_cap_wings_transparent[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_DECALFADEA, G_CC_DECALFADEA),
+-    gsSPClearGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 6, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (64 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_wings_half_1),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_wings_half_1_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_wings_half_2),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_wings_half_2_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADEFADEA, G_CC_SHADEFADEA),
+-    gsSPSetGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401CB70 - 0x0401CC28
+-const Gfx mario_metal_cap_wings[] = {
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_DECALRGBA, G_CC_DECALRGBA),
+-    gsSPClearGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 6, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (64 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsSPLight(&mario_white_lights_group.l, 1),
+-    gsSPLight(&mario_white_lights_group.a, 2),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_metal_wings_half_1),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_wings_half_1_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_metal_wings_half_2),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_wings_half_2_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+-    gsSPSetGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
+-    gsSPEndDisplayList(),
+-};
+-
+-// 0x0401CC28 - 0x0401CD20
+-const Gfx mario_metal_cap_wings_transparent[] = {
+-    gsDPPipeSync(),
+-    gsSPClearGeometryMode(G_TEXTURE_GEN),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPSetCombineMode(G_CC_DECALFADEA, G_CC_DECALFADEA),
+-    gsSPClearGeometryMode(G_CULL_BACK | G_SHADING_SMOOTH),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, G_TX_NOMASK, G_TX_NOLOD),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+-    gsDPTileSync(),
+-    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 6, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+-    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (64 - 1) << G_TEXTURE_IMAGE_FRAC),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_metal_wings_half_1),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_wings_half_1_dl),
+-    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, mario_texture_metal_wings_half_2),
+-    gsDPLoadSync(),
+-    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 64 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+-    gsSPDisplayList(mario_wings_half_2_dl),
+-    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+-    gsDPPipeSync(),
+-    gsSPSetGeometryMode(G_TEXTURE_GEN | G_CULL_BACK | G_SHADING_SMOOTH),
+-    gsDPSetCombineMode(G_CC_DECALFADE, G_CC_DECALFADE),
+-    gsDPLoadTextureBlock(mario_texture_metal, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
+-    gsSPTexture(0x0F80, 0x07C0, 0, G_TX_RENDERTILE, G_ON),
+-    gsSPEndDisplayList(),
++Gfx mario_material_revert_render_settings[] = {
++	gsDPPipeSync(),
++	gsSPSetGeometryMode(G_LIGHTING),
++	gsSPClearGeometryMode(G_TEXTURE_GEN),
++	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
++	gsSPTexture(65535, 65535, 0, 0, 0),
++	gsDPSetEnvColor(255, 255, 255, 255),
++	gsDPSetAlphaCompare(G_AC_NONE),
++	gsSPEndDisplayList(),
+ };
diff --git a/actors/mario/texscroll.inc.c b/actors/mario/texscroll.inc.c
new file mode 100644
index 0000000..fccb257
--- /dev/null
+++ b/actors/mario/texscroll.inc.c
@@ -0,0 +1,3 @@
+void scroll_actor_geo_mario() {
+	
+}
diff --git a/actors/mario/texscroll.inc.h b/actors/mario/texscroll.inc.h
new file mode 100644
index 0000000..408565a
--- /dev/null
+++ b/actors/mario/texscroll.inc.h
@@ -0,0 +1,3 @@
+
+extern void scroll_actor_geo_mario();
+
diff --git a/actors/mario/wing1.rgba16.png b/actors/mario/wing1.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..394cbd582cae233fc7664fb14e296d5178bf2675
GIT binary patch
literal 1341
zcmV-D1;YA?P)<h;3K|Lk000e1NJLTq001BW002M;1^@s6dyaLk00009a7bBm000XT
z000XT0n*)m`~Uz1?@2^KRA>e5m?2jzIS_@1cUB;gNF)-8L?V$$Boc{4BKZkOBoc{4
zB9TZW636zJ-7n{MCK(ubZ_Sc(dMc?@-FvIj-7~OQ{EVLt{NFpU@n1IJ`uh5Pb91v$
zV!8gPfXmCvLI}~;)>a{u7|Zx00xm8tRuZR(zlx0C^l^TEUWt=r)%@3Q;$A?WSd!v%
z-m~BCz}eYZA%1&%>z;FuG=1Od!0GAfJH%F5CY_4im)JP$mpgEBa#F|vbx6>&#weII
z^Dhe^S@I+tJ#G@FkS_~3Iyx%np2Y23BCVBc6|{B-4i672IUp@@t|h@TBu~4x0Fr4l
zBgwM$W%J*UB*T^K?d|RL?t%UN{iSz#ieT<YB8l-4gIKRmcVK5{=TmRFkpTRVQZ)l1
z2>P@Dl1*%@&dQ0&>Y0;kP63ISPYJO41OkwC`UJ-+LSk+1G5?eR$plGaK=3;tmK>h~
znd?vcp@8Yk-UU%WYXNUZigGWBoqs5xCF`w|Kwx}|(1&g39}38Jx8xG1g}{!reg&k6
zl>)f=1nZGoAw+<_zP{F~SCOZXl>%B)*MN`6GbSrdQpIA20@k_tUS3{if>u>emr}s+
z2MLvo+TT`hN80LpRU;q;4?D1mTme?%8X@?!DF9;c5wLf6cNcqmd;KGz{Z^CU`XFFV
zC6Fk#Fvo`iAa+bQb|DtG+X0DMD+m@)2n5PKiM7Tb92^v}_#Hz5RK;jTxPE?qp6v-J
zsqMysMY|c2W5HSy(BAzdNs49A`reQn3#qLqFX!SAw<JI^2y&i;-o>N+sfYz<%>@bM
zTy#y5;tvG~-dX_kr6_@^eEQ{7Iv|P1$({fB__%m_dMbjzSrT9po4sNC+kJ&W!kmhY
zNsBo4@9ypj{E`6FlF++IWF#PK{kEKS#<X*u1`6RwW&$RF`uqdz5WpKrKUQ+ieN;7Z
zVrUV;d?ug`B)|lSAh1Kk=1`pRt<6}f=dlEHCP2bbvVOpr1Hi>ir7$s)&^aO@r+Ni1
z2@qT|0XZ*y0%8H=&K?O+B$jb}d|Yf-06RSrlNCdpK7jBG$R5M}e^!g~<--$VoIJGy
z?H7<_SgJHZKrB^r=d%Yeq*$(u=e$|74;I7yDgcMh5)mIgKR(D6U_Mr&+uPg4{r!D;
z+{9>Y6`-m%z{)&hbxA^e<}kN2(_hl%g+tZEXPh`yKntXxOf*TGtu`N<{^?(K^;m4b
zMS)!f2&zif1oQ*|z-3n?C&&EEBhId54D*=)li64`c#jjy+b>0!L#5pDiI;QZurmQ}
z5X@y2uG!~(U}tQp;8;6@IEH&=(fOzX4Aer>8xIc;)om=K4tzWr2xS;k7V!Z-c~wB{
z4X1$dCPM_tZ3h(1o6(^F_tH*r8#4h0o7`HGIddK_25W@yT_7-`^n<5g?CHI*k+?Gf
zxj~{y_#sMQWAP)1*f!oAJH@g1L&W@{00I(}H(C-{8RQTdpO$Vhydk+auCA_%&yS&i
zB;(9!GebY1{JgSC0o`|vwR6*d)MxEyuL>Z@s@QPg<EDa0a4gl)()5|5m6#)#TE9e2
zToo`?xG{Ze&Hm?40LfDaYVy>^`tN!672rIJKs31QjYbvF3jknxm(KvEs%Pt7-a5Wt
zZLk$V-aE54{=4g$fSa3}QeCg|?-Kpwk2>%-@U)_FskK$M00000NkvXXu0mjfc++m=

literal 0
HcmV?d00001

diff --git a/actors/mario/wing_2.rgba16.png b/actors/mario/wing_2.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..7be615e006b8d62ac8994478b24167ca48d40c42
GIT binary patch
literal 1032
zcmV+j1o!)iP)<h;3K|Lk000e1NJLTq001BW002M;1^@s6dyaLk00009a7bBm000XT
z000XT0n*)m`~Uz0x=BPqRA>e5n5|YTF%*T{yG9_9NF=h4&`01AkURpi5{cvykjTnP
zBoc{4B5@^OSUc>5q-5q&#J$a0({qyZvv<xUnVHUJhxRX3;O6FLJ9a*Q#s;+fudlDS
zi^Za4ZjKL4OQ+%f{(k%R_BJ~{KAxSPo_0okx((~~I+pF|=;(8FhgS1r4DjdY=N*xC
z(*Sc4cw*P<VfpCE$;pf=yuQBXhK^n&fS;4-AyE3fyu3^!AYdhw>>!_9n7OVr*r^O9
zfzG((M(H*Ci;IhSGIT15K&OA^rdcB)F{Q<A$SlT`9zZQRbQ=9BZ63DHsM8A|T>^*v
za=9E`ehAMW9v->~_zcn6zP^Q3m2evFB(m9TwoZ1?EMVgx^aa2^_gkceiw})Bd}v`U
zqzQRGbmDvr|BQfukOIf)yH=8G`2!v*keTB_1em~;OfvKSiw@vVPfxS+^YiQ$4gLTr
z%LCp|5Fszm2?&&JzzB%ICEZaZkgmH=OJ|J%&N)##D<Xj!s1p+?AktmBu3SjKbwT3l
z>MAQg`MwZP0*tNZfb!88eRB8(iQ4S(O}jwAl1hZEH3xKEzD@w}@W%9I_V}g>2)LA<
zP<jbi_VE(|tpUZBGOK`sl)z;f==~M}l|H<6RcB9*tO6y0vKs0Oyap^AWye1p^-b_d
z0G0xF$v6iTV*-*Ch)evm(9j<rA9n&PHr@gP00cmQI-uycn%ju~Znm{NkpRFxJ3p4C
z6YM@p1_^xp2`5{Rj4vc4I6FIwiI62w*{>xIM7F`NtLz>h-v?SxJ_l~;o(z2~iFsHo
z>G|y-N?eY4U%DhQtc6g~?n=aMD6pE;LKBGk_-f2`?Sxvc+E_+F$vv@xWK$oXa*RF?
zoiQ!#0uNH+8WH))$0f7Byu9o#Ke^ILsKgGc<g&SR8}}XX)oL{goO}a;4(hrCN*6Ga
zi+IW&KGR2oM*;)`>cFn!Bv9$hn2YhLz~rLEmr|9`fj-P1zl=jlz*CM~&*%C)lrWtG
z0BL5F7M(_wWV^k+om6TEb$uS*R3iZ|yYx~L7-m2D+;?E<>4ijKGL(Idw{DZ{V`Y;-
znFwHR%as2B%3R)01bonSfCWBfpL?#F9?yZ&pfV%1L+<YGesu8(b6|zj98|!_@G-d;
z;0PLi2ENw>u0iC!frXWQoNDDG0|EK$RSscQe*s{%|5nQuq3(U{GkRZyA_0K8n0ffi
zeXonIoXEh@s)x*PExeM%p?|2rp#p~r94hdCSKu8HX2-i06$$bH0000<MNUMnLSTZ8
Cw%|<w

literal 0
HcmV?d00001

diff --git a/actors/mario_cap/mario_cap_logo.rgba16.png b/actors/mario_cap/mario_cap_logo.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..af5a5e0ecb5bae32554f16b8699acfa24a5a9cfa
GIT binary patch
literal 515
zcmV+e0{s1nP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F80005XNkl<ZcwS@t
z|NlS3KmsO)0S2QE81N8aAtMP8O0|rnm`REQh|MlAbwoLY*eLi<W=Ij#M~nj~EhzBn
zClm#!n(yCdV7ULB;rsLF44l!yh(I}ZjDg|#dm#S@14D2yw!i|JgFQ+>B_R&{9|JHj
zfXYn>u5N}%zx##|1Iho#2^g^1!$7nHjvhs|2xeJQ5_WOy?!d5*foR`z2w+(B?b);c
z{{=9`|8Lp*|38r-fvYmYOgM~;q-6x$l^lve*m41;<<ZFq%N-pV7%Uwz9W!MPs#r-0
zE(fEUk0lE5C%$HA;zLf5u=IdUj6hl-Tn?;Vi|P}vAWWYvSppFYLX*?dA{=c5LqI?R
zdo}}Qzd3XM|DQ4i;m3RTFmnVbp<)SBn7!B%A!-~UCq4lQ28Q>~@%su}V#Q35@Pvpz
z3cS%uwc=vJLF(v*sivj{w?4d4KzyP?1oBn1Xeh46mJH$L4+CBYd;=D<AOjdUAaVPj
zNC0xUqZcm4D0UKG5Pb)RA}0ei07^lGuUSru_Buv!iZ2l|GEfhI%))9Oq4oew6S<*5
z&=bVA38@(xDB(KVF&UI0K<n-@iuu?=fMy8}n)*=82LPuS3|34>6>tCm002ovPDHLk
FV1g@;(24*6

literal 0
HcmV?d00001

diff --git a/actors/mario_cap/mario_cap_metal.rgba16.png b/actors/mario_cap/mario_cap_metal.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..d17d38bee693b7a83558f893653efbb04e36c85c
GIT binary patch
literal 4790
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
CjRd&>

literal 0
HcmV?d00001

diff --git a/actors/mario_cap/mario_cap_metal_wing_tip_unused.rgba16.png b/actors/mario_cap/mario_cap_metal_wing_tip_unused.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..8e70c22725f9eee79f5c8429c0ff8bbcac315562
GIT binary patch
literal 2860
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
Sc6I6t1}m2-!>=vHwf_fXfy>$e

literal 0
HcmV?d00001

diff --git a/actors/mario_cap/mario_cap_metal_wing_unused.rgba16.png b/actors/mario_cap/mario_cap_metal_wing_unused.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..cfdd06a87ae8f8f93c38e8832a231d30ddc4d7b5
GIT binary patch
literal 3399
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
Iiq`1=2i?hHiU0rr

literal 0
HcmV?d00001

diff --git a/actors/mario_cap/mario_cap_wing.rgba16.png b/actors/mario_cap/mario_cap_wing.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..ff7d11bf142485b35a024ca8c64a141f9a1a3850
GIT binary patch
literal 1673
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
Tsq{Jj00000NkvXXu0mjf(jK}u

literal 0
HcmV?d00001

diff --git a/actors/mario_cap/mario_cap_wing_tip.rgba16.png b/actors/mario_cap/mario_cap_wing_tip.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..7da437f9512e1c8e69db004a9c0a63505c822a24
GIT binary patch
literal 1132
zcmV-y1e5!TP)<h;3K|Lk000e1NJLTq001BW002M;1^@s6dyaLk000CtNkl<ZcwS>P
zG&E!wNWjD}z+iYeAUQetKdAvqwGfDkiuzAZdSan82{bo1|Nrsh2ZNxXAcLZ!BFV<F
z^z`(AgN=iOgDB0|)Pcl6mfydBpL7QZ2naBM4B+JCgli_&F)$61l9CMHzkg@=@ZkgL
z4gdumNEgUbn8n060NKGH{V!g;V0i!jJ?RdBSq!rj-C$x&1X&EiWQ73C0pwT=avUh=
zpFe*N4*uTWUPe-bfCWANNihKCYmm=Dj$j}Iu)uslN(g`~24y|uU<dKZaRB49XU|9~
zy+9U$f*nM|;v5u;IXO9uWI5pM*|S7B0NIBiHYodoau6&HfgA&JSWHX|UWZJXGUY$A
zV_A?>F3136U%)H?<#Xh$iJopi`XnSIz*_h2-3#{+x}!n*(4&e4Iq$+O0?{BJ5}PiN
z)#1|va_GK&`%q$v1>{SRWiZPrDG%_a0g&a_uU}`Vt*u3gA{OKd1Y1fbw|qc$49Id&
zJppn6x+7UYk|0Z9mSb}SEL30#4rB<i4g*Co$Z}9Qfvv1y0a=L6Qji!d(V!<lWCtKS
z3OSJ>mlGgIJb3VcVcD`}7&!#P0q8jaTfD-2kIi8q^)OE%mlwE7N_Z~776sTs2Ie4K
zmc!&>jsVdh%eQUYhP8ZPK~@NJJ%~mR31r7`pfz5wr3Yl+<7=qE3nGvOFipq~!50eH
zLIXJjKyeRhCjdhLXX(g-Y%we}U?G4WE$EKnz|)Ka1v}I{yhSq$tY$-Z2&jk#6;L2?
z<ZQ@*1Hj@MDfEb{oLFF$2#7|`b_xm#49HP|&0gdXfqI1W1_?+ba$W{mgj_5mS47x?
z9OMX)8gi>+7MO*anwktCgFrMfsT@5-&Ye5=-^j>_<Pcy4wFh9;F1n$(@;bg^m{dnF
zUcGu1UVmdV7(FzwISN@HC`z53orw+!7DD+PRv^JFK~@iQ3@ibILXgzPDT)JNhT}?X
z$Wa7RgRQhAwR;9G2hf8apF@yKI^=8$atx@{n>uwWNeL07HbnM4zM2s^Dq#JBb?erV
zUJig<O{iu=4tnI`8RlzHumdq!&2koyW{?B$IRe?YAU3Q+0%DVEG0amepz<CTgt&49
zNF3xqkUDaUTm~F~@!h+3DD8My<pk?+g7kqx3Fh<T$B&a0)Hoe*@7_I(5fWH*z-Z)L
za_rbK26D@NY>t38$%rlg2^CxnBmx%X4kof*^uY#LeNWC906sUNbj`3S1X&EToSb}4
zC_q?1<p8=OSOEmG7?wkTy&9?}K6o~SmEFje!Yuv{8Tq1##c&6J`fJ#VT%gZsYBAga
zu(lsa0J+Bl>_{-s1F!%Gm@({u_GIYe0OSS)Ebg&&qiN+Da4rB@46E6IBN%jvdw3cE
y6|JyJhF%E|IW$M-j7BG|MnhmU1V%$(Gz0*=6WM}={=n4$0000<MNUMnLSTYJtkg3A

literal 0
HcmV?d00001

diff --git a/actors/rainbow_star/geo.inc.c b/actors/rainbow_star/geo.inc.c
new file mode 100644
index 0000000..2ad8fe2
--- /dev/null
+++ b/actors/rainbow_star/geo.inc.c
@@ -0,0 +1,14 @@
+#include "src/game/envfx_snow.h"
+
+const GeoLayout rainbow_star_geo[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_SHADOW(1, 178, 100),
+		GEO_OPEN_NODE(),
+			GEO_ASM(0, set_switch_color),
+			GEO_DISPLAY_LIST(LAYER_OPAQUE, rainbow_star_skinned_mesh),
+		GEO_CLOSE_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, rainbow_star_material_revert_render_settings),
+	GEO_CLOSE_NODE(),
+	GEO_END(),
+};
diff --git a/actors/rainbow_star/geo_header.h b/actors/rainbow_star/geo_header.h
new file mode 100644
index 0000000..b5db1f8
--- /dev/null
+++ b/actors/rainbow_star/geo_header.h
@@ -0,0 +1,11 @@
+extern const GeoLayout rainbow_star_geo[];
+extern Vtx rainbow_star_skinned_mesh_vtx_0[12];
+extern Gfx rainbow_star_skinned_mesh_tri_0[];
+extern Vtx rainbow_star_skinned_mesh_vtx_1[3];
+extern Gfx rainbow_star_skinned_mesh_tri_1[];
+extern Vtx rainbow_star_skinned_mesh_vtx_2[6];
+extern Gfx rainbow_star_skinned_mesh_tri_2[];
+
+extern Gfx rainbow_star_skinned_mesh[];
+extern Gfx rainbow_star_material_revert_render_settings[];
+
diff --git a/actors/rainbow_star/mario_metal_stored.rgba16.png b/actors/rainbow_star/mario_metal_stored.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..b1d7f168d4ea4508fdcda85843b19891cac310fe
GIT binary patch
literal 3769
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

literal 0
HcmV?d00001

diff --git a/actors/rainbow_star/mario_rainbow_red.rgba16.png b/actors/rainbow_star/mario_rainbow_red.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..6acfe39168a88bcecf1f4865b056bb38925a28f5
GIT binary patch
literal 4152
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
CxzPOp

literal 0
HcmV?d00001

diff --git a/actors/rainbow_star/model.inc.c b/actors/rainbow_star/model.inc.c
new file mode 100644
index 0000000..0b220f4
--- /dev/null
+++ b/actors/rainbow_star/model.inc.c
@@ -0,0 +1,168 @@
+Lights1 rainbow_star_sm64_material_mario_metal_storage_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 rainbow_star_sm64_material_mario_surface_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Gfx rainbow_star_rainbowsurface_i8_aligner[] = {gsSPEndDisplayList()};
+u8 rainbow_star_rainbowsurface_i8[] = {
+	#include "actors/rainbow_star/rainbowsurface.i8.inc.c"
+};
+
+Gfx rainbow_star_mario_metal_stored_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 rainbow_star_mario_metal_stored_rgba16[] = {
+	#include "actors/rainbow_star/mario_metal_stored.rgba16.inc.c"
+};
+
+Gfx rainbow_star_mario_rainbow_red_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 rainbow_star_mario_rainbow_red_rgba16[] = {
+	#include "actors/rainbow_star/mario_rainbow_red.rgba16.inc.c"
+};
+
+Vtx rainbow_star_skinned_mesh_vtx_0[12] = {
+	{{{0, 50, -12},0, {-16, -16},{0x0, 0x2, 0x81, 0xFF}}},
+	{{{39, 1, 0},0, {-16, -16},{0x50, 0x9E, 0x0, 0xFF}}},
+	{{{0, 18, 0},0, {-16, -16},{0x0, 0x81, 0x0, 0xFF}}},
+	{{{30, 39, 0},0, {-16, -16},{0x7E, 0xEE, 0x0, 0xFF}}},
+	{{{53, 68, 0},0, {-16, -16},{0x76, 0x30, 0x0, 0xFF}}},
+	{{{20, 72, 0},0, {-16, -16},{0x3E, 0x6F, 0x0, 0xFF}}},
+	{{{0, 107, 0},0, {-16, -16},{0x0, 0x7F, 0x0, 0xFF}}},
+	{{{-20, 72, 0},0, {-16, -16},{0xC2, 0x6F, 0x0, 0xFF}}},
+	{{{-53, 68, 0},0, {-16, -16},{0x8A, 0x30, 0x0, 0xFF}}},
+	{{{-30, 39, 0},0, {-16, -16},{0x82, 0xEE, 0x0, 0xFF}}},
+	{{{-39, 1, 0},0, {-16, -16},{0xB0, 0x9E, 0x0, 0xFF}}},
+	{{{0, 50, 12},0, {-16, -16},{0x0, 0x2, 0x7F, 0xFF}}},
+};
+
+Gfx rainbow_star_skinned_mesh_tri_0[] = {
+	gsSPVertex(rainbow_star_skinned_mesh_vtx_0 + 0, 12, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(4, 3, 0, 0),
+	gsSP1Triangle(5, 4, 0, 0),
+	gsSP1Triangle(5, 0, 6, 0),
+	gsSP1Triangle(0, 7, 6, 0),
+	gsSP1Triangle(0, 8, 7, 0),
+	gsSP1Triangle(0, 9, 8, 0),
+	gsSP1Triangle(0, 10, 9, 0),
+	gsSP1Triangle(0, 2, 10, 0),
+	gsSP1Triangle(10, 2, 11, 0),
+	gsSP1Triangle(2, 1, 11, 0),
+	gsSP1Triangle(1, 3, 11, 0),
+	gsSP1Triangle(11, 3, 4, 0),
+	gsSP1Triangle(11, 4, 5, 0),
+	gsSP1Triangle(6, 11, 5, 0),
+	gsSP1Triangle(6, 7, 11, 0),
+	gsSP1Triangle(7, 8, 11, 0),
+	gsSP1Triangle(8, 9, 11, 0),
+	gsSP1Triangle(9, 10, 11, 0),
+	gsSPEndDisplayList(),
+};Vtx rainbow_star_skinned_mesh_vtx_1[3] = {
+	{{{-11, 30, 0},0, {-16, 1008},{0x17, 0xEA, 0x7B, 0xFF}}},
+	{{{7, 50, 0},0, {2032, -16},{0x17, 0xEA, 0x7B, 0xFF}}},
+	{{{-4, 43, 1},0, {708, 346},{0x17, 0xEA, 0x7B, 0xFF}}},
+};
+
+Gfx rainbow_star_skinned_mesh_tri_1[] = {
+	gsSPVertex(rainbow_star_skinned_mesh_vtx_1 + 0, 3, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSPEndDisplayList(),
+};Vtx rainbow_star_skinned_mesh_vtx_2[6] = {
+	{{{7, 50, 0},0, {2032, -16},{0x0, 0xE, 0x7E, 0xFF}}},
+	{{{-11, 50, 0},0, {-16, -16},{0x0, 0xE, 0x7E, 0xFF}}},
+	{{{-4, 43, 1},0, {708, 346},{0x0, 0xE, 0x7E, 0xFF}}},
+	{{{-11, 50, 0},0, {-16, -16},{0xED, 0xFD, 0x7E, 0xFF}}},
+	{{{-11, 30, 0},0, {-16, 1008},{0xED, 0xFD, 0x7E, 0xFF}}},
+	{{{-4, 43, 1},0, {708, 346},{0xED, 0xFD, 0x7E, 0xFF}}},
+};
+
+Gfx rainbow_star_skinned_mesh_tri_2[] = {
+	gsSPVertex(rainbow_star_skinned_mesh_vtx_2 + 0, 6, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_rainbow_star_sm64_material[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, TEXEL0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, TEXEL0),
+	gsSPSetGeometryMode(G_TEXTURE_GEN),
+	gsSPTexture(1983, 1983, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_I, G_IM_SIZ_8b, 32, rainbow_star_rainbowsurface_i8),
+	gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_8b, 4, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_rainbow_star_sm64_material[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_TEXTURE_GEN),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_rainbow_star_sm64_material_mario_metal_storage[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT, TEXEL0, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, rainbow_star_mario_metal_stored_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 16, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 252, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 16, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 124),
+	gsSPSetLights1(rainbow_star_sm64_material_mario_metal_storage_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_rainbow_star_sm64_material_mario_surface[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT, TEXEL0, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, rainbow_star_mario_rainbow_red_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 16, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 252, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 16, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 124),
+	gsSPSetLights1(rainbow_star_sm64_material_mario_surface_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx rainbow_star_skinned_mesh[] = {
+	gsSPDisplayList(mat_rainbow_star_sm64_material),
+	gsSPDisplayList(rainbow_star_skinned_mesh_tri_0),
+	gsSPDisplayList(mat_revert_rainbow_star_sm64_material),
+	gsSPDisplayList(mat_rainbow_star_sm64_material_mario_metal_storage),
+	gsSPDisplayList(rainbow_star_skinned_mesh_tri_1),
+	gsSPDisplayList(mat_rainbow_star_sm64_material_mario_surface),
+	gsSPDisplayList(rainbow_star_skinned_mesh_tri_2),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx rainbow_star_material_revert_render_settings[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPClearGeometryMode(G_TEXTURE_GEN),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 0),
+	gsDPSetEnvColor(255, 255, 255, 255),
+	gsDPSetAlphaCompare(G_AC_NONE),
+	gsSPEndDisplayList(),
+};
diff --git a/actors/rainbow_star/rainbowsurface.i8.png b/actors/rainbow_star/rainbowsurface.i8.png
new file mode 100644
index 0000000000000000000000000000000000000000..f2fb8311313df6373905c8f675efdaec9d23933a
GIT binary patch
literal 993
zcmV<710MW|P)<h;3K|Lk000e1NJLTq001BW001Bm1^@s6BkHEN00009a7bBm000XU
z000XU0RWnu7ytkRlSxEDRA>d|*jsPZKnw-oSqK*)c;Wy5Oc1nOmde$)kxsBC-Ak#2
zUtHVA9v{zSlI`JF$?-V;Q(0ar@B5N@cW+DPxDIjn*C(JO`nzP?_N$UH#5;SN`FGE=
zpMV+RA0=b_EZH`_l&t>59ZS}@zYZm=G1R&F06M~VC2K>7q#weL8xTJ&?{&!-k0*N!
zHp1}lO2)X_BhV4GAc7iWYh1n^Ori!LkDWN{(TK7Q!eFKYu)v#=F*K@RYJ~VTjF|k?
z2*Jze*GJlL`eW1X2ywRfW&j!kupnC_Y&sjyL8wcsE03M^vkshf=_H157w2Cz#E}bX
zu#5AjRwoHr4-s*8)=4{wiYH-p(+^J{zLp%15)jTKt3fygXnr_;_0kUyXJFZIM_3;1
zSyzXDrZ;baByPv}HJ*eJ%>@%Dj;MMFWZVE;UTpdBv^w1&^kdycK?S@o^9!ph*b!Hc
z&UN@T%+7TYg%j7OI70d~Fn;yv_azVC0}2XcK?{keM$BY$AnL<qzBoS{VSat3Uw`~?
zA4|sgQliSLo$TFj0h2_~q?JsYpVlB7Q3N!exDL<X>FkG%hrG=I1Wbrc+vzN1FmS06
z<ew3RGa&X;wY#h1bNE(r{?B0z`ohzoFD-TsK%RK&Sv>JG+aMCRI2sv9I|+EE6-GF5
zS%)pJBRY$#Gt=sHxaILXpbL-TS<NHvmX(QkE+`)^b>hVhri;VPbeFIG=>&MDJ>v@7
zX#^!EF}An?IbrhEgSSrVuJOd3YpZ`c0f-xf!WwspAojgv{ke&#%Pnn#QJ1Yg|8wip
z39zt1uyY{%2EnG~+i8<l2VnzZ%fGg^ab4X-!x~JW2JI~3Y<PAa?X(kb-NYFj{8M!j
z&pXUpYx7&cLP=bMh|>J>*z);lpP=kcdql*~9SGtGtH*!(Er1XJ0tktJDtY)<Qpp%_
zwETQ6!i(?Kh-W^3*2$em9O1+-hzaBo7dHqRUR;9)!G=3mXC1`(+3M>r2O&;-^iDs9
zK9r2%@=}OKOo7DlYm9wutv=#u&xq>>pXGDOdXy93C>w-$YK^4-R<`vFBG>VjNq^dl
zo$oFu3uWR<vmI%D**JFqf9m$v;HAVb&Cf<VJ9pZNaOuqk(7pz{1^4<jvKN2tfw`k{
z0G@sE_5|#0{8HRr;)%-v=jE4ieX3&+H#-3qoawGnc^Zaei+4J42&exK4Uy8GPVM~p
P00000NkvXXu0mjfx(?MU

literal 0
HcmV?d00001

diff --git a/actors/rainbow_star/texscroll.inc.c b/actors/rainbow_star/texscroll.inc.c
new file mode 100644
index 0000000..c888f94
--- /dev/null
+++ b/actors/rainbow_star/texscroll.inc.c
@@ -0,0 +1,3 @@
+void scroll_actor_geo_rainbow_star() {
+	
+}
diff --git a/actors/rainbow_star/texscroll.inc.h b/actors/rainbow_star/texscroll.inc.h
new file mode 100644
index 0000000..a55e253
--- /dev/null
+++ b/actors/rainbow_star/texscroll.inc.h
@@ -0,0 +1,3 @@
+
+extern void scroll_actor_geo_rainbow_star();
+
diff --git a/actors/rainbow_trail/geo.inc.c b/actors/rainbow_trail/geo.inc.c
new file mode 100644
index 0000000..1d0e73f
--- /dev/null
+++ b/actors/rainbow_trail/geo.inc.c
@@ -0,0 +1,92 @@
+// 0x16000B10
+const GeoLayout rainbow_trail_shadow_geo[] = {
+   GEO_SHADOW(SHADOW_CIRCLE_4_VERTS, 0x50, 20),
+   GEO_OPEN_NODE(),
+      GEO_BRANCH_AND_LINK(red_trail_geo),
+   GEO_CLOSE_NODE(),
+   GEO_END(),
+};
+
+// 0x16000B2C
+const GeoLayout red_trail_geo[] = {
+   GEO_NODE_START(),
+   GEO_OPEN_NODE(),
+      GEO_SWITCH_CASE(8, geo_switch_anim_state),
+      GEO_OPEN_NODE(),
+         GEO_DISPLAY_LIST(LAYER_TRANSPARENT, rainbow_trail_seg3_dl_0301B3B0),  
+      GEO_CLOSE_NODE(),
+   GEO_CLOSE_NODE(),
+   GEO_END(),
+};
+
+// 0x16000B8C
+const GeoLayout blue_trail_geo[] = {
+   GEO_NODE_START(),
+   GEO_OPEN_NODE(),
+      GEO_SWITCH_CASE(8, geo_switch_anim_state),
+      GEO_OPEN_NODE(),
+         GEO_DISPLAY_LIST(LAYER_TRANSPARENT, rainbow_trail_seg3_dl_0301B500),
+      GEO_CLOSE_NODE(),
+   GEO_CLOSE_NODE(),
+   GEO_END(),
+};
+
+
+
+const GeoLayout green_trail_geo[] = {
+   GEO_NODE_START(),
+   GEO_OPEN_NODE(),
+      GEO_SWITCH_CASE(8, geo_switch_anim_state),
+      GEO_OPEN_NODE(),
+    GEO_DISPLAY_LIST(LAYER_TRANSPARENT, rainbow_trail_seg3_dl_0301B650),
+      GEO_CLOSE_NODE(),
+   GEO_CLOSE_NODE(),
+   GEO_END(),
+};
+
+
+const GeoLayout white_trail_geo[] = {
+    GEO_NODE_START(),
+    GEO_OPEN_NODE(),
+    GEO_SWITCH_CASE(8, geo_switch_anim_state),
+    GEO_OPEN_NODE(),
+    GEO_DISPLAY_LIST(LAYER_TRANSPARENT, rainbow_trail_seg3_dl_white_texture),
+    GEO_CLOSE_NODE(),
+    GEO_CLOSE_NODE(),
+    GEO_END(),
+};
+
+const GeoLayout yellow_trail_geo[] = {
+    GEO_NODE_START(),
+    GEO_OPEN_NODE(),
+    GEO_SWITCH_CASE(8, geo_switch_anim_state),
+    GEO_OPEN_NODE(),
+    GEO_DISPLAY_LIST(LAYER_TRANSPARENT, rainbow_trail_seg3_dl_yellow_texture),
+    GEO_CLOSE_NODE(),
+    GEO_CLOSE_NODE(),
+    GEO_END(),
+};
+
+
+const GeoLayout cyan_trail_geo[] = {
+    GEO_NODE_START(),
+    GEO_OPEN_NODE(),
+    GEO_SWITCH_CASE(8, geo_switch_anim_state),
+    GEO_OPEN_NODE(),
+    GEO_DISPLAY_LIST(LAYER_TRANSPARENT, rainbow_trail_seg3_dl_cyan_texture),
+    GEO_CLOSE_NODE(),
+    GEO_CLOSE_NODE(),
+    GEO_END(),
+};
+
+
+const GeoLayout pink_trail_geo[] = {
+    GEO_NODE_START(),
+    GEO_OPEN_NODE(),
+    GEO_SWITCH_CASE(8, geo_switch_anim_state),
+    GEO_OPEN_NODE(),
+    GEO_DISPLAY_LIST(LAYER_TRANSPARENT, rainbow_trail_seg3_dl_pink_texture),
+    GEO_CLOSE_NODE(),
+    GEO_CLOSE_NODE(),
+    GEO_END(),
+};
\ No newline at end of file
diff --git a/actors/rainbow_trail/model.inc.c b/actors/rainbow_trail/model.inc.c
new file mode 100644
index 0000000..19fe0e2
--- /dev/null
+++ b/actors/rainbow_trail/model.inc.c
@@ -0,0 +1,225 @@
+// rainbow_trail
+
+// 0x030172E0
+static const Vtx rainbow_trail_seg3_vertex_030172E0[] = {
+   {{{   -80,    -80,      0}, 0, {     0,    992}, {0x00, 0x00, 0x00, 0x00}}},
+    {{{    80,    -80,      0}, 0, {   992,    992}, {0x00, 0x00, 0x00, 0x00}}},
+    {{{    80,     80,      0}, 0, {   992,      0}, {0x00, 0x00, 0x00, 0x00}}},
+    {{{   -80,     80,      0}, 0, {     0,      0}, {0x00, 0x00, 0x00, 0x00}}},
+};
+
+// 0x03017320
+ALIGNED8 static const u8 rainbow_trail_seg3_texture_03017320[] = {
+#include "actors/rainbow_trail/rainbow_trail.ia16.inc.c"
+};
+
+
+//red
+// 0x0301B320 - 0x0301B3B0
+const Gfx rainbow_trail_seg3_dl_0301B320[] = {
+    gsSPClearGeometryMode(G_LIGHTING | G_SHADING_SMOOTH),
+    gsDPSetEnvColor(255, 102, 100, 200),
+    gsDPSetCombineMode(G_CC_FADEA, G_CC_FADEA),
+    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+    gsDPLoadSync(),
+    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+    gsSPVertex(rainbow_trail_seg3_vertex_030172E0, 4, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+    gsDPPipeSync(),
+    gsSPSetGeometryMode(G_LIGHTING | G_SHADING_SMOOTH),
+    gsDPSetEnvColor(255, 255, 255, 255),
+    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+    gsSPEndDisplayList(),
+};
+
+// 0x0301B3B0 - 0x0301B3C8
+const Gfx rainbow_trail_seg3_dl_0301B3B0[] = {
+    gsDPPipeSync(),
+    gsDPSetTextureImage(G_IM_FMT_IA, G_IM_SIZ_16b, 1, rainbow_trail_seg3_texture_03017320),
+    gsSPBranchList(rainbow_trail_seg3_dl_0301B320),
+};
+//red
+
+//blue
+// 0x0301B470 - 0x0301B500
+const Gfx rainbow_trail_seg3_dl_0301B470[] = {
+    gsSPClearGeometryMode(G_LIGHTING | G_SHADING_SMOOTH),
+    gsDPSetEnvColor(102, 102, 255, 255),
+    gsDPSetCombineMode(G_CC_FADEA, G_CC_FADEA),
+    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+    gsDPLoadSync(),
+    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+    gsSPVertex(rainbow_trail_seg3_vertex_030172E0, 4, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+    gsDPPipeSync(),
+    gsSPSetGeometryMode(G_LIGHTING | G_SHADING_SMOOTH),
+    gsDPSetEnvColor(255, 255, 255, 255),
+    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+    gsSPEndDisplayList(),
+};
+
+// 0x0301B500 - 0x0301B518
+const Gfx rainbow_trail_seg3_dl_0301B500[] = {
+    gsDPPipeSync(),
+    gsDPSetTextureImage(G_IM_FMT_IA, G_IM_SIZ_16b, 1, rainbow_trail_seg3_texture_03017320),
+    gsSPBranchList(rainbow_trail_seg3_dl_0301B470),
+};
+//blue
+
+
+//green
+				//add150
+const Gfx rainbow_trail_seg3_dl_0301B5C0[] = {
+    gsSPClearGeometryMode(G_LIGHTING | G_SHADING_SMOOTH),
+    gsDPSetEnvColor(0, 255, 0, 255),
+    gsDPSetCombineMode(G_CC_FADEA, G_CC_FADEA),
+    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+    gsDPLoadSync(),
+    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_CLAMP, 5, G_TX_NOLOD),
+    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+    gsSPVertex(rainbow_trail_seg3_vertex_030172E0, 4, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+    gsDPPipeSync(),
+    gsSPSetGeometryMode(G_LIGHTING | G_SHADING_SMOOTH),
+    gsDPSetEnvColor(255, 255, 255, 255),
+    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+    gsSPEndDisplayList(),
+};
+
+const Gfx rainbow_trail_seg3_dl_0301B650[] = {
+    gsDPPipeSync(),
+    gsDPSetTextureImage(G_IM_FMT_IA, G_IM_SIZ_16b, 1, rainbow_trail_seg3_texture_03017320),
+    gsSPBranchList(rainbow_trail_seg3_dl_0301B5C0),
+};
+
+
+
+// white
+const Gfx rainbow_trail_seg3_white_color[] = {
+    gsSPClearGeometryMode(G_LIGHTING | G_SHADING_SMOOTH),
+    gsDPSetEnvColor(255, 255, 255, 255),
+    gsDPSetCombineMode(G_CC_FADEA, G_CC_FADEA),
+    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD,
+                G_TX_CLAMP, 5, G_TX_NOLOD),
+    gsDPLoadSync(),
+    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD,
+                G_TX_CLAMP, 5, G_TX_NOLOD),
+    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+    gsSPVertex(rainbow_trail_seg3_vertex_030172E0, 4, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 0, 2, 3, 0x0),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+    gsDPPipeSync(),
+    gsSPSetGeometryMode(G_LIGHTING | G_SHADING_SMOOTH),
+    gsDPSetEnvColor(255, 255, 255, 255),
+    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+    gsSPEndDisplayList(),
+};
+
+const Gfx rainbow_trail_seg3_dl_white_texture[] = {
+    gsDPPipeSync(),
+    gsDPSetTextureImage(G_IM_FMT_IA, G_IM_SIZ_16b, 1, rainbow_trail_seg3_texture_03017320),
+    gsSPBranchList(rainbow_trail_seg3_white_color),
+};
+
+
+// yellow
+const Gfx rainbow_trail_seg3_yellow_color[] = {
+    gsSPClearGeometryMode(G_LIGHTING | G_SHADING_SMOOTH),
+    gsDPSetEnvColor(255, 255, 0, 255),
+    gsDPSetCombineMode(G_CC_FADEA, G_CC_FADEA),
+    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD,
+                G_TX_CLAMP, 5, G_TX_NOLOD),
+    gsDPLoadSync(),
+    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD,
+                G_TX_CLAMP, 5, G_TX_NOLOD),
+    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+    gsSPVertex(rainbow_trail_seg3_vertex_030172E0, 4, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 0, 2, 3, 0x0),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+    gsDPPipeSync(),
+    gsSPSetGeometryMode(G_LIGHTING | G_SHADING_SMOOTH),
+    gsDPSetEnvColor(255, 255, 255, 255),
+    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+    gsSPEndDisplayList(),
+};
+
+const Gfx rainbow_trail_seg3_dl_yellow_texture[] = {
+    gsDPPipeSync(),
+    gsDPSetTextureImage(G_IM_FMT_IA, G_IM_SIZ_16b, 1, rainbow_trail_seg3_texture_03017320),
+    gsSPBranchList(rainbow_trail_seg3_yellow_color),
+};
+
+
+// cyan
+const Gfx rainbow_trail_seg3_cyan_color[] = {
+    gsSPClearGeometryMode(G_LIGHTING | G_SHADING_SMOOTH),
+    gsDPSetEnvColor(0, 255, 255, 255),
+    gsDPSetCombineMode(G_CC_FADEA, G_CC_FADEA),
+    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD,
+                G_TX_CLAMP, 5, G_TX_NOLOD),
+    gsDPLoadSync(),
+    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD,
+                G_TX_CLAMP, 5, G_TX_NOLOD),
+    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+    gsSPVertex(rainbow_trail_seg3_vertex_030172E0, 4, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 0, 2, 3, 0x0),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+    gsDPPipeSync(),
+    gsSPSetGeometryMode(G_LIGHTING | G_SHADING_SMOOTH),
+    gsDPSetEnvColor(255, 255, 255, 255),
+    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+    gsSPEndDisplayList(),
+};
+
+const Gfx rainbow_trail_seg3_dl_cyan_texture[] = {
+    gsDPPipeSync(),
+    gsDPSetTextureImage(G_IM_FMT_IA, G_IM_SIZ_16b, 1, rainbow_trail_seg3_texture_03017320),
+    gsSPBranchList(rainbow_trail_seg3_cyan_color),
+};
+
+//pink
+
+const Gfx rainbow_trail_seg3_pink_color[] = {
+    gsSPClearGeometryMode(G_LIGHTING | G_SHADING_SMOOTH),
+    gsDPSetEnvColor(255, 102, 255, 255),
+    gsDPSetCombineMode(G_CC_FADEA, G_CC_FADEA),
+    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_16b, 0, 0, G_TX_LOADTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD,
+                G_TX_CLAMP, 5, G_TX_NOLOD),
+    gsDPLoadSync(),
+    gsDPLoadBlock(G_TX_LOADTILE, 0, 0, 32 * 32 - 1, CALC_DXT(32, G_IM_SIZ_16b_BYTES)),
+    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_CLAMP, 5, G_TX_NOLOD,
+                G_TX_CLAMP, 5, G_TX_NOLOD),
+    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+    gsSPVertex(rainbow_trail_seg3_vertex_030172E0, 4, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 0, 2, 3, 0x0),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF),
+    gsDPPipeSync(),
+    gsSPSetGeometryMode(G_LIGHTING | G_SHADING_SMOOTH),
+    gsDPSetEnvColor(255, 255, 255, 255),
+    gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
+    gsSPEndDisplayList(),
+};
+
+const Gfx rainbow_trail_seg3_dl_pink_texture[] = {
+    gsDPPipeSync(),
+    gsDPSetTextureImage(G_IM_FMT_IA, G_IM_SIZ_16b, 1, rainbow_trail_seg3_texture_03017320),
+    gsSPBranchList(rainbow_trail_seg3_pink_color),
+};
\ No newline at end of file
diff --git a/actors/rainbow_trail/rainbow_trail.ia16.png b/actors/rainbow_trail/rainbow_trail.ia16.png
new file mode 100644
index 0000000000000000000000000000000000000000..24b60d07830653d0c739f3839c653611bac5a871
GIT binary patch
literal 6121
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
DUnv$;

literal 0
HcmV?d00001

diff --git a/actors/skipsqueak/anim_header.h b/actors/skipsqueak/anim_header.h
new file mode 100644
index 0000000..f57fb4c
--- /dev/null
+++ b/actors/skipsqueak/anim_header.h
@@ -0,0 +1 @@
+extern const struct Animation *const skipsqueak_anims[];
diff --git a/actors/skipsqueak/anims/anim_ArmatureObjAction.inc.c b/actors/skipsqueak/anims/anim_ArmatureObjAction.inc.c
new file mode 100644
index 0000000..64dccf1
--- /dev/null
+++ b/actors/skipsqueak/anims/anim_ArmatureObjAction.inc.c
@@ -0,0 +1,122 @@
+static const s16 skipsqueak_anim_ArmatureObjAction_values[] = {
+	0x0000, 0x0038, 0x0038, 0x0036, 0x0035, 0x0036, 0x0037, 0x0039, 0x003C, 
+	0x003F, 0x0041, 0x0044, 0x0046, 0x0048, 0x0048, 0x0048, 0x0046, 0x0045, 
+	0x0042, 0x0040, 0x003D, 0x003B, 0x0039, 0x0037, 0x0036, 0x0035, 0x0036, 
+	0x0037, 0x0039, 0x003C, 0x003F, 0x0041, 0x0044, 0x0046, 0x0048, 0x0048, 
+	0x0048, 0x0046, 0x0045, 0x0042, 0x0040, 0x003D, 0x003B, 0x0039, 0x0037, 
+	0x0036, 0x0035, 0x0036, 0x0037, 0x0039, 0x003C, 0x003F, 0x0041, 0x0044, 
+	0x0046, 0x0048, 0x0048, 0x0048, 0x0046, 0x0045, 0x0042, 0x0040, 0x003D, 
+	0x003B, 0x0039, 0x0037, 0x0036, 0x0035, 0x0036, 0x0037, 0x0039, 0x003C, 
+	0x003F, 0x0041, 0x0044, 0x0046, 0x0048, 0x0048, 0x0048, 0x0046, 0x0045, 
+	0x0042, 0x0040, 0x003D, 0x003B, 0x0039, 0x0000, 0x0000, 0x4000, 0x0000, 
+	0x0000, 0xFFFF, 0x4000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0x0000, 0x0000, 0xFFFF, 0x01AF, 0x01AF, 0x01AA, 0x019C, 0x0186, 0x016B, 
+	0x014D, 0x012C, 0x010C, 0x00ED, 0x00D2, 0x00BD, 0x00AF, 0x00A9, 0x00B1, 
+	0x00C5, 0x00E4, 0x010A, 0x0134, 0x015F, 0x018A, 0x01AF, 0x01CE, 0x01E2, 
+	0x01EA, 0x01E1, 0x01C9, 0x01A5, 0x0179, 0x014A, 0x011A, 0x00EF, 0x00CB, 
+	0x00B2, 0x00A9, 0x00B1, 0x00C5, 0x00E4, 0x010A, 0x0134, 0x015F, 0x018A, 
+	0x01AF, 0x01CE, 0x01E2, 0x01EA, 0x01E1, 0x01C9, 0x01A5, 0x0179, 0x014A, 
+	0x011A, 0x00EF, 0x00CB, 0x00B2, 0x00A9, 0x00B1, 0x00C5, 0x00E4, 0x010A, 
+	0x0134, 0x015F, 0x018A, 0x01AF, 0x01CE, 0x01E2, 0x01EA, 0x01E1, 0x01C9, 
+	0x01A5, 0x0179, 0x014A, 0x011A, 0x00EF, 0x00CB, 0x00B2, 0x00A9, 0x00B1, 
+	0x00C5, 0x00E4, 0x010A, 0x0134, 0x015F, 0x018A, 0x01AF, 0xFEFD, 0xFEFD, 
+	0xFF1A, 0xFF6A, 0xFFE2, 0x007A, 0x0125, 0x01DB, 0x0290, 0x033B, 0x03D2, 
+	0x044A, 0x049A, 0x04B7, 0x048D, 0x041B, 0x0370, 0x029C, 0x01B1, 0x00BD, 
+	0xFFD0, 0xFEFD, 0xFE52, 0xFDE0, 0xFDB6, 0xFDE8, 0xFE70, 0xFF39, 0x002E, 
+	0x0137, 0x0240, 0x0334, 0x03FD, 0x0485, 0x04B7, 0x048D, 0x041B, 0x0370, 
+	0x029C, 0x01B1, 0x00BD, 0xFFD0, 0xFEFD, 0xFE52, 0xFDE0, 0xFDB6, 0xFDE8, 
+	0xFE70, 0xFF39, 0x002E, 0x0137, 0x0240, 0x0334, 0x03FD, 0x0485, 0x04B7, 
+	0x048D, 0x041B, 0x0370, 0x029C, 0x01B1, 0x00BD, 0xFFD0, 0xFEFD, 0xFE52, 
+	0xFDE0, 0xFDB6, 0xFDE8, 0xFE70, 0xFF39, 0x002E, 0x0137, 0x0240, 0x0334, 
+	0x03FD, 0x0485, 0x04B7, 0x048D, 0x041B, 0x0370, 0x029C, 0x01B1, 0x00BD, 
+	0xFFD0, 0xFEFD, 0xBEB1, 0xBEB1, 0xBE94, 0xBE42, 0xBDC7, 0xBD2D, 0xBC7E, 
+	0xBBC5, 0xBB0C, 0xBA5D, 0xB9C3, 0xB948, 0xB8F7, 0xB8D9, 0xB904, 0xB979, 
+	0xBA27, 0xBAFF, 0xBBF0, 0xBCE9, 0xBDD9, 0xBEB1, 0xBF60, 0xBFD5, 0xBFFF, 
+	0xBFCC, 0xBF41, 0xBE74, 0xBD7B, 0xBC6C, 0xBB5D, 0xBA65, 0xB998, 0xB90C, 
+	0xB8D9, 0xB904, 0xB979, 0xBA27, 0xBAFF, 0xBBF0, 0xBCE9, 0xBDD9, 0xBEB1, 
+	0xBF60, 0xBFD5, 0xBFFF, 0xBFCC, 0xBF41, 0xBE74, 0xBD7B, 0xBC6C, 0xBB5D, 
+	0xBA65, 0xB998, 0xB90C, 0xB8D9, 0xB904, 0xB979, 0xBA27, 0xBAFF, 0xBBF0, 
+	0xBCE9, 0xBDD9, 0xBEB1, 0xBF60, 0xBFD5, 0xBFFF, 0xBFCC, 0xBF41, 0xBE74, 
+	0xBD7B, 0xBC6C, 0xBB5D, 0xBA65, 0xB998, 0xB90C, 0xB8D9, 0xB904, 0xB979, 
+	0xBA27, 0xBAFF, 0xBBF0, 0xBCE9, 0xBDD9, 0xBEB1, 0x0000, 0xFFFF, 0xFFFF, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x003A, 0x003A, 0x003F, 
+	0x004E, 0x0063, 0x007E, 0x009C, 0x00BD, 0x00DD, 0x00FC, 0x0116, 0x012C, 
+	0x013A, 0x013F, 0x0138, 0x0123, 0x0105, 0x00DF, 0x00B5, 0x008A, 0x0060, 
+	0x003A, 0x001C, 0x0007, 0x0000, 0x0009, 0x0021, 0x0045, 0x0070, 0x00A0, 
+	0x00CF, 0x00FA, 0x011E, 0x0136, 0x013F, 0x0138, 0x0123, 0x0105, 0x00DF, 
+	0x00B5, 0x008A, 0x0060, 0x003A, 0x001C, 0x0007, 0x0000, 0x0009, 0x0021, 
+	0x0045, 0x0070, 0x00A0, 0x00CF, 0x00FA, 0x011E, 0x0136, 0x013F, 0x0138, 
+	0x0123, 0x0105, 0x00DF, 0x00B5, 0x008A, 0x0060, 0x003A, 0x001C, 0x0007, 
+	0x0000, 0x0009, 0x0021, 0x0045, 0x0070, 0x00A0, 0x00CF, 0x00FA, 0x011E, 
+	0x0136, 0x013F, 0x0138, 0x0123, 0x0105, 0x00DF, 0x00B5, 0x008A, 0x0060, 
+	0x003A, 0xFEB8, 0xFEB8, 0xFE9B, 0xFE4B, 0xFDD3, 0xFD3C, 0xFC91, 0xFBDB, 
+	0xFB26, 0xFA7A, 0xF9E3, 0xF96B, 0xF91B, 0xF8FF, 0xF928, 0xF99B, 0xFA46, 
+	0xFB19, 0xFC05, 0xFCF9, 0xFDE4, 0xFEB8, 0xFF63, 0xFFD5, 0xFFFF, 0xFFCD, 
+	0xFF45, 0xFE7C, 0xFD88, 0xFC7F, 0xFB75, 0xFA82, 0xF9B9, 0xF931, 0xF8FF, 
+	0xF928, 0xF99B, 0xFA46, 0xFB19, 0xFC05, 0xFCF9, 0xFDE4, 0xFEB8, 0xFF63, 
+	0xFFD5, 0xFFFF, 0xFFCD, 0xFF45, 0xFE7C, 0xFD88, 0xFC7F, 0xFB75, 0xFA82, 
+	0xF9B9, 0xF931, 0xF8FF, 0xF928, 0xF99B, 0xFA46, 0xFB19, 0xFC05, 0xFCF9, 
+	0xFDE4, 0xFEB8, 0xFF63, 0xFFD5, 0xFFFF, 0xFFCD, 0xFF45, 0xFE7C, 0xFD88, 
+	0xFC7F, 0xFB75, 0xFA82, 0xF9B9, 0xF931, 0xF8FF, 0xF928, 0xF99B, 0xFA46, 
+	0xFB19, 0xFC05, 0xFCF9, 0xFDE4, 0xFEB8, 0xBEAE, 0xBEAE, 0xBE90, 0xBE3E, 
+	0xBDC2, 0xBD26, 0xBC76, 0xBBBB, 0xBB00, 0xBA4F, 0xB9B3, 0xB937, 0xB8E5, 
+	0xB8C7, 0xB8F2, 0xB968, 0xBA19, 0xBAF3, 0xBBE6, 0xBCE1, 0xBDD4, 0xBEAE, 
+	0xBF5E, 0xBFD4, 0xBFFF, 0xBFCC, 0xBF3F, 0xBE70, 0xBD75, 0xBC63, 0xBB52, 
+	0xBA56, 0xB988, 0xB8FB, 0xB8C7, 0xB8F2, 0xB968, 0xBA19, 0xBAF3, 0xBBE6, 
+	0xBCE1, 0xBDD4, 0xBEAE, 0xBF5E, 0xBFD4, 0xBFFF, 0xBFCC, 0xBF3F, 0xBE70, 
+	0xBD75, 0xBC63, 0xBB52, 0xBA56, 0xB988, 0xB8FB, 0xB8C7, 0xB8F2, 0xB968, 
+	0xBA19, 0xBAF3, 0xBBE6, 0xBCE1, 0xBDD4, 0xBEAE, 0xBF5E, 0xBFD4, 0xBFFF, 
+	0xBFCC, 0xBF3F, 0xBE70, 0xBD75, 0xBC63, 0xBB52, 0xBA56, 0xB988, 0xB8FB, 
+	0xB8C7, 0xB8F2, 0xB968, 0xBA19, 0xBAF3, 0xBBE6, 0xBCE1, 0xBDD4, 0xBEAE, 
+	0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0xFFFF, 0xFFFF, 0xFD96, 0xF91C, 0xF6B4, 0xF6B4, 0xF6B4, 0xF6B4, 0xF6B4, 
+	0xF6B4, 0xF6B4, 0xF6B4, 0xF6B4, 0xF6B4, 0xF6B4, 0xF6B4, 0xF6B4, 0xF6B4, 
+	0xFB8C, 0x048B, 0x0963, 0x0963, 0x0963, 0x0963, 0x0963, 0x0963, 0x0963, 
+	0x0963, 0x0963, 0x0963, 0x0963, 0x0963, 0x0963, 0x0963, 0x0963, 0x06F4, 
+	0x026F, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0xFFC4, 0xFF57, 0xFF1D, 0xFF1D, 0xFF1D, 
+	0xFF1D, 0xFF1D, 0xFF1D, 0xFF1D, 0xFF1D, 0xFF1D, 0xFF1D, 0xFF1D, 0xFF1D, 
+	0xFF1D, 0xFF1D, 0xFE64, 0xFD0E, 0xFC56, 0xFC56, 0xFC56, 0xFC56, 0xFC56, 
+	0xFC56, 0xFC56, 0xFC56, 0xFC56, 0xFC56, 0xFC56, 0xFC56, 0xFC56, 0xFC56, 
+	0xFC56, 0xFD49, 0xFF0C, 0xFFFF, 0xFFFF, 0xFFFF, 0x03E4, 0x0B5D, 0x101E, 
+	0x1135, 0x11F0, 0x1262, 0x129C, 0x12B2, 0x12B5, 0x0848, 0xFD52, 0xFC6C, 
+	0xFBD2, 0xFB74, 0xFB44, 0xFB32, 0xFB30, 0xFB86, 0xFC6D, 0xFDBB, 0xFF48, 
+	0x00EA, 0x0276, 0x03C5, 0x04AC, 0x0502, 0x0479, 0x0318, 0x0139, 0xFF33, 
+	0xFD60, 0xFC19, 0xFB69, 0xFB0F, 0xFAEE, 0xFAE9, 0xFCE3, 0x0090, 0x028A, 
+	0x026F, 0x022F, 0x01E2, 0x01A1, 0x0186, 0x01A8, 0x01FF, 0x027B, 0x0309, 
+	0x0397, 0x0413, 0x046B, 0x048C, 0x02F2, 0xFFE2, 0xFE00, 0xFDA0, 0xFD53, 
+	0xFD16, 0xFCE9, 0xFCC9, 0xFCB3, 0xFCA6, 0xFC9F, 0xFC9D, 0xFC9C, 0xFCA2, 
+	0xFCC9, 0xFD32, 0xFE00, 0xFF4E, 0x00A2, 0x013E, 0x0137, 0x0122, 0x0104, 
+	0x00DE, 0x00B5, 0x0089, 0x0060, 0x003A, 0x001C, 0x0007, 0xFFFF, 
+};
+
+static const u16 skipsqueak_anim_ArmatureObjAction_indices[] = {
+	0x0001, 0x0000, 0x0055, 0x0001, 0x0001, 0x0056, 0x0001, 0x0057, 0x0001, 
+	0x0058, 0x0001, 0x0059, 0x0001, 0x005A, 0x0001, 0x005B, 0x0001, 0x005C, 
+	0x0001, 0x005D, 0x0001, 0x005E, 0x0001, 0x005F, 0x0001, 0x0060, 0x0001, 
+	0x0061, 0x0001, 0x0062, 0x0001, 0x0063, 0x0001, 0x0064, 0x0001, 0x0065, 
+	0x0055, 0x0066, 0x0055, 0x00BB, 0x0055, 0x0110, 0x0001, 0x0165, 0x0001, 
+	0x0166, 0x0001, 0x0167, 0x0001, 0x0168, 0x0001, 0x0169, 0x0001, 0x016A, 
+	0x0001, 0x016B, 0x0001, 0x016C, 0x0001, 0x016D, 0x0055, 0x016E, 0x0055, 
+	0x01C3, 0x0055, 0x0218, 0x004A, 0x026D, 0x004A, 0x02B7, 0x0055, 0x0301, 
+	
+};
+
+static const struct Animation skipsqueak_anim_ArmatureObjAction = {
+	0,
+	0,
+	0,
+	1,
+	84,
+	ANIMINDEX_NUMPARTS(skipsqueak_anim_ArmatureObjAction_indices),
+	skipsqueak_anim_ArmatureObjAction_values,
+	skipsqueak_anim_ArmatureObjAction_indices,
+	0,
+};
+
diff --git a/actors/skipsqueak/anims/anim_jump.inc.c b/actors/skipsqueak/anims/anim_jump.inc.c
new file mode 100644
index 0000000..38f7685
--- /dev/null
+++ b/actors/skipsqueak/anims/anim_jump.inc.c
@@ -0,0 +1,50 @@
+static const s16 skipsqueak_anim_jump_values[] = {
+	0x0000, 0x0038, 0x0000, 0x0000, 0x0000, 0xEF67, 0xD097, 0x4000, 0xD097, 
+	0xEF67, 0x0000, 0x4000, 0x4000, 0x40E9, 0x4299, 0x3C7E, 0x4299, 0x40E9, 
+	0x4000, 0x0000, 0x0000, 0xEF67, 0xD097, 0x4000, 0xD097, 0xEF67, 0x0000, 
+	0x0000, 0xFFFF, 0x4000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
+	0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
+	0xFFFF, 0x0000, 0x0000, 0x0000, 0xF8E2, 0xEBAC, 0xE48E, 0xE731, 0xE9D3, 
+	0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
+	0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
+	0x0000, 0xFFFF, 0x01AF, 0xFEFD, 0xBEB1, 0xBEB1, 0xC045, 0xC334, 0xC4C8, 
+	0xC104, 0xBA06, 0xB642, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
+	0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
+	0xFFFF, 0x0000, 0x0000, 0x0000, 0x0CD3, 0x24A5, 0x3179, 0x2C55, 0x2732, 
+	0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
+	0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
+	0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
+	0x003A, 0xFEB8, 0xBEAE, 0xBEAE, 0xC042, 0xC331, 0xC4C5, 0xC446, 0xC294, 
+	0xBF5C, 0xBB01, 0xB8B1, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x070F, 0x142C, 0x1B3C, 0x0F0F, 0xF872, 
+	0xEC46, 0xF1F9, 0xF7AC, 0xF4B7, 0xEF3A, 0xEC46, 
+};
+
+static const u16 skipsqueak_anim_jump_indices[] = {
+	0x0001, 0x0000, 0x0001, 0x0001, 0x0001, 0x0002, 0x0008, 0x0003, 0x0008, 
+	0x000B, 0x0008, 0x0013, 0x0001, 0x001B, 0x0001, 0x001C, 0x0001, 0x001D, 
+	0x0006, 0x001E, 0x0007, 0x0024, 0x0008, 0x002B, 0x0003, 0x0033, 0x0008, 
+	0x0036, 0x000A, 0x003E, 0x000A, 0x0048, 0x0009, 0x0052, 0x000A, 0x005B, 
+	0x0001, 0x0065, 0x0001, 0x0066, 0x0008, 0x0067, 0x0006, 0x006F, 0x0007, 
+	0x0075, 0x0008, 0x007C, 0x0007, 0x0084, 0x0004, 0x008B, 0x000A, 0x008F, 
+	0x0008, 0x0099, 0x0009, 0x00A1, 0x000A, 0x00AA, 0x0001, 0x00B4, 0x0001, 
+	0x00B5, 0x000A, 0x00B6, 0x0007, 0x00C0, 0x0001, 0x00C7, 0x000D, 0x00C8,
+};
+
+static const struct Animation skipsqueak_anim_jump = {
+	1,
+	0,
+	0,
+	1,
+	12,
+	ANIMINDEX_NUMPARTS(skipsqueak_anim_jump_indices),
+	skipsqueak_anim_jump_values,
+	skipsqueak_anim_jump_indices,
+	0,
+};
+
diff --git a/actors/skipsqueak/anims/anim_run.inc.c b/actors/skipsqueak/anims/anim_run.inc.c
new file mode 100644
index 0000000..c11a5ee
--- /dev/null
+++ b/actors/skipsqueak/anims/anim_run.inc.c
@@ -0,0 +1,63 @@
+static const s16 skipsqueak_run_anim_ArmatureObjAction_values[] = {
+	0x0000, 0x0038, 0x0038, 0x003E, 0x004B, 0x0059, 0x005F, 0x004B, 0x0038, 
+	0x003E, 0x004B, 0x0059, 0x005F, 0x004B, 0x0038, 0x0000, 0x0000, 0x0000, 
+	0xFF71, 0xFE38, 0xFCFF, 0xFC71, 0xFDAA, 0x0000, 0x01CE, 0x02E4, 0x036B, 
+	0x038E, 0x01C7, 0x0000, 0x4000, 0x0000, 0x0000, 0xFFFF, 0x4000, 0x0000, 
+	0xF9FF, 0xF9FF, 0xF9D3, 0xF971, 0xF90F, 0xF8E3, 0xF971, 0xF9FF, 0x0000, 
+	0xFFFF, 0xFFFF, 0x005B, 0x0124, 0x01ED, 0x0249, 0x0124, 0xFFFF, 0x005B, 
+	0x0124, 0x01ED, 0x0249, 0x0124, 0xFFFF, 0xFFFF, 0xFFFF, 0x0021, 0x006A, 
+	0x00B3, 0x00D4, 0x008B, 0xFFFF, 0xFF93, 0xFF53, 0xFF33, 0xFF2B, 0xFF95, 
+	0xFFFF, 0x0000, 0x0000, 0xFB92, 0xF1D6, 0xE81A, 0xE3AD, 0xED69, 0x0000, 
+	0x0E62, 0x1703, 0x1B37, 0x1C52, 0x0E29, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
+	0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 
+	0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
+	0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
+	0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
+	0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
+	0xFFFF, 0x0000, 0xFFFF, 0xBFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
+	0x049C, 0x049C, 0x049C, 0x049C, 0x049C, 0x049C, 0x049C, 0x049C, 0x0500, 
+	0x05DC, 0x06B8, 0x071C, 0x05DC, 0x049C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
+	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFA4, 
+	0xFEDB, 0xFE12, 0xFDB6, 0xFEDB, 0x0000, 0xFFA4, 0xFEDB, 0xFE12, 0xFDB6, 
+	0xFEDB, 0x0000, 0xFFFF, 0xFFFF, 0x0021, 0x006A, 0x00B3, 0x00D4, 0x008B, 
+	0xFFFF, 0xFF93, 0xFF53, 0xFF33, 0xFF2B, 0xFF95, 0xFFFF, 0x0000, 0x0000, 
+	0x046D, 0x0E29, 0x17E5, 0x1C52, 0x1296, 0x0000, 0xF19D, 0xE8FC, 0xE4C8, 
+	0xE3AD, 0xF1D6, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 
+	0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
+	0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
+	0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
+	0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFF89, 
+	0xFF77, 0xBFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 
+	0xFF71, 0xFE38, 0xFCFF, 0xFC71, 0xFDAA, 0x0000, 0x01CE, 0x02E4, 0x036B, 
+	0x038E, 0x01C7, 0x0000, 0x09B4, 0x09B4, 0x0830, 0x04DA, 0x0184, 0xFFFF, 
+	0x04DA, 0x09B4, 0x0830, 0x04DA, 0x0184, 0x0000, 0x04DA, 0x09B4, 
+};
+
+static const u16 skipsqueak_run_anim_ArmatureObjAction_indices[] = {
+	0x0001, 0x0000, 0x000E, 0x0001, 0x0001, 0x000F, 0x000E, 0x0010, 0x0001, 
+	0x001E, 0x0001, 0x001F, 0x0001, 0x0020, 0x0001, 0x0021, 0x0001, 0x0022, 
+	0x0001, 0x0023, 0x0008, 0x0024, 0x0001, 0x002C, 0x000E, 0x002D, 0x000E, 
+	0x003B, 0x000E, 0x0049, 0x000E, 0x0057, 0x000D, 0x0065, 0x000E, 0x0072, 
+	0x000E, 0x0080, 0x000E, 0x008E, 0x0001, 0x009C, 0x000E, 0x009D, 0x000E, 
+	0x00AB, 0x000A, 0x00B9, 0x000E, 0x00C3, 0x000E, 0x00D1, 0x000E, 0x00DF, 
+	0x000E, 0x00ED, 0x000D, 0x00FB, 0x000E, 0x0108, 0x0001, 0x0116, 0x0001, 
+	0x0117, 0x0001, 0x0118, 0x000E, 0x0119, 0x000E, 0x0127, 0x000E, 0x0135, 
+	
+};
+
+static const struct Animation skipsqueak_run_anim_ArmatureObjAction = {
+	0,
+	0,
+	0,
+	1,
+	13,
+	ANIMINDEX_NUMPARTS(skipsqueak_run_anim_ArmatureObjAction_indices),
+	skipsqueak_run_anim_ArmatureObjAction_values,
+	skipsqueak_run_anim_ArmatureObjAction_indices,
+	0,
+};
+
diff --git a/actors/skipsqueak/anims/data.inc.c b/actors/skipsqueak/anims/data.inc.c
new file mode 100644
index 0000000..d102263
--- /dev/null
+++ b/actors/skipsqueak/anims/data.inc.c
@@ -0,0 +1,4 @@
+#include "anim_ArmatureObjAction.inc.c"
+#include "anim_jump.inc.c"
+#include "anim_run.inc.c"
+
diff --git a/actors/skipsqueak/anims/table.inc.c b/actors/skipsqueak/anims/table.inc.c
new file mode 100644
index 0000000..50cbf3f
--- /dev/null
+++ b/actors/skipsqueak/anims/table.inc.c
@@ -0,0 +1,6 @@
+const struct Animation *const skipsqueak_anims[] = {
+	&skipsqueak_anim_ArmatureObjAction,
+        &skipsqueak_anim_jump,
+	&skipsqueak_run_anim_ArmatureObjAction,
+	NULL,
+};
diff --git a/actors/skipsqueak/geo.inc.c b/actors/skipsqueak/geo.inc.c
new file mode 100644
index 0000000..c9f058b
--- /dev/null
+++ b/actors/skipsqueak/geo.inc.c
@@ -0,0 +1,56 @@
+#include "src/game/envfx_snow.h"
+
+const GeoLayout skipsqueak_geo[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_SHADOW(0, 150, 100),
+		GEO_OPEN_NODE(),
+			GEO_SCALE(LAYER_FORCE, 16384),
+			GEO_OPEN_NODE(),
+				GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 14, 0, NULL),
+				GEO_OPEN_NODE(),
+					GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, skipsqueak_000_offset_001_mesh),
+					GEO_OPEN_NODE(),
+						GEO_BILLBOARD_WITH_PARAMS(LAYER_FORCE, 0, 0, 0),
+						GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 8, -60, NULL),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, -74, -24, 15, NULL),
+								GEO_OPEN_NODE(),
+									GEO_TRANSLATE_ROTATE(LAYER_OPAQUE, 0, 0, 0, 0, -180, 0),
+									GEO_OPEN_NODE(),
+										GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, skipsqueak_000_offset_004_mesh),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+						GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 6, 62, NULL),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, -74, -22, -17, NULL),
+								GEO_OPEN_NODE(),
+									GEO_TRANSLATE_ROTATE(LAYER_OPAQUE, 0, 0, 0, 0, 180, 0),
+									GEO_OPEN_NODE(),
+										GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, skipsqueak_000_offset_003_mesh),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+						GEO_DISPLAY_LIST(LAYER_OPAQUE, skipsqueak_000_offset_002_skinned),
+						GEO_SWITCH_CASE(2, geo_switch_anim_state),
+						GEO_OPEN_NODE(),
+							GEO_NODE_START(),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, 113, 0, 0, skipsqueak_000_offset_002_mesh),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+			GEO_CLOSE_NODE(),
+		GEO_CLOSE_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, skipsqueak_material_revert_render_settings),
+	GEO_CLOSE_NODE(),
+	GEO_END(),
+};
diff --git a/actors/skipsqueak/geo_header.h b/actors/skipsqueak/geo_header.h
new file mode 100644
index 0000000..df80a94
--- /dev/null
+++ b/actors/skipsqueak/geo_header.h
@@ -0,0 +1,37 @@
+extern const GeoLayout skipsqueak_geo[];
+extern Vtx skipsqueak_000_offset_001_mesh_vtx_0[25];
+extern Gfx skipsqueak_000_offset_001_mesh_tri_0[];
+extern Vtx skipsqueak_000_offset_001_mesh_vtx_1[8];
+extern Gfx skipsqueak_000_offset_001_mesh_tri_1[];
+extern Vtx skipsqueak_000_offset_004_mesh_vtx_0[20];
+extern Gfx skipsqueak_000_offset_004_mesh_tri_0[];
+extern Vtx skipsqueak_000_offset_003_mesh_vtx_0[20];
+extern Gfx skipsqueak_000_offset_003_mesh_tri_0[];
+extern Vtx skipsqueak_000_offset_002_mesh_vtx_0[3];
+extern Gfx skipsqueak_000_offset_002_mesh_tri_0[];
+extern Vtx skipsqueak_000_offset_002_mesh_vtx_1[11];
+extern Gfx skipsqueak_000_offset_002_mesh_tri_1[];
+extern Vtx skipsqueak_000_offset_002_mesh_vtx_2[52];
+extern Gfx skipsqueak_000_offset_002_mesh_tri_2[];
+extern Vtx skipsqueak_000_offset_002_mesh_vtx_3[8];
+extern Gfx skipsqueak_000_offset_002_mesh_tri_3[];
+extern Vtx skipsqueak_000_offset_002_mesh_vtx_4[9];
+extern Gfx skipsqueak_000_offset_002_mesh_tri_4[];
+extern Vtx skipsqueak_000_offset_002_mesh_vtx_5[9];
+extern Gfx skipsqueak_000_offset_002_mesh_tri_5[];
+extern Vtx skipsqueak_000_offset_002_mesh_vtx_6[8];
+extern Gfx skipsqueak_000_offset_002_mesh_tri_6[];
+extern Vtx skipsqueak_000_offset_002_mesh_vtx_7[4];
+extern Gfx skipsqueak_000_offset_002_mesh_tri_7[];
+extern Vtx skipsqueak_000_offset_002_skinned_vtx_0[5];
+extern Gfx skipsqueak_000_offset_002_skinned_tri_0[];
+extern Vtx skipsqueak_000_offset_002_skinned_vtx_1[11];
+extern Gfx skipsqueak_000_offset_002_skinned_tri_1[];
+
+extern Gfx skipsqueak_000_offset_001_mesh[];
+extern Gfx skipsqueak_000_offset_004_mesh[];
+extern Gfx skipsqueak_000_offset_003_mesh[];
+extern Gfx skipsqueak_000_offset_002_mesh[];
+extern Gfx skipsqueak_000_offset_002_skinned[];
+extern Gfx skipsqueak_material_revert_render_settings[];
+
diff --git a/actors/skipsqueak/model.inc.c b/actors/skipsqueak/model.inc.c
new file mode 100644
index 0000000..6c05b36
--- /dev/null
+++ b/actors/skipsqueak/model.inc.c
@@ -0,0 +1,634 @@
+Lights1 skipsqueak_skipsqueakblue_lights = gdSPDefLights1(
+	0x41, 0x66, 0x7F,
+	0x83, 0xCD, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 skipsqueak_body_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 skipsqueak_skipsqueakshoe_lights = gdSPDefLights1(
+	0x7F, 0x0, 0x5,
+	0xFE, 0x0, 0xB, 0x28, 0x28, 0x28);
+
+Lights1 skipsqueak_eyes_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 skipsqueak_skipsqueaknose_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 skipsqueak_sm64_material_013_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Gfx skipsqueak_skipsqueak_eyes_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 skipsqueak_skipsqueak_eyes_rgba16[] = {
+	#include "actors/skipsqueak/skipsqueak_eyes.rgba16.inc.c"
+};
+
+Gfx skipsqueak_skipsqueak_nose_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 skipsqueak_skipsqueak_nose_rgba16[] = {
+	#include "actors/skipsqueak/skipsqueak_nose.rgba16.inc.c"
+};
+
+Gfx skipsqueak_skipsqueak_whisker_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 skipsqueak_skipsqueak_whisker_rgba16[] = {
+	#include "actors/skipsqueak/skipsqueak_whisker.rgba16.inc.c"
+};
+
+Gfx skipsqueak_skipsqueak_tooth_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 skipsqueak_skipsqueak_tooth_rgba16[] = {
+	#include "actors/skipsqueak/skipsqueak_tooth.rgba16.inc.c"
+};
+
+Vtx skipsqueak_000_offset_001_mesh_vtx_0[25] = {
+	{{{136, -87, 84},0, {-1396, -456},{0x2F, 0xA2, 0x47, 0xFF}}},
+	{{{36, -131, 0},0, {-2090, 152},{0xD0, 0x8A, 0xFF, 0xFF}}},
+	{{{155, -106, 2},0, {-2090, -588},{0x31, 0x8B, 0x0, 0xFF}}},
+	{{{36, -120, 68},0, {-1576, 180},{0xC5, 0x95, 0x23, 0xFF}}},
+	{{{30, -82, 136},0, {-1038, 180},{0xB4, 0xC7, 0x54, 0xFF}}},
+	{{{30, -17, 155},0, {-896, 152},{0xB3, 0xF7, 0x64, 0xFF}}},
+	{{{30, 50, 136},0, {1108, 306},{0xB7, 0x34, 0x5A, 0xFF}}},
+	{{{30, 110, 0},0, {466, 314},{0xB8, 0x68, 0x0, 0xFF}}},
+	{{{30, 96, 81},0, {842, 322},{0xB9, 0x61, 0x29, 0xFF}}},
+	{{{30, -82, -132},0, {-3142, 180},{0xB9, 0xC1, 0xAC, 0xFF}}},
+	{{{30, 50, -132},0, {-3142, 180},{0xBC, 0x35, 0xA2, 0xFF}}},
+	{{{30, 96, -77},0, {92, 330},{0xBA, 0x61, 0xD6, 0xFF}}},
+	{{{28, -11, -151},0, {-3284, 152},{0xB3, 0x2, 0x9B, 0xFF}}},
+	{{{-27, 58, -86},0, {-2784, -456},{0xA2, 0x41, 0xC9, 0xFF}}},
+	{{{-40, -17, -92},0, {-2824, -588},{0x93, 0xFA, 0xBF, 0xFF}}},
+	{{{-27, -98, -56},0, {-2784, -456},{0xB0, 0xB3, 0xC3, 0xFF}}},
+	{{{36, -120, -64},0, {-2604, 180},{0xC5, 0x95, 0xDD, 0xFF}}},
+	{{{136, -87, -80},0, {-2784, -456},{0x30, 0xA1, 0xBB, 0xFF}}},
+	{{{-27, -98, 58},0, {-1396, -456},{0xB0, 0xB4, 0x3E, 0xFF}}},
+	{{{-40, -17, 96},0, {-1356, -588},{0x96, 0xF7, 0x45, 0xFF}}},
+	{{{30, 50, 136},0, {-1038, 180},{0xB7, 0x34, 0x5A, 0xFF}}},
+	{{{-27, 58, 90},0, {-1396, -456},{0xA2, 0x40, 0x38, 0xFF}}},
+	{{{-40, 61, 0},0, {-2090, -588},{0x96, 0x47, 0x0, 0xFF}}},
+	{{{-61, -17, 0},0, {-2090, -790},{0x81, 0x3, 0xFF, 0xFF}}},
+	{{{-35, -143, 1},0, {-2090, -588},{0xC3, 0x90, 0x1, 0xFF}}},
+};
+
+Gfx skipsqueak_000_offset_001_mesh_tri_0[] = {
+	gsSPVertex(skipsqueak_000_offset_001_mesh_vtx_0 + 0, 25, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 3, 0, 0, 5, 4, 0, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
+	gsSP2Triangles(6, 8, 7, 0, 4, 7, 9, 0),
+	gsSP2Triangles(7, 10, 9, 0, 7, 11, 10, 0),
+	gsSP2Triangles(10, 12, 9, 0, 12, 13, 10, 0),
+	gsSP2Triangles(12, 14, 13, 0, 14, 12, 9, 0),
+	gsSP2Triangles(14, 9, 15, 0, 15, 9, 16, 0),
+	gsSP2Triangles(9, 16, 1, 0, 1, 16, 17, 0),
+	gsSP2Triangles(17, 16, 9, 0, 1, 17, 2, 0),
+	gsSP2Triangles(9, 1, 4, 0, 1, 3, 4, 0),
+	gsSP2Triangles(18, 1, 3, 0, 4, 18, 3, 0),
+	gsSP2Triangles(5, 18, 4, 0, 5, 19, 18, 0),
+	gsSP2Triangles(19, 5, 20, 0, 19, 20, 21, 0),
+	gsSP2Triangles(19, 21, 22, 0, 19, 22, 23, 0),
+	gsSP2Triangles(22, 14, 23, 0, 22, 13, 14, 0),
+	gsSP2Triangles(14, 24, 23, 0, 14, 15, 24, 0),
+	gsSP2Triangles(1, 24, 15, 0, 1, 15, 16, 0),
+	gsSP2Triangles(18, 24, 1, 0, 24, 18, 19, 0),
+	gsSP1Triangle(24, 19, 23, 0),
+	gsSPEndDisplayList(),
+};Vtx skipsqueak_000_offset_001_mesh_vtx_1[8] = {
+	{{{30, 50, -132},0, {-172, 320},{0xBC, 0x35, 0xA2, 0xFF}}},
+	{{{-27, 58, -86},0, {46, -86},{0xA2, 0x41, 0xC9, 0xFF}}},
+	{{{30, 96, -77},0, {92, 330},{0xBA, 0x61, 0xD6, 0xFF}}},
+	{{{30, 110, 0},0, {466, 314},{0xB8, 0x68, 0x0, 0xFF}}},
+	{{{-40, 61, 0},0, {468, -172},{0x96, 0x47, 0x0, 0xFF}}},
+	{{{-27, 58, 90},0, {890, -94},{0xA2, 0x40, 0x38, 0xFF}}},
+	{{{30, 96, 81},0, {842, 322},{0xB9, 0x61, 0x29, 0xFF}}},
+	{{{30, 50, 136},0, {1108, 306},{0xB7, 0x34, 0x5A, 0xFF}}},
+};
+
+Gfx skipsqueak_000_offset_001_mesh_tri_1[] = {
+	gsSPVertex(skipsqueak_000_offset_001_mesh_vtx_1 + 0, 8, 0),
+	gsSP2Triangles(0, 1, 2, 0, 1, 3, 2, 0),
+	gsSP2Triangles(1, 4, 3, 0, 3, 4, 5, 0),
+	gsSP2Triangles(3, 5, 6, 0, 5, 7, 6, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx skipsqueak_000_offset_004_mesh_vtx_0[20] = {
+	{{{-4, 2, 76},0, {-16, -16},{0x18, 0x49, 0x65, 0xFF}}},
+	{{{33, 2, 47},0, {-16, -16},{0x60, 0x46, 0x2E, 0xFF}}},
+	{{{33, 2, -7},0, {-16, -16},{0x60, 0x46, 0xD2, 0xFF}}},
+	{{{-4, -42, 67},0, {-16, -16},{0x19, 0xB2, 0x61, 0xFF}}},
+	{{{-76, -32, 61},0, {-16, -16},{0xD2, 0xB9, 0x5E, 0xFF}}},
+	{{{-79, -4, 67},0, {-16, -16},{0xD5, 0x43, 0x63, 0xFF}}},
+	{{{-4, 2, -34},0, {-16, -16},{0x17, 0x49, 0x9B, 0xFF}}},
+	{{{27, -28, -7},0, {-16, -16},{0x68, 0xCB, 0xCE, 0xFF}}},
+	{{{27, -28, 47},0, {-16, -16},{0x68, 0xCC, 0x32, 0xFF}}},
+	{{{4, -50, 47},0, {-16, -16},{0x28, 0x8B, 0x1E, 0xFF}}},
+	{{{-74, -42, 43},0, {-16, -16},{0xDA, 0x8B, 0x1E, 0xFF}}},
+	{{{-110, -22, 34},0, {-16, -16},{0x9E, 0xB9, 0x28, 0xFF}}},
+	{{{-116, 1, 38},0, {-16, -16},{0xA3, 0x47, 0x31, 0xFF}}},
+	{{{-116, 1, 3},0, {-16, -16},{0xA3, 0x48, 0xD0, 0xFF}}},
+	{{{-79, -4, -27},0, {-16, -16},{0xD5, 0x42, 0x9D, 0xFF}}},
+	{{{-4, -42, -26},0, {-16, -16},{0x19, 0xB4, 0x9E, 0xFF}}},
+	{{{4, -50, -7},0, {-16, -16},{0x29, 0x8C, 0xE1, 0xFF}}},
+	{{{-74, -42, -3},0, {-16, -16},{0xD9, 0x8B, 0xE2, 0xFF}}},
+	{{{-110, -22, 6},0, {-16, -16},{0x9E, 0xBA, 0xD7, 0xFF}}},
+	{{{-76, -32, -19},0, {-16, -16},{0xD1, 0xB9, 0xA2, 0xFF}}},
+};
+
+Gfx skipsqueak_000_offset_004_mesh_tri_0[] = {
+	gsSPVertex(skipsqueak_000_offset_004_mesh_vtx_0 + 0, 20, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(4, 3, 0, 0, 4, 0, 5, 0),
+	gsSP2Triangles(5, 0, 6, 0, 0, 2, 6, 0),
+	gsSP2Triangles(6, 2, 7, 0, 8, 7, 2, 0),
+	gsSP2Triangles(8, 2, 1, 0, 3, 8, 1, 0),
+	gsSP2Triangles(9, 8, 3, 0, 4, 9, 3, 0),
+	gsSP2Triangles(4, 10, 9, 0, 4, 11, 10, 0),
+	gsSP2Triangles(5, 11, 4, 0, 5, 12, 11, 0),
+	gsSP2Triangles(5, 13, 12, 0, 5, 14, 13, 0),
+	gsSP2Triangles(5, 6, 14, 0, 15, 14, 6, 0),
+	gsSP2Triangles(6, 7, 15, 0, 15, 7, 16, 0),
+	gsSP2Triangles(16, 7, 8, 0, 16, 8, 9, 0),
+	gsSP2Triangles(10, 16, 9, 0, 10, 17, 16, 0),
+	gsSP2Triangles(10, 18, 17, 0, 10, 11, 18, 0),
+	gsSP2Triangles(18, 11, 12, 0, 18, 12, 13, 0),
+	gsSP2Triangles(19, 18, 13, 0, 19, 13, 14, 0),
+	gsSP2Triangles(15, 19, 14, 0, 15, 17, 19, 0),
+	gsSP2Triangles(15, 16, 17, 0, 17, 18, 19, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx skipsqueak_000_offset_003_mesh_vtx_0[20] = {
+	{{{-4, 2, 34},0, {-16, -16},{0x17, 0x49, 0x66, 0xFF}}},
+	{{{-79, -3, 27},0, {-16, -16},{0xD6, 0x42, 0x64, 0xFF}}},
+	{{{-76, -32, 19},0, {-16, -16},{0xD2, 0xB8, 0x5E, 0xFF}}},
+	{{{-4, 2, -76},0, {-16, -16},{0x18, 0x49, 0x9B, 0xFF}}},
+	{{{33, 2, -47},0, {-16, -16},{0x60, 0x46, 0xD3, 0xFF}}},
+	{{{33, 2, 7},0, {-16, -16},{0x5F, 0x46, 0x2F, 0xFF}}},
+	{{{-4, -42, 26},0, {-16, -16},{0x17, 0xB3, 0x63, 0xFF}}},
+	{{{3, -50, 7},0, {-16, -16},{0x28, 0x8B, 0x1F, 0xFF}}},
+	{{{-74, -42, 3},0, {-16, -16},{0xD9, 0x8B, 0x20, 0xFF}}},
+	{{{-110, -22, -6},0, {-16, -16},{0x9E, 0xBB, 0x29, 0xFF}}},
+	{{{-116, 2, -3},0, {-16, -16},{0xA3, 0x48, 0x2F, 0xFF}}},
+	{{{-116, 2, -38},0, {-16, -16},{0xA3, 0x48, 0xD0, 0xFF}}},
+	{{{-79, -3, -67},0, {-16, -16},{0xD7, 0x44, 0x9D, 0xFF}}},
+	{{{-4, -42, -67},0, {-16, -16},{0x1A, 0xB4, 0x9E, 0xFF}}},
+	{{{27, -29, -47},0, {-16, -16},{0x68, 0xCA, 0xCF, 0xFF}}},
+	{{{27, -29, 7},0, {-16, -16},{0x67, 0xCB, 0x34, 0xFF}}},
+	{{{3, -50, -47},0, {-16, -16},{0x29, 0x8B, 0xE3, 0xFF}}},
+	{{{-74, -42, -43},0, {-16, -16},{0xD8, 0x8B, 0xE3, 0xFF}}},
+	{{{-110, -22, -34},0, {-16, -16},{0x9E, 0xB9, 0xDA, 0xFF}}},
+	{{{-76, -32, -61},0, {-16, -16},{0xD0, 0xBA, 0xA2, 0xFF}}},
+};
+
+Gfx skipsqueak_000_offset_003_mesh_tri_0[] = {
+	gsSPVertex(skipsqueak_000_offset_003_mesh_vtx_0 + 0, 20, 0),
+	gsSP2Triangles(0, 1, 2, 0, 1, 0, 3, 0),
+	gsSP2Triangles(0, 4, 3, 0, 0, 5, 4, 0),
+	gsSP2Triangles(6, 5, 0, 0, 0, 2, 6, 0),
+	gsSP2Triangles(2, 7, 6, 0, 2, 8, 7, 0),
+	gsSP2Triangles(2, 9, 8, 0, 1, 9, 2, 0),
+	gsSP2Triangles(1, 10, 9, 0, 11, 10, 1, 0),
+	gsSP2Triangles(11, 1, 12, 0, 1, 3, 12, 0),
+	gsSP2Triangles(12, 3, 13, 0, 3, 14, 13, 0),
+	gsSP2Triangles(3, 4, 14, 0, 4, 15, 14, 0),
+	gsSP2Triangles(4, 5, 15, 0, 6, 15, 5, 0),
+	gsSP2Triangles(7, 15, 6, 0, 16, 15, 7, 0),
+	gsSP2Triangles(16, 7, 8, 0, 16, 8, 17, 0),
+	gsSP2Triangles(8, 18, 17, 0, 8, 9, 18, 0),
+	gsSP2Triangles(10, 18, 9, 0, 10, 11, 18, 0),
+	gsSP2Triangles(19, 18, 11, 0, 19, 11, 12, 0),
+	gsSP2Triangles(12, 13, 19, 0, 13, 17, 19, 0),
+	gsSP2Triangles(13, 16, 17, 0, 13, 14, 16, 0),
+	gsSP2Triangles(16, 14, 15, 0, 17, 18, 19, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx skipsqueak_000_offset_002_mesh_vtx_0[3] = {
+	{{{14, 76, 90},0, {890, -94},{0xF5, 0x5D, 0x55, 0xFF}}},
+	{{{1, 79, 2},0, {468, -172},{0xDC, 0x7A, 0x0, 0xFF}}},
+	{{{14, 76, -86},0, {46, -86},{0xED, 0x5B, 0xAA, 0xFF}}},
+};
+
+Gfx skipsqueak_000_offset_002_mesh_tri_0[] = {
+	gsSPVertex(skipsqueak_000_offset_002_mesh_vtx_0 + 0, 3, 16),
+	gsSP2Triangles(16, 1, 2, 0, 0, 1, 16, 0),
+	gsSP2Triangles(0, 16, 17, 0, 18, 0, 17, 0),
+	gsSP2Triangles(18, 3, 0, 0, 4, 3, 18, 0),
+	gsSPEndDisplayList(),
+};Vtx skipsqueak_000_offset_002_mesh_vtx_1[11] = {
+	{{{26, 6, 130},0, {-1356, -588},{0x11, 0x1, 0x7E, 0xFF}}},
+	{{{14, 76, 90},0, {-1396, -456},{0xF5, 0x5D, 0x55, 0xFF}}},
+	{{{73, 16, 131},0, {-316, 1796},{0x37, 0x1C, 0x6F, 0xFF}}},
+	{{{26, 6, 130},0, {-360, 2518},{0x11, 0x1, 0x7E, 0xFF}}},
+	{{{117, -2, 78},0, {-58, 940},{0x46, 0xD4, 0x61, 0xFF}}},
+	{{{26, 6, -127},0, {1248, 2400},{0x9, 0x4, 0x81, 0xFF}}},
+	{{{73, 16, -131},0, {1204, 1684},{0x34, 0x19, 0x8F, 0xFF}}},
+	{{{117, -2, -81},0, {944, 866},{0x44, 0xD5, 0x9E, 0xFF}}},
+	{{{143, -43, 0},0, {442, 798},{0x44, 0x95, 0x1, 0xFF}}},
+	{{{26, 6, -127},0, {-2824, -588},{0x9, 0x4, 0x81, 0xFF}}},
+	{{{14, 76, -86},0, {-2784, -456},{0xED, 0x5B, 0xAA, 0xFF}}},
+};
+
+Gfx skipsqueak_000_offset_002_mesh_tri_1[] = {
+	gsSPVertex(skipsqueak_000_offset_002_mesh_vtx_1 + 0, 11, 16),
+	gsSP2Triangles(16, 17, 5, 0, 16, 5, 7, 0),
+	gsSP2Triangles(7, 8, 16, 0, 6, 18, 19, 0),
+	gsSP2Triangles(18, 6, 20, 0, 21, 22, 10, 0),
+	gsSP2Triangles(10, 22, 23, 0, 23, 24, 10, 0),
+	gsSP2Triangles(10, 24, 11, 0, 11, 24, 9, 0),
+	gsSP2Triangles(20, 9, 24, 0, 25, 14, 12, 0),
+	gsSP2Triangles(25, 12, 13, 0, 13, 26, 25, 0),
+	gsSP1Triangle(13, 15, 26, 0),
+	gsSPEndDisplayList(),
+};Vtx skipsqueak_000_offset_002_mesh_vtx_2[52] = {
+	{{{55, 148, 55},0, {-16, 1008},{0xC9, 0x56, 0x4B, 0xFF}}},
+	{{{1, 79, 2},0, {-16, 1008},{0xDC, 0x7A, 0x0, 0xFF}}},
+	{{{14, 76, 90},0, {-16, 1008},{0xF5, 0x5D, 0x55, 0xFF}}},
+	{{{41, 146, 0},0, {-16, 1008},{0x9B, 0x4D, 0x0, 0xFF}}},
+	{{{55, 148, -58},0, {-16, 1008},{0xC6, 0x55, 0xB5, 0xFF}}},
+	{{{14, 76, -86},0, {-16, 1008},{0xED, 0x5B, 0xAA, 0xFF}}},
+	{{{84, 148, -53},0, {-16, 1008},{0x30, 0x42, 0x9F, 0xFF}}},
+	{{{70, 82, -99},0, {-16, 1008},{0x23, 0x39, 0x94, 0xFF}}},
+	{{{117, -2, 78},0, {-58, 940},{0x46, 0xD4, 0x61, 0xFF}}},
+	{{{143, -43, 0},0, {442, 798},{0x44, 0x95, 0x1, 0xFF}}},
+	{{{185, -22, 0},0, {442, -586},{0x4E, 0x9B, 0x1, 0xFF}}},
+	{{{117, -2, -81},0, {944, 866},{0x44, 0xD5, 0x9E, 0xFF}}},
+	{{{101, 63, 71},0, {1892, -294},{0x3A, 0x44, 0x5A, 0xFF}}},
+	{{{73, 16, 131},0, {2448, -386},{0x37, 0x1C, 0x6F, 0xFF}}},
+	{{{117, -2, 78},0, {1928, -940},{0x46, 0xD4, 0x61, 0xFF}}},
+	{{{70, 82, 95},0, {2060, 66},{0x27, 0x3B, 0x6A, 0xFF}}},
+	{{{84, 148, 50},0, {997, 549},{0x33, 0x40, 0x61, 0xFF}}},
+	{{{96, 149, 37},0, {762, 477},{0x62, 0x2B, 0x44, 0xFF}}},
+	{{{112, 155, 0},0, {-16, 1008},{0x79, 0x28, 0x2, 0xFF}}},
+	{{{130, 81, 0},0, {-16, 1008},{0x56, 0x5D, 0x1, 0xFF}}},
+	{{{96, 149, -40},0, {-16, 1008},{0x63, 0x2C, 0xBD, 0xFF}}},
+	{{{101, 63, -73},0, {-16, 1008},{0x3A, 0x44, 0xA6, 0xFF}}},
+	{{{55, 148, 55},0, {1043, 774},{0xC9, 0x56, 0x4B, 0xFF}}},
+	{{{14, 76, 90},0, {2100, 540},{0xF5, 0x5D, 0x55, 0xFF}}},
+	{{{26, 6, 130},0, {2544, 24},{0x11, 0x1, 0x7E, 0xFF}}},
+	{{{101, 63, -73},0, {4, -270},{0x3A, 0x44, 0xA6, 0xFF}}},
+	{{{117, -2, -81},0, {-52, -916},{0x44, 0xD5, 0x9E, 0xFF}}},
+	{{{73, 16, -131},0, {-552, -348},{0x34, 0x19, 0x8F, 0xFF}}},
+	{{{70, 82, -99},0, {-144, 94},{0x23, 0x39, 0x94, 0xFF}}},
+	{{{26, 6, -127},0, {-632, 64},{0x9, 0x4, 0x81, 0xFF}}},
+	{{{14, 76, -86},0, {-164, 570},{0xED, 0x5B, 0xAA, 0xFF}}},
+	{{{84, 148, -53},0, {-77, 575},{0x30, 0x42, 0x9F, 0xFF}}},
+	{{{84, 148, -53},0, {-77, 575},{0x30, 0x42, 0x9F, 0xFF}}},
+	{{{96, 149, -40},0, {-8, 475},{0x63, 0x2C, 0xBD, 0xFF}}},
+	{{{101, 63, -73},0, {4, -270},{0x3A, 0x44, 0xA6, 0xFF}}},
+	{{{101, 63, 71},0, {-16, -16},{0x3A, 0x44, 0x5A, 0xFF}}},
+	{{{117, -2, 78},0, {-16, -16},{0x46, 0xD4, 0x61, 0xFF}}},
+	{{{126, 29, 93},0, {-16, -16},{0xEB, 0xFF, 0x7D, 0xFF}}},
+	{{{156, 15, 84},0, {-16, -16},{0x3E, 0xD2, 0x65, 0xFF}}},
+	{{{205, 18, 41},0, {-16, -16},{0x6E, 0xE8, 0x3C, 0xFF}}},
+	{{{185, -22, 0},0, {-16, -16},{0x4E, 0x9B, 0x1, 0xFF}}},
+	{{{205, 18, -45},0, {-16, -16},{0x6D, 0xE7, 0xC4, 0xFF}}},
+	{{{117, -2, -81},0, {-16, -16},{0x44, 0xD5, 0x9E, 0xFF}}},
+	{{{156, 15, -87},0, {-16, -16},{0x3C, 0xD4, 0x99, 0xFF}}},
+	{{{126, 29, -95},0, {-16, -16},{0xEA, 0x0, 0x83, 0xFF}}},
+	{{{101, 63, -73},0, {-16, -16},{0x3A, 0x44, 0xA6, 0xFF}}},
+	{{{127, 63, -84},0, {-16, -16},{0x4, 0x57, 0xA4, 0xFF}}},
+	{{{156, 58, -73},0, {-16, -16},{0x3D, 0x52, 0xB5, 0xFF}}},
+	{{{195, 54, -36},0, {-16, -16},{0x5B, 0x51, 0xDC, 0xFF}}},
+	{{{195, 54, 32},0, {-16, -16},{0x5B, 0x51, 0x24, 0xFF}}},
+	{{{156, 58, 71},0, {-16, -16},{0x3D, 0x51, 0x4C, 0xFF}}},
+	{{{127, 63, 81},0, {-16, -16},{0x6, 0x59, 0x5A, 0xFF}}},
+};
+
+Gfx skipsqueak_000_offset_002_mesh_tri_2[] = {
+	gsSPVertex(skipsqueak_000_offset_002_mesh_vtx_2 + 0, 32, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(1, 3, 4, 0, 1, 4, 5, 0),
+	gsSP2Triangles(5, 4, 6, 0, 5, 6, 7, 0),
+	gsSP2Triangles(8, 9, 10, 0, 11, 10, 9, 0),
+	gsSP2Triangles(12, 13, 14, 0, 12, 15, 13, 0),
+	gsSP2Triangles(12, 16, 15, 0, 12, 17, 16, 0),
+	gsSP2Triangles(12, 18, 17, 0, 12, 19, 18, 0),
+	gsSP2Triangles(20, 18, 19, 0, 20, 19, 21, 0),
+	gsSP2Triangles(22, 15, 16, 0, 22, 23, 15, 0),
+	gsSP2Triangles(24, 15, 23, 0, 24, 13, 15, 0),
+	gsSP2Triangles(25, 26, 27, 0, 27, 28, 25, 0),
+	gsSP2Triangles(28, 27, 29, 0, 29, 30, 28, 0),
+	gsSP1Triangle(31, 25, 28, 0),
+	gsSPVertex(skipsqueak_000_offset_002_mesh_vtx_2 + 32, 20, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
+	gsSP2Triangles(6, 5, 4, 0, 7, 6, 4, 0),
+	gsSP2Triangles(4, 8, 7, 0, 8, 9, 7, 0),
+	gsSP2Triangles(10, 9, 8, 0, 9, 10, 11, 0),
+	gsSP2Triangles(10, 12, 11, 0, 12, 10, 13, 0),
+	gsSP2Triangles(13, 14, 12, 0, 12, 14, 15, 0),
+	gsSP2Triangles(12, 15, 11, 0, 11, 15, 16, 0),
+	gsSP2Triangles(16, 9, 11, 0, 9, 16, 17, 0),
+	gsSP2Triangles(17, 7, 9, 0, 6, 7, 17, 0),
+	gsSP2Triangles(17, 18, 6, 0, 6, 18, 19, 0),
+	gsSP2Triangles(6, 19, 5, 0, 3, 5, 19, 0),
+	gsSPEndDisplayList(),
+};Vtx skipsqueak_000_offset_002_mesh_vtx_3[8] = {
+	{{{73, 16, 131},0, {-170, -30},{0x37, 0x1C, 0x6F, 0xFF}}},
+	{{{137, -9, 120},0, {784, 962},{0x2F, 0x76, 0x5, 0xFF}}},
+	{{{117, -2, 78},0, {1076, -34},{0x46, 0xD4, 0x61, 0xFF}}},
+	{{{111, -2, 139},0, {144, 964},{0x31, 0x72, 0x1C, 0xFF}}},
+	{{{73, 16, -131},0, {-170, -30},{0x34, 0x19, 0x8F, 0xFF}}},
+	{{{137, -9, -120},0, {784, 962},{0x2F, 0x76, 0xFB, 0xFF}}},
+	{{{111, -2, -139},0, {144, 964},{0x31, 0x72, 0xE5, 0xFF}}},
+	{{{117, -2, -81},0, {1076, -34},{0x44, 0xD5, 0x9E, 0xFF}}},
+};
+
+Gfx skipsqueak_000_offset_002_mesh_tri_3[] = {
+	gsSPVertex(skipsqueak_000_offset_002_mesh_vtx_3 + 0, 8, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 7, 5, 0),
+	gsSPEndDisplayList(),
+};Vtx skipsqueak_000_offset_002_mesh_vtx_4[9] = {
+	{{{130, 81, 0},0, {508, 755},{0x56, 0x5D, 0x1, 0xFF}}},
+	{{{127, 63, -84},0, {-90, 767},{0x4, 0x57, 0xA4, 0xFF}}},
+	{{{101, 63, -73},0, {-90, 1008},{0x3A, 0x44, 0xA6, 0xFF}}},
+	{{{156, 58, -73},0, {-14, 278},{0x3D, 0x52, 0xB5, 0xFF}}},
+	{{{195, 54, -36},0, {261, -16},{0x5B, 0x51, 0xDC, 0xFF}}},
+	{{{195, 54, 32},0, {731, -16},{0x5B, 0x51, 0x24, 0xFF}}},
+	{{{156, 58, 71},0, {1017, 278},{0x3D, 0x51, 0x4C, 0xFF}}},
+	{{{127, 63, 81},0, {1082, 767},{0x6, 0x59, 0x5A, 0xFF}}},
+	{{{101, 63, 71},0, {1082, 1008},{0x3A, 0x44, 0x5A, 0xFF}}},
+};
+
+Gfx skipsqueak_000_offset_002_mesh_tri_4[] = {
+	gsSPVertex(skipsqueak_000_offset_002_mesh_vtx_4 + 0, 9, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(0, 4, 3, 0, 5, 4, 0, 0),
+	gsSP2Triangles(6, 5, 0, 0, 0, 7, 6, 0),
+	gsSP1Triangle(8, 7, 0, 0),
+	gsSPEndDisplayList(),
+};Vtx skipsqueak_000_offset_002_mesh_vtx_5[9] = {
+	{{{93, 201, 0},0, {539, 397},{0x1F, 0x7B, 0x2, 0xFF}}},
+	{{{96, 149, -40},0, {266, 177},{0x63, 0x2C, 0xBD, 0xFF}}},
+	{{{84, 148, -53},0, {142, 363},{0x30, 0x42, 0x9F, 0xFF}}},
+	{{{112, 155, 0},0, {477, 84},{0x79, 0x28, 0x2, 0xFF}}},
+	{{{96, 149, 37},0, {771, 160},{0x62, 0x2B, 0x44, 0xFF}}},
+	{{{84, 148, 50},0, {864, 362},{0x33, 0x40, 0x61, 0xFF}}},
+	{{{55, 148, 55},0, {814, 650},{0xC9, 0x56, 0x4B, 0xFF}}},
+	{{{41, 146, 0},0, {504, 835},{0x9B, 0x4D, 0x0, 0xFF}}},
+	{{{55, 148, -58},0, {199, 704},{0xC6, 0x55, 0xB5, 0xFF}}},
+};
+
+Gfx skipsqueak_000_offset_002_mesh_tri_5[] = {
+	gsSPVertex(skipsqueak_000_offset_002_mesh_vtx_5 + 0, 9, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 3, 0, 0, 5, 4, 0, 0),
+	gsSP2Triangles(0, 6, 5, 0, 0, 7, 6, 0),
+	gsSP2Triangles(8, 7, 0, 0, 2, 8, 0, 0),
+	gsSPEndDisplayList(),
+};Vtx skipsqueak_000_offset_002_mesh_vtx_6[8] = {
+	{{{70, 104, -146},0, {-16, -16},{0x2A, 0x73, 0xDD, 0xFF}}},
+	{{{41, 141, -57},0, {496, 496},{0x2A, 0x73, 0xDD, 0xFF}}},
+	{{{88, 122, -63},0, {496, -16},{0x2A, 0x73, 0xDD, 0xFF}}},
+	{{{23, 123, -140},0, {-16, 496},{0x2A, 0x73, 0xDD, 0xFF}}},
+	{{{70, 104, 146},0, {-16, -16},{0x2A, 0x73, 0x23, 0xFF}}},
+	{{{88, 122, 63},0, {496, -16},{0x2A, 0x73, 0x23, 0xFF}}},
+	{{{41, 141, 57},0, {496, 496},{0x2A, 0x73, 0x23, 0xFF}}},
+	{{{23, 123, 140},0, {-16, 496},{0x2A, 0x73, 0x23, 0xFF}}},
+};
+
+Gfx skipsqueak_000_offset_002_mesh_tri_6[] = {
+	gsSPVertex(skipsqueak_000_offset_002_mesh_vtx_6 + 0, 8, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
+	gsSPEndDisplayList(),
+};Vtx skipsqueak_000_offset_002_mesh_vtx_7[4] = {
+	{{{41, 134, -28},0, {-170, -30},{0xEC, 0x7D, 0x0, 0xFF}}},
+	{{{-9, 126, 14},0, {784, 962},{0xEC, 0x7D, 0x0, 0xFF}}},
+	{{{41, 134, 28},0, {1076, -34},{0xEC, 0x7D, 0x0, 0xFF}}},
+	{{{-9, 126, -14},0, {144, 964},{0xEC, 0x7D, 0x0, 0xFF}}},
+};
+
+Gfx skipsqueak_000_offset_002_mesh_tri_7[] = {
+	gsSPVertex(skipsqueak_000_offset_002_mesh_vtx_7 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSPEndDisplayList(),
+};
+Vtx skipsqueak_000_offset_002_skinned_vtx_0[5] = {
+	{{{30, 110, 0},0, {466, 314},{0xB8, 0x68, 0x0, 0xFF}}},
+	{{{30, 96, 81},0, {842, 322},{0xB9, 0x61, 0x29, 0xFF}}},
+	{{{30, 50, 136},0, {1108, 306},{0xB7, 0x34, 0x5A, 0xFF}}},
+	{{{30, 96, -77},0, {92, 330},{0xBA, 0x61, 0xD6, 0xFF}}},
+	{{{30, 50, -132},0, {-172, 320},{0xBC, 0x35, 0xA2, 0xFF}}},
+};
+
+Gfx skipsqueak_000_offset_002_skinned_tri_0[] = {
+	gsSPVertex(skipsqueak_000_offset_002_skinned_vtx_0 + 0, 5, 0),
+	gsSPEndDisplayList(),
+};Vtx skipsqueak_000_offset_002_skinned_vtx_1[11] = {
+	{{{30, 50, 136},0, {-1038, 180},{0xB7, 0x34, 0x5A, 0xFF}}},
+	{{{136, -87, 84},0, {-62, 2596},{0x2F, 0xA2, 0x47, 0xFF}}},
+	{{{30, -17, 155},0, {-896, 152},{0xB3, 0xF7, 0x64, 0xFF}}},
+	{{{136, -87, 84},0, {-1396, -456},{0x2F, 0xA2, 0x47, 0xFF}}},
+	{{{136, -87, 84},0, {272, 1750},{0x2F, 0xA2, 0x47, 0xFF}}},
+	{{{136, -87, -80},0, {948, 2520},{0x30, 0xA1, 0xBB, 0xFF}}},
+	{{{155, -106, 2},0, {610, 1726},{0x31, 0x8B, 0x0, 0xFF}}},
+	{{{30, -82, -132},0, {-3142, 180},{0xB9, 0xC1, 0xAC, 0xFF}}},
+	{{{28, -11, -151},0, {-3284, 152},{0xB3, 0x2, 0x9B, 0xFF}}},
+	{{{136, -87, -80},0, {-2784, -456},{0x30, 0xA1, 0xBB, 0xFF}}},
+	{{{30, 50, -132},0, {-3142, 180},{0xBC, 0x35, 0xA2, 0xFF}}},
+};
+
+Gfx skipsqueak_000_offset_002_skinned_tri_1[] = {
+	gsSPVertex(skipsqueak_000_offset_002_skinned_vtx_1 + 0, 11, 5),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_skipsqueak_skipsqueakblue[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsSPSetLights1(skipsqueak_skipsqueakblue_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_skipsqueak_body[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsSPSetLights1(skipsqueak_body_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_skipsqueak_skipsqueakshoe[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsSPSetLights1(skipsqueak_skipsqueakshoe_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_skipsqueak_skipsqueakshoe[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_skipsqueak_eyes[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT, TEXEL0, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, skipsqueak_skipsqueak_eyes_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(skipsqueak_eyes_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_skipsqueak_skipsqueaknose[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT, TEXEL0, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, skipsqueak_skipsqueak_nose_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(skipsqueak_skipsqueaknose_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_skipsqueak_skipsqueakwhisker_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 16, skipsqueak_skipsqueak_whisker_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 4, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 4, 0, G_TX_WRAP | G_TX_NOMIRROR, 4, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 60, 60),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 4, 0, G_TX_WRAP | G_TX_NOMIRROR, 4, 0),
+	gsDPSetTileSize(0, 0, 0, 60, 60),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_skipsqueak_skipsqueakwhisker_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_skipsqueak_sm64_material_013[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT, TEXEL0, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, skipsqueak_skipsqueak_tooth_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(skipsqueak_sm64_material_013_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_skipsqueak_sm64_material_013[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx skipsqueak_000_offset_001_mesh[] = {
+	gsSPDisplayList(mat_skipsqueak_skipsqueakblue),
+	gsSPDisplayList(skipsqueak_000_offset_001_mesh_tri_0),
+	gsSPDisplayList(mat_skipsqueak_body),
+	gsSPDisplayList(skipsqueak_000_offset_001_mesh_tri_1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx skipsqueak_000_offset_004_mesh[] = {
+	gsSPDisplayList(mat_skipsqueak_skipsqueakshoe),
+	gsSPDisplayList(skipsqueak_000_offset_004_mesh_tri_0),
+	gsSPDisplayList(mat_revert_skipsqueak_skipsqueakshoe),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx skipsqueak_000_offset_003_mesh[] = {
+	gsSPDisplayList(mat_skipsqueak_skipsqueakshoe),
+	gsSPDisplayList(skipsqueak_000_offset_003_mesh_tri_0),
+	gsSPDisplayList(mat_revert_skipsqueak_skipsqueakshoe),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx skipsqueak_000_offset_002_mesh[] = {
+	gsSPDisplayList(mat_skipsqueak_body),
+	gsSPDisplayList(skipsqueak_000_offset_002_mesh_tri_0),
+	gsSPDisplayList(mat_skipsqueak_skipsqueakblue),
+	gsSPDisplayList(skipsqueak_000_offset_002_mesh_tri_1),
+	gsSPDisplayList(mat_skipsqueak_skipsqueakblue),
+	gsSPDisplayList(skipsqueak_000_offset_002_mesh_tri_2),
+	gsSPDisplayList(mat_skipsqueak_skipsqueakshoe),
+	gsSPDisplayList(skipsqueak_000_offset_002_mesh_tri_3),
+	gsSPDisplayList(mat_revert_skipsqueak_skipsqueakshoe),
+	gsSPDisplayList(mat_skipsqueak_eyes),
+	gsSPDisplayList(skipsqueak_000_offset_002_mesh_tri_4),
+	gsSPDisplayList(mat_skipsqueak_skipsqueaknose),
+	gsSPDisplayList(skipsqueak_000_offset_002_mesh_tri_5),
+	gsSPDisplayList(mat_skipsqueak_skipsqueakwhisker_layer1),
+	gsSPDisplayList(skipsqueak_000_offset_002_mesh_tri_6),
+	gsSPDisplayList(mat_revert_skipsqueak_skipsqueakwhisker_layer1),
+	gsSPDisplayList(mat_skipsqueak_sm64_material_013),
+	gsSPDisplayList(skipsqueak_000_offset_002_mesh_tri_7),
+	gsSPDisplayList(mat_revert_skipsqueak_sm64_material_013),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx skipsqueak_000_offset_002_skinned[] = {
+	gsSPDisplayList(mat_skipsqueak_body),
+	gsSPDisplayList(skipsqueak_000_offset_002_skinned_tri_0),
+	gsSPDisplayList(mat_skipsqueak_skipsqueakblue),
+	gsSPDisplayList(skipsqueak_000_offset_002_skinned_tri_1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx skipsqueak_material_revert_render_settings[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPClearGeometryMode(G_TEXTURE_GEN),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 0),
+	gsDPSetEnvColor(255, 255, 255, 255),
+	gsDPSetAlphaCompare(G_AC_NONE),
+	gsSPEndDisplayList(),
+};
diff --git a/actors/skipsqueak/skipsqueak_eyes.rgba16.png b/actors/skipsqueak/skipsqueak_eyes.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..359a27c0261d9cfdc896ab4a74617dc775ff05ac
GIT binary patch
literal 564
zcmV-40?Yl0P)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XU
z000XU0RWnu7ytkP=1D|BR9Fe^mOYLFF${&xY70tAI0AH(lu&X7j=^={7*Ik76`}%4
z=qRCsZg##%9%ZsgW+GPFW-Ot|_OtW+L!g!ABL65~|9H2#x*^bX;JeNep3i4_KA+O*
zbYw6XRE8ws`5MOLa5!Y+@i@ybHz#^bQt_2La6BGmzu%h<aH7W~6)&-BPN!2g8jX0U
ziVr$=pQPf+5$ynTzg#Y*g75dcyx;GVO%?3;Z6TgKA&C+oSTE~#yE2_l%@SU(S8qP-
zEGanf2=Q(ac5sjYo4i~u3j(v*Oy={s<O?aA%|=`j=-Bat1Fr<gLq4Ab3E0fr?Y8v$
zeVI%q((Co)cDu>z^(y5<$BrKyc;XPdlck_siM|8cekHS7tz@^`{hG5TW&ZeiFYHS-
zkK*hzO27uL*K1StcDt3w<57%8F<b%x{D_|F51q9M=pr#|ZLOOW61p3TcQLLW+yNJe
zZnxFv$EM>7`CWUIK&VnTNtGVU6C^+oo9q*N!_}XP*SP3YyjU!<JaO?1=Rrot?vqq}
z<x~6@mBu<l7lI?e$@keE13Gq}q~c8uUn^~!-B!jCYQM&$;-eja;cz&V{3qB{&50h9
zRD28Ov4r@N{$eHKYZ0g-_=&%A1fL|Y6Wb7II`9M2tB#N1&~9)50000<MNUMnLSTZK
C#sPo;

literal 0
HcmV?d00001

diff --git a/actors/skipsqueak/skipsqueak_nose.rgba16.png b/actors/skipsqueak/skipsqueak_nose.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..a7332b6b4c5b68f8acd99b8fb4f4291503f4ce48
GIT binary patch
literal 1557
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
Hu0mjfoe|x2

literal 0
HcmV?d00001

diff --git a/actors/skipsqueak/skipsqueak_tooth.rgba16.png b/actors/skipsqueak/skipsqueak_tooth.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..e17f45790409f3313886a45e6be1ff15d095890b
GIT binary patch
literal 851
zcmV-Z1FZasP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XU
z000XU0RWnu7ytkR1xZ9fR9FeMR!eg0Fbs=3UD)@(Uysmjvg;#Yf+F>?lf~0aB#J*k
zB-3X5`T2YJ3PFnhdG7mTL;mj!^0dprt!d5i@p}2)WGp|<i|^r6wD*@F@C2}}4xc)Z
z(4vgHks>cAmwmEcajP>3z#+flIK~iw1Q2AzxLXE=US-NT-8F2;^(7@7`7s4fRb-k#
zL3WA|Knp?lnd(w}sQ~pL!bY54XC+!WKuDmlfvD~xt2;7eon&Sv<5U4Tzg|8JRM6G7
zq_bN|)VSSNfUQwVKUo2lTebi|gk$gf(}0h7t$byVy9vt*z?K{##|%IZtRQ2h9v4U?
ztp%h4(15nEZEgS=5z@&Vo+k)UDRfIrdjc!K&Vhto4q)BwBoV(09IuuPQxI@J9!QJ@
zd;p6Vm6I(4_2$8rdtlCm!0eSdVJb*gzb)(KI3*VXQZ6%+f$Gz|MoqI(N`q1`EMFlo
zOq8N0Z79_+23KuL_=OpA1OYHRp6)6@JMnj+fGGuRlKs4`MCXr|lRylL;pe1T&ap8o
z<`6O*K474@r~u+o1r8}UXncW*eNbiv%7k;K%XZ3(J_G>+=MRJ-&=q|(`n%#*Md0rY
zIGurk6$D`893-ZC@f566Mimwer0&An5Q4zD5(B9gCqVU~OP_raCpBW@-?0V}RlvIX
zTAdzsX9YAv)im7bYg%BH7MN}$0g&)QL>oSM-HN;eNB_aBCjgy&6At0?t_=x9NIITQ
z4tBlnhD3x%3!w2ffZ@A8(fJy~{lj#teUUv0&au26=6MC|E4lCO$A^!Fr@J3gRUz>0
zD_}VW@F{^bjEzJvXy5~gWy>uHa0tg79H!C&D6l{RJ+zV<>m%CHl{mi$a`-U`HhlRn
zz~S=MC54WwR-*M+dN|Fha7M?TNlyKz6;QaqtQt&YcfB$aCla{|8~=Bpb^a$X`6)e5
z5<nGJ4)78Y69bsh<3>Ak0o+IbD);vLYu_MuM7}JK`L8vcRc_aQvf|;KfjkFUmg74o
d<30pO-hXWw__QH}fy@8^002ovPDHLkV1iuxaUcKy

literal 0
HcmV?d00001

diff --git a/actors/skipsqueak/skipsqueak_whisker.ia8.png b/actors/skipsqueak/skipsqueak_whisker.ia8.png
new file mode 100644
index 0000000000000000000000000000000000000000..aebf9f90a29a0852d341d7e2a051bf0e4426df90
GIT binary patch
literal 179
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`oCO|{#S9GG!XV7ZFl&wkP%zcg
z#WBP}@ahC_z5@yztXn^_-TB`!XCZI5p+m>6HF*vRa`UgPtKWOe!R4NopHHZ|x$GqC
z8CEV$2Q=Tfvd!nY+_>jv%;RG5-w!(~`>&q6vqB`IabIVrja|Y&O&)Qz4+hFXKjMEg
YE;%Jv%jxp|JJ3P~Pgg&ebxsLQ01}fvK>z>%

literal 0
HcmV?d00001

diff --git a/actors/skipsqueak/skipsqueak_whisker.rgba16.png b/actors/skipsqueak/skipsqueak_whisker.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..aebf9f90a29a0852d341d7e2a051bf0e4426df90
GIT binary patch
literal 179
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`oCO|{#S9GG!XV7ZFl&wkP%zcg
z#WBP}@ahC_z5@yztXn^_-TB`!XCZI5p+m>6HF*vRa`UgPtKWOe!R4NopHHZ|x$GqC
z8CEV$2Q=Tfvd!nY+_>jv%;RG5-w!(~`>&q6vqB`IabIVrja|Y&O&)Qz4+hFXKjMEg
YE;%Jv%jxp|JJ3P~Pgg&ebxsLQ01}fvK>z>%

literal 0
HcmV?d00001

diff --git a/actors/skipsqueak/texscroll.inc.c b/actors/skipsqueak/texscroll.inc.c
new file mode 100644
index 0000000..93ff568
--- /dev/null
+++ b/actors/skipsqueak/texscroll.inc.c
@@ -0,0 +1,3 @@
+void scroll_actor_geo_skipsqueak() {
+	
+}
diff --git a/actors/skipsqueak/texscroll.inc.h b/actors/skipsqueak/texscroll.inc.h
new file mode 100644
index 0000000..8cdf0fa
--- /dev/null
+++ b/actors/skipsqueak/texscroll.inc.h
@@ -0,0 +1,3 @@
+
+extern void scroll_actor_geo_skipsqueak();
+
diff --git a/actors/spiny_skipsqueak/geo.inc.c b/actors/spiny_skipsqueak/geo.inc.c
new file mode 100644
index 0000000..944af1b
--- /dev/null
+++ b/actors/spiny_skipsqueak/geo.inc.c
@@ -0,0 +1,56 @@
+#include "src/game/envfx_snow.h"
+
+const GeoLayout spiny_skipsqueak_geo[] = {
+	GEO_NODE_START(),
+	GEO_OPEN_NODE(),
+		GEO_SHADOW(0, 150, 100),
+		GEO_OPEN_NODE(),
+			GEO_SCALE(LAYER_FORCE, 16384),
+			GEO_OPEN_NODE(),
+				GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 14, 0, NULL),
+				GEO_OPEN_NODE(),
+					GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, spiny_skipsqueak_000_offset_001_mesh),
+					GEO_OPEN_NODE(),
+						GEO_BILLBOARD_WITH_PARAMS(LAYER_FORCE, 0, 0, 0),
+						GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 8, -60, NULL),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, -74, -24, 15, NULL),
+								GEO_OPEN_NODE(),
+									GEO_TRANSLATE_ROTATE(LAYER_OPAQUE, 0, 0, 0, 0, -180, 0),
+									GEO_OPEN_NODE(),
+										GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, spiny_skipsqueak_000_offset_004_mesh),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+						GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 6, 62, NULL),
+						GEO_OPEN_NODE(),
+							GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, NULL),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, -74, -22, -17, NULL),
+								GEO_OPEN_NODE(),
+									GEO_TRANSLATE_ROTATE(LAYER_OPAQUE, 0, 0, 0, 0, 180, 0),
+									GEO_OPEN_NODE(),
+										GEO_ANIMATED_PART(LAYER_OPAQUE, 0, 0, 0, spiny_skipsqueak_000_offset_003_mesh),
+									GEO_CLOSE_NODE(),
+								GEO_CLOSE_NODE(),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+						GEO_DISPLAY_LIST(LAYER_OPAQUE, spiny_skipsqueak_000_offset_002_skinned),
+						GEO_SWITCH_CASE(2, geo_switch_anim_state),
+						GEO_OPEN_NODE(),
+							GEO_NODE_START(),
+							GEO_OPEN_NODE(),
+								GEO_ANIMATED_PART(LAYER_OPAQUE, 113, 0, 0, spiny_skipsqueak_000_offset_002_mesh),
+							GEO_CLOSE_NODE(),
+						GEO_CLOSE_NODE(),
+					GEO_CLOSE_NODE(),
+				GEO_CLOSE_NODE(),
+			GEO_CLOSE_NODE(),
+		GEO_CLOSE_NODE(),
+		GEO_DISPLAY_LIST(LAYER_OPAQUE, spiny_skipsqueak_material_revert_render_settings),
+	GEO_CLOSE_NODE(),
+	GEO_END(),
+};
diff --git a/actors/spiny_skipsqueak/geo_header.h b/actors/spiny_skipsqueak/geo_header.h
new file mode 100644
index 0000000..7074a6e
--- /dev/null
+++ b/actors/spiny_skipsqueak/geo_header.h
@@ -0,0 +1,37 @@
+extern const GeoLayout spiny_skipsqueak_geo[];
+extern Vtx spiny_skipsqueak_000_offset_001_mesh_vtx_0[25];
+extern Gfx spiny_skipsqueak_000_offset_001_mesh_tri_0[];
+extern Vtx spiny_skipsqueak_000_offset_001_mesh_vtx_1[8];
+extern Gfx spiny_skipsqueak_000_offset_001_mesh_tri_1[];
+extern Vtx spiny_skipsqueak_000_offset_004_mesh_vtx_0[20];
+extern Gfx spiny_skipsqueak_000_offset_004_mesh_tri_0[];
+extern Vtx spiny_skipsqueak_000_offset_003_mesh_vtx_0[20];
+extern Gfx spiny_skipsqueak_000_offset_003_mesh_tri_0[];
+extern Vtx spiny_skipsqueak_000_offset_002_mesh_vtx_0[3];
+extern Gfx spiny_skipsqueak_000_offset_002_mesh_tri_0[];
+extern Vtx spiny_skipsqueak_000_offset_002_mesh_vtx_1[11];
+extern Gfx spiny_skipsqueak_000_offset_002_mesh_tri_1[];
+extern Vtx spiny_skipsqueak_000_offset_002_mesh_vtx_2[52];
+extern Gfx spiny_skipsqueak_000_offset_002_mesh_tri_2[];
+extern Vtx spiny_skipsqueak_000_offset_002_mesh_vtx_3[8];
+extern Gfx spiny_skipsqueak_000_offset_002_mesh_tri_3[];
+extern Vtx spiny_skipsqueak_000_offset_002_mesh_vtx_4[9];
+extern Gfx spiny_skipsqueak_000_offset_002_mesh_tri_4[];
+extern Vtx spiny_skipsqueak_000_offset_002_mesh_vtx_5[9];
+extern Gfx spiny_skipsqueak_000_offset_002_mesh_tri_5[];
+extern Vtx spiny_skipsqueak_000_offset_002_mesh_vtx_6[8];
+extern Gfx spiny_skipsqueak_000_offset_002_mesh_tri_6[];
+extern Vtx spiny_skipsqueak_000_offset_002_mesh_vtx_7[4];
+extern Gfx spiny_skipsqueak_000_offset_002_mesh_tri_7[];
+extern Vtx spiny_skipsqueak_000_offset_002_skinned_vtx_0[5];
+extern Gfx spiny_skipsqueak_000_offset_002_skinned_tri_0[];
+extern Vtx spiny_skipsqueak_000_offset_002_skinned_vtx_1[11];
+extern Gfx spiny_skipsqueak_000_offset_002_skinned_tri_1[];
+
+extern Gfx spiny_skipsqueak_000_offset_001_mesh[];
+extern Gfx spiny_skipsqueak_000_offset_004_mesh[];
+extern Gfx spiny_skipsqueak_000_offset_003_mesh[];
+extern Gfx spiny_skipsqueak_000_offset_002_mesh[];
+extern Gfx spiny_skipsqueak_000_offset_002_skinned[];
+extern Gfx spiny_skipsqueak_material_revert_render_settings[];
+
diff --git a/actors/spiny_skipsqueak/model.inc.c b/actors/spiny_skipsqueak/model.inc.c
new file mode 100644
index 0000000..f413727
--- /dev/null
+++ b/actors/spiny_skipsqueak/model.inc.c
@@ -0,0 +1,662 @@
+Lights1 spiny_skipsqueak_skipsqueakblue_002_lights = gdSPDefLights1(
+	0x2A, 0x17, 0x7F,
+	0x54, 0x2E, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 spiny_skipsqueak_body_001_lights = gdSPDefLights1(
+	0x73, 0x73, 0x7F,
+	0xE6, 0xE7, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 spiny_skipsqueak_skipsqueakshoe_001_lights = gdSPDefLights1(
+	0x13, 0x68, 0x15,
+	0x26, 0xD1, 0x2B, 0x28, 0x28, 0x28);
+
+Lights1 spiny_skipsqueak_skipsqueakshoe_lights = gdSPDefLights1(
+	0x7F, 0x0, 0x5,
+	0xFE, 0x0, 0xB, 0x28, 0x28, 0x28);
+
+Lights1 spiny_skipsqueak_eyes_001_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 spiny_skipsqueak_skipsqueaknose_001_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Lights1 spiny_skipsqueak_sm64_material_018_lights = gdSPDefLights1(
+	0x7F, 0x7F, 0x7F,
+	0xFE, 0xFE, 0xFE, 0x28, 0x28, 0x28);
+
+Gfx spiny_skipsqueak_skipsqueak_eyes_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 spiny_skipsqueak_skipsqueak_eyes_rgba16[] = {
+	#include "actors/spiny_skipsqueak/skipsqueak_eyes.rgba16.inc.c"
+};
+
+Gfx spiny_skipsqueak_skipsqueak_nose_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 spiny_skipsqueak_skipsqueak_nose_rgba16[] = {
+	#include "actors/spiny_skipsqueak/skipsqueak_nose.rgba16.inc.c"
+};
+
+Gfx spiny_skipsqueak_skipsqueak_whisker_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 spiny_skipsqueak_skipsqueak_whisker_rgba16[] = {
+	#include "actors/spiny_skipsqueak/skipsqueak_whisker.rgba16.inc.c"
+};
+
+Gfx spiny_skipsqueak_skipsqueak_tooth_rgba16_aligner[] = {gsSPEndDisplayList()};
+u8 spiny_skipsqueak_skipsqueak_tooth_rgba16[] = {
+	#include "actors/spiny_skipsqueak/skipsqueak_tooth.rgba16.inc.c"
+};
+
+Vtx spiny_skipsqueak_000_offset_001_mesh_vtx_0[25] = {
+	{{{136, -87, 84},0, {-1396, -456},{0x42, 0xB6, 0x50, 0xFF}}},
+	{{{36, -131, 0},0, {-2090, 152},{0xDD, 0x86, 0x0, 0xFF}}},
+	{{{155, -106, 2},0, {-2090, -588},{0xFB, 0x81, 0x0, 0xFF}}},
+	{{{136, -194, 146},0, {-1576, 180},{0xC6, 0x9D, 0x36, 0xFF}}},
+	{{{30, -82, 136},0, {-1038, 180},{0xB1, 0xD9, 0x5B, 0xFF}}},
+	{{{30, -17, 155},0, {-896, 152},{0xB4, 0xED, 0x64, 0xFF}}},
+	{{{30, 50, 136},0, {1108, 306},{0xB6, 0x2C, 0x5D, 0xFF}}},
+	{{{30, 110, 0},0, {466, 314},{0xB3, 0x65, 0x0, 0xFF}}},
+	{{{30, 96, 81},0, {842, 322},{0xB6, 0x5E, 0x2C, 0xFF}}},
+	{{{30, -82, -132},0, {-3142, 180},{0xB5, 0xD3, 0xA4, 0xFF}}},
+	{{{30, 50, -132},0, {-3142, 180},{0xBB, 0x2C, 0x9F, 0xFF}}},
+	{{{30, 96, -77},0, {92, 330},{0xB6, 0x5E, 0xD4, 0xFF}}},
+	{{{28, -11, -151},0, {-3284, 152},{0xB5, 0xF7, 0x9A, 0xFF}}},
+	{{{-27, 58, -86},0, {-2784, -456},{0xA2, 0x41, 0xC9, 0xFF}}},
+	{{{-40, -17, -92},0, {-2824, -588},{0x93, 0xFA, 0xBF, 0xFF}}},
+	{{{-27, -98, -56},0, {-2784, -456},{0xA8, 0xB8, 0xC8, 0xFF}}},
+	{{{136, -194, -142},0, {-2604, 180},{0xC6, 0x9C, 0xCA, 0xFF}}},
+	{{{136, -87, -80},0, {-2784, -456},{0x40, 0xB3, 0xB3, 0xFF}}},
+	{{{-27, -98, 58},0, {-1396, -456},{0xA8, 0xB8, 0x3A, 0xFF}}},
+	{{{-40, -17, 96},0, {-1356, -588},{0x96, 0xF7, 0x45, 0xFF}}},
+	{{{30, 50, 136},0, {-1038, 180},{0xB6, 0x2C, 0x5D, 0xFF}}},
+	{{{-27, 58, 90},0, {-1396, -456},{0xA2, 0x40, 0x38, 0xFF}}},
+	{{{-40, 61, 0},0, {-2090, -588},{0x96, 0x47, 0x0, 0xFF}}},
+	{{{-61, -17, 0},0, {-2090, -790},{0x81, 0x3, 0xFF, 0xFF}}},
+	{{{-35, -143, 1},0, {-2090, -588},{0xC3, 0x90, 0x1, 0xFF}}},
+};
+
+Gfx spiny_skipsqueak_000_offset_001_mesh_tri_0[] = {
+	gsSPVertex(spiny_skipsqueak_000_offset_001_mesh_vtx_0 + 0, 25, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 3, 0, 0, 5, 4, 0, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
+	gsSP2Triangles(6, 8, 7, 0, 4, 7, 9, 0),
+	gsSP2Triangles(7, 10, 9, 0, 7, 11, 10, 0),
+	gsSP2Triangles(10, 12, 9, 0, 12, 13, 10, 0),
+	gsSP2Triangles(12, 14, 13, 0, 14, 12, 9, 0),
+	gsSP2Triangles(14, 9, 15, 0, 15, 9, 16, 0),
+	gsSP2Triangles(9, 16, 1, 0, 1, 16, 17, 0),
+	gsSP2Triangles(17, 16, 9, 0, 1, 17, 2, 0),
+	gsSP2Triangles(9, 1, 4, 0, 1, 3, 4, 0),
+	gsSP2Triangles(18, 1, 3, 0, 4, 18, 3, 0),
+	gsSP2Triangles(5, 18, 4, 0, 5, 19, 18, 0),
+	gsSP2Triangles(19, 5, 20, 0, 19, 20, 21, 0),
+	gsSP2Triangles(19, 21, 22, 0, 19, 22, 23, 0),
+	gsSP2Triangles(22, 14, 23, 0, 22, 13, 14, 0),
+	gsSP2Triangles(14, 24, 23, 0, 14, 15, 24, 0),
+	gsSP2Triangles(1, 24, 15, 0, 1, 15, 16, 0),
+	gsSP2Triangles(18, 24, 1, 0, 24, 18, 19, 0),
+	gsSP1Triangle(24, 19, 23, 0),
+	gsSPEndDisplayList(),
+};Vtx spiny_skipsqueak_000_offset_001_mesh_vtx_1[8] = {
+	{{{30, 50, -132},0, {-172, 320},{0xBB, 0x2C, 0x9F, 0xFF}}},
+	{{{-27, 58, -86},0, {46, -86},{0xA2, 0x41, 0xC9, 0xFF}}},
+	{{{30, 96, -77},0, {92, 330},{0xB6, 0x5E, 0xD4, 0xFF}}},
+	{{{30, 110, 0},0, {466, 314},{0xB3, 0x65, 0x0, 0xFF}}},
+	{{{-40, 61, 0},0, {468, -172},{0x96, 0x47, 0x0, 0xFF}}},
+	{{{-27, 58, 90},0, {890, -94},{0xA2, 0x40, 0x38, 0xFF}}},
+	{{{30, 96, 81},0, {842, 322},{0xB6, 0x5E, 0x2C, 0xFF}}},
+	{{{30, 50, 136},0, {1108, 306},{0xB6, 0x2C, 0x5D, 0xFF}}},
+};
+
+Gfx spiny_skipsqueak_000_offset_001_mesh_tri_1[] = {
+	gsSPVertex(spiny_skipsqueak_000_offset_001_mesh_vtx_1 + 0, 8, 0),
+	gsSP2Triangles(0, 1, 2, 0, 1, 3, 2, 0),
+	gsSP2Triangles(1, 4, 3, 0, 3, 4, 5, 0),
+	gsSP2Triangles(3, 5, 6, 0, 5, 7, 6, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx spiny_skipsqueak_000_offset_004_mesh_vtx_0[20] = {
+	{{{-4, 2, 76},0, {-16, -16},{0x18, 0x49, 0x65, 0xFF}}},
+	{{{33, 2, 47},0, {-16, -16},{0x60, 0x46, 0x2E, 0xFF}}},
+	{{{33, 2, -7},0, {-16, -16},{0x60, 0x46, 0xD2, 0xFF}}},
+	{{{-4, -42, 67},0, {-16, -16},{0x19, 0xB2, 0x61, 0xFF}}},
+	{{{-76, -32, 61},0, {-16, -16},{0xD2, 0xB9, 0x5E, 0xFF}}},
+	{{{-79, -4, 67},0, {-16, -16},{0xD5, 0x43, 0x63, 0xFF}}},
+	{{{-4, 2, -34},0, {-16, -16},{0x17, 0x49, 0x9B, 0xFF}}},
+	{{{27, -28, -7},0, {-16, -16},{0x68, 0xCB, 0xCE, 0xFF}}},
+	{{{27, -28, 47},0, {-16, -16},{0x68, 0xCC, 0x32, 0xFF}}},
+	{{{4, -50, 47},0, {-16, -16},{0x28, 0x8B, 0x1E, 0xFF}}},
+	{{{-74, -42, 43},0, {-16, -16},{0xDA, 0x8B, 0x1E, 0xFF}}},
+	{{{-110, -22, 34},0, {-16, -16},{0x9E, 0xB9, 0x28, 0xFF}}},
+	{{{-116, 1, 38},0, {-16, -16},{0xA3, 0x47, 0x31, 0xFF}}},
+	{{{-116, 1, 3},0, {-16, -16},{0xA3, 0x48, 0xD0, 0xFF}}},
+	{{{-79, -4, -27},0, {-16, -16},{0xD5, 0x42, 0x9D, 0xFF}}},
+	{{{-4, -42, -26},0, {-16, -16},{0x19, 0xB4, 0x9E, 0xFF}}},
+	{{{4, -50, -7},0, {-16, -16},{0x29, 0x8C, 0xE1, 0xFF}}},
+	{{{-74, -42, -3},0, {-16, -16},{0xD9, 0x8B, 0xE2, 0xFF}}},
+	{{{-110, -22, 6},0, {-16, -16},{0x9E, 0xBA, 0xD7, 0xFF}}},
+	{{{-76, -32, -19},0, {-16, -16},{0xD1, 0xB9, 0xA2, 0xFF}}},
+};
+
+Gfx spiny_skipsqueak_000_offset_004_mesh_tri_0[] = {
+	gsSPVertex(spiny_skipsqueak_000_offset_004_mesh_vtx_0 + 0, 20, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(4, 3, 0, 0, 4, 0, 5, 0),
+	gsSP2Triangles(5, 0, 6, 0, 0, 2, 6, 0),
+	gsSP2Triangles(6, 2, 7, 0, 8, 7, 2, 0),
+	gsSP2Triangles(8, 2, 1, 0, 3, 8, 1, 0),
+	gsSP2Triangles(9, 8, 3, 0, 4, 9, 3, 0),
+	gsSP2Triangles(4, 10, 9, 0, 4, 11, 10, 0),
+	gsSP2Triangles(5, 11, 4, 0, 5, 12, 11, 0),
+	gsSP2Triangles(5, 13, 12, 0, 5, 14, 13, 0),
+	gsSP2Triangles(5, 6, 14, 0, 15, 14, 6, 0),
+	gsSP2Triangles(6, 7, 15, 0, 15, 7, 16, 0),
+	gsSP2Triangles(16, 7, 8, 0, 16, 8, 9, 0),
+	gsSP2Triangles(10, 16, 9, 0, 10, 17, 16, 0),
+	gsSP2Triangles(10, 18, 17, 0, 10, 11, 18, 0),
+	gsSP2Triangles(18, 11, 12, 0, 18, 12, 13, 0),
+	gsSP2Triangles(19, 18, 13, 0, 19, 13, 14, 0),
+	gsSP2Triangles(15, 19, 14, 0, 15, 17, 19, 0),
+	gsSP2Triangles(15, 16, 17, 0, 17, 18, 19, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx spiny_skipsqueak_000_offset_003_mesh_vtx_0[20] = {
+	{{{-4, 2, 34},0, {-16, -16},{0x17, 0x49, 0x66, 0xFF}}},
+	{{{-79, -3, 27},0, {-16, -16},{0xD6, 0x42, 0x64, 0xFF}}},
+	{{{-76, -32, 19},0, {-16, -16},{0xD2, 0xB8, 0x5E, 0xFF}}},
+	{{{-4, 2, -76},0, {-16, -16},{0x18, 0x49, 0x9B, 0xFF}}},
+	{{{33, 2, -47},0, {-16, -16},{0x60, 0x46, 0xD3, 0xFF}}},
+	{{{33, 2, 7},0, {-16, -16},{0x5F, 0x46, 0x2F, 0xFF}}},
+	{{{-4, -42, 26},0, {-16, -16},{0x17, 0xB3, 0x63, 0xFF}}},
+	{{{3, -50, 7},0, {-16, -16},{0x28, 0x8B, 0x1F, 0xFF}}},
+	{{{-74, -42, 3},0, {-16, -16},{0xD9, 0x8B, 0x20, 0xFF}}},
+	{{{-110, -22, -6},0, {-16, -16},{0x9E, 0xBB, 0x29, 0xFF}}},
+	{{{-116, 2, -3},0, {-16, -16},{0xA3, 0x48, 0x2F, 0xFF}}},
+	{{{-116, 2, -38},0, {-16, -16},{0xA3, 0x48, 0xD0, 0xFF}}},
+	{{{-79, -3, -67},0, {-16, -16},{0xD7, 0x44, 0x9D, 0xFF}}},
+	{{{-4, -42, -67},0, {-16, -16},{0x1A, 0xB4, 0x9E, 0xFF}}},
+	{{{27, -29, -47},0, {-16, -16},{0x68, 0xCA, 0xCF, 0xFF}}},
+	{{{27, -29, 7},0, {-16, -16},{0x67, 0xCB, 0x34, 0xFF}}},
+	{{{3, -50, -47},0, {-16, -16},{0x29, 0x8B, 0xE3, 0xFF}}},
+	{{{-74, -42, -43},0, {-16, -16},{0xD8, 0x8B, 0xE3, 0xFF}}},
+	{{{-110, -22, -34},0, {-16, -16},{0x9E, 0xB9, 0xDA, 0xFF}}},
+	{{{-76, -32, -61},0, {-16, -16},{0xD0, 0xBA, 0xA2, 0xFF}}},
+};
+
+Gfx spiny_skipsqueak_000_offset_003_mesh_tri_0[] = {
+	gsSPVertex(spiny_skipsqueak_000_offset_003_mesh_vtx_0 + 0, 20, 0),
+	gsSP2Triangles(0, 1, 2, 0, 1, 0, 3, 0),
+	gsSP2Triangles(0, 4, 3, 0, 0, 5, 4, 0),
+	gsSP2Triangles(6, 5, 0, 0, 0, 2, 6, 0),
+	gsSP2Triangles(2, 7, 6, 0, 2, 8, 7, 0),
+	gsSP2Triangles(2, 9, 8, 0, 1, 9, 2, 0),
+	gsSP2Triangles(1, 10, 9, 0, 11, 10, 1, 0),
+	gsSP2Triangles(11, 1, 12, 0, 1, 3, 12, 0),
+	gsSP2Triangles(12, 3, 13, 0, 3, 14, 13, 0),
+	gsSP2Triangles(3, 4, 14, 0, 4, 15, 14, 0),
+	gsSP2Triangles(4, 5, 15, 0, 6, 15, 5, 0),
+	gsSP2Triangles(7, 15, 6, 0, 16, 15, 7, 0),
+	gsSP2Triangles(16, 7, 8, 0, 16, 8, 17, 0),
+	gsSP2Triangles(8, 18, 17, 0, 8, 9, 18, 0),
+	gsSP2Triangles(10, 18, 9, 0, 10, 11, 18, 0),
+	gsSP2Triangles(19, 18, 11, 0, 19, 11, 12, 0),
+	gsSP2Triangles(12, 13, 19, 0, 13, 17, 19, 0),
+	gsSP2Triangles(13, 16, 17, 0, 13, 14, 16, 0),
+	gsSP2Triangles(16, 14, 15, 0, 17, 18, 19, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx spiny_skipsqueak_000_offset_002_mesh_vtx_0[3] = {
+	{{{14, 76, 90},0, {890, -94},{0xF5, 0x5D, 0x55, 0xFF}}},
+	{{{1, 79, 2},0, {468, -172},{0xDC, 0x7A, 0x0, 0xFF}}},
+	{{{14, 76, -86},0, {46, -86},{0xED, 0x5B, 0xAA, 0xFF}}},
+};
+
+Gfx spiny_skipsqueak_000_offset_002_mesh_tri_0[] = {
+	gsSPVertex(spiny_skipsqueak_000_offset_002_mesh_vtx_0 + 0, 3, 16),
+	gsSP2Triangles(16, 1, 2, 0, 0, 1, 16, 0),
+	gsSP2Triangles(0, 16, 17, 0, 18, 0, 17, 0),
+	gsSP2Triangles(18, 3, 0, 0, 4, 3, 18, 0),
+	gsSPEndDisplayList(),
+};Vtx spiny_skipsqueak_000_offset_002_mesh_vtx_1[11] = {
+	{{{26, 6, 130},0, {-1356, -588},{0x11, 0x1, 0x7E, 0xFF}}},
+	{{{14, 76, 90},0, {-1396, -456},{0xF5, 0x5D, 0x55, 0xFF}}},
+	{{{73, 16, 131},0, {-316, 1796},{0x37, 0x1C, 0x6F, 0xFF}}},
+	{{{26, 6, 130},0, {-360, 2518},{0x11, 0x1, 0x7E, 0xFF}}},
+	{{{117, -2, 78},0, {-58, 940},{0x45, 0xEB, 0x69, 0xFF}}},
+	{{{26, 6, -127},0, {1248, 2400},{0x9, 0x4, 0x81, 0xFF}}},
+	{{{73, 16, -131},0, {1204, 1684},{0x34, 0x19, 0x8F, 0xFF}}},
+	{{{117, -2, -81},0, {944, 866},{0x43, 0xEB, 0x96, 0xFF}}},
+	{{{228, -147, 0},0, {442, 798},{0x68, 0xB7, 0x0, 0xFF}}},
+	{{{26, 6, -127},0, {-2824, -588},{0x9, 0x4, 0x81, 0xFF}}},
+	{{{14, 76, -86},0, {-2784, -456},{0xED, 0x5B, 0xAA, 0xFF}}},
+};
+
+Gfx spiny_skipsqueak_000_offset_002_mesh_tri_1[] = {
+	gsSPVertex(spiny_skipsqueak_000_offset_002_mesh_vtx_1 + 0, 11, 16),
+	gsSP2Triangles(16, 17, 5, 0, 16, 5, 7, 0),
+	gsSP2Triangles(7, 8, 16, 0, 6, 18, 19, 0),
+	gsSP2Triangles(18, 6, 20, 0, 21, 22, 10, 0),
+	gsSP2Triangles(10, 22, 23, 0, 23, 24, 10, 0),
+	gsSP2Triangles(10, 24, 11, 0, 11, 24, 9, 0),
+	gsSP2Triangles(20, 9, 24, 0, 25, 14, 12, 0),
+	gsSP2Triangles(25, 12, 13, 0, 13, 26, 25, 0),
+	gsSP1Triangle(13, 15, 26, 0),
+	gsSPEndDisplayList(),
+};Vtx spiny_skipsqueak_000_offset_002_mesh_vtx_2[52] = {
+	{{{55, 148, 55},0, {-16, 1008},{0xC9, 0x56, 0x4B, 0xFF}}},
+	{{{1, 79, 2},0, {-16, 1008},{0xDC, 0x7A, 0x0, 0xFF}}},
+	{{{14, 76, 90},0, {-16, 1008},{0xF5, 0x5D, 0x55, 0xFF}}},
+	{{{41, 146, 0},0, {-16, 1008},{0x9B, 0x4D, 0x0, 0xFF}}},
+	{{{55, 148, -58},0, {-16, 1008},{0xC6, 0x55, 0xB5, 0xFF}}},
+	{{{14, 76, -86},0, {-16, 1008},{0xED, 0x5B, 0xAA, 0xFF}}},
+	{{{84, 148, -53},0, {-16, 1008},{0x30, 0x42, 0x9F, 0xFF}}},
+	{{{70, 82, -99},0, {-16, 1008},{0x23, 0x39, 0x94, 0xFF}}},
+	{{{117, -2, 78},0, {-58, 940},{0x45, 0xEB, 0x69, 0xFF}}},
+	{{{228, -147, 0},0, {442, 798},{0x68, 0xB7, 0x0, 0xFF}}},
+	{{{151, -22, 0},0, {442, -586},{0x7C, 0xE5, 0x1, 0xFF}}},
+	{{{117, -2, -81},0, {944, 866},{0x43, 0xEB, 0x96, 0xFF}}},
+	{{{101, 63, 71},0, {1892, -294},{0x3A, 0x44, 0x5A, 0xFF}}},
+	{{{73, 16, 131},0, {2448, -386},{0x37, 0x1C, 0x6F, 0xFF}}},
+	{{{117, -2, 78},0, {1928, -940},{0x45, 0xEB, 0x69, 0xFF}}},
+	{{{70, 82, 95},0, {2060, 66},{0x27, 0x3B, 0x6A, 0xFF}}},
+	{{{84, 148, 50},0, {997, 549},{0x33, 0x40, 0x61, 0xFF}}},
+	{{{96, 149, 37},0, {762, 477},{0x62, 0x2B, 0x44, 0xFF}}},
+	{{{112, 155, 0},0, {-16, 1008},{0x79, 0x28, 0x2, 0xFF}}},
+	{{{130, 81, 0},0, {-16, 1008},{0x56, 0x5D, 0x1, 0xFF}}},
+	{{{96, 149, -40},0, {-16, 1008},{0x63, 0x2C, 0xBD, 0xFF}}},
+	{{{101, 63, -73},0, {-16, 1008},{0x3A, 0x44, 0xA6, 0xFF}}},
+	{{{55, 148, 55},0, {1043, 774},{0xC9, 0x56, 0x4B, 0xFF}}},
+	{{{14, 76, 90},0, {2100, 540},{0xF5, 0x5D, 0x55, 0xFF}}},
+	{{{26, 6, 130},0, {2544, 24},{0x11, 0x1, 0x7E, 0xFF}}},
+	{{{101, 63, -73},0, {4, -270},{0x3A, 0x44, 0xA6, 0xFF}}},
+	{{{117, -2, -81},0, {-52, -916},{0x43, 0xEB, 0x96, 0xFF}}},
+	{{{73, 16, -131},0, {-552, -348},{0x34, 0x19, 0x8F, 0xFF}}},
+	{{{70, 82, -99},0, {-144, 94},{0x23, 0x39, 0x94, 0xFF}}},
+	{{{26, 6, -127},0, {-632, 64},{0x9, 0x4, 0x81, 0xFF}}},
+	{{{14, 76, -86},0, {-164, 570},{0xED, 0x5B, 0xAA, 0xFF}}},
+	{{{84, 148, -53},0, {-77, 575},{0x30, 0x42, 0x9F, 0xFF}}},
+	{{{84, 148, -53},0, {-77, 575},{0x30, 0x42, 0x9F, 0xFF}}},
+	{{{96, 149, -40},0, {-8, 475},{0x63, 0x2C, 0xBD, 0xFF}}},
+	{{{101, 63, -73},0, {4, -270},{0x3A, 0x44, 0xA6, 0xFF}}},
+	{{{101, 63, 71},0, {-16, -16},{0x3A, 0x44, 0x5A, 0xFF}}},
+	{{{117, -2, 78},0, {-16, -16},{0x45, 0xEB, 0x69, 0xFF}}},
+	{{{126, 29, 93},0, {-16, -16},{0xEB, 0xFF, 0x7D, 0xFF}}},
+	{{{156, 15, 84},0, {-16, -16},{0x3E, 0xD2, 0x65, 0xFF}}},
+	{{{205, 18, 41},0, {-16, -16},{0x6E, 0xDC, 0x35, 0xFF}}},
+	{{{151, -22, 0},0, {-16, -16},{0x7C, 0xE5, 0x1, 0xFF}}},
+	{{{205, 18, -45},0, {-16, -16},{0x6D, 0xDC, 0xCA, 0xFF}}},
+	{{{117, -2, -81},0, {-16, -16},{0x43, 0xEB, 0x96, 0xFF}}},
+	{{{156, 15, -87},0, {-16, -16},{0x3C, 0xD4, 0x99, 0xFF}}},
+	{{{126, 29, -95},0, {-16, -16},{0xEA, 0x0, 0x83, 0xFF}}},
+	{{{101, 63, -73},0, {-16, -16},{0x3A, 0x44, 0xA6, 0xFF}}},
+	{{{127, 63, -84},0, {-16, -16},{0x4, 0x57, 0xA4, 0xFF}}},
+	{{{156, 58, -73},0, {-16, -16},{0x3D, 0x52, 0xB5, 0xFF}}},
+	{{{195, 54, -36},0, {-16, -16},{0x5B, 0x51, 0xDC, 0xFF}}},
+	{{{195, 54, 32},0, {-16, -16},{0x5B, 0x51, 0x24, 0xFF}}},
+	{{{156, 58, 71},0, {-16, -16},{0x3D, 0x51, 0x4C, 0xFF}}},
+	{{{127, 63, 81},0, {-16, -16},{0x6, 0x59, 0x5A, 0xFF}}},
+};
+
+Gfx spiny_skipsqueak_000_offset_002_mesh_tri_2[] = {
+	gsSPVertex(spiny_skipsqueak_000_offset_002_mesh_vtx_2 + 0, 32, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(1, 3, 4, 0, 1, 4, 5, 0),
+	gsSP2Triangles(5, 4, 6, 0, 5, 6, 7, 0),
+	gsSP2Triangles(8, 9, 10, 0, 11, 10, 9, 0),
+	gsSP2Triangles(12, 13, 14, 0, 12, 15, 13, 0),
+	gsSP2Triangles(12, 16, 15, 0, 12, 17, 16, 0),
+	gsSP2Triangles(12, 18, 17, 0, 12, 19, 18, 0),
+	gsSP2Triangles(20, 18, 19, 0, 20, 19, 21, 0),
+	gsSP2Triangles(22, 15, 16, 0, 22, 23, 15, 0),
+	gsSP2Triangles(24, 15, 23, 0, 24, 13, 15, 0),
+	gsSP2Triangles(25, 26, 27, 0, 27, 28, 25, 0),
+	gsSP2Triangles(28, 27, 29, 0, 29, 30, 28, 0),
+	gsSP1Triangle(31, 25, 28, 0),
+	gsSPVertex(spiny_skipsqueak_000_offset_002_mesh_vtx_2 + 32, 20, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
+	gsSP2Triangles(6, 5, 4, 0, 7, 6, 4, 0),
+	gsSP2Triangles(4, 8, 7, 0, 8, 9, 7, 0),
+	gsSP2Triangles(10, 9, 8, 0, 9, 10, 11, 0),
+	gsSP2Triangles(10, 12, 11, 0, 12, 10, 13, 0),
+	gsSP2Triangles(13, 14, 12, 0, 12, 14, 15, 0),
+	gsSP2Triangles(12, 15, 11, 0, 11, 15, 16, 0),
+	gsSP2Triangles(16, 9, 11, 0, 9, 16, 17, 0),
+	gsSP2Triangles(17, 7, 9, 0, 6, 7, 17, 0),
+	gsSP2Triangles(17, 18, 6, 0, 6, 18, 19, 0),
+	gsSP2Triangles(6, 19, 5, 0, 3, 5, 19, 0),
+	gsSPEndDisplayList(),
+};Vtx spiny_skipsqueak_000_offset_002_mesh_vtx_3[8] = {
+	{{{73, 16, 131},0, {228, 361},{0x37, 0x1C, 0x6F, 0xFF}}},
+	{{{137, -9, 120},0, {428, 569},{0x2F, 0x76, 0x5, 0xFF}}},
+	{{{117, -2, 78},0, {490, 360},{0x45, 0xEB, 0x69, 0xFF}}},
+	{{{111, -2, 139},0, {294, 570},{0x31, 0x72, 0x1C, 0xFF}}},
+	{{{73, 16, -131},0, {228, 361},{0x34, 0x19, 0x8F, 0xFF}}},
+	{{{137, -9, -120},0, {428, 569},{0x2F, 0x76, 0xFB, 0xFF}}},
+	{{{111, -2, -139},0, {294, 570},{0x31, 0x72, 0xE5, 0xFF}}},
+	{{{117, -2, -81},0, {490, 360},{0x43, 0xEB, 0x96, 0xFF}}},
+};
+
+Gfx spiny_skipsqueak_000_offset_002_mesh_tri_3[] = {
+	gsSPVertex(spiny_skipsqueak_000_offset_002_mesh_vtx_3 + 0, 8, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 7, 5, 0),
+	gsSPEndDisplayList(),
+};Vtx spiny_skipsqueak_000_offset_002_mesh_vtx_4[9] = {
+	{{{130, 81, 0},0, {509, 755},{0x56, 0x5D, 0x1, 0xFF}}},
+	{{{127, 63, -84},0, {-149, 767},{0x4, 0x57, 0xA4, 0xFF}}},
+	{{{101, 63, -73},0, {-149, 1008},{0x3A, 0x44, 0xA6, 0xFF}}},
+	{{{156, 58, -73},0, {-65, 278},{0x3D, 0x52, 0xB5, 0xFF}}},
+	{{{195, 54, -36},0, {353, -16},{0x5B, 0x51, 0xDC, 0xFF}}},
+	{{{195, 54, 32},0, {639, -16},{0x5B, 0x51, 0x24, 0xFF}}},
+	{{{156, 58, 71},0, {1070, 278},{0x3D, 0x51, 0x4C, 0xFF}}},
+	{{{127, 63, 81},0, {1141, 767},{0x6, 0x59, 0x5A, 0xFF}}},
+	{{{101, 63, 71},0, {1141, 1008},{0x3A, 0x44, 0x5A, 0xFF}}},
+};
+
+Gfx spiny_skipsqueak_000_offset_002_mesh_tri_4[] = {
+	gsSPVertex(spiny_skipsqueak_000_offset_002_mesh_vtx_4 + 0, 9, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(0, 4, 3, 0, 5, 4, 0, 0),
+	gsSP2Triangles(6, 5, 0, 0, 0, 7, 6, 0),
+	gsSP1Triangle(8, 7, 0, 0),
+	gsSPEndDisplayList(),
+};Vtx spiny_skipsqueak_000_offset_002_mesh_vtx_5[9] = {
+	{{{93, 201, 0},0, {539, 397},{0x1F, 0x7B, 0x2, 0xFF}}},
+	{{{96, 149, -40},0, {266, 177},{0x63, 0x2C, 0xBD, 0xFF}}},
+	{{{84, 148, -53},0, {142, 363},{0x30, 0x42, 0x9F, 0xFF}}},
+	{{{112, 155, 0},0, {477, 84},{0x79, 0x28, 0x2, 0xFF}}},
+	{{{96, 149, 37},0, {771, 160},{0x62, 0x2B, 0x44, 0xFF}}},
+	{{{84, 148, 50},0, {864, 362},{0x33, 0x40, 0x61, 0xFF}}},
+	{{{55, 148, 55},0, {814, 650},{0xC9, 0x56, 0x4B, 0xFF}}},
+	{{{41, 146, 0},0, {504, 835},{0x9B, 0x4D, 0x0, 0xFF}}},
+	{{{55, 148, -58},0, {199, 704},{0xC6, 0x55, 0xB5, 0xFF}}},
+};
+
+Gfx spiny_skipsqueak_000_offset_002_mesh_tri_5[] = {
+	gsSPVertex(spiny_skipsqueak_000_offset_002_mesh_vtx_5 + 0, 9, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 3, 0, 0, 5, 4, 0, 0),
+	gsSP2Triangles(0, 6, 5, 0, 0, 7, 6, 0),
+	gsSP2Triangles(8, 7, 0, 0, 2, 8, 0, 0),
+	gsSPEndDisplayList(),
+};Vtx spiny_skipsqueak_000_offset_002_mesh_vtx_6[8] = {
+	{{{70, 104, -146},0, {-16, -16},{0x2A, 0x73, 0xDD, 0xFF}}},
+	{{{41, 141, -57},0, {496, 496},{0x2A, 0x73, 0xDD, 0xFF}}},
+	{{{88, 122, -63},0, {496, -16},{0x2A, 0x73, 0xDD, 0xFF}}},
+	{{{23, 123, -140},0, {-16, 496},{0x2A, 0x73, 0xDD, 0xFF}}},
+	{{{70, 104, 146},0, {-16, -16},{0x2A, 0x73, 0x23, 0xFF}}},
+	{{{88, 122, 63},0, {496, -16},{0x2A, 0x73, 0x23, 0xFF}}},
+	{{{41, 141, 57},0, {496, 496},{0x2A, 0x73, 0x23, 0xFF}}},
+	{{{23, 123, 140},0, {-16, 496},{0x2A, 0x73, 0x23, 0xFF}}},
+};
+
+Gfx spiny_skipsqueak_000_offset_002_mesh_tri_6[] = {
+	gsSPVertex(spiny_skipsqueak_000_offset_002_mesh_vtx_6 + 0, 8, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
+	gsSPEndDisplayList(),
+};Vtx spiny_skipsqueak_000_offset_002_mesh_vtx_7[4] = {
+	{{{41, 134, -28},0, {-170, -30},{0xEC, 0x7D, 0x0, 0xFF}}},
+	{{{-9, 126, 14},0, {784, 962},{0xEC, 0x7D, 0x0, 0xFF}}},
+	{{{41, 134, 28},0, {1076, -34},{0xEC, 0x7D, 0x0, 0xFF}}},
+	{{{-9, 126, -14},0, {144, 964},{0xEC, 0x7D, 0x0, 0xFF}}},
+};
+
+Gfx spiny_skipsqueak_000_offset_002_mesh_tri_7[] = {
+	gsSPVertex(spiny_skipsqueak_000_offset_002_mesh_vtx_7 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSPEndDisplayList(),
+};
+Vtx spiny_skipsqueak_000_offset_002_skinned_vtx_0[5] = {
+	{{{30, 110, 0},0, {466, 314},{0xB3, 0x65, 0x0, 0xFF}}},
+	{{{30, 96, 81},0, {842, 322},{0xB6, 0x5E, 0x2C, 0xFF}}},
+	{{{30, 50, 136},0, {1108, 306},{0xB6, 0x2C, 0x5D, 0xFF}}},
+	{{{30, 96, -77},0, {92, 330},{0xB6, 0x5E, 0xD4, 0xFF}}},
+	{{{30, 50, -132},0, {-172, 320},{0xBB, 0x2C, 0x9F, 0xFF}}},
+};
+
+Gfx spiny_skipsqueak_000_offset_002_skinned_tri_0[] = {
+	gsSPVertex(spiny_skipsqueak_000_offset_002_skinned_vtx_0 + 0, 5, 0),
+	gsSPEndDisplayList(),
+};Vtx spiny_skipsqueak_000_offset_002_skinned_vtx_1[11] = {
+	{{{30, 50, 136},0, {-1038, 180},{0xB6, 0x2C, 0x5D, 0xFF}}},
+	{{{136, -87, 84},0, {-62, 2596},{0x42, 0xB6, 0x50, 0xFF}}},
+	{{{30, -17, 155},0, {-896, 152},{0xB4, 0xED, 0x64, 0xFF}}},
+	{{{136, -87, 84},0, {-1396, -456},{0x42, 0xB6, 0x50, 0xFF}}},
+	{{{136, -87, 84},0, {272, 1750},{0x42, 0xB6, 0x50, 0xFF}}},
+	{{{136, -87, -80},0, {948, 2520},{0x40, 0xB3, 0xB3, 0xFF}}},
+	{{{155, -106, 2},0, {610, 1726},{0xFB, 0x81, 0x0, 0xFF}}},
+	{{{30, -82, -132},0, {-3142, 180},{0xB5, 0xD3, 0xA4, 0xFF}}},
+	{{{28, -11, -151},0, {-3284, 152},{0xB5, 0xF7, 0x9A, 0xFF}}},
+	{{{136, -87, -80},0, {-2784, -456},{0x40, 0xB3, 0xB3, 0xFF}}},
+	{{{30, 50, -132},0, {-3142, 180},{0xBB, 0x2C, 0x9F, 0xFF}}},
+};
+
+Gfx spiny_skipsqueak_000_offset_002_skinned_tri_1[] = {
+	gsSPVertex(spiny_skipsqueak_000_offset_002_skinned_vtx_1 + 0, 11, 5),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_spiny_skipsqueak_skipsqueakblue_002[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsSPSetLights1(spiny_skipsqueak_skipsqueakblue_002_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_spiny_skipsqueak_body_001[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsSPSetLights1(spiny_skipsqueak_body_001_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_spiny_skipsqueak_skipsqueakshoe_001[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsSPSetLights1(spiny_skipsqueak_skipsqueakshoe_001_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_spiny_skipsqueak_skipsqueakshoe_001[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_spiny_skipsqueak_skipsqueakshoe[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsSPSetLights1(spiny_skipsqueak_skipsqueakshoe_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_spiny_skipsqueak_skipsqueakshoe[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_spiny_skipsqueak_eyes_001[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT, TEXEL0, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, spiny_skipsqueak_skipsqueak_eyes_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(spiny_skipsqueak_eyes_001_lights),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_spiny_skipsqueak_skipsqueaknose_001[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT, TEXEL0, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, spiny_skipsqueak_skipsqueak_nose_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(spiny_skipsqueak_skipsqueaknose_001_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_spiny_skipsqueak_skipsqueaknose_001[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_spiny_skipsqueak_skipsqueakwhisker_001_layer1[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, COMBINED, 0, 0, 0, COMBINED),
+	gsDPSetFogColor(0, 0, 0, 255),
+	gsSPFogPosition(970, 1000),
+	gsSPSetGeometryMode(G_FOG),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_2CYCLE),
+	gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 16, spiny_skipsqueak_skipsqueak_whisker_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 4, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 4, 0, G_TX_WRAP | G_TX_NOMIRROR, 4, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 60, 60),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 4, 0, G_TX_WRAP | G_TX_NOMIRROR, 4, 0),
+	gsDPSetTileSize(0, 0, 0, 60, 60),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_spiny_skipsqueak_skipsqueakwhisker_001_layer1[] = {
+	gsDPPipeSync(),
+	gsSPClearGeometryMode(G_FOG),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsDPSetCycleType(G_CYC_1CYCLE),
+	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_NOOP2),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx mat_spiny_skipsqueak_sm64_material_018[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT, TEXEL0, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT),
+	gsSPClearGeometryMode(G_CULL_BACK),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, spiny_skipsqueak_skipsqueak_tooth_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadTile(7, 0, 0, 124, 124),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPSetLights1(spiny_skipsqueak_sm64_material_018_lights),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_revert_spiny_skipsqueak_sm64_material_018[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_CULL_BACK),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx spiny_skipsqueak_000_offset_001_mesh[] = {
+	gsSPDisplayList(mat_spiny_skipsqueak_skipsqueakblue_002),
+	gsSPDisplayList(spiny_skipsqueak_000_offset_001_mesh_tri_0),
+	gsSPDisplayList(mat_spiny_skipsqueak_body_001),
+	gsSPDisplayList(spiny_skipsqueak_000_offset_001_mesh_tri_1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx spiny_skipsqueak_000_offset_004_mesh[] = {
+	gsSPDisplayList(mat_spiny_skipsqueak_skipsqueakshoe_001),
+	gsSPDisplayList(spiny_skipsqueak_000_offset_004_mesh_tri_0),
+	gsSPDisplayList(mat_revert_spiny_skipsqueak_skipsqueakshoe_001),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx spiny_skipsqueak_000_offset_003_mesh[] = {
+	gsSPDisplayList(mat_spiny_skipsqueak_skipsqueakshoe_001),
+	gsSPDisplayList(spiny_skipsqueak_000_offset_003_mesh_tri_0),
+	gsSPDisplayList(mat_revert_spiny_skipsqueak_skipsqueakshoe_001),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx spiny_skipsqueak_000_offset_002_mesh[] = {
+	gsSPDisplayList(mat_spiny_skipsqueak_body_001),
+	gsSPDisplayList(spiny_skipsqueak_000_offset_002_mesh_tri_0),
+	gsSPDisplayList(mat_spiny_skipsqueak_skipsqueakblue_002),
+	gsSPDisplayList(spiny_skipsqueak_000_offset_002_mesh_tri_1),
+	gsSPDisplayList(mat_spiny_skipsqueak_skipsqueakblue_002),
+	gsSPDisplayList(spiny_skipsqueak_000_offset_002_mesh_tri_2),
+	gsSPDisplayList(mat_spiny_skipsqueak_skipsqueakshoe),
+	gsSPDisplayList(spiny_skipsqueak_000_offset_002_mesh_tri_3),
+	gsSPDisplayList(mat_revert_spiny_skipsqueak_skipsqueakshoe),
+	gsSPDisplayList(mat_spiny_skipsqueak_eyes_001),
+	gsSPDisplayList(spiny_skipsqueak_000_offset_002_mesh_tri_4),
+	gsSPDisplayList(mat_spiny_skipsqueak_skipsqueaknose_001),
+	gsSPDisplayList(spiny_skipsqueak_000_offset_002_mesh_tri_5),
+	gsSPDisplayList(mat_revert_spiny_skipsqueak_skipsqueaknose_001),
+	gsSPDisplayList(mat_spiny_skipsqueak_skipsqueakwhisker_001_layer1),
+	gsSPDisplayList(spiny_skipsqueak_000_offset_002_mesh_tri_6),
+	gsSPDisplayList(mat_revert_spiny_skipsqueak_skipsqueakwhisker_001_layer1),
+	gsSPDisplayList(mat_spiny_skipsqueak_sm64_material_018),
+	gsSPDisplayList(spiny_skipsqueak_000_offset_002_mesh_tri_7),
+	gsSPDisplayList(mat_revert_spiny_skipsqueak_sm64_material_018),
+	gsSPEndDisplayList(),
+};
+
+
+Gfx spiny_skipsqueak_000_offset_002_skinned[] = {
+	gsSPDisplayList(mat_spiny_skipsqueak_body_001),
+	gsSPDisplayList(spiny_skipsqueak_000_offset_002_skinned_tri_0),
+	gsSPDisplayList(mat_spiny_skipsqueak_skipsqueakblue_002),
+	gsSPDisplayList(spiny_skipsqueak_000_offset_002_skinned_tri_1),
+	gsSPEndDisplayList(),
+};
+
+
+
+Gfx spiny_skipsqueak_material_revert_render_settings[] = {
+	gsDPPipeSync(),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPClearGeometryMode(G_TEXTURE_GEN),
+	gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+	gsSPTexture(65535, 65535, 0, 0, 0),
+	gsDPSetEnvColor(255, 255, 255, 255),
+	gsDPSetAlphaCompare(G_AC_NONE),
+	gsSPEndDisplayList(),
+};
diff --git a/actors/spiny_skipsqueak/skipsqueak_eyes.rgba16.png b/actors/spiny_skipsqueak/skipsqueak_eyes.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..359a27c0261d9cfdc896ab4a74617dc775ff05ac
GIT binary patch
literal 564
zcmV-40?Yl0P)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XU
z000XU0RWnu7ytkP=1D|BR9Fe^mOYLFF${&xY70tAI0AH(lu&X7j=^={7*Ik76`}%4
z=qRCsZg##%9%ZsgW+GPFW-Ot|_OtW+L!g!ABL65~|9H2#x*^bX;JeNep3i4_KA+O*
zbYw6XRE8ws`5MOLa5!Y+@i@ybHz#^bQt_2La6BGmzu%h<aH7W~6)&-BPN!2g8jX0U
ziVr$=pQPf+5$ynTzg#Y*g75dcyx;GVO%?3;Z6TgKA&C+oSTE~#yE2_l%@SU(S8qP-
zEGanf2=Q(ac5sjYo4i~u3j(v*Oy={s<O?aA%|=`j=-Bat1Fr<gLq4Ab3E0fr?Y8v$
zeVI%q((Co)cDu>z^(y5<$BrKyc;XPdlck_siM|8cekHS7tz@^`{hG5TW&ZeiFYHS-
zkK*hzO27uL*K1StcDt3w<57%8F<b%x{D_|F51q9M=pr#|ZLOOW61p3TcQLLW+yNJe
zZnxFv$EM>7`CWUIK&VnTNtGVU6C^+oo9q*N!_}XP*SP3YyjU!<JaO?1=Rrot?vqq}
z<x~6@mBu<l7lI?e$@keE13Gq}q~c8uUn^~!-B!jCYQM&$;-eja;cz&V{3qB{&50h9
zRD28Ov4r@N{$eHKYZ0g-_=&%A1fL|Y6Wb7II`9M2tB#N1&~9)50000<MNUMnLSTZK
C#sPo;

literal 0
HcmV?d00001

diff --git a/actors/spiny_skipsqueak/skipsqueak_nose.rgba16.png b/actors/spiny_skipsqueak/skipsqueak_nose.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..a7332b6b4c5b68f8acd99b8fb4f4291503f4ce48
GIT binary patch
literal 1557
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
Hu0mjfoe|x2

literal 0
HcmV?d00001

diff --git a/actors/spiny_skipsqueak/skipsqueak_tooth.rgba16.png b/actors/spiny_skipsqueak/skipsqueak_tooth.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..e17f45790409f3313886a45e6be1ff15d095890b
GIT binary patch
literal 851
zcmV-Z1FZasP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800009a7bBm000XU
z000XU0RWnu7ytkR1xZ9fR9FeMR!eg0Fbs=3UD)@(Uysmjvg;#Yf+F>?lf~0aB#J*k
zB-3X5`T2YJ3PFnhdG7mTL;mj!^0dprt!d5i@p}2)WGp|<i|^r6wD*@F@C2}}4xc)Z
z(4vgHks>cAmwmEcajP>3z#+flIK~iw1Q2AzxLXE=US-NT-8F2;^(7@7`7s4fRb-k#
zL3WA|Knp?lnd(w}sQ~pL!bY54XC+!WKuDmlfvD~xt2;7eon&Sv<5U4Tzg|8JRM6G7
zq_bN|)VSSNfUQwVKUo2lTebi|gk$gf(}0h7t$byVy9vt*z?K{##|%IZtRQ2h9v4U?
ztp%h4(15nEZEgS=5z@&Vo+k)UDRfIrdjc!K&Vhto4q)BwBoV(09IuuPQxI@J9!QJ@
zd;p6Vm6I(4_2$8rdtlCm!0eSdVJb*gzb)(KI3*VXQZ6%+f$Gz|MoqI(N`q1`EMFlo
zOq8N0Z79_+23KuL_=OpA1OYHRp6)6@JMnj+fGGuRlKs4`MCXr|lRylL;pe1T&ap8o
z<`6O*K474@r~u+o1r8}UXncW*eNbiv%7k;K%XZ3(J_G>+=MRJ-&=q|(`n%#*Md0rY
zIGurk6$D`893-ZC@f566Mimwer0&An5Q4zD5(B9gCqVU~OP_raCpBW@-?0V}RlvIX
zTAdzsX9YAv)im7bYg%BH7MN}$0g&)QL>oSM-HN;eNB_aBCjgy&6At0?t_=x9NIITQ
z4tBlnhD3x%3!w2ffZ@A8(fJy~{lj#teUUv0&au26=6MC|E4lCO$A^!Fr@J3gRUz>0
zD_}VW@F{^bjEzJvXy5~gWy>uHa0tg79H!C&D6l{RJ+zV<>m%CHl{mi$a`-U`HhlRn
zz~S=MC54WwR-*M+dN|Fha7M?TNlyKz6;QaqtQt&YcfB$aCla{|8~=Bpb^a$X`6)e5
z5<nGJ4)78Y69bsh<3>Ak0o+IbD);vLYu_MuM7}JK`L8vcRc_aQvf|;KfjkFUmg74o
d<30pO-hXWw__QH}fy@8^002ovPDHLkV1iuxaUcKy

literal 0
HcmV?d00001

diff --git a/actors/spiny_skipsqueak/skipsqueak_whisker.ia8.png b/actors/spiny_skipsqueak/skipsqueak_whisker.ia8.png
new file mode 100644
index 0000000000000000000000000000000000000000..aebf9f90a29a0852d341d7e2a051bf0e4426df90
GIT binary patch
literal 179
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`oCO|{#S9GG!XV7ZFl&wkP%zcg
z#WBP}@ahC_z5@yztXn^_-TB`!XCZI5p+m>6HF*vRa`UgPtKWOe!R4NopHHZ|x$GqC
z8CEV$2Q=Tfvd!nY+_>jv%;RG5-w!(~`>&q6vqB`IabIVrja|Y&O&)Qz4+hFXKjMEg
YE;%Jv%jxp|JJ3P~Pgg&ebxsLQ01}fvK>z>%

literal 0
HcmV?d00001

diff --git a/actors/spiny_skipsqueak/skipsqueak_whisker.rgba16.png b/actors/spiny_skipsqueak/skipsqueak_whisker.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..aebf9f90a29a0852d341d7e2a051bf0e4426df90
GIT binary patch
literal 179
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`oCO|{#S9GG!XV7ZFl&wkP%zcg
z#WBP}@ahC_z5@yztXn^_-TB`!XCZI5p+m>6HF*vRa`UgPtKWOe!R4NopHHZ|x$GqC
z8CEV$2Q=Tfvd!nY+_>jv%;RG5-w!(~`>&q6vqB`IabIVrja|Y&O&)Qz4+hFXKjMEg
YE;%Jv%jxp|JJ3P~Pgg&ebxsLQ01}fvK>z>%

literal 0
HcmV?d00001

diff --git a/actors/spiny_skipsqueak/texscroll.inc.c b/actors/spiny_skipsqueak/texscroll.inc.c
new file mode 100644
index 0000000..193405b
--- /dev/null
+++ b/actors/spiny_skipsqueak/texscroll.inc.c
@@ -0,0 +1,3 @@
+void scroll_actor_geo_spiny_skipsqueak() {
+	
+}
diff --git a/actors/spiny_skipsqueak/texscroll.inc.h b/actors/spiny_skipsqueak/texscroll.inc.h
new file mode 100644
index 0000000..7cbc624
--- /dev/null
+++ b/actors/spiny_skipsqueak/texscroll.inc.h
@@ -0,0 +1,3 @@
+
+extern void scroll_actor_geo_spiny_skipsqueak();
+
diff --git a/actors/swoop/swoop_wing.rgba16.png b/actors/swoop/swoop_wing.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..033f30352922b4bca36358bcba791bf3690e27f2
GIT binary patch
literal 1744
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

literal 0
HcmV?d00001

diff --git a/assets/anims/anim_49.inc.c b/assets/anims/anim_49.inc.c
index be72c0e..4d984da 100644
--- a/assets/anims/anim_49.inc.c
+++ b/assets/anims/anim_49.inc.c
@@ -1,121 +1,262 @@
 static const struct Animation anim_49[] = {
-    1,
-    189,
-    0,
-    0,
-    0x10,
-    ANIMINDEX_NUMPARTS(anim_49_indices),
-    anim_49_values,
-    anim_49_indices,
-    0,
+	0,
+	189,
+	0,
+	0,
+	0x48,
+	ANIMINDEX_NUMPARTS(anim_49_indices),
+	anim_49_values,
+	anim_49_indices,
+	0,
 };
 
+//rainbow run
+
 
 static const u16 anim_49_indices[] = {
-    0x0001, 0x0000, 0x0001, 0x0001, 0x0010, 0x0002, 0x0001, 0x0000, 0x0001, 0x0012, 0x0001, 0x0000,
-    0x0010, 0x0259, 0x0010, 0x0269, 0x0010, 0x0279,
-    0x0010, 0x0229, 0x0010, 0x0239, 0x0010, 0x0249,
-    0x0010, 0x01F9, 0x0010, 0x0209, 0x0010, 0x0219,
-    0x0001, 0x01C6, 0x0001, 0x01C7, 0x0001, 0x01C8,
-    0x0010, 0x0053, 0x0010, 0x0063, 0x0010, 0x0073,
-    0x0001, 0x0000, 0x0001, 0x0000, 0x0010, 0x0043,
-    0x0010, 0x0013, 0x0010, 0x0023, 0x0010, 0x0033,
-    0x0001, 0x01B3, 0x0001, 0x01B4, 0x0001, 0x01B5,
-    0x0010, 0x00A3, 0x0010, 0x00B3, 0x0010, 0x00C3,
-    0x0001, 0x0000, 0x0001, 0x0000, 0x0010, 0x0093,
-    0x0001, 0x0000, 0x0001, 0x0000, 0x0010, 0x0083,
-    0x0001, 0x0000, 0x0001, 0x0000, 0x0010, 0x01B6,
-    0x0010, 0x0183, 0x0010, 0x0193, 0x0010, 0x01A3,
-    0x0001, 0x0000, 0x0001, 0x0000, 0x0010, 0x0173,
-    0x0010, 0x0143, 0x0010, 0x0153, 0x0010, 0x0163,
-    0x0010, 0x01C9, 0x0010, 0x01D9, 0x0010, 0x01E9,
-    0x0010, 0x0113, 0x0010, 0x0123, 0x0010, 0x0133,
-    0x0001, 0x0000, 0x0001, 0x0000, 0x0010, 0x0103,
-    0x0010, 0x00D3, 0x0010, 0x00E3, 0x0010, 0x00F3,
+    0x0001, 0x0000, 0x0048, 0x0001, 0x0001, 0x0049, 0x0001, 0x004A, 0x0001, 0x004B, 0x0001, 0x004C,
+    0x003A, 0x004D, 0x003C, 0x0087, 0x0048, 0x00C3, 0x0048, 0x010B, 0x0048, 0x0153, 0x0041, 0x019B,
+    0x0048, 0x01DC, 0x0046, 0x0224, 0x0048, 0x026A, 0x0048, 0x02B2, 0x0048, 0x02FA, 0x0047, 0x0342,
+    0x0048, 0x0389, 0x0001, 0x03D1, 0x0001, 0x03D2, 0x0001, 0x03D3, 0x0001, 0x03D4, 0x0001, 0x03D5,
+    0x0001, 0x03D6, 0x0001, 0x03D7, 0x0001, 0x03D8, 0x0048, 0x03D9, 0x0048, 0x0421, 0x0046, 0x0469,
+    0x0048, 0x04AF, 0x0001, 0x04F7, 0x0001, 0x04F8, 0x0001, 0x04F9, 0x0001, 0x04FA, 0x0001, 0x04FB,
+    0x0001, 0x04FC, 0x0001, 0x04FD, 0x0001, 0x04FE, 0x0048, 0x04FF, 0x0046, 0x0547, 0x0022, 0x058D,
+    0x0048, 0x05AF, 0x003B, 0x05F7, 0x0048, 0x0632, 0x0047, 0x067A, 0x0045, 0x06C1, 0x0048, 0x0706,
+    0x0048, 0x074E, 0x0047, 0x0796, 0x0047, 0x07DD, 0x0047, 0x0824, 0x0047, 0x086B, 0x0001, 0x08B2,
+    0x0001, 0x08B3, 0x0016, 0x08B4, 0x0048, 0x08CA, 0x0048, 0x0912, 0x0048, 0x095A, 0x0048, 0x09A2,
+    0x0048, 0x09EA, 0x0046, 0x0A32, 0x0048, 0x0A78,
 };
 
 static const s16 anim_49_values[] = {
-    0x0000, 0x00C3, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
-    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
-    0x0000, 0x0000, 0x3FFF, 0x1292, 0x124F, 0x1233, 0x1261, 0x128E,
-    0x1233, 0x115B, 0x1069, 0x0F61, 0x0E48, 0x0D22, 0x0BF1, 0x0ABB,
-    0x0984, 0x084E, 0x071F, 0x0362, 0x033F, 0x0331, 0x0349, 0x0361,
-    0x0331, 0x02BD, 0x023C, 0x01AF, 0x0119, 0x007C, 0xFFDB, 0xFF36,
-    0xFE8F, 0xFDEA, 0xFD48, 0xDC1E, 0xDC66, 0xDC83, 0xDC59, 0xDC2F,
-    0xDC83, 0xDD4E, 0xDE30, 0xDF27, 0xE02E, 0xE142, 0xE25E, 0xE380,
-    0xE4A4, 0xE5C6, 0xE6E1, 0xF163, 0xF0C6, 0xF085, 0xF0E4, 0xF142,
-    0xF085, 0xEEBE, 0xECC2, 0xEA99, 0xE84B, 0xE5E1, 0xE362, 0xE0D7,
-    0xDE49, 0xDBC0, 0xD943, 0xCD29, 0xCF2E, 0xD1AB, 0xD855, 0xE231,
-    0xE83D, 0xEA01, 0xEBB0, 0xED4B, 0xEED1, 0xF042, 0xF19D, 0xF2E3,
-    0xF413, 0xF52C, 0xF62E, 0xFE28, 0xFD52, 0xFB12, 0xF050, 0xDF34,
-    0xD552, 0xD3BA, 0xD26B, 0xD162, 0xD097, 0xD005, 0xCFA6, 0xCF75,
-    0xCF6B, 0xCF84, 0xCFB8, 0xFA4C, 0xF657, 0xF1CD, 0xE6D1, 0xD738,
-    0xCE99, 0xCD80, 0xCCB8, 0xCC3A, 0xCBFF, 0xCBFF, 0xCC33, 0xCC94,
-    0xCD1A, 0xCDC0, 0xCE7D, 0xD7F1, 0xD83D, 0xD85C, 0xD814, 0xD7CD,
-    0xD85C, 0xD9B4, 0xDB35, 0xDCD8, 0xDE96, 0xE06B, 0xE24E, 0xE43B,
-    0xE62A, 0xE816, 0xE9F8, 0xEBA5, 0xF17D, 0xF639, 0xF877, 0xF804,
-    0xF639, 0xF412, 0xF1A9, 0xEF0A, 0xEC3E, 0xE950, 0xE649, 0xE333,
-    0xE01A, 0xDD06, 0xDA01, 0xFBB1, 0x0748, 0x1209, 0x1B2B, 0x21E8,
-    0x257A, 0x26CD, 0x275F, 0x2742, 0x268C, 0x254D, 0x2399, 0x2183,
-    0x1F1E, 0x1C7D, 0x19B3, 0x2D0E, 0x2E43, 0x2F5A, 0x3042, 0x30EA,
-    0x313E, 0x3154, 0x3152, 0x3138, 0x310B, 0x30CC, 0x307E, 0x3023,
-    0x2FBF, 0x2F54, 0x2EE5, 0xB0BB, 0xBCD2, 0xC81F, 0xD1D8, 0xD933,
-    0xDD66, 0xDF68, 0xE0C2, 0xE183, 0xE1BA, 0xE176, 0xE0C8, 0xDFBE,
-    0xDE67, 0xDCD4, 0xDB13, 0xFF2D, 0xFF44, 0xFF57, 0xFF5F, 0xFF5B,
-    0xFF57, 0xFF4F, 0xFF38, 0xFF1A, 0xFEFA, 0xFEDE, 0xFECC, 0xFEC9,
-    0xFEDB, 0xFF09, 0xFF57, 0x023F, 0x023F, 0x0244, 0x0247, 0x0246,
-    0x0244, 0x0247, 0x024E, 0x0258, 0x0262, 0x026B, 0x0271, 0x0272,
-    0x026C, 0x025D, 0x0244, 0xB9FE, 0xBC1A, 0xBDAE, 0xBE39, 0xBDF3,
-    0xBDAE, 0xBDAD, 0xBDAB, 0xBDA8, 0xBDA6, 0xBDA3, 0xBDA2, 0xBDA1,
-    0xBDA3, 0xBDA7, 0xBDAE, 0x5EA1, 0x6088, 0x5EA1, 0x54C8, 0x4813,
-    0x3E71, 0x385C, 0x3260, 0x2C92, 0x2705, 0x21CB, 0x1CF8, 0x189F,
-    0x14D3, 0x11A7, 0x0F2E, 0x0B6D, 0x05F1, 0x0156, 0xFEA9, 0xFDDB,
-    0xFDAE, 0xFD6B, 0xFD32, 0xFD06, 0xFCE7, 0xFCD7, 0xFCDA, 0xFCF0,
-    0xFD1C, 0xFD60, 0xFDBD, 0x01E2, 0xFB93, 0xF64E, 0xF422, 0xF514,
-    0xF67E, 0xF745, 0xF815, 0xF8EE, 0xF9D2, 0xFAC1, 0xFBBD, 0xFCC5,
-    0xFDDC, 0xFF01, 0x0034, 0x9CFC, 0x951F, 0x8F7C, 0x915F, 0x998A,
-    0x9EFD, 0x9FEC, 0xA08F, 0xA0EC, 0xA109, 0xA0EA, 0xA096, 0xA012,
-    0x9F64, 0x9E92, 0x9DA0, 0x00B9, 0x00C9, 0x00D0, 0x00D0, 0x00D0,
-    0x00D0, 0x00D3, 0x00DD, 0x00E9, 0x00F7, 0x0103, 0x010A, 0x010C,
-    0x0104, 0x00F1, 0x00D0, 0xFF32, 0xFF36, 0xFF38, 0xFF38, 0xFF38,
-    0xFF38, 0xFF36, 0xFF32, 0xFF2C, 0xFF26, 0xFF21, 0xFF1D, 0xFF1D,
-    0xFF20, 0xFF29, 0xFF38, 0xC245, 0xC1D8, 0xC1AA, 0xC1AA, 0xC1AA,
-    0xC1AA, 0xC1B3, 0xC1C9, 0xC1E6, 0xC206, 0xC221, 0xC233, 0xC236,
-    0xC224, 0xC1F7, 0xC1AA, 0x1FFC, 0x1A51, 0x152F, 0x1307, 0x141B,
-    0x152F, 0x1506, 0x149C, 0x140E, 0x1377, 0x12F2, 0x129B, 0x128D,
-    0x12E4, 0x13BC, 0x152F, 0x0C64, 0x0D70, 0x0DB3, 0x099B, 0x020F,
-    0xFD99, 0xFD2B, 0xFD50, 0xFDE6, 0xFECE, 0xFFE8, 0x0111, 0x022D,
-    0x0319, 0x03B5, 0x03E1, 0x089E, 0x0707, 0x0536, 0x018E, 0xFCBA,
-    0xFA1A, 0xF9EF, 0xFA2A, 0xFAB4, 0xFB78, 0xFC61, 0xFD58, 0xFE49,
-    0xFF1E, 0xFFC1, 0x001C, 0xBD10, 0xC45E, 0xCA4D, 0xCAA9, 0xC545,
-    0xBFD1, 0xBC46, 0xB8CA, 0xB557, 0xB1E4, 0xAE6B, 0xAAE5, 0xA74B,
-    0xA394, 0x9FBB, 0x9BB7, 0x7FFF, 0x7FFF, 0x4171, 0xBF62, 0xBF60,
-    0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F,
-    0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0x7FFF, 0x7FFF,
-    0x4171, 0xFCC9, 0xFE90, 0x0000, 0x008B, 0x0045, 0x0000, 0x0000,
-    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
-    0x0000, 0x054B, 0x025E, 0x0000, 0xFF1A, 0xFF8D, 0x0000, 0x0000,
-    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
-    0x0000, 0xB893, 0xBC54, 0xBF5F, 0xC086, 0xBFF3, 0xBF5F, 0xBF5F,
-    0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F,
-    0xBF5F, 0x1DE4, 0x1617, 0x0E5E, 0x07EF, 0x0238, 0xFF26, 0xFE45,
-    0xFDCC, 0xFDA8, 0xFDC7, 0xFE17, 0xFE85, 0xFEFF, 0xFF73, 0xFFCF,
-    0x0000, 0x0F0A, 0x07A4, 0x007F, 0x004E, 0x0256, 0x03A4, 0x038A,
-    0x0353, 0x0304, 0x02A2, 0x0233, 0x01BD, 0x0144, 0x00CE, 0x0060,
-    0x0000, 0xEC1C, 0xF7D2, 0x0570, 0x09F6, 0x0BBC, 0x0C88, 0x0D77,
-    0x0E6C, 0x0F5D, 0x103B, 0x10FA, 0x118D, 0x11E8, 0x11FE, 0x11C2,
-    0x1128, 0x0938, 0x0935, 0x093C, 0x096C, 0x0991, 0x093C, 0x0875,
-    0x0790, 0x0696, 0x058D, 0x0480, 0x0374, 0x0273, 0x0185, 0x00B1,
-    0x0000, 0xFA57, 0xF98D, 0xF8E4, 0xF883, 0xF884, 0xF8E4, 0xF97D,
-    0xFA2D, 0xFAEE, 0xFBBA, 0xFC89, 0xFD57, 0xFE1D, 0xFED5, 0xFF78,
-    0x0000, 0x283D, 0x2C61, 0x2FE8, 0x31E2, 0x31C2, 0x2FE8, 0x2D01,
-    0x2994, 0x25CA, 0x21CB, 0x1DBF, 0x19CE, 0x1620, 0x12DD, 0x102D,
-    0x0E38, 0x507D, 0x5567, 0x5AAF, 0x6428, 0x710E, 0x7A85, 0x7E7D,
-    0x802D, 0x80A3, 0x80EC, 0x813F, 0x8135, 0x80F0, 0x808F, 0x8034,
-    0x7FFF, 0x0507, 0x05D2, 0x0674, 0x0672, 0x0583, 0x03E6, 0x0145,
-    0xFDE3, 0xFADE, 0xF959, 0xF97B, 0xFA6F, 0xFBE2, 0xFD83, 0xFEFE,
-    0x0000, 0x2F0C, 0x2DB3, 0x2BAA, 0x275D, 0x1E94, 0x1041, 0xFBCF,
-    0xE349, 0xC990, 0xB184, 0x9A5F, 0x824A, 0x6A87, 0x5457, 0x40FF,
-    0x31BF,
+    0x0000, 0x00C0, 0x00BD, 0x00B8, 0x00B4, 0x00B1, 0x00AF, 0x00AD, 0x00AB, 0x00AC, 0x00AE, 0x00B0,
+    0x00B3, 0x00B7, 0x00BA, 0x00BE, 0x00C2, 0x00C5, 0x00C8, 0x00CB, 0x00CE, 0x00D1, 0x00D3, 0x00D6,
+    0x00D8, 0x00D9, 0x00D9, 0x00D9, 0x00D8, 0x00D7, 0x00D5, 0x00D2, 0x00D0, 0x00CD, 0x00CA, 0x00C8,
+    0x00C5, 0x00C1, 0x00BD, 0x00B9, 0x00B5, 0x00B2, 0x00B0, 0x00AE, 0x00AD, 0x00AC, 0x00AB, 0x00AB,
+    0x00AB, 0x00AC, 0x00AD, 0x00AF, 0x00B2, 0x00B6, 0x00BC, 0x00C2, 0x00C6, 0x00CA, 0x00CD, 0x00CF,
+    0x00D2, 0x00D4, 0x00D6, 0x00D8, 0x00D9, 0x00D9, 0x00D8, 0x00D5, 0x00D3, 0x00CF, 0x00CA, 0x00C5,
+    0x00C3, 0x0000, 0x0000, 0x3FFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF,
+    0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF,
+    0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
+    0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
+    0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000,
+    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
+    0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
+    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
+    0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000,
+    0xFFFF, 0xFFFF, 0x0000, 0x3A85, 0x3AA5, 0x3AFB, 0x3B75, 0x3C01, 0x3C8C, 0x3D06, 0x3D5C, 0x3D7D,
+    0x3D7A, 0x3D70, 0x3D60, 0x3D4B, 0x3D30, 0x3D11, 0x3CEE, 0x3CC8, 0x3CA0, 0x3C75, 0x3C49, 0x3C1C,
+    0x3BEF, 0x3BC2, 0x3B96, 0x3B6C, 0x3B43, 0x3B1D, 0x3AFB, 0x3ADC, 0x3AC2, 0x3AAC, 0x3A9C, 0x3A92,
+    0x3A8F, 0x3AAA, 0x3AF0, 0x3B55, 0x3BCD, 0x3C4B, 0x3CC4, 0x3D2A, 0x3D71, 0x3D8D, 0x3D8D, 0x3D89,
+    0x3D7F, 0x3D72, 0x3D61, 0x3D4C, 0x3D35, 0x3D1B, 0x3CFE, 0x3CDF, 0x3CBF, 0x3C9E, 0x3C7B, 0x3C58,
+    0x3C34, 0x3C11, 0x3BEE, 0x3BCC, 0x3BAB, 0x3B8C, 0x3B6E, 0x3B53, 0x3B3A, 0x3B24, 0x3B11, 0x3B02,
+    0x3AF6, 0x3AEF, 0x3AED, 0xF941, 0xF94D, 0xF970, 0xF9A8, 0xF9F3, 0xFA51, 0xFABE, 0xFB3A, 0xFBC3,
+    0xFC57, 0xFCF4, 0xFD99, 0xFE43, 0xFEF2, 0xFFA3, 0x0057, 0x0108, 0x01B7, 0x0262, 0x0306, 0x03A3,
+    0x0437, 0x04C0, 0x053C, 0x05A9, 0x0607, 0x0652, 0x068B, 0x06AE, 0x06BA, 0x06B4, 0x06A3, 0x0687,
+    0x0662, 0x0633, 0x05FB, 0x05BA, 0x0572, 0x0522, 0x04CC, 0x0470, 0x040E, 0x03A7, 0x033C, 0x02CC,
+    0x025A, 0x01E4, 0x016C, 0x00F3, 0x0079, 0xFFFD, 0xFF82, 0xFF07, 0xFE8E, 0xFE16, 0xFDA1, 0xFD2E,
+    0xFCBF, 0xFC53, 0xFBEC, 0xFB8A, 0xFB2E, 0xFAD8, 0xFA88, 0xFA40, 0xFA00, 0xF9C8, 0xF998, 0xF973,
+    0xF957, 0xF946, 0xF941, 0xFDBB, 0xFDBF, 0xFDCB, 0xFDDE, 0xFDF8, 0xFE17, 0xFE3D, 0xFE67, 0xFE96,
+    0xFEC8, 0xFEFD, 0xFF36, 0xFF70, 0xFFAB, 0xFFE8, 0x0026, 0x0062, 0x009E, 0x00D8, 0x0110, 0x0145,
+    0x0178, 0x01A6, 0x01D1, 0x01F6, 0x0216, 0x022F, 0x0243, 0x024E, 0x0253, 0x0251, 0x024B, 0x0241,
+    0x0235, 0x0225, 0x0211, 0x01FC, 0x01E3, 0x01C8, 0x01AA, 0x018B, 0x016A, 0x0147, 0x0122, 0x00FC,
+    0x00D5, 0x00AD, 0x0084, 0x005B, 0x0031, 0x0007, 0xFFDC, 0xFFB2, 0xFF89, 0xFF60, 0xFF38, 0xFF11,
+    0xFEEB, 0xFEC7, 0xFEA4, 0xFE82, 0xFE63, 0xFE45, 0xFE2A, 0xFE12, 0xFDFC, 0xFDE9, 0xFDD9, 0xFDCC,
+    0xFDC2, 0xFDBD, 0xFDBB, 0xF7CE, 0xF7CE, 0xF7CE, 0xF7CE, 0xF7CE, 0xF7CE, 0xF7CF, 0xF7CF, 0xF7CF,
+    0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0,
+    0xF7D0, 0xF7D0, 0xF7D0, 0xF7D1, 0xF7D1, 0xF7D1, 0xF7D1, 0xF7D1, 0xF7D1, 0xF7D1, 0xF7D1, 0xF7D1,
+    0xF7D1, 0xF7D1, 0xF7D1, 0xF7D1, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0,
+    0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF,
+    0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CE, 0x0705, 0x0705, 0x06F7, 0x06CF,
+    0x0690, 0x063C, 0x05D6, 0x055F, 0x04D9, 0x0445, 0x03A5, 0x02FA, 0x0247, 0x018E, 0x00D0, 0x0010,
+    0xFF4E, 0xFE8F, 0xFDD3, 0xFD1E, 0xFC70, 0xFBCB, 0xFB33, 0xFAA8, 0xFA2D, 0xF9C4, 0xF96F, 0xF92F,
+    0xF908, 0xF8FA, 0xF900, 0xF913, 0xF931, 0xF959, 0xF98A, 0xF9C5, 0xFA07, 0xFA50, 0xFA9F, 0xFAF4,
+    0xFB50, 0xFBB2, 0xFC1A, 0xFC88, 0xFCF9, 0xFD6F, 0xFDE8, 0xFE64, 0xFEE2, 0xFF62, 0xFFE3, 0x0065,
+    0x00E5, 0x0165, 0x01E3, 0x025F, 0x02D9, 0x034E, 0x03C0, 0x042E, 0x0496, 0x04F8, 0x0554, 0x05A9,
+    0x05F6, 0x063B, 0x0676, 0x06A9, 0x06D1, 0x06EF, 0x0701, 0x0707, 0x01BF, 0x01BF, 0x01BE, 0x01BB,
+    0x01B4, 0x01A5, 0x018D, 0x0165, 0x012F, 0x00F4, 0x00BE, 0x008D, 0x0061, 0x0039, 0x0017, 0xFFF7,
+    0xFFDD, 0xFFC6, 0xFFB3, 0xFFA2, 0xFF95, 0xFF8A, 0xFF82, 0xFF7B, 0xFF77, 0xFF74, 0xFF72, 0xFF70,
+    0xFF70, 0xFF70, 0xFF70, 0xFF71, 0xFF73, 0xFF77, 0xFF7D, 0xFF87, 0xFF95, 0xFFA7, 0xFFCE, 0x0009,
+    0x003A, 0x005D, 0x007E, 0x009D, 0x00B9, 0x00D4, 0x00EC, 0x0103, 0x0117, 0x012A, 0x013C, 0x014C,
+    0x015A, 0x0167, 0x0172, 0x017C, 0x0186, 0x018D, 0x0194, 0x019A, 0x019F, 0x01A3, 0x01A7, 0x01A9,
+    0x01AC, 0x01AD, 0x01AE, 0x01AF, 0x01AF, 0x01B0, 0x0728, 0x0728, 0x0728, 0x0727, 0x0725, 0x0724,
+    0x0724, 0x080D, 0x09BF, 0x0AA8, 0x0AA1, 0x0A8E, 0x0A6E, 0x0A45, 0x0A14, 0x09DB, 0x099D, 0x095A,
+    0x0915, 0x08CE, 0x0887, 0x0841, 0x07FF, 0x07C0, 0x0788, 0x0756, 0x072D, 0x070E, 0x06FA, 0x06F3,
+    0x06F3, 0x06F3, 0x06F4, 0x06F4, 0x06F5, 0x06F5, 0x06F7, 0x06F8, 0x07E5, 0x0999, 0x0A84, 0x0A82,
+    0x0A7A, 0x0A6E, 0x0A5D, 0x0A49, 0x0A30, 0x0A15, 0x09F6, 0x09D5, 0x09B2, 0x098C, 0x0966, 0x093E,
+    0x0915, 0x08EB, 0x08C2, 0x0898, 0x086F, 0x0847, 0x0820, 0x07FB, 0x07D8, 0x07B7, 0x0798, 0x077C,
+    0x0764, 0x0750, 0x073F, 0x0733, 0x072B, 0x0728, 0xF5E3, 0xF5DF, 0xF5D5, 0xF5C8, 0xF5BB, 0xF5B1,
+    0xF5AD, 0xF68F, 0xF833, 0xF915, 0xF910, 0xF901, 0xF8EA, 0xF8CC, 0xF8A7, 0xF87D, 0xF84E, 0xF81B,
+    0xF7E6, 0xF7AF, 0xF778, 0xF740, 0xF70A, 0xF6D6, 0xF6A5, 0xF678, 0xF651, 0xF62F, 0xF614, 0xF601,
+    0xF5F5, 0xF5EB, 0xF5E4, 0xF5E0, 0xF5DD, 0xF5DB, 0xF5DB, 0xF5DB, 0xF6B5, 0xF849, 0xF923, 0xF921,
+    0xF919, 0xF90D, 0xF8FD, 0xF8E9, 0xF8D1, 0xF8B6, 0xF898, 0xF878, 0xF856, 0xF831, 0xF80B, 0xF7E4,
+    0xF7BC, 0xF794, 0xF76B, 0xF743, 0xF71B, 0xF6F4, 0xF6CE, 0xF6AA, 0xF687, 0xF667, 0xF649, 0xF62E,
+    0xF616, 0xF602, 0xF5F2, 0xF5E6, 0xF5DE, 0xF5DC, 0xFD1B, 0xFD1C, 0xFD21, 0xFD2E, 0xFD47, 0xFD71,
+    0xFDB0, 0xFE04, 0xFE53, 0xFE76, 0xFE73, 0xFE69, 0xFE5B, 0xFE47, 0xFE30, 0xFE15, 0xFDF8, 0xFDD8,
+    0xFDB8, 0xFD96, 0xFD75, 0xFD54, 0xFD34, 0xFD17, 0xFCFC, 0xFCE5, 0xFCD2, 0xFCC3, 0xFCBA, 0xFCB6,
+    0xFCB7, 0xFCB8, 0xFCBA, 0xFCC0, 0xFCC9, 0xFCD7, 0xFCEA, 0xFD03, 0xFD64, 0xFDFB, 0xFE48, 0xFE48,
+    0xFE45, 0xFE41, 0xFE3C, 0xFE35, 0xFE2D, 0xFE25, 0xFE1B, 0xFE10, 0xFE05, 0xFDF9, 0xFDED, 0xFDE0,
+    0xFDD3, 0xFDC5, 0xFDB8, 0xFDAB, 0xFD9E, 0xFD91, 0xFD84, 0xFD78, 0xFD6D, 0xFD63, 0xFD59, 0xFD50,
+    0xFD48, 0xFD42, 0xFD3C, 0xFD38, 0xFD36, 0xFD35, 0xC3A9, 0xC3A9, 0xC3A5, 0xC39A, 0xC385, 0xC363,
+    0xC32F, 0xC2E8, 0xC294, 0xC23E, 0xC1EE, 0xC1A5, 0xC164, 0xC12A, 0xC0F7, 0xC0C9, 0xC0A2, 0xC080,
+    0xC063, 0xC04A, 0xC036, 0xC025, 0xC018, 0xC00E, 0xC007, 0xC001, 0xBFFE, 0xBFFC, 0xBFFB, 0xBFFB,
+    0xBFFB, 0xBFFC, 0xBFFF, 0xC005, 0xC00F, 0xC01E, 0xC032, 0xC04D, 0xC070, 0xC099, 0xC0C4, 0xC0EF,
+    0xC118, 0xC141, 0xC169, 0xC18F, 0xC1B5, 0xC1D9, 0xC1FD, 0xC21F, 0xC23F, 0xC25F, 0xC27D, 0xC29A,
+    0xC2B6, 0xC2D0, 0xC2E9, 0xC301, 0xC317, 0xC32B, 0xC33E, 0xC350, 0xC360, 0xC36F, 0xC37B, 0xC387,
+    0xC390, 0xC398, 0xC39E, 0xC3A3, 0xC3A6, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF,
+    0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000,
+    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000,
+    0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000,
+    0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+    0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF,
+    0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xCE38, 0xF554, 0xFF7C, 0x07E7, 0x009E, 0xF3C2, 0xFC3A,
+    0x0622, 0x0A3A, 0x0A3A, 0x0A3A, 0x0A3A, 0x0A3A, 0x0A3A, 0x0A3A, 0x095C, 0x07C0, 0x06E2, 0x06E7,
+    0x06F7, 0x0710, 0x0731, 0x0759, 0x0787, 0x07BA, 0x07F0, 0x0829, 0x0864, 0x08A0, 0x08DB, 0x0914,
+    0x094B, 0x097E, 0x09AC, 0x09D4, 0x09F5, 0x0A0E, 0x0A1E, 0x0A28, 0x0A30, 0x0A35, 0x0A38, 0x0A3A,
+    0x0A3C, 0x0A3C, 0x0A3C, 0x095E, 0x07C0, 0x06E2, 0x06E4, 0x06EC, 0x06F7, 0x0706, 0x071A, 0x0730,
+    0x074A, 0x0766, 0x0784, 0x07A5, 0x07C8, 0x07EC, 0x0811, 0x0837, 0x085D, 0x0884, 0x08AA, 0x08D0,
+    0x08F5, 0x0919, 0x093C, 0x095C, 0x097B, 0x0997, 0x09B1, 0x09C7, 0x09DA, 0x09EA, 0x09F5, 0x09FC,
+    0x09FF, 0x02AE, 0x02AE, 0x02AE, 0x02AE, 0x02AE, 0x02AE, 0x02AE, 0x026A, 0x01EC, 0x01A8, 0x01AA,
+    0x01B1, 0x01BB, 0x01C8, 0x01D7, 0x01E9, 0x01FD, 0x0212, 0x0229, 0x023F, 0x0256, 0x026C, 0x0281,
+    0x0295, 0x02A7, 0x02B7, 0x02C4, 0x02CE, 0x02D4, 0x02D6, 0x02D6, 0x02D5, 0x02D3, 0x02CF, 0x02C8,
+    0x02BE, 0x02B1, 0x029E, 0x0250, 0x01D5, 0x0195, 0x0197, 0x019B, 0x01A1, 0x01A9, 0x01B3, 0x01BF,
+    0x01CD, 0x01DC, 0x01ED, 0x01FE, 0x0211, 0x0224, 0x0238, 0x024C, 0x0261, 0x0275, 0x028A, 0x029E,
+    0x02B2, 0x02C5, 0x02D8, 0x02EA, 0x02FA, 0x0309, 0x0317, 0x0323, 0x032D, 0x0335, 0x033C, 0x033F,
+    0x0341, 0xC053, 0xC053, 0xC053, 0xC053, 0xC053, 0xC053, 0xC053, 0xC06A, 0xC0A2, 0xC0E8, 0xC12E,
+    0xC170, 0xC1AE, 0xC1E9, 0xC21F, 0xC253, 0xC282, 0xC2AE, 0xC2D6, 0xC2FB, 0xC31C, 0xC33A, 0xC353,
+    0xC36A, 0xC37D, 0xC38C, 0xC398, 0xC3A1, 0xC3A6, 0xC3A8, 0xC3A7, 0xC3A6, 0xC3A3, 0xC39C, 0xC390,
+    0xC37F, 0xC367, 0xC348, 0xC30A, 0xC2B2, 0xC264, 0xC22A, 0xC1F4, 0xC1C1, 0xC192, 0xC167, 0xC13E,
+    0xC119, 0xC0F6, 0xC0D7, 0xC0BA, 0xC0A0, 0xC088, 0xC073, 0xC060, 0xC04F, 0xC040, 0xC033, 0xC028,
+    0xC01E, 0xC016, 0xC00F, 0xC009, 0xC005, 0xC001, 0xBFFF, 0xBFFD, 0xBFFB, 0xBFFB, 0xBFFA, 0xFFFF,
+    0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000,
+    0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
+    0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
+    0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000,
+    0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000,
+    0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x31C7,
+    0xF556, 0x0084, 0xF818, 0x009E, 0x0AAB, 0xFBBB, 0x0666, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF,
+    0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
+    0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF,
+    0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000,
+    0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000,
+    0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF,
+    0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFF5A, 0xFDA5, 0xFB3A, 0xF876,
+    0xF5B1, 0xF347, 0xF192, 0xF0EC, 0xF122, 0xF1BA, 0xF2A4, 0xF3D0, 0xF530, 0xF6B2, 0xF848, 0xF9E2,
+    0xFB71, 0xFCE4, 0xFE2D, 0xFF3B, 0xFFFF, 0x0081, 0x00D6, 0x0104, 0x0111, 0x0106, 0x00E7, 0x00BB,
+    0x0088, 0x0056, 0x002A, 0x000B, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
+    0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF,
+    0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
+    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xC5E3, 0xC5F0, 0xC601, 0xC5F3, 0xC5A7, 0xC4FA, 0xC3CA,
+    0xC1F7, 0xBF5E, 0xBBFF, 0xB804, 0xB38B, 0xAEB5, 0xA9A0, 0xA46B, 0x9F36, 0x9A20, 0x9547, 0x90CB,
+    0x8CCB, 0x8967, 0x86BC, 0x84D6, 0x8398, 0x82EB, 0x82B7, 0x82E3, 0x8358, 0x83FD, 0x84BA, 0x8577,
+    0x861B, 0x8690, 0x86BC, 0x00D0, 0x002B, 0xFE78, 0xFC0D, 0xF944, 0xF675, 0xF3F8, 0xF225, 0xF155,
+    0xF151, 0xF1A1, 0xF239, 0xF30D, 0xF40E, 0xF531, 0xF66A, 0xF7AB, 0xF8E9, 0xFA16, 0xFB26, 0xFC0D,
+    0xFCBD, 0xFD31, 0xFD71, 0xFD89, 0xFD84, 0xFD6D, 0xFD4F, 0xFD34, 0xFD29, 0xFD1A, 0xFCF6, 0xFCD2,
+    0xFCBD, 0xFCB8, 0xFCB4, 0xFCB2, 0xFCB1, 0xFCB1, 0xFCB2, 0xFCB3, 0xFCB5, 0xFCB8, 0xFCBA, 0xFCBB,
+    0xFCBD, 0xFCBD, 0xFCBA, 0xFCB3, 0xFCA8, 0xFC9C, 0xFC90, 0xFC85, 0xFC7D, 0xFC7A, 0xFC7E, 0xFC89,
+    0xFC9E, 0xFCBD, 0xFCED, 0xFD2F, 0xFD7F, 0xFDD9, 0xFE3A, 0xFE9E, 0xFF00, 0xFF5E, 0xFFB4, 0xFFFD,
+    0x0036, 0x005B, 0x0068, 0x0000, 0x0006, 0x0014, 0x0026, 0x0036, 0x0040, 0x003D, 0x002A, 0x0000,
+    0xFFC2, 0xFF77, 0xFF23, 0xFEC6, 0xFE64, 0xFDFE, 0xFD96, 0xFD2F, 0xFCCB, 0xFC6C, 0xFC15, 0xFBC7,
+    0xFB84, 0xFB52, 0xFB30, 0xFB1D, 0xFB14, 0xFB13, 0xFB16, 0xFB1A, 0xFB1C, 0xFB22, 0xFB34, 0xFB54,
+    0xFB84, 0xFBC0, 0xFC01, 0xFC47, 0xFC90, 0xFCDB, 0xFD25, 0xFD6F, 0xFDB7, 0xFDFA, 0xFE39, 0xFE70,
+    0xFEA0, 0xFEC7, 0xFEE3, 0xFEF5, 0xFEFF, 0xFF02, 0xFEFF, 0xFEF9, 0xFEEF, 0xFEE4, 0xFED9, 0xFED0,
+    0xFEC9, 0xFEC7, 0xCE22, 0xCD35, 0xCAC2, 0xC745, 0xC33B, 0xBF21, 0xBB74, 0xB8AF, 0xB751, 0xB711,
+    0xB749, 0xB7E6, 0xB8D6, 0xBA04, 0xBB5F, 0xBCD4, 0xBE4F, 0xBFBE, 0xC10F, 0xC22D, 0xC307, 0xC38A,
+    0xC38B, 0xC308, 0xC22A, 0xC117, 0xBFF8, 0xBEF5, 0xBE35, 0xBDE1, 0xBE24, 0xBF0A, 0xC092, 0xC2B9,
+    0xC541, 0xC7E7, 0xCAA7, 0xCD7B, 0xD05E, 0xD34A, 0xD63A, 0xD928, 0xDC10, 0xDEEB, 0xE1B4, 0xE466,
+    0xE6FC, 0xE981, 0xEC02, 0xEE7D, 0xF0EF, 0xF355, 0xF5AD, 0xF7F2, 0xFA23, 0xFC3D, 0xFE3C, 0x001E,
+    0x01E0, 0x0394, 0x0549, 0x06F9, 0x089D, 0x0A30, 0x0BAB, 0x0D08, 0x0E40, 0x0F4E, 0x102A, 0x10D0,
+    0x1137, 0x115B, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF,
+    0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
+    0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
+    0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF,
+    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000,
+    0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF,
+    0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+    0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF,
+    0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000,
+    0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000,
+    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
+    0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x3C70, 0x3CE6,
+    0x3E1E, 0x3FD9, 0x41D7, 0x43D8, 0x459C, 0x46E4, 0x4770, 0x4793, 0x47C1, 0x47ED, 0x480B, 0x480F,
+    0x47EB, 0x4793, 0x46FA, 0x4614, 0x44D4, 0x432D, 0x4113, 0x3E79, 0x3A5E, 0x343D, 0x2CC6, 0x24AC,
+    0x1C9C, 0x1549, 0x0F62, 0x0B97, 0x0CE3, 0x132E, 0x1A8E, 0x1F1A, 0x20D2, 0x2255, 0x23A7, 0x24CC,
+    0x25CA, 0x26A4, 0x275E, 0x27FD, 0x2885, 0x28FB, 0x2963, 0x29C2, 0x2A1A, 0x2A4E, 0x2A43, 0x2A06,
+    0x29A4, 0x292C, 0x28A9, 0x282A, 0x27BA, 0x2769, 0x2742, 0x2752, 0x27A8, 0x2852, 0x294B, 0x2A82,
+    0x2BE8, 0x2D6C, 0x2EFF, 0x3090, 0x3210, 0x336E, 0x349A, 0x3585, 0x361D, 0x3653, 0xFFFF, 0xFFFF,
+    0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF,
+    0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF,
+    0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
+    0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF,
+    0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF,
+    0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000,
+    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF,
+    0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF,
+    0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+    0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF,
+    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000,
+    0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xD749, 0xD6C5, 0xD560,
+    0xD35A, 0xD0F0, 0xCE60, 0xCBE8, 0xC9C5, 0xC836, 0xC709, 0xC5E6, 0xC4CF, 0xC3C6, 0xC2CE, 0xC1E9,
+    0xC119, 0xC060, 0xBFC0, 0xBF3C, 0xBED7, 0xBE91, 0xBE6F, 0xBE8E, 0xBF01, 0xBFB7, 0xC09E, 0xC1A5,
+    0xC2BA, 0xC3CC, 0xC4C9, 0xC5A1, 0xC641, 0xC698, 0xC695, 0xC621, 0xC540, 0xC40B, 0xC296, 0xC0F9,
+    0xBF4B, 0xBDA3, 0xBC17, 0xBABE, 0xB9B0, 0xB901, 0xB8CB, 0xB923, 0xBA29, 0xBBD8, 0xBE13, 0xC0BB,
+    0xC3B1, 0xC6D6, 0xCA0C, 0xCD33, 0xD02E, 0xD2DE, 0xD524, 0xD6E1, 0xD833, 0xD951, 0xDA3F, 0xDB01,
+    0xDB9B, 0xDC12, 0xDC6C, 0xDCAB, 0xDCD4, 0xDCED, 0xDCF9, 0xDCFD, 0xFFFF, 0xFFFF, 0x0000, 0x0000,
+    0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF,
+    0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
+    0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF,
+    0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+    0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
+    0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF,
+    0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000,
+    0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF,
+    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000,
+    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF,
+    0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000,
+    0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xBF5E, 0x0068, 0xFFFF, 0xFFF4, 0xFFD4, 0xFFA7,
+    0xFF72, 0xFF3B, 0xFF08, 0xFEE0, 0xFEC7, 0xFEBA, 0xFEB1, 0xFEAC, 0xFEAA, 0xFEAA, 0xFEAD, 0xFEB0,
+    0xFEB5, 0xFEBA, 0xFEBF, 0xFEC3, 0xFEC6, 0xFEC7, 0x8B50, 0x8C33, 0x8E99, 0x921E, 0x9660, 0x9AFB,
+    0x9F8D, 0xA3B1, 0xA705, 0xA9BE, 0xAC56, 0xAED1, 0xB136, 0xB387, 0xB5CA, 0xB803, 0xBA37, 0xBC6B,
+    0xBEA3, 0xC0E4, 0xC333, 0xC593, 0xC830, 0xCB14, 0xCE18, 0xD113, 0xD3DD, 0xD64D, 0xD83B, 0xD97F,
+    0xD909, 0xD6A5, 0xD373, 0xD094, 0xCE4A, 0xCC14, 0xC9EA, 0xC7C5, 0xC59C, 0xC368, 0xC120, 0xBEBD,
+    0xBC37, 0xB946, 0xB5F5, 0xB2B6, 0xAFFC, 0xADAA, 0xAB5B, 0xA90F, 0xA6C6, 0xA482, 0xA244, 0xA00C,
+    0x9DDD, 0x9BB6, 0x9999, 0x9786, 0x9580, 0x9366, 0x9121, 0x8EC1, 0x8C54, 0x89EA, 0x8790, 0x8557,
+    0x834D, 0x8180, 0x8001, 0x7EDC, 0x7E21, 0x7DE0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+    0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000,
+    0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
+    0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF,
+    0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000,
+    0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000,
+    0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+    0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF,
+    0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF,
+    0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000,
+    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF,
+    0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x1B99, 0x1BF7, 0x1CF1, 0x1E56, 0x1FF5, 0x219B,
+    0x2317, 0x2439, 0x24CE, 0x24E3, 0x24AF, 0x243F, 0x23A6, 0x22F1, 0x2230, 0x2173, 0x20CA, 0x2043,
+    0x1FEF, 0x1FDC, 0x201B, 0x20BB, 0x220F, 0x2439, 0x2700, 0x2A2A, 0x2D7E, 0x30C2, 0x33BE, 0x3638,
+    0x3816, 0x3981, 0x3AA1, 0x3B9F, 0x3C9D, 0x3D9F, 0x3EA1, 0x3FA1, 0x409D, 0x4191, 0x427C, 0x435B,
+    0x442A, 0x44E8, 0x4592, 0x4625, 0x469F, 0x471F, 0x47BC, 0x4866, 0x490C, 0x499F, 0x4A0E, 0x4A49,
+    0x4A41, 0x49E5, 0x4924, 0x47F0, 0x4637, 0x43AC, 0x402F, 0x3BF2, 0x3728, 0x3206, 0x2CBE, 0x2784,
+    0x228B, 0x1E07, 0x1A2A, 0x1728, 0x1534, 0x1482, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000,
+    0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF,
+    0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF,
+    0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000,
+    0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000,
+    0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
+    0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000,
+    0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000,
+    0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000,
+    0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF,
+    0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+    0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
+    0x0000, 0x0000, 0xFFFF, 0x0000, 0xC352, 0xC360, 0xC388, 0xC3CA, 0xC427, 0xC49D, 0xC52C, 0xC5D4,
+    0xC695, 0xC76D, 0xC859, 0xC957, 0xCA62, 0xCB77, 0xCC94, 0xCDB4, 0xCED4, 0xCFF2, 0xD109, 0xD216,
+    0xD317, 0xD407, 0xD4E3, 0xD5AC, 0xD665, 0xD70F, 0xD7AF, 0xD846, 0xD8D8, 0xD966, 0xDA6D, 0xDBB6,
+    0xDC3B, 0xDAF4, 0xD825, 0xD4D5, 0xD120, 0xCD24, 0xC8FE, 0xC4CA, 0xC0A5, 0xBCAC, 0xB8FD, 0xB5B3,
+    0xB2ED, 0xB0C6, 0xAF5C, 0xAED0, 0xAF1A, 0xB017, 0xB1A3, 0xB39C, 0xB5DD, 0xB845, 0xBAAF, 0xBCF8,
+    0xBEFE, 0xC09D, 0xC1B1, 0xC25B, 0xC2D7, 0xC329, 0xC357, 0xC369, 0xC362, 0xC349, 0xC325, 0xC2F9,
+    0xC2CE, 0xC2A7, 0xC28C, 0xC282,
 };
 
diff --git a/assets/anims/anim_49.inc.c.rej b/assets/anims/anim_49.inc.c.rej
new file mode 100644
index 0000000..878fa8d
--- /dev/null
+++ b/assets/anims/anim_49.inc.c.rej
@@ -0,0 +1,375 @@
+diff a/assets/anims/anim_49.inc.c b/assets/anims/anim_49.inc.c	(rejected hunks)
+@@ -1,121 +1,262 @@
+ static const struct Animation anim_49[] = {
+-    1,
+-    189,
+-    0,
+-    0,
+-    0x10,
+-    ANIMINDEX_NUMPARTS(anim_49_indices),
+-    anim_49_values,
+-    anim_49_indices,
+-    0,
++	0,
++	189,
++	0,
++	0,
++	0x48,
++	ANIMINDEX_NUMPARTS(anim_49_indices),
++	anim_49_values,
++	anim_49_indices,
++	0,
+ };
+ 
++//rainbow run
++
+ 
+ static const u16 anim_49_indices[] = {
+-    0x0001, 0x0000, 0x0001, 0x0001, 0x0010, 0x0002, 0x0001, 0x0000, 0x0001, 0x0012, 0x0001, 0x0000,
+-    0x0010, 0x0259, 0x0010, 0x0269, 0x0010, 0x0279,
+-    0x0010, 0x0229, 0x0010, 0x0239, 0x0010, 0x0249,
+-    0x0010, 0x01F9, 0x0010, 0x0209, 0x0010, 0x0219,
+-    0x0001, 0x01C6, 0x0001, 0x01C7, 0x0001, 0x01C8,
+-    0x0010, 0x0053, 0x0010, 0x0063, 0x0010, 0x0073,
+-    0x0001, 0x0000, 0x0001, 0x0000, 0x0010, 0x0043,
+-    0x0010, 0x0013, 0x0010, 0x0023, 0x0010, 0x0033,
+-    0x0001, 0x01B3, 0x0001, 0x01B4, 0x0001, 0x01B5,
+-    0x0010, 0x00A3, 0x0010, 0x00B3, 0x0010, 0x00C3,
+-    0x0001, 0x0000, 0x0001, 0x0000, 0x0010, 0x0093,
+-    0x0001, 0x0000, 0x0001, 0x0000, 0x0010, 0x0083,
+-    0x0001, 0x0000, 0x0001, 0x0000, 0x0010, 0x01B6,
+-    0x0010, 0x0183, 0x0010, 0x0193, 0x0010, 0x01A3,
+-    0x0001, 0x0000, 0x0001, 0x0000, 0x0010, 0x0173,
+-    0x0010, 0x0143, 0x0010, 0x0153, 0x0010, 0x0163,
+-    0x0010, 0x01C9, 0x0010, 0x01D9, 0x0010, 0x01E9,
+-    0x0010, 0x0113, 0x0010, 0x0123, 0x0010, 0x0133,
+-    0x0001, 0x0000, 0x0001, 0x0000, 0x0010, 0x0103,
+-    0x0010, 0x00D3, 0x0010, 0x00E3, 0x0010, 0x00F3,
++    0x0001, 0x0000, 0x0048, 0x0001, 0x0001, 0x0049, 0x0001, 0x004A, 0x0001, 0x004B, 0x0001, 0x004C,
++    0x003A, 0x004D, 0x003C, 0x0087, 0x0048, 0x00C3, 0x0048, 0x010B, 0x0048, 0x0153, 0x0041, 0x019B,
++    0x0048, 0x01DC, 0x0046, 0x0224, 0x0048, 0x026A, 0x0048, 0x02B2, 0x0048, 0x02FA, 0x0047, 0x0342,
++    0x0048, 0x0389, 0x0001, 0x03D1, 0x0001, 0x03D2, 0x0001, 0x03D3, 0x0001, 0x03D4, 0x0001, 0x03D5,
++    0x0001, 0x03D6, 0x0001, 0x03D7, 0x0001, 0x03D8, 0x0048, 0x03D9, 0x0048, 0x0421, 0x0046, 0x0469,
++    0x0048, 0x04AF, 0x0001, 0x04F7, 0x0001, 0x04F8, 0x0001, 0x04F9, 0x0001, 0x04FA, 0x0001, 0x04FB,
++    0x0001, 0x04FC, 0x0001, 0x04FD, 0x0001, 0x04FE, 0x0048, 0x04FF, 0x0046, 0x0547, 0x0022, 0x058D,
++    0x0048, 0x05AF, 0x003B, 0x05F7, 0x0048, 0x0632, 0x0047, 0x067A, 0x0045, 0x06C1, 0x0048, 0x0706,
++    0x0048, 0x074E, 0x0047, 0x0796, 0x0047, 0x07DD, 0x0047, 0x0824, 0x0047, 0x086B, 0x0001, 0x08B2,
++    0x0001, 0x08B3, 0x0016, 0x08B4, 0x0048, 0x08CA, 0x0048, 0x0912, 0x0048, 0x095A, 0x0048, 0x09A2,
++    0x0048, 0x09EA, 0x0046, 0x0A32, 0x0048, 0x0A78,
+ };
+ 
+ static const s16 anim_49_values[] = {
+-    0x0000, 0x00C3, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+-    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+-    0x0000, 0x0000, 0x3FFF, 0x1292, 0x124F, 0x1233, 0x1261, 0x128E,
+-    0x1233, 0x115B, 0x1069, 0x0F61, 0x0E48, 0x0D22, 0x0BF1, 0x0ABB,
+-    0x0984, 0x084E, 0x071F, 0x0362, 0x033F, 0x0331, 0x0349, 0x0361,
+-    0x0331, 0x02BD, 0x023C, 0x01AF, 0x0119, 0x007C, 0xFFDB, 0xFF36,
+-    0xFE8F, 0xFDEA, 0xFD48, 0xDC1E, 0xDC66, 0xDC83, 0xDC59, 0xDC2F,
+-    0xDC83, 0xDD4E, 0xDE30, 0xDF27, 0xE02E, 0xE142, 0xE25E, 0xE380,
+-    0xE4A4, 0xE5C6, 0xE6E1, 0xF163, 0xF0C6, 0xF085, 0xF0E4, 0xF142,
+-    0xF085, 0xEEBE, 0xECC2, 0xEA99, 0xE84B, 0xE5E1, 0xE362, 0xE0D7,
+-    0xDE49, 0xDBC0, 0xD943, 0xCD29, 0xCF2E, 0xD1AB, 0xD855, 0xE231,
+-    0xE83D, 0xEA01, 0xEBB0, 0xED4B, 0xEED1, 0xF042, 0xF19D, 0xF2E3,
+-    0xF413, 0xF52C, 0xF62E, 0xFE28, 0xFD52, 0xFB12, 0xF050, 0xDF34,
+-    0xD552, 0xD3BA, 0xD26B, 0xD162, 0xD097, 0xD005, 0xCFA6, 0xCF75,
+-    0xCF6B, 0xCF84, 0xCFB8, 0xFA4C, 0xF657, 0xF1CD, 0xE6D1, 0xD738,
+-    0xCE99, 0xCD80, 0xCCB8, 0xCC3A, 0xCBFF, 0xCBFF, 0xCC33, 0xCC94,
+-    0xCD1A, 0xCDC0, 0xCE7D, 0xD7F1, 0xD83D, 0xD85C, 0xD814, 0xD7CD,
+-    0xD85C, 0xD9B4, 0xDB35, 0xDCD8, 0xDE96, 0xE06B, 0xE24E, 0xE43B,
+-    0xE62A, 0xE816, 0xE9F8, 0xEBA5, 0xF17D, 0xF639, 0xF877, 0xF804,
+-    0xF639, 0xF412, 0xF1A9, 0xEF0A, 0xEC3E, 0xE950, 0xE649, 0xE333,
+-    0xE01A, 0xDD06, 0xDA01, 0xFBB1, 0x0748, 0x1209, 0x1B2B, 0x21E8,
+-    0x257A, 0x26CD, 0x275F, 0x2742, 0x268C, 0x254D, 0x2399, 0x2183,
+-    0x1F1E, 0x1C7D, 0x19B3, 0x2D0E, 0x2E43, 0x2F5A, 0x3042, 0x30EA,
+-    0x313E, 0x3154, 0x3152, 0x3138, 0x310B, 0x30CC, 0x307E, 0x3023,
+-    0x2FBF, 0x2F54, 0x2EE5, 0xB0BB, 0xBCD2, 0xC81F, 0xD1D8, 0xD933,
+-    0xDD66, 0xDF68, 0xE0C2, 0xE183, 0xE1BA, 0xE176, 0xE0C8, 0xDFBE,
+-    0xDE67, 0xDCD4, 0xDB13, 0xFF2D, 0xFF44, 0xFF57, 0xFF5F, 0xFF5B,
+-    0xFF57, 0xFF4F, 0xFF38, 0xFF1A, 0xFEFA, 0xFEDE, 0xFECC, 0xFEC9,
+-    0xFEDB, 0xFF09, 0xFF57, 0x023F, 0x023F, 0x0244, 0x0247, 0x0246,
+-    0x0244, 0x0247, 0x024E, 0x0258, 0x0262, 0x026B, 0x0271, 0x0272,
+-    0x026C, 0x025D, 0x0244, 0xB9FE, 0xBC1A, 0xBDAE, 0xBE39, 0xBDF3,
+-    0xBDAE, 0xBDAD, 0xBDAB, 0xBDA8, 0xBDA6, 0xBDA3, 0xBDA2, 0xBDA1,
+-    0xBDA3, 0xBDA7, 0xBDAE, 0x5EA1, 0x6088, 0x5EA1, 0x54C8, 0x4813,
+-    0x3E71, 0x385C, 0x3260, 0x2C92, 0x2705, 0x21CB, 0x1CF8, 0x189F,
+-    0x14D3, 0x11A7, 0x0F2E, 0x0B6D, 0x05F1, 0x0156, 0xFEA9, 0xFDDB,
+-    0xFDAE, 0xFD6B, 0xFD32, 0xFD06, 0xFCE7, 0xFCD7, 0xFCDA, 0xFCF0,
+-    0xFD1C, 0xFD60, 0xFDBD, 0x01E2, 0xFB93, 0xF64E, 0xF422, 0xF514,
+-    0xF67E, 0xF745, 0xF815, 0xF8EE, 0xF9D2, 0xFAC1, 0xFBBD, 0xFCC5,
+-    0xFDDC, 0xFF01, 0x0034, 0x9CFC, 0x951F, 0x8F7C, 0x915F, 0x998A,
+-    0x9EFD, 0x9FEC, 0xA08F, 0xA0EC, 0xA109, 0xA0EA, 0xA096, 0xA012,
+-    0x9F64, 0x9E92, 0x9DA0, 0x00B9, 0x00C9, 0x00D0, 0x00D0, 0x00D0,
+-    0x00D0, 0x00D3, 0x00DD, 0x00E9, 0x00F7, 0x0103, 0x010A, 0x010C,
+-    0x0104, 0x00F1, 0x00D0, 0xFF32, 0xFF36, 0xFF38, 0xFF38, 0xFF38,
+-    0xFF38, 0xFF36, 0xFF32, 0xFF2C, 0xFF26, 0xFF21, 0xFF1D, 0xFF1D,
+-    0xFF20, 0xFF29, 0xFF38, 0xC245, 0xC1D8, 0xC1AA, 0xC1AA, 0xC1AA,
+-    0xC1AA, 0xC1B3, 0xC1C9, 0xC1E6, 0xC206, 0xC221, 0xC233, 0xC236,
+-    0xC224, 0xC1F7, 0xC1AA, 0x1FFC, 0x1A51, 0x152F, 0x1307, 0x141B,
+-    0x152F, 0x1506, 0x149C, 0x140E, 0x1377, 0x12F2, 0x129B, 0x128D,
+-    0x12E4, 0x13BC, 0x152F, 0x0C64, 0x0D70, 0x0DB3, 0x099B, 0x020F,
+-    0xFD99, 0xFD2B, 0xFD50, 0xFDE6, 0xFECE, 0xFFE8, 0x0111, 0x022D,
+-    0x0319, 0x03B5, 0x03E1, 0x089E, 0x0707, 0x0536, 0x018E, 0xFCBA,
+-    0xFA1A, 0xF9EF, 0xFA2A, 0xFAB4, 0xFB78, 0xFC61, 0xFD58, 0xFE49,
+-    0xFF1E, 0xFFC1, 0x001C, 0xBD10, 0xC45E, 0xCA4D, 0xCAA9, 0xC545,
+-    0xBFD1, 0xBC46, 0xB8CA, 0xB557, 0xB1E4, 0xAE6B, 0xAAE5, 0xA74B,
+-    0xA394, 0x9FBB, 0x9BB7, 0x7FFF, 0x7FFF, 0x4171, 0xBF62, 0xBF60,
+-    0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F,
+-    0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0x7FFF, 0x7FFF,
+-    0x4171, 0xFCC9, 0xFE90, 0x0000, 0x008B, 0x0045, 0x0000, 0x0000,
+-    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+-    0x0000, 0x054B, 0x025E, 0x0000, 0xFF1A, 0xFF8D, 0x0000, 0x0000,
+-    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+-    0x0000, 0xB893, 0xBC54, 0xBF5F, 0xC086, 0xBFF3, 0xBF5F, 0xBF5F,
+-    0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F, 0xBF5F,
+-    0xBF5F, 0x1DE4, 0x1617, 0x0E5E, 0x07EF, 0x0238, 0xFF26, 0xFE45,
+-    0xFDCC, 0xFDA8, 0xFDC7, 0xFE17, 0xFE85, 0xFEFF, 0xFF73, 0xFFCF,
+-    0x0000, 0x0F0A, 0x07A4, 0x007F, 0x004E, 0x0256, 0x03A4, 0x038A,
+-    0x0353, 0x0304, 0x02A2, 0x0233, 0x01BD, 0x0144, 0x00CE, 0x0060,
+-    0x0000, 0xEC1C, 0xF7D2, 0x0570, 0x09F6, 0x0BBC, 0x0C88, 0x0D77,
+-    0x0E6C, 0x0F5D, 0x103B, 0x10FA, 0x118D, 0x11E8, 0x11FE, 0x11C2,
+-    0x1128, 0x0938, 0x0935, 0x093C, 0x096C, 0x0991, 0x093C, 0x0875,
+-    0x0790, 0x0696, 0x058D, 0x0480, 0x0374, 0x0273, 0x0185, 0x00B1,
+-    0x0000, 0xFA57, 0xF98D, 0xF8E4, 0xF883, 0xF884, 0xF8E4, 0xF97D,
+-    0xFA2D, 0xFAEE, 0xFBBA, 0xFC89, 0xFD57, 0xFE1D, 0xFED5, 0xFF78,
+-    0x0000, 0x283D, 0x2C61, 0x2FE8, 0x31E2, 0x31C2, 0x2FE8, 0x2D01,
+-    0x2994, 0x25CA, 0x21CB, 0x1DBF, 0x19CE, 0x1620, 0x12DD, 0x102D,
+-    0x0E38, 0x507D, 0x5567, 0x5AAF, 0x6428, 0x710E, 0x7A85, 0x7E7D,
+-    0x802D, 0x80A3, 0x80EC, 0x813F, 0x8135, 0x80F0, 0x808F, 0x8034,
+-    0x7FFF, 0x0507, 0x05D2, 0x0674, 0x0672, 0x0583, 0x03E6, 0x0145,
+-    0xFDE3, 0xFADE, 0xF959, 0xF97B, 0xFA6F, 0xFBE2, 0xFD83, 0xFEFE,
+-    0x0000, 0x2F0C, 0x2DB3, 0x2BAA, 0x275D, 0x1E94, 0x1041, 0xFBCF,
+-    0xE349, 0xC990, 0xB184, 0x9A5F, 0x824A, 0x6A87, 0x5457, 0x40FF,
+-    0x31BF,
++    0x0000, 0x00C0, 0x00BD, 0x00B8, 0x00B4, 0x00B1, 0x00AF, 0x00AD, 0x00AB, 0x00AC, 0x00AE, 0x00B0,
++    0x00B3, 0x00B7, 0x00BA, 0x00BE, 0x00C2, 0x00C5, 0x00C8, 0x00CB, 0x00CE, 0x00D1, 0x00D3, 0x00D6,
++    0x00D8, 0x00D9, 0x00D9, 0x00D9, 0x00D8, 0x00D7, 0x00D5, 0x00D2, 0x00D0, 0x00CD, 0x00CA, 0x00C8,
++    0x00C5, 0x00C1, 0x00BD, 0x00B9, 0x00B5, 0x00B2, 0x00B0, 0x00AE, 0x00AD, 0x00AC, 0x00AB, 0x00AB,
++    0x00AB, 0x00AC, 0x00AD, 0x00AF, 0x00B2, 0x00B6, 0x00BC, 0x00C2, 0x00C6, 0x00CA, 0x00CD, 0x00CF,
++    0x00D2, 0x00D4, 0x00D6, 0x00D8, 0x00D9, 0x00D9, 0x00D8, 0x00D5, 0x00D3, 0x00CF, 0x00CA, 0x00C5,
++    0x00C3, 0x0000, 0x0000, 0x3FFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF,
++    0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF,
++    0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
++    0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
++    0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000,
++    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
++    0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
++    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
++    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
++    0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000,
++    0xFFFF, 0xFFFF, 0x0000, 0x3A85, 0x3AA5, 0x3AFB, 0x3B75, 0x3C01, 0x3C8C, 0x3D06, 0x3D5C, 0x3D7D,
++    0x3D7A, 0x3D70, 0x3D60, 0x3D4B, 0x3D30, 0x3D11, 0x3CEE, 0x3CC8, 0x3CA0, 0x3C75, 0x3C49, 0x3C1C,
++    0x3BEF, 0x3BC2, 0x3B96, 0x3B6C, 0x3B43, 0x3B1D, 0x3AFB, 0x3ADC, 0x3AC2, 0x3AAC, 0x3A9C, 0x3A92,
++    0x3A8F, 0x3AAA, 0x3AF0, 0x3B55, 0x3BCD, 0x3C4B, 0x3CC4, 0x3D2A, 0x3D71, 0x3D8D, 0x3D8D, 0x3D89,
++    0x3D7F, 0x3D72, 0x3D61, 0x3D4C, 0x3D35, 0x3D1B, 0x3CFE, 0x3CDF, 0x3CBF, 0x3C9E, 0x3C7B, 0x3C58,
++    0x3C34, 0x3C11, 0x3BEE, 0x3BCC, 0x3BAB, 0x3B8C, 0x3B6E, 0x3B53, 0x3B3A, 0x3B24, 0x3B11, 0x3B02,
++    0x3AF6, 0x3AEF, 0x3AED, 0xF941, 0xF94D, 0xF970, 0xF9A8, 0xF9F3, 0xFA51, 0xFABE, 0xFB3A, 0xFBC3,
++    0xFC57, 0xFCF4, 0xFD99, 0xFE43, 0xFEF2, 0xFFA3, 0x0057, 0x0108, 0x01B7, 0x0262, 0x0306, 0x03A3,
++    0x0437, 0x04C0, 0x053C, 0x05A9, 0x0607, 0x0652, 0x068B, 0x06AE, 0x06BA, 0x06B4, 0x06A3, 0x0687,
++    0x0662, 0x0633, 0x05FB, 0x05BA, 0x0572, 0x0522, 0x04CC, 0x0470, 0x040E, 0x03A7, 0x033C, 0x02CC,
++    0x025A, 0x01E4, 0x016C, 0x00F3, 0x0079, 0xFFFD, 0xFF82, 0xFF07, 0xFE8E, 0xFE16, 0xFDA1, 0xFD2E,
++    0xFCBF, 0xFC53, 0xFBEC, 0xFB8A, 0xFB2E, 0xFAD8, 0xFA88, 0xFA40, 0xFA00, 0xF9C8, 0xF998, 0xF973,
++    0xF957, 0xF946, 0xF941, 0xFDBB, 0xFDBF, 0xFDCB, 0xFDDE, 0xFDF8, 0xFE17, 0xFE3D, 0xFE67, 0xFE96,
++    0xFEC8, 0xFEFD, 0xFF36, 0xFF70, 0xFFAB, 0xFFE8, 0x0026, 0x0062, 0x009E, 0x00D8, 0x0110, 0x0145,
++    0x0178, 0x01A6, 0x01D1, 0x01F6, 0x0216, 0x022F, 0x0243, 0x024E, 0x0253, 0x0251, 0x024B, 0x0241,
++    0x0235, 0x0225, 0x0211, 0x01FC, 0x01E3, 0x01C8, 0x01AA, 0x018B, 0x016A, 0x0147, 0x0122, 0x00FC,
++    0x00D5, 0x00AD, 0x0084, 0x005B, 0x0031, 0x0007, 0xFFDC, 0xFFB2, 0xFF89, 0xFF60, 0xFF38, 0xFF11,
++    0xFEEB, 0xFEC7, 0xFEA4, 0xFE82, 0xFE63, 0xFE45, 0xFE2A, 0xFE12, 0xFDFC, 0xFDE9, 0xFDD9, 0xFDCC,
++    0xFDC2, 0xFDBD, 0xFDBB, 0xF7CE, 0xF7CE, 0xF7CE, 0xF7CE, 0xF7CE, 0xF7CE, 0xF7CF, 0xF7CF, 0xF7CF,
++    0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0,
++    0xF7D0, 0xF7D0, 0xF7D0, 0xF7D1, 0xF7D1, 0xF7D1, 0xF7D1, 0xF7D1, 0xF7D1, 0xF7D1, 0xF7D1, 0xF7D1,
++    0xF7D1, 0xF7D1, 0xF7D1, 0xF7D1, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0,
++    0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7D0, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF,
++    0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CF, 0xF7CE, 0x0705, 0x0705, 0x06F7, 0x06CF,
++    0x0690, 0x063C, 0x05D6, 0x055F, 0x04D9, 0x0445, 0x03A5, 0x02FA, 0x0247, 0x018E, 0x00D0, 0x0010,
++    0xFF4E, 0xFE8F, 0xFDD3, 0xFD1E, 0xFC70, 0xFBCB, 0xFB33, 0xFAA8, 0xFA2D, 0xF9C4, 0xF96F, 0xF92F,
++    0xF908, 0xF8FA, 0xF900, 0xF913, 0xF931, 0xF959, 0xF98A, 0xF9C5, 0xFA07, 0xFA50, 0xFA9F, 0xFAF4,
++    0xFB50, 0xFBB2, 0xFC1A, 0xFC88, 0xFCF9, 0xFD6F, 0xFDE8, 0xFE64, 0xFEE2, 0xFF62, 0xFFE3, 0x0065,
++    0x00E5, 0x0165, 0x01E3, 0x025F, 0x02D9, 0x034E, 0x03C0, 0x042E, 0x0496, 0x04F8, 0x0554, 0x05A9,
++    0x05F6, 0x063B, 0x0676, 0x06A9, 0x06D1, 0x06EF, 0x0701, 0x0707, 0x01BF, 0x01BF, 0x01BE, 0x01BB,
++    0x01B4, 0x01A5, 0x018D, 0x0165, 0x012F, 0x00F4, 0x00BE, 0x008D, 0x0061, 0x0039, 0x0017, 0xFFF7,
++    0xFFDD, 0xFFC6, 0xFFB3, 0xFFA2, 0xFF95, 0xFF8A, 0xFF82, 0xFF7B, 0xFF77, 0xFF74, 0xFF72, 0xFF70,
++    0xFF70, 0xFF70, 0xFF70, 0xFF71, 0xFF73, 0xFF77, 0xFF7D, 0xFF87, 0xFF95, 0xFFA7, 0xFFCE, 0x0009,
++    0x003A, 0x005D, 0x007E, 0x009D, 0x00B9, 0x00D4, 0x00EC, 0x0103, 0x0117, 0x012A, 0x013C, 0x014C,
++    0x015A, 0x0167, 0x0172, 0x017C, 0x0186, 0x018D, 0x0194, 0x019A, 0x019F, 0x01A3, 0x01A7, 0x01A9,
++    0x01AC, 0x01AD, 0x01AE, 0x01AF, 0x01AF, 0x01B0, 0x0728, 0x0728, 0x0728, 0x0727, 0x0725, 0x0724,
++    0x0724, 0x080D, 0x09BF, 0x0AA8, 0x0AA1, 0x0A8E, 0x0A6E, 0x0A45, 0x0A14, 0x09DB, 0x099D, 0x095A,
++    0x0915, 0x08CE, 0x0887, 0x0841, 0x07FF, 0x07C0, 0x0788, 0x0756, 0x072D, 0x070E, 0x06FA, 0x06F3,
++    0x06F3, 0x06F3, 0x06F4, 0x06F4, 0x06F5, 0x06F5, 0x06F7, 0x06F8, 0x07E5, 0x0999, 0x0A84, 0x0A82,
++    0x0A7A, 0x0A6E, 0x0A5D, 0x0A49, 0x0A30, 0x0A15, 0x09F6, 0x09D5, 0x09B2, 0x098C, 0x0966, 0x093E,
++    0x0915, 0x08EB, 0x08C2, 0x0898, 0x086F, 0x0847, 0x0820, 0x07FB, 0x07D8, 0x07B7, 0x0798, 0x077C,
++    0x0764, 0x0750, 0x073F, 0x0733, 0x072B, 0x0728, 0xF5E3, 0xF5DF, 0xF5D5, 0xF5C8, 0xF5BB, 0xF5B1,
++    0xF5AD, 0xF68F, 0xF833, 0xF915, 0xF910, 0xF901, 0xF8EA, 0xF8CC, 0xF8A7, 0xF87D, 0xF84E, 0xF81B,
++    0xF7E6, 0xF7AF, 0xF778, 0xF740, 0xF70A, 0xF6D6, 0xF6A5, 0xF678, 0xF651, 0xF62F, 0xF614, 0xF601,
++    0xF5F5, 0xF5EB, 0xF5E4, 0xF5E0, 0xF5DD, 0xF5DB, 0xF5DB, 0xF5DB, 0xF6B5, 0xF849, 0xF923, 0xF921,
++    0xF919, 0xF90D, 0xF8FD, 0xF8E9, 0xF8D1, 0xF8B6, 0xF898, 0xF878, 0xF856, 0xF831, 0xF80B, 0xF7E4,
++    0xF7BC, 0xF794, 0xF76B, 0xF743, 0xF71B, 0xF6F4, 0xF6CE, 0xF6AA, 0xF687, 0xF667, 0xF649, 0xF62E,
++    0xF616, 0xF602, 0xF5F2, 0xF5E6, 0xF5DE, 0xF5DC, 0xFD1B, 0xFD1C, 0xFD21, 0xFD2E, 0xFD47, 0xFD71,
++    0xFDB0, 0xFE04, 0xFE53, 0xFE76, 0xFE73, 0xFE69, 0xFE5B, 0xFE47, 0xFE30, 0xFE15, 0xFDF8, 0xFDD8,
++    0xFDB8, 0xFD96, 0xFD75, 0xFD54, 0xFD34, 0xFD17, 0xFCFC, 0xFCE5, 0xFCD2, 0xFCC3, 0xFCBA, 0xFCB6,
++    0xFCB7, 0xFCB8, 0xFCBA, 0xFCC0, 0xFCC9, 0xFCD7, 0xFCEA, 0xFD03, 0xFD64, 0xFDFB, 0xFE48, 0xFE48,
++    0xFE45, 0xFE41, 0xFE3C, 0xFE35, 0xFE2D, 0xFE25, 0xFE1B, 0xFE10, 0xFE05, 0xFDF9, 0xFDED, 0xFDE0,
++    0xFDD3, 0xFDC5, 0xFDB8, 0xFDAB, 0xFD9E, 0xFD91, 0xFD84, 0xFD78, 0xFD6D, 0xFD63, 0xFD59, 0xFD50,
++    0xFD48, 0xFD42, 0xFD3C, 0xFD38, 0xFD36, 0xFD35, 0xC3A9, 0xC3A9, 0xC3A5, 0xC39A, 0xC385, 0xC363,
++    0xC32F, 0xC2E8, 0xC294, 0xC23E, 0xC1EE, 0xC1A5, 0xC164, 0xC12A, 0xC0F7, 0xC0C9, 0xC0A2, 0xC080,
++    0xC063, 0xC04A, 0xC036, 0xC025, 0xC018, 0xC00E, 0xC007, 0xC001, 0xBFFE, 0xBFFC, 0xBFFB, 0xBFFB,
++    0xBFFB, 0xBFFC, 0xBFFF, 0xC005, 0xC00F, 0xC01E, 0xC032, 0xC04D, 0xC070, 0xC099, 0xC0C4, 0xC0EF,
++    0xC118, 0xC141, 0xC169, 0xC18F, 0xC1B5, 0xC1D9, 0xC1FD, 0xC21F, 0xC23F, 0xC25F, 0xC27D, 0xC29A,
++    0xC2B6, 0xC2D0, 0xC2E9, 0xC301, 0xC317, 0xC32B, 0xC33E, 0xC350, 0xC360, 0xC36F, 0xC37B, 0xC387,
++    0xC390, 0xC398, 0xC39E, 0xC3A3, 0xC3A6, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF,
++    0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000,
++    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000,
++    0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000,
++    0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
++    0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF,
++    0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xCE38, 0xF554, 0xFF7C, 0x07E7, 0x009E, 0xF3C2, 0xFC3A,
++    0x0622, 0x0A3A, 0x0A3A, 0x0A3A, 0x0A3A, 0x0A3A, 0x0A3A, 0x0A3A, 0x095C, 0x07C0, 0x06E2, 0x06E7,
++    0x06F7, 0x0710, 0x0731, 0x0759, 0x0787, 0x07BA, 0x07F0, 0x0829, 0x0864, 0x08A0, 0x08DB, 0x0914,
++    0x094B, 0x097E, 0x09AC, 0x09D4, 0x09F5, 0x0A0E, 0x0A1E, 0x0A28, 0x0A30, 0x0A35, 0x0A38, 0x0A3A,
++    0x0A3C, 0x0A3C, 0x0A3C, 0x095E, 0x07C0, 0x06E2, 0x06E4, 0x06EC, 0x06F7, 0x0706, 0x071A, 0x0730,
++    0x074A, 0x0766, 0x0784, 0x07A5, 0x07C8, 0x07EC, 0x0811, 0x0837, 0x085D, 0x0884, 0x08AA, 0x08D0,
++    0x08F5, 0x0919, 0x093C, 0x095C, 0x097B, 0x0997, 0x09B1, 0x09C7, 0x09DA, 0x09EA, 0x09F5, 0x09FC,
++    0x09FF, 0x02AE, 0x02AE, 0x02AE, 0x02AE, 0x02AE, 0x02AE, 0x02AE, 0x026A, 0x01EC, 0x01A8, 0x01AA,
++    0x01B1, 0x01BB, 0x01C8, 0x01D7, 0x01E9, 0x01FD, 0x0212, 0x0229, 0x023F, 0x0256, 0x026C, 0x0281,
++    0x0295, 0x02A7, 0x02B7, 0x02C4, 0x02CE, 0x02D4, 0x02D6, 0x02D6, 0x02D5, 0x02D3, 0x02CF, 0x02C8,
++    0x02BE, 0x02B1, 0x029E, 0x0250, 0x01D5, 0x0195, 0x0197, 0x019B, 0x01A1, 0x01A9, 0x01B3, 0x01BF,
++    0x01CD, 0x01DC, 0x01ED, 0x01FE, 0x0211, 0x0224, 0x0238, 0x024C, 0x0261, 0x0275, 0x028A, 0x029E,
++    0x02B2, 0x02C5, 0x02D8, 0x02EA, 0x02FA, 0x0309, 0x0317, 0x0323, 0x032D, 0x0335, 0x033C, 0x033F,
++    0x0341, 0xC053, 0xC053, 0xC053, 0xC053, 0xC053, 0xC053, 0xC053, 0xC06A, 0xC0A2, 0xC0E8, 0xC12E,
++    0xC170, 0xC1AE, 0xC1E9, 0xC21F, 0xC253, 0xC282, 0xC2AE, 0xC2D6, 0xC2FB, 0xC31C, 0xC33A, 0xC353,
++    0xC36A, 0xC37D, 0xC38C, 0xC398, 0xC3A1, 0xC3A6, 0xC3A8, 0xC3A7, 0xC3A6, 0xC3A3, 0xC39C, 0xC390,
++    0xC37F, 0xC367, 0xC348, 0xC30A, 0xC2B2, 0xC264, 0xC22A, 0xC1F4, 0xC1C1, 0xC192, 0xC167, 0xC13E,
++    0xC119, 0xC0F6, 0xC0D7, 0xC0BA, 0xC0A0, 0xC088, 0xC073, 0xC060, 0xC04F, 0xC040, 0xC033, 0xC028,
++    0xC01E, 0xC016, 0xC00F, 0xC009, 0xC005, 0xC001, 0xBFFF, 0xBFFD, 0xBFFB, 0xBFFB, 0xBFFA, 0xFFFF,
++    0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000,
++    0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
++    0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
++    0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000,
++    0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000,
++    0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x31C7,
++    0xF556, 0x0084, 0xF818, 0x009E, 0x0AAB, 0xFBBB, 0x0666, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF,
++    0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
++    0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF,
++    0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000,
++    0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000,
++    0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF,
++    0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFF5A, 0xFDA5, 0xFB3A, 0xF876,
++    0xF5B1, 0xF347, 0xF192, 0xF0EC, 0xF122, 0xF1BA, 0xF2A4, 0xF3D0, 0xF530, 0xF6B2, 0xF848, 0xF9E2,
++    0xFB71, 0xFCE4, 0xFE2D, 0xFF3B, 0xFFFF, 0x0081, 0x00D6, 0x0104, 0x0111, 0x0106, 0x00E7, 0x00BB,
++    0x0088, 0x0056, 0x002A, 0x000B, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
++    0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF,
++    0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
++    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xC5E3, 0xC5F0, 0xC601, 0xC5F3, 0xC5A7, 0xC4FA, 0xC3CA,
++    0xC1F7, 0xBF5E, 0xBBFF, 0xB804, 0xB38B, 0xAEB5, 0xA9A0, 0xA46B, 0x9F36, 0x9A20, 0x9547, 0x90CB,
++    0x8CCB, 0x8967, 0x86BC, 0x84D6, 0x8398, 0x82EB, 0x82B7, 0x82E3, 0x8358, 0x83FD, 0x84BA, 0x8577,
++    0x861B, 0x8690, 0x86BC, 0x00D0, 0x002B, 0xFE78, 0xFC0D, 0xF944, 0xF675, 0xF3F8, 0xF225, 0xF155,
++    0xF151, 0xF1A1, 0xF239, 0xF30D, 0xF40E, 0xF531, 0xF66A, 0xF7AB, 0xF8E9, 0xFA16, 0xFB26, 0xFC0D,
++    0xFCBD, 0xFD31, 0xFD71, 0xFD89, 0xFD84, 0xFD6D, 0xFD4F, 0xFD34, 0xFD29, 0xFD1A, 0xFCF6, 0xFCD2,
++    0xFCBD, 0xFCB8, 0xFCB4, 0xFCB2, 0xFCB1, 0xFCB1, 0xFCB2, 0xFCB3, 0xFCB5, 0xFCB8, 0xFCBA, 0xFCBB,
++    0xFCBD, 0xFCBD, 0xFCBA, 0xFCB3, 0xFCA8, 0xFC9C, 0xFC90, 0xFC85, 0xFC7D, 0xFC7A, 0xFC7E, 0xFC89,
++    0xFC9E, 0xFCBD, 0xFCED, 0xFD2F, 0xFD7F, 0xFDD9, 0xFE3A, 0xFE9E, 0xFF00, 0xFF5E, 0xFFB4, 0xFFFD,
++    0x0036, 0x005B, 0x0068, 0x0000, 0x0006, 0x0014, 0x0026, 0x0036, 0x0040, 0x003D, 0x002A, 0x0000,
++    0xFFC2, 0xFF77, 0xFF23, 0xFEC6, 0xFE64, 0xFDFE, 0xFD96, 0xFD2F, 0xFCCB, 0xFC6C, 0xFC15, 0xFBC7,
++    0xFB84, 0xFB52, 0xFB30, 0xFB1D, 0xFB14, 0xFB13, 0xFB16, 0xFB1A, 0xFB1C, 0xFB22, 0xFB34, 0xFB54,
++    0xFB84, 0xFBC0, 0xFC01, 0xFC47, 0xFC90, 0xFCDB, 0xFD25, 0xFD6F, 0xFDB7, 0xFDFA, 0xFE39, 0xFE70,
++    0xFEA0, 0xFEC7, 0xFEE3, 0xFEF5, 0xFEFF, 0xFF02, 0xFEFF, 0xFEF9, 0xFEEF, 0xFEE4, 0xFED9, 0xFED0,
++    0xFEC9, 0xFEC7, 0xCE22, 0xCD35, 0xCAC2, 0xC745, 0xC33B, 0xBF21, 0xBB74, 0xB8AF, 0xB751, 0xB711,
++    0xB749, 0xB7E6, 0xB8D6, 0xBA04, 0xBB5F, 0xBCD4, 0xBE4F, 0xBFBE, 0xC10F, 0xC22D, 0xC307, 0xC38A,
++    0xC38B, 0xC308, 0xC22A, 0xC117, 0xBFF8, 0xBEF5, 0xBE35, 0xBDE1, 0xBE24, 0xBF0A, 0xC092, 0xC2B9,
++    0xC541, 0xC7E7, 0xCAA7, 0xCD7B, 0xD05E, 0xD34A, 0xD63A, 0xD928, 0xDC10, 0xDEEB, 0xE1B4, 0xE466,
++    0xE6FC, 0xE981, 0xEC02, 0xEE7D, 0xF0EF, 0xF355, 0xF5AD, 0xF7F2, 0xFA23, 0xFC3D, 0xFE3C, 0x001E,
++    0x01E0, 0x0394, 0x0549, 0x06F9, 0x089D, 0x0A30, 0x0BAB, 0x0D08, 0x0E40, 0x0F4E, 0x102A, 0x10D0,
++    0x1137, 0x115B, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF,
++    0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
++    0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
++    0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF,
++    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000,
++    0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF,
++    0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
++    0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF,
++    0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000,
++    0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000,
++    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
++    0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x3C70, 0x3CE6,
++    0x3E1E, 0x3FD9, 0x41D7, 0x43D8, 0x459C, 0x46E4, 0x4770, 0x4793, 0x47C1, 0x47ED, 0x480B, 0x480F,
++    0x47EB, 0x4793, 0x46FA, 0x4614, 0x44D4, 0x432D, 0x4113, 0x3E79, 0x3A5E, 0x343D, 0x2CC6, 0x24AC,
++    0x1C9C, 0x1549, 0x0F62, 0x0B97, 0x0CE3, 0x132E, 0x1A8E, 0x1F1A, 0x20D2, 0x2255, 0x23A7, 0x24CC,
++    0x25CA, 0x26A4, 0x275E, 0x27FD, 0x2885, 0x28FB, 0x2963, 0x29C2, 0x2A1A, 0x2A4E, 0x2A43, 0x2A06,
++    0x29A4, 0x292C, 0x28A9, 0x282A, 0x27BA, 0x2769, 0x2742, 0x2752, 0x27A8, 0x2852, 0x294B, 0x2A82,
++    0x2BE8, 0x2D6C, 0x2EFF, 0x3090, 0x3210, 0x336E, 0x349A, 0x3585, 0x361D, 0x3653, 0xFFFF, 0xFFFF,
++    0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF,
++    0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF,
++    0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
++    0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF,
++    0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF,
++    0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000,
++    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF,
++    0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF,
++    0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
++    0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF,
++    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000,
++    0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xD749, 0xD6C5, 0xD560,
++    0xD35A, 0xD0F0, 0xCE60, 0xCBE8, 0xC9C5, 0xC836, 0xC709, 0xC5E6, 0xC4CF, 0xC3C6, 0xC2CE, 0xC1E9,
++    0xC119, 0xC060, 0xBFC0, 0xBF3C, 0xBED7, 0xBE91, 0xBE6F, 0xBE8E, 0xBF01, 0xBFB7, 0xC09E, 0xC1A5,
++    0xC2BA, 0xC3CC, 0xC4C9, 0xC5A1, 0xC641, 0xC698, 0xC695, 0xC621, 0xC540, 0xC40B, 0xC296, 0xC0F9,
++    0xBF4B, 0xBDA3, 0xBC17, 0xBABE, 0xB9B0, 0xB901, 0xB8CB, 0xB923, 0xBA29, 0xBBD8, 0xBE13, 0xC0BB,
++    0xC3B1, 0xC6D6, 0xCA0C, 0xCD33, 0xD02E, 0xD2DE, 0xD524, 0xD6E1, 0xD833, 0xD951, 0xDA3F, 0xDB01,
++    0xDB9B, 0xDC12, 0xDC6C, 0xDCAB, 0xDCD4, 0xDCED, 0xDCF9, 0xDCFD, 0xFFFF, 0xFFFF, 0x0000, 0x0000,
++    0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF,
++    0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
++    0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF,
++    0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
++    0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
++    0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF,
++    0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000,
++    0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF,
++    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000,
++    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF,
++    0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000,
++    0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xBF5E, 0x0068, 0xFFFF, 0xFFF4, 0xFFD4, 0xFFA7,
++    0xFF72, 0xFF3B, 0xFF08, 0xFEE0, 0xFEC7, 0xFEBA, 0xFEB1, 0xFEAC, 0xFEAA, 0xFEAA, 0xFEAD, 0xFEB0,
++    0xFEB5, 0xFEBA, 0xFEBF, 0xFEC3, 0xFEC6, 0xFEC7, 0x8B50, 0x8C33, 0x8E99, 0x921E, 0x9660, 0x9AFB,
++    0x9F8D, 0xA3B1, 0xA705, 0xA9BE, 0xAC56, 0xAED1, 0xB136, 0xB387, 0xB5CA, 0xB803, 0xBA37, 0xBC6B,
++    0xBEA3, 0xC0E4, 0xC333, 0xC593, 0xC830, 0xCB14, 0xCE18, 0xD113, 0xD3DD, 0xD64D, 0xD83B, 0xD97F,
++    0xD909, 0xD6A5, 0xD373, 0xD094, 0xCE4A, 0xCC14, 0xC9EA, 0xC7C5, 0xC59C, 0xC368, 0xC120, 0xBEBD,
++    0xBC37, 0xB946, 0xB5F5, 0xB2B6, 0xAFFC, 0xADAA, 0xAB5B, 0xA90F, 0xA6C6, 0xA482, 0xA244, 0xA00C,
++    0x9DDD, 0x9BB6, 0x9999, 0x9786, 0x9580, 0x9366, 0x9121, 0x8EC1, 0x8C54, 0x89EA, 0x8790, 0x8557,
++    0x834D, 0x8180, 0x8001, 0x7EDC, 0x7E21, 0x7DE0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
++    0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
++    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000,
++    0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
++    0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF,
++    0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000,
++    0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000,
++    0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
++    0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF,
++    0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF,
++    0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000,
++    0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF,
++    0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x1B99, 0x1BF7, 0x1CF1, 0x1E56, 0x1FF5, 0x219B,
++    0x2317, 0x2439, 0x24CE, 0x24E3, 0x24AF, 0x243F, 0x23A6, 0x22F1, 0x2230, 0x2173, 0x20CA, 0x2043,
++    0x1FEF, 0x1FDC, 0x201B, 0x20BB, 0x220F, 0x2439, 0x2700, 0x2A2A, 0x2D7E, 0x30C2, 0x33BE, 0x3638,
++    0x3816, 0x3981, 0x3AA1, 0x3B9F, 0x3C9D, 0x3D9F, 0x3EA1, 0x3FA1, 0x409D, 0x4191, 0x427C, 0x435B,
++    0x442A, 0x44E8, 0x4592, 0x4625, 0x469F, 0x471F, 0x47BC, 0x4866, 0x490C, 0x499F, 0x4A0E, 0x4A49,
++    0x4A41, 0x49E5, 0x4924, 0x47F0, 0x4637, 0x43AC, 0x402F, 0x3BF2, 0x3728, 0x3206, 0x2CBE, 0x2784,
++    0x228B, 0x1E07, 0x1A2A, 0x1728, 0x1534, 0x1482, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000,
++    0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF,
++    0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF,
++    0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000,
++    0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000,
++    0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000,
++    0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000,
++    0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000,
++    0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000,
++    0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF,
++    0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
++    0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
++    0x0000, 0x0000, 0xFFFF, 0x0000, 0xC352, 0xC360, 0xC388, 0xC3CA, 0xC427, 0xC49D, 0xC52C, 0xC5D4,
++    0xC695, 0xC76D, 0xC859, 0xC957, 0xCA62, 0xCB77, 0xCC94, 0xCDB4, 0xCED4, 0xCFF2, 0xD109, 0xD216,
++    0xD317, 0xD407, 0xD4E3, 0xD5AC, 0xD665, 0xD70F, 0xD7AF, 0xD846, 0xD8D8, 0xD966, 0xDA6D, 0xDBB6,
++    0xDC3B, 0xDAF4, 0xD825, 0xD4D5, 0xD120, 0xCD24, 0xC8FE, 0xC4CA, 0xC0A5, 0xBCAC, 0xB8FD, 0xB5B3,
++    0xB2ED, 0xB0C6, 0xAF5C, 0xAED0, 0xAF1A, 0xB017, 0xB1A3, 0xB39C, 0xB5DD, 0xB845, 0xBAAF, 0xBCF8,
++    0xBEFE, 0xC09D, 0xC1B1, 0xC25B, 0xC2D7, 0xC329, 0xC357, 0xC369, 0xC362, 0xC349, 0xC325, 0xC2F9,
++    0xC2CE, 0xC2A7, 0xC28C, 0xC282,
+ };
+ 
diff --git a/data/behavior_data.c b/data/behavior_data.c
index 9d11492..0b04ca9 100644
--- a/data/behavior_data.c
+++ b/data/behavior_data.c
@@ -3229,6 +3229,46 @@ const BehaviorScript bhvSparkleParticleSpawner[] = {
     DEACTIVATE(),
 };
 
+
+const BehaviorScript bhvRainbowTrailParticleSpawner[] = {
+    BEGIN(OBJ_LIST_DEFAULT),
+    PARENT_BIT_CLEAR(oActiveParticleFlags, ACTIVE_PARTICLE_RAINBOW_TRAIL),
+    BEGIN(OBJ_LIST_UNIMPORTANT),
+    BILLBOARD(),
+    OR_INT(oFlags, OBJ_FLAG_UPDATE_GFX_POS_AND_ANGLE),
+    SET_FLOAT(oGraphYOffset, 60),
+   // SCALE(/*Unused*/ 0, /*Field*/ 150),
+    //SET_RANDOM_FLOAT(oMarioParticleFlags, /*Minimum*/ -0, /*Range*/ 0),
+   // SUM_FLOAT(/*Dest*/ oPosX, /*Value 1*/ oPosX, /*Value 2*/ oMarioParticleFlags),
+    //SET_INT(oAnimState, -1),
+    BEGIN_REPEAT(6),
+   // CALL_NATIVE(bhv_rainbow_trail_loop),
+    END_REPEAT(),
+    DEACTIVATE(),
+};
+
+const BehaviorScript bhvCurseParticleSpawner[] = {
+    BEGIN(OBJ_LIST_DEFAULT),
+    PARENT_BIT_CLEAR(oActiveParticleFlags, ACTIVE_PARTICLE_RAINBOW_TRAIL),
+    BEGIN(OBJ_LIST_UNIMPORTANT),
+    BILLBOARD(),
+    OR_INT(oFlags, OBJ_FLAG_UPDATE_GFX_POS_AND_ANGLE),
+    SET_FLOAT(oGraphYOffset, 60),
+    SCALE(/*Unused*/ 0, /*Field*/ 18),
+    SET_RANDOM_FLOAT(oMarioParticleFlags, /*Minimum*/ -50, /*Range*/ 100),
+    SUM_FLOAT(/*Dest*/ oPosX, /*Value 1*/ oPosX, /*Value 2*/ oMarioParticleFlags),
+    SET_RANDOM_FLOAT(oMarioParticleFlags, /*Minimum*/ -50, /*Range*/ 100),
+    SUM_FLOAT(/*Dest*/ oPosZ, /*Value 1*/ oPosZ, /*Value 2*/ oMarioParticleFlags),
+    SET_RANDOM_FLOAT(oMarioParticleFlags, /*Minimum*/ -50, /*Range*/ 100),
+    SUM_FLOAT(/*Dest*/ oPosY, /*Value 1*/ oPosY, /*Value 2*/ oMarioParticleFlags),
+    // SET_INT(oAnimState, -1),
+    BEGIN_REPEAT(4),
+    // CALL_NATIVE(bhv_rainbow_trail_loop),
+    END_REPEAT(),
+    DEACTIVATE(),
+};
+
+
 const BehaviorScript bhvScuttlebug[] = {
     BEGIN(OBJ_LIST_GENACTOR),
     OR_INT(oFlags, (OBJ_FLAG_COMPUTE_DIST_TO_MARIO | OBJ_FLAG_SET_FACE_YAW_TO_MOVE_YAW | OBJ_FLAG_UPDATE_GFX_POS_AND_ANGLE)),
@@ -6107,3 +6147,40 @@ const BehaviorScript bhvIntroScene[] = {
 };
 
 
+const BehaviorScript bhvRainbowStar[] = {
+    BEGIN(OBJ_LIST_LEVEL),
+    OR_INT(oFlags, (OBJ_FLAG_COMPUTE_ANGLE_TO_MARIO | OBJ_FLAG_UPDATE_GFX_POS_AND_ANGLE)),
+    CALL_NATIVE(bhv_rainbow_star_init),
+    BEGIN_LOOP(),
+        CALL_NATIVE(bhv_rainbow_star_loop),
+    END_LOOP(),
+};
+
+
+const BehaviorScript bhvSkipsqueak[] = {
+    BEGIN(OBJ_LIST_PUSHABLE),
+    OR_INT(oFlags, (OBJ_FLAG_COMPUTE_ANGLE_TO_MARIO | OBJ_FLAG_COMPUTE_DIST_TO_MARIO
+                    | OBJ_FLAG_SET_FACE_YAW_TO_MOVE_YAW | OBJ_FLAG_UPDATE_GFX_POS_AND_ANGLE)),
+    DROP_TO_FLOOR(),
+    LOAD_ANIMATIONS(oAnimations, skipsqueak_anims),
+    SET_HOME(),
+    CALL_NATIVE(bhv_skipsqueak_init),
+    BEGIN_LOOP(),
+    CALL_NATIVE(bhv_skipsqueak_update),
+    END_LOOP(),
+};
+
+
+const BehaviorScript bhvCursya[] = {
+    BEGIN(OBJ_LIST_PUSHABLE),
+    OR_INT(oFlags, (OBJ_FLAG_COMPUTE_ANGLE_TO_MARIO | OBJ_FLAG_COMPUTE_DIST_TO_MARIO
+                    | OBJ_FLAG_SET_FACE_YAW_TO_MOVE_YAW | OBJ_FLAG_UPDATE_GFX_POS_AND_ANGLE)),
+    DROP_TO_FLOOR(),
+    LOAD_ANIMATIONS(oAnimations, cursya_anims),
+    SET_HOME(),
+    CALL_NATIVE(bhv_cursya_init),
+    BEGIN_LOOP(),
+    CALL_NATIVE(bhv_cursya_update),
+    END_LOOP(),
+};
+
diff --git a/data/behavior_data.c.rej b/data/behavior_data.c.rej
new file mode 100644
index 0000000..197af52
--- /dev/null
+++ b/data/behavior_data.c.rej
@@ -0,0 +1,48 @@
+diff a/data/behavior_data.c b/data/behavior_data.c	(rejected hunks)
+@@ -3229,6 +3229,46 @@ const BehaviorScript bhvSparkleParticleSpawner[] = {
+     DEACTIVATE(),
+ };
+ 
++
++const BehaviorScript bhvRainbowTrailParticleSpawner[] = {
++    BEGIN(OBJ_LIST_DEFAULT),
++    PARENT_BIT_CLEAR(oActiveParticleFlags, ACTIVE_PARTICLE_RAINBOW_TRAIL),
++    BEGIN(OBJ_LIST_UNIMPORTANT),
++    BILLBOARD(),
++    OR_INT(oFlags, OBJ_FLAG_UPDATE_GFX_POS_AND_ANGLE),
++    SET_FLOAT(oGraphYOffset, 60),
++   // SCALE(/*Unused*/ 0, /*Field*/ 150),
++    //SET_RANDOM_FLOAT(oMarioParticleFlags, /*Minimum*/ -0, /*Range*/ 0),
++   // SUM_FLOAT(/*Dest*/ oPosX, /*Value 1*/ oPosX, /*Value 2*/ oMarioParticleFlags),
++    //SET_INT(oAnimState, -1),
++    BEGIN_REPEAT(6),
++   // CALL_NATIVE(bhv_rainbow_trail_loop),
++    END_REPEAT(),
++    DEACTIVATE(),
++};
++
++const BehaviorScript bhvCurseParticleSpawner[] = {
++    BEGIN(OBJ_LIST_DEFAULT),
++    PARENT_BIT_CLEAR(oActiveParticleFlags, ACTIVE_PARTICLE_RAINBOW_TRAIL),
++    BEGIN(OBJ_LIST_UNIMPORTANT),
++    BILLBOARD(),
++    OR_INT(oFlags, OBJ_FLAG_UPDATE_GFX_POS_AND_ANGLE),
++    SET_FLOAT(oGraphYOffset, 60),
++    SCALE(/*Unused*/ 0, /*Field*/ 18),
++    SET_RANDOM_FLOAT(oMarioParticleFlags, /*Minimum*/ -50, /*Range*/ 100),
++    SUM_FLOAT(/*Dest*/ oPosX, /*Value 1*/ oPosX, /*Value 2*/ oMarioParticleFlags),
++    SET_RANDOM_FLOAT(oMarioParticleFlags, /*Minimum*/ -50, /*Range*/ 100),
++    SUM_FLOAT(/*Dest*/ oPosZ, /*Value 1*/ oPosZ, /*Value 2*/ oMarioParticleFlags),
++    SET_RANDOM_FLOAT(oMarioParticleFlags, /*Minimum*/ -50, /*Range*/ 100),
++    SUM_FLOAT(/*Dest*/ oPosY, /*Value 1*/ oPosY, /*Value 2*/ oMarioParticleFlags),
++    // SET_INT(oAnimState, -1),
++    BEGIN_REPEAT(4),
++    // CALL_NATIVE(bhv_rainbow_trail_loop),
++    END_REPEAT(),
++    DEACTIVATE(),
++};
++
++
+ const BehaviorScript bhvScuttlebug[] = {
+     BEGIN(OBJ_LIST_GENACTOR),
+     OR_INT(oFlags, (OBJ_FLAG_COMPUTE_DIST_TO_MARIO | OBJ_FLAG_SET_FACE_YAW_TO_MOVE_YAW | OBJ_FLAG_UPDATE_GFX_POS_AND_ANGLE)),
diff --git a/include/behavior_data.h b/include/behavior_data.h
index 7acb330..75fc3c0 100644
--- a/include/behavior_data.h
+++ b/include/behavior_data.h
@@ -542,5 +542,9 @@ extern const BehaviorScript bhvEndBirds1[];
 extern const BehaviorScript bhvEndBirds2[];
 extern const BehaviorScript bhvIntroScene[];
 extern const BehaviorScript bhvUnusedFakeStar[];
-
+extern const BehaviorScript bhvRainbowStar[];
+extern const BehaviorScript bhvRainbowTrailParticleSpawner[];
+extern const BehaviorScript bhvCurseParticleSpawner[];
+extern const BehaviorScript bhvSkipsqueak[];
+extern const BehaviorScript bhvCursya[];
 #endif // BEHAVIOR_DATA_H
diff --git a/include/behavior_data.h.rej b/include/behavior_data.h.rej
new file mode 100644
index 0000000..ceb34a4
--- /dev/null
+++ b/include/behavior_data.h.rej
@@ -0,0 +1,12 @@
+diff a/include/behavior_data.h b/include/behavior_data.h	(rejected hunks)
+@@ -542,5 +542,9 @@ extern const BehaviorScript bhvEndBirds1[];
+ extern const BehaviorScript bhvEndBirds2[];
+ extern const BehaviorScript bhvIntroScene[];
+ extern const BehaviorScript bhvUnusedFakeStar[];
+-
++extern const BehaviorScript bhvRainbowStar[];
++extern const BehaviorScript bhvRainbowTrailParticleSpawner[];
++extern const BehaviorScript bhvCurseParticleSpawner[];
++extern const BehaviorScript bhvSkipsqueak[];
++extern const BehaviorScript bhvCursya[];
+ #endif // BEHAVIOR_DATA_H
diff --git a/include/model_ids.h b/include/model_ids.h
index 1cd0a25..9b97567 100644
--- a/include/model_ids.h
+++ b/include/model_ids.h
@@ -563,6 +563,23 @@
 #define MODEL_CHUCKYA                     0xDF        // chuckya_geo
 #define MODEL_WHITE_PUFF                  0xE0        // white_puff_geo
 #define MODEL_TRAJECTORY_MARKER_BALL          0xE1        // bowling_ball_track_geo - duplicate used in SSL Pyramid small sized and as a track ball
+#define MODEL_RAINBOW_STAR                0xE2        // rainbow_star_geo
+#define MODEL_RAINBOW_TRAIL                0xE3        // rainbow_trail_geo
+#define MODEL_BLUE_RAINBOW_TRAIL                0xE4        // blue_trail_geo
+#define MODEL_GREEN_RAINBOW_TRAIL 0xE5                  // green_trail_geo
+#define MODEL_WHITE_RAINBOW_TRAIL 0xE6                      // white_trail_geo
+#define MODEL_YELLOW_RAINBOW_TRAIL 0xE7                  // yellow_trail_geo
+#define MODEL_CYAN_RAINBOW_TRAIL 0xE8                      // white_trail_geo
+#define MODEL_PINK_RAINBOW_TRAIL 0xE9                     // yellow_trail_geo
+#define MODEL_SKIPSQUEAK 0xEA                      // skipsqueak_geo
+#define MODEL_SPINY_SKIPSQUEAK 0xEB                             // spiny_skipsqueak_geo
+#define MODEL_CURSYA_BACK 0xEC                // cursya_geo
+#define MODEL_CURSYA_NORMAL 0xED                // cursya_cyan_geo
+#define MODEL_CURSYA_REVERSE 0xEE                // cursya_yellow_geo
+#define MODEL_CURSYA_TECH 0xEF                // cursya_purple_geo
+#define MODEL_CURSYA_HEAVY 0xF0                // cursya_red_geo
+#define MODEL_CURSYA_CRASH 0xF1                // cursya_blue_geo
+
 
 // Menu Models (overwrites Level Geometry IDs)
 #define MODEL_MAIN_MENU_MARIO_SAVE_BUTTON         MODEL_LEVEL_GEOMETRY_03   // main_menu_geo_0001D0
diff --git a/include/model_ids.h.rej b/include/model_ids.h.rej
new file mode 100644
index 0000000..ca47c2f
--- /dev/null
+++ b/include/model_ids.h.rej
@@ -0,0 +1,25 @@
+diff a/include/model_ids.h b/include/model_ids.h	(rejected hunks)
+@@ -563,6 +563,23 @@
+ #define MODEL_CHUCKYA                     0xDF        // chuckya_geo
+ #define MODEL_WHITE_PUFF                  0xE0        // white_puff_geo
+ #define MODEL_TRAJECTORY_MARKER_BALL          0xE1        // bowling_ball_track_geo - duplicate used in SSL Pyramid small sized and as a track ball
++#define MODEL_RAINBOW_STAR                0xE2        // rainbow_star_geo
++#define MODEL_RAINBOW_TRAIL                0xE3        // rainbow_trail_geo
++#define MODEL_BLUE_RAINBOW_TRAIL                0xE4        // blue_trail_geo
++#define MODEL_GREEN_RAINBOW_TRAIL 0xE5                  // green_trail_geo
++#define MODEL_WHITE_RAINBOW_TRAIL 0xE6                      // white_trail_geo
++#define MODEL_YELLOW_RAINBOW_TRAIL 0xE7                  // yellow_trail_geo
++#define MODEL_CYAN_RAINBOW_TRAIL 0xE8                      // white_trail_geo
++#define MODEL_PINK_RAINBOW_TRAIL 0xE9                     // yellow_trail_geo
++#define MODEL_SKIPSQUEAK 0xEA                      // skipsqueak_geo
++#define MODEL_SPINY_SKIPSQUEAK 0xEB                             // spiny_skipsqueak_geo
++#define MODEL_CURSYA_BACK 0xEC                // cursya_geo
++#define MODEL_CURSYA_NORMAL 0xED                // cursya_cyan_geo
++#define MODEL_CURSYA_REVERSE 0xEE                // cursya_yellow_geo
++#define MODEL_CURSYA_TECH 0xEF                // cursya_purple_geo
++#define MODEL_CURSYA_HEAVY 0xF0                // cursya_red_geo
++#define MODEL_CURSYA_CRASH 0xF1                // cursya_blue_geo
++
+ 
+ // Menu Models (overwrites Level Geometry IDs)
+ #define MODEL_MAIN_MENU_MARIO_SAVE_BUTTON         MODEL_LEVEL_GEOMETRY_03   // main_menu_geo_0001D0
diff --git a/include/object_constants.h b/include/object_constants.h
index 95f5ce5..7e8127b 100644
--- a/include/object_constants.h
+++ b/include/object_constants.h
@@ -18,7 +18,10 @@
 #define ACTIVE_FLAG_UNK9                   (1 <<  9) // 0x0200
 #define ACTIVE_FLAG_UNK10                  (1 << 10) // 0x0400
 
-
+//rainbow star
+Gfx *set_switch_color(s32 run, struct GraphNode *node, UNUSED void *context);
+// rainbow star
+Gfx *set_switch_color_cursya(s32 run, struct GraphNode *node, UNUSED void *context);
 /* respawnInfoType */
 #define RESPAWN_INFO_TYPE_NULL 0
 #define RESPAWN_INFO_TYPE_32   1
@@ -118,6 +121,7 @@
 #define ACTIVE_PARTICLE_BREATH               (1 << 17) // 0x00020000
 #define ACTIVE_PARTICLE_V_STAR               (1 << 18) // 0x00040000
 #define ACTIVE_PARTICLE_TRIANGLE             (1 << 19) // 0x00080000
+#define ACTIVE_PARTICLE_RAINBOW_TRAIL               (1 << 20) // 0x00120000
 
 /* oAction */
 #define OBJ_ACT_LAVA_DEATH 100
@@ -517,6 +521,14 @@
     #define GOOMBA_ACT_ATTACKED_MARIO 1
     #define GOOMBA_ACT_JUMP 2
 
+/* Skipsqueak */
+#define SKIPSQUEAK_ACT_IDLE 0
+#define SKIPSQUEAK_ACT_JUMP 2
+
+/* CURSYA */
+#define CURSYA_ACT_WANDER 0
+#define CURSYA_ACT_SHAKE 1
+
 /* Chain chomp */
     /* oAction */
     #define CHAIN_CHOMP_ACT_UNINITIALIZED 0
diff --git a/include/object_constants.h.rej b/include/object_constants.h.rej
new file mode 100644
index 0000000..9d91bc1
--- /dev/null
+++ b/include/object_constants.h.rej
@@ -0,0 +1,36 @@
+diff a/include/object_constants.h b/include/object_constants.h	(rejected hunks)
+@@ -18,7 +18,10 @@
+ #define ACTIVE_FLAG_UNK9                   (1 <<  9) // 0x0200
+ #define ACTIVE_FLAG_UNK10                  (1 << 10) // 0x0400
+ 
+-
++//rainbow star
++Gfx *set_switch_color(s32 run, struct GraphNode *node, UNUSED void *context);
++// rainbow star
++Gfx *set_switch_color_cursya(s32 run, struct GraphNode *node, UNUSED void *context);
+ /* respawnInfoType */
+ #define RESPAWN_INFO_TYPE_NULL 0
+ #define RESPAWN_INFO_TYPE_32   1
+@@ -118,6 +121,7 @@
+ #define ACTIVE_PARTICLE_BREATH               (1 << 17) // 0x00020000
+ #define ACTIVE_PARTICLE_V_STAR               (1 << 18) // 0x00040000
+ #define ACTIVE_PARTICLE_TRIANGLE             (1 << 19) // 0x00080000
++#define ACTIVE_PARTICLE_RAINBOW_TRAIL               (1 << 20) // 0x00120000
+ 
+ /* oAction */
+ #define OBJ_ACT_LAVA_DEATH 100
+@@ -517,6 +521,14 @@
+     #define GOOMBA_ACT_ATTACKED_MARIO 1
+     #define GOOMBA_ACT_JUMP 2
+ 
++/* Skipsqueak */
++#define SKIPSQUEAK_ACT_IDLE 0
++#define SKIPSQUEAK_ACT_JUMP 2
++
++/* CURSYA */
++#define CURSYA_ACT_WANDER 0
++#define CURSYA_ACT_SHAKE 1
++
+ /* Chain chomp */
+     /* oAction */
+     #define CHAIN_CHOMP_ACT_UNINITIALIZED 0
diff --git a/include/object_fields.h b/include/object_fields.h
index 89939cc..806a83c 100644
--- a/include/object_fields.h
+++ b/include/object_fields.h
@@ -7,44 +7,44 @@
  */
 
 #ifdef OBJECT_FIELDS_INDEX_DIRECTLY
-#define OBJECT_FIELD_U32(index)           index
-#define OBJECT_FIELD_S32(index)           index
+#define OBJECT_FIELD_U32(index) index
+#define OBJECT_FIELD_S32(index) index
 #define OBJECT_FIELD_S16(index, subIndex) index
-#define OBJECT_FIELD_F32(index)           index
-#define OBJECT_FIELD_S16P(index)          index
-#define OBJECT_FIELD_S32P(index)          index
-#define OBJECT_FIELD_ANIMS(index)         index
-#define OBJECT_FIELD_WAYPOINT(index)      index
+#define OBJECT_FIELD_F32(index) index
+#define OBJECT_FIELD_S16P(index) index
+#define OBJECT_FIELD_S32P(index) index
+#define OBJECT_FIELD_ANIMS(index) index
+#define OBJECT_FIELD_WAYPOINT(index) index
 #define OBJECT_FIELD_CHAIN_SEGMENT(index) index
-#define OBJECT_FIELD_OBJ(index)           index
-#define OBJECT_FIELD_SURFACE(index)       index
-#define OBJECT_FIELD_VPTR(index)          index
-#define OBJECT_FIELD_CVPTR(index)         index
+#define OBJECT_FIELD_OBJ(index) index
+#define OBJECT_FIELD_SURFACE(index) index
+#define OBJECT_FIELD_VPTR(index) index
+#define OBJECT_FIELD_CVPTR(index) index
 #else
-#define OBJECT_FIELD_U32(index)           rawData.asU32[index]
-#define OBJECT_FIELD_S32(index)           rawData.asS32[index]
+#define OBJECT_FIELD_U32(index) rawData.asU32[index]
+#define OBJECT_FIELD_S32(index) rawData.asS32[index]
 #define OBJECT_FIELD_S16(index, subIndex) rawData.asS16[index][subIndex]
-#define OBJECT_FIELD_F32(index)           rawData.asF32[index]
+#define OBJECT_FIELD_F32(index) rawData.asF32[index]
 #if !IS_64_BIT
-#define OBJECT_FIELD_S16P(index)          rawData.asS16P[index]
-#define OBJECT_FIELD_S32P(index)          rawData.asS32P[index]
-#define OBJECT_FIELD_ANIMS(index)         rawData.asAnims[index]
-#define OBJECT_FIELD_WAYPOINT(index)      rawData.asWaypoint[index]
+#define OBJECT_FIELD_S16P(index) rawData.asS16P[index]
+#define OBJECT_FIELD_S32P(index) rawData.asS32P[index]
+#define OBJECT_FIELD_ANIMS(index) rawData.asAnims[index]
+#define OBJECT_FIELD_WAYPOINT(index) rawData.asWaypoint[index]
 #define OBJECT_FIELD_CHAIN_SEGMENT(index) rawData.asChainSegment[index]
-#define OBJECT_FIELD_OBJ(index)           rawData.asObject[index]
-#define OBJECT_FIELD_SURFACE(index)       rawData.asSurface[index]
-#define OBJECT_FIELD_VPTR(index)          rawData.asVoidPtr[index]
-#define OBJECT_FIELD_CVPTR(index)         rawData.asConstVoidPtr[index]
+#define OBJECT_FIELD_OBJ(index) rawData.asObject[index]
+#define OBJECT_FIELD_SURFACE(index) rawData.asSurface[index]
+#define OBJECT_FIELD_VPTR(index) rawData.asVoidPtr[index]
+#define OBJECT_FIELD_CVPTR(index) rawData.asConstVoidPtr[index]
 #else
-#define OBJECT_FIELD_S16P(index)          ptrData.asS16P[index]
-#define OBJECT_FIELD_S32P(index)          ptrData.asS32P[index]
-#define OBJECT_FIELD_ANIMS(index)         ptrData.asAnims[index]
-#define OBJECT_FIELD_WAYPOINT(index)      ptrData.asWaypoint[index]
+#define OBJECT_FIELD_S16P(index) ptrData.asS16P[index]
+#define OBJECT_FIELD_S32P(index) ptrData.asS32P[index]
+#define OBJECT_FIELD_ANIMS(index) ptrData.asAnims[index]
+#define OBJECT_FIELD_WAYPOINT(index) ptrData.asWaypoint[index]
 #define OBJECT_FIELD_CHAIN_SEGMENT(index) ptrData.asChainSegment[index]
-#define OBJECT_FIELD_OBJ(index)           ptrData.asObject[index]
-#define OBJECT_FIELD_SURFACE(index)       ptrData.asSurface[index]
-#define OBJECT_FIELD_VPTR(index)          ptrData.asVoidPtr[index]
-#define OBJECT_FIELD_CVPTR(index)         ptrData.asConstVoidPtr[index]
+#define OBJECT_FIELD_OBJ(index) ptrData.asObject[index]
+#define OBJECT_FIELD_SURFACE(index) ptrData.asSurface[index]
+#define OBJECT_FIELD_VPTR(index) ptrData.asVoidPtr[index]
+#define OBJECT_FIELD_CVPTR(index) ptrData.asConstVoidPtr[index]
 #endif
 #endif
 
@@ -134,6 +134,10 @@
 #define /*0x1BC*/ oAngleToHome                OBJECT_FIELD_S32(0x4D)
 #define /*0x1C0*/ oFloor                      OBJECT_FIELD_SURFACE(0x4E)
 #define /*0x1C4*/ oDeathSound                 OBJECT_FIELD_S32(0x4F)
+//rainbow star
+#define /*0x1C5*/ oRed			      OBJECT_FIELD_S32(0x1B)
+#define /*0x1C5*/ oGreen			      OBJECT_FIELD_S32(0x1C)
+#define /*0x1C5*/ oBlue			      OBJECT_FIELD_S32(0x1D)
 
 /* Pathed (see obj_follow_path) */
 #define /*0x0FC*/ oPathedStartWaypoint     OBJECT_FIELD_WAYPOINT(0x1D)
@@ -164,6 +168,9 @@
 #define /*0x110*/ oMarioLongJumpIsSlow   OBJECT_FIELD_S32(0x22)
 #define /*0x110*/ oMarioSteepJumpYaw     OBJECT_FIELD_S32(0x22)
 #define /*0x110*/ oMarioWalkingPitch     OBJECT_FIELD_S32(0x22)
+#define /*0x110*/ oRainbowColorCounter    OBJECT_FIELD_S32(0x1E)                                                                  
+                                                                                                     
+
 
 /* 1-Up Hidden */
 #define /*0x0F4*/ o1UpHiddenUnkF4 OBJECT_FIELD_S32(0x1B)
@@ -1157,4 +1164,14 @@
 #define /*0x0FC*/ oYoshiChosenHome OBJECT_FIELD_S32(0x1D)
 #define /*0x100*/ oYoshiTargetYaw  OBJECT_FIELD_S32(0x1E)
 
+//skipsqueak
+#define /*0x0F4*/ oSkipsqueakJump OBJECT_FIELD_S32(0x1D)
+
+
+// cursya
+#define /*0x0F4*/ oCursyaScale OBJECT_FIELD_F32(0x21)
+#define /*0x100*/ oCursyaScaleDirection OBJECT_FIELD_F32(0x22)
+#define /*0x0F4*/ oCursyaTimer OBJECT_FIELD_S32(0x23)
+
+
 #endif // OBJECT_FIELDS_H
diff --git a/include/object_fields.h.rej b/include/object_fields.h.rej
new file mode 100644
index 0000000..ac6ac8e
--- /dev/null
+++ b/include/object_fields.h.rej
@@ -0,0 +1,37 @@
+diff a/include/object_fields.h b/include/object_fields.h	(rejected hunks)
+@@ -134,6 +134,10 @@
+ #define /*0x1BC*/ oAngleToHome                OBJECT_FIELD_S32(0x4D)
+ #define /*0x1C0*/ oFloor                      OBJECT_FIELD_SURFACE(0x4E)
+ #define /*0x1C4*/ oDeathSound                 OBJECT_FIELD_S32(0x4F)
++//rainbow star
++#define /*0x1C5*/ oRed			      OBJECT_FIELD_S32(0x1B)
++#define /*0x1C5*/ oGreen			      OBJECT_FIELD_S32(0x1C)
++#define /*0x1C5*/ oBlue			      OBJECT_FIELD_S32(0x1D)
+ 
+ /* Pathed (see obj_follow_path) */
+ #define /*0x0FC*/ oPathedStartWaypoint     OBJECT_FIELD_WAYPOINT(0x1D)
+@@ -164,6 +168,9 @@
+ #define /*0x110*/ oMarioLongJumpIsSlow   OBJECT_FIELD_S32(0x22)
+ #define /*0x110*/ oMarioSteepJumpYaw     OBJECT_FIELD_S32(0x22)
+ #define /*0x110*/ oMarioWalkingPitch     OBJECT_FIELD_S32(0x22)
++#define /*0x110*/ oRainbowColorCounter    OBJECT_FIELD_S32(0x1E)                                                                  
++                                                                                                     
++
+ 
+ /* 1-Up Hidden */
+ #define /*0x0F4*/ o1UpHiddenUnkF4 OBJECT_FIELD_S32(0x1B)
+@@ -1157,4 +1164,14 @@
+ #define /*0x0FC*/ oYoshiChosenHome OBJECT_FIELD_S32(0x1D)
+ #define /*0x100*/ oYoshiTargetYaw  OBJECT_FIELD_S32(0x1E)
+ 
++//skipsqueak
++#define /*0x0F4*/ oSkipsqueakJump OBJECT_FIELD_S32(0x1D)
++
++
++// cursya
++#define /*0x0F4*/ oCursyaScale OBJECT_FIELD_F32(0x21)
++#define /*0x100*/ oCursyaScaleDirection OBJECT_FIELD_F32(0x22)
++#define /*0x0F4*/ oCursyaTimer OBJECT_FIELD_S32(0x23)
++
++
+ #endif // OBJECT_FIELDS_H
diff --git a/include/segments.h b/include/segments.h
index a8c1bf9..0faa6dc 100644
--- a/include/segments.h
+++ b/include/segments.h
@@ -11,6 +11,7 @@
  * linker script syntax.
 */
 
+#define USE_EXT_RAM
 #ifndef USE_EXT_RAM /* Default: Runs out of memory quickly when importing custom assets. */
 
 #define SEG_POOL_START   0x8005C000
diff --git a/include/segments.h.rej b/include/segments.h.rej
new file mode 100644
index 0000000..c67ab7e
--- /dev/null
+++ b/include/segments.h.rej
@@ -0,0 +1,9 @@
+diff a/include/segments.h b/include/segments.h	(rejected hunks)
+@@ -11,6 +11,7 @@
+  * linker script syntax.
+ */
+ 
++#define USE_EXT_RAM
+ #ifndef USE_EXT_RAM /* Default: Runs out of memory quickly when importing custom assets. */
+ 
+ #define SEG_POOL_START   0x8005C000
diff --git a/include/sm64.h b/include/sm64.h
index 34bfec2..ebd68e8 100644
--- a/include/sm64.h
+++ b/include/sm64.h
@@ -108,9 +108,21 @@
 #define PARTICLE_BREATH               /* 0x00020000 */ (1 << 17)
 #define PARTICLE_TRIANGLE             /* 0x00040000 */ (1 << 18)
 #define PARTICLE_19                   /* 0x00080000 */ (1 << 19)
+#define PARTICLE_RAINBOW_TRAIL /* 0x00120000 */ (1 << 20)
+#define PARTICLE_BLUE_RAINBOW_TRAIL /* 0x00120000 */ (1 << 21)
+#define PARTICLE_GREEN_RAINBOW_TRAIL /* 0x00120000 */ (1 << 22)
+#define PARTICLE_WHITE_RAINBOW_TRAIL /* 0x00120000 */ (1 << 23)
+#define PARTICLE_YELLOW_RAINBOW_TRAIL /* 0x00120000 */ (1 << 24)
+#define PARTICLE_CYAN_RAINBOW_TRAIL /* 0x00120000 */ (1 << 25)
+#define PARTICLE_PINK_RAINBOW_TRAIL /* 0x00120000 */ (1 << 26)
+#define PARTICLE_TECH_CURSE /* 0x00120000 */ (1 << 27)
+#define PARTICLE_SLOW_CURSE /* 0x00120000 */ (1 << 28)
+#define PARTICLE_HEAVY_CURSE /* 0x00120000 */ (1 << 29)
+#define PARTICLE_REVERSE_CURSE /* 0x00120000 */ (1 << 30)
 
 #define MODEL_STATE_NOISE_ALPHA 0x180
 #define MODEL_STATE_METAL       0x200
+#define MODEL_STATE_RAINBOW     0x400
 
 #define MARIO_NORMAL_CAP                0x00000001
 #define MARIO_VANISH_CAP                0x00000002
@@ -121,6 +133,10 @@
 #define MARIO_METAL_SHOCK               0x00000040
 #define MARIO_TELEPORTING               0x00000080
 #define MARIO_UNKNOWN_08                0x00000100
+#define MARIO_RAINBOW	                0x00000200
+#define MARIO_SLOW_CURSE                0x00000400
+#define MARIO_REVERSE                   0x00000800
+#define MARIO_TECH_CURSE                0x00001000
 #define MARIO_UNKNOWN_13                0x00002000
 #define MARIO_ACTION_SOUND_PLAYED       0x00010000
 #define MARIO_MARIO_SOUND_PLAYED        0x00020000
@@ -298,6 +314,7 @@
 #define ACT_GETTING_BLOWN              0x010208B8 // (0x0B8 | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
 #define ACT_THROWN_FORWARD             0x010208BD // (0x0BD | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
 #define ACT_THROWN_BACKWARD            0x010208BE // (0x0BE | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
+#define ACT_JUMP_RAINBOW               0x010208BF //
 
 // group 0x0C0: submerged actions
 #define ACT_WATER_IDLE                 0x380022C0 // (0x0C0 | ACT_FLAG_STATIONARY | ACT_FLAG_SWIMMING | ACT_FLAG_PAUSE_EXIT | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
diff --git a/include/sm64.h.rej b/include/sm64.h.rej
new file mode 100644
index 0000000..a653b2d
--- /dev/null
+++ b/include/sm64.h.rej
@@ -0,0 +1,42 @@
+diff a/include/sm64.h b/include/sm64.h	(rejected hunks)
+@@ -108,9 +108,21 @@
+ #define PARTICLE_BREATH               /* 0x00020000 */ (1 << 17)
+ #define PARTICLE_TRIANGLE             /* 0x00040000 */ (1 << 18)
+ #define PARTICLE_19                   /* 0x00080000 */ (1 << 19)
++#define PARTICLE_RAINBOW_TRAIL /* 0x00120000 */ (1 << 20)
++#define PARTICLE_BLUE_RAINBOW_TRAIL /* 0x00120000 */ (1 << 21)
++#define PARTICLE_GREEN_RAINBOW_TRAIL /* 0x00120000 */ (1 << 22)
++#define PARTICLE_WHITE_RAINBOW_TRAIL /* 0x00120000 */ (1 << 23)
++#define PARTICLE_YELLOW_RAINBOW_TRAIL /* 0x00120000 */ (1 << 24)
++#define PARTICLE_CYAN_RAINBOW_TRAIL /* 0x00120000 */ (1 << 25)
++#define PARTICLE_PINK_RAINBOW_TRAIL /* 0x00120000 */ (1 << 26)
++#define PARTICLE_TECH_CURSE /* 0x00120000 */ (1 << 27)
++#define PARTICLE_SLOW_CURSE /* 0x00120000 */ (1 << 28)
++#define PARTICLE_HEAVY_CURSE /* 0x00120000 */ (1 << 29)
++#define PARTICLE_REVERSE_CURSE /* 0x00120000 */ (1 << 30)
+ 
+ #define MODEL_STATE_NOISE_ALPHA 0x180
+ #define MODEL_STATE_METAL       0x200
++#define MODEL_STATE_RAINBOW     0x400
+ 
+ #define MARIO_NORMAL_CAP                0x00000001
+ #define MARIO_VANISH_CAP                0x00000002
+@@ -121,6 +133,10 @@
+ #define MARIO_METAL_SHOCK               0x00000040
+ #define MARIO_TELEPORTING               0x00000080
+ #define MARIO_UNKNOWN_08                0x00000100
++#define MARIO_RAINBOW	                0x00000200
++#define MARIO_SLOW_CURSE                0x00000400
++#define MARIO_REVERSE                   0x00000800
++#define MARIO_TECH_CURSE                0x00001000
+ #define MARIO_UNKNOWN_13                0x00002000
+ #define MARIO_ACTION_SOUND_PLAYED       0x00010000
+ #define MARIO_MARIO_SOUND_PLAYED        0x00020000
+@@ -298,6 +314,7 @@
+ #define ACT_GETTING_BLOWN              0x010208B8 // (0x0B8 | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
+ #define ACT_THROWN_FORWARD             0x010208BD // (0x0BD | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
+ #define ACT_THROWN_BACKWARD            0x010208BE // (0x0BE | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
++#define ACT_JUMP_RAINBOW               0x010208BF //
+ 
+ // group 0x0C0: submerged actions
+ #define ACT_WATER_IDLE                 0x380022C0 // (0x0C0 | ACT_FLAG_STATIONARY | ACT_FLAG_SWIMMING | ACT_FLAG_PAUSE_EXIT | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
diff --git a/include/types.h b/include/types.h
index c6e801e..535fc99 100644
--- a/include/types.h
+++ b/include/types.h
@@ -107,6 +107,7 @@ struct GraphNode
     /*0x08*/ struct GraphNode *next;
     /*0x0C*/ struct GraphNode *parent;
     /*0x10*/ struct GraphNode *children;
+
 };
 
 struct AnimInfo
@@ -126,6 +127,7 @@ struct GraphNodeObject
     /*0x14*/ struct GraphNode *sharedChild;
     /*0x18*/ s8 areaIndex;
     /*0x19*/ s8 activeAreaIndex;
+		
     /*0x1A*/ Vec3s angle;
     /*0x20*/ Vec3f pos;
     /*0x2C*/ Vec3f scale;
@@ -259,6 +261,7 @@ struct MarioBodyState
     /*0x12*/ Vec3s headAngle;
     /*0x18*/ Vec3f heldObjLastPosition; /// also known as HOLP
     u8 padding[4];
+    
 };
 
 struct OffsetSizePair
@@ -284,6 +287,7 @@ struct MarioAnimation
 
 struct MarioState
 {
+    
     /*0x00*/ u16 unk00;
     /*0x02*/ u16 input;
     /*0x04*/ u32 flags;
@@ -340,10 +344,13 @@ struct MarioState
     /*0xB4*/ u8 squishTimer;
     /*0xB5*/ u8 fadeWarpOpacity;
     /*0xB6*/ u16 capTimer;
+    /*cursya*/ u16 curseTimer;
     /*0xB8*/ s16 prevNumStarsForDialog;
     /*0xBC*/ f32 peakHeight;
     /*0xC0*/ f32 quicksandDepth;
     /*0xC4*/ f32 unkC4;
+    f32 jumpModifier;
+    
 };
 
 #endif // TYPES_H
diff --git a/include/types.h.rej b/include/types.h.rej
new file mode 100644
index 0000000..03c43e1
--- /dev/null
+++ b/include/types.h.rej
@@ -0,0 +1,47 @@
+diff a/include/types.h b/include/types.h	(rejected hunks)
+@@ -107,6 +107,7 @@ struct GraphNode
+     /*0x08*/ struct GraphNode *next;
+     /*0x0C*/ struct GraphNode *parent;
+     /*0x10*/ struct GraphNode *children;
++
+ };
+ 
+ struct AnimInfo
+@@ -126,6 +127,7 @@ struct GraphNodeObject
+     /*0x14*/ struct GraphNode *sharedChild;
+     /*0x18*/ s8 areaIndex;
+     /*0x19*/ s8 activeAreaIndex;
++		
+     /*0x1A*/ Vec3s angle;
+     /*0x20*/ Vec3f pos;
+     /*0x2C*/ Vec3f scale;
+@@ -259,6 +261,7 @@ struct MarioBodyState
+     /*0x12*/ Vec3s headAngle;
+     /*0x18*/ Vec3f heldObjLastPosition; /// also known as HOLP
+     u8 padding[4];
++    
+ };
+ 
+ struct OffsetSizePair
+@@ -284,6 +287,7 @@ struct MarioAnimation
+ 
+ struct MarioState
+ {
++    
+     /*0x00*/ u16 unk00;
+     /*0x02*/ u16 input;
+     /*0x04*/ u32 flags;
+@@ -340,10 +344,13 @@ struct MarioState
+     /*0xB4*/ u8 squishTimer;
+     /*0xB5*/ u8 fadeWarpOpacity;
+     /*0xB6*/ u16 capTimer;
++    /*cursya*/ u16 curseTimer;
+     /*0xB8*/ s16 prevNumStarsForDialog;
+     /*0xBC*/ f32 peakHeight;
+     /*0xC0*/ f32 quicksandDepth;
+     /*0xC4*/ f32 unkC4;
++    f32 jumpModifier;
++    
+ };
+ 
+ #endif // TYPES_H
diff --git a/levels/castle_grounds/script.c b/levels/castle_grounds/script.c
index 626bece..e31130a 100644
--- a/levels/castle_grounds/script.c
+++ b/levels/castle_grounds/script.c
@@ -57,8 +57,21 @@ static const LevelScript script_func_local_2[] = {
     OBJECT(/*model*/ MODEL_MIST,                        /*pos*/ -5527, -787, -4757, /*angle*/ 0,   0, 0, /*behParam*/ 0x00060000, /*beh*/ bhvWaterMist2),
     OBJECT(/*model*/ MODEL_MIST,                        /*pos*/ -5686, -787, -4733, /*angle*/ 0,   0, 0, /*behParam*/ 0x00070000, /*beh*/ bhvWaterMist2),
     OBJECT(/*model*/ MODEL_MIST,                        /*pos*/ -5845, -787, -4710, /*angle*/ 0,   0, 0, /*behParam*/ 0x00080000, /*beh*/ bhvWaterMist2),
+    OBJECT(/*model*/ MODEL_SKIPSQUEAK, /*pos*/ -1388, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00000000, /*beh*/ bhvSkipsqueak),
+    OBJECT(/*model*/ MODEL_SKIPSQUEAK, /*pos*/ -1688, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00010000, /*beh*/ bhvSkipsqueak),
+    OBJECT(/*model*/ MODEL_SPINY_SKIPSQUEAK, /*pos*/ -1988, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00020000, /*beh*/ bhvSkipsqueak),
+    OBJECT(/*model*/ MODEL_SPINY_SKIPSQUEAK, /*pos*/ -2188, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00030000, /*beh*/ bhvSkipsqueak),
+        OBJECT(/*model*/ MODEL_SPINY_SKIPSQUEAK, /*pos*/ -2288, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00030000, /*beh*/ bhvSkipsqueak),
+          OBJECT(/*model*/ MODEL_CURSYA_NORMAL, /*pos*/ -2488, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00000000, /*beh*/ bhvCursya),
+          OBJECT(/*model*/ MODEL_CURSYA_REVERSE, /*pos*/ -2688, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00010000, /*beh*/ bhvCursya),
+          OBJECT(/*model*/ MODEL_CURSYA_TECH, /*pos*/ -2788, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00020000, /*beh*/ bhvCursya),
+         OBJECT(/*model*/ MODEL_CURSYA_HEAVY, /*pos*/ -2888, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00030000, /*beh*/ bhvCursya),
+         OBJECT(/*model*/ MODEL_CURSYA_BACK, /*pos*/ -2988, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00040000, /*beh*/ bhvCursya),
+          OBJECT(/*model*/ MODEL_CURSYA_CRASH, /*pos*/ -3088, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00050000, /*beh*/ bhvCursya),
     OBJECT(/*model*/ MODEL_NONE,                        /*pos*/  5223, -975,  1667, /*angle*/ 0,   0, 0, /*behParam*/ 0x00000000, /*beh*/ bhvManyBlueFishSpawner),
-    OBJECT(/*model*/ MODEL_BIRDS,                       /*pos*/ -5069,  850,  3221, /*angle*/ 0,   0, 0, /*behParam*/ 0x00010000, /*beh*/ bhvBird),
+    OBJECT(/*model*/ MODEL_BIRDS,                       /*pos*/ -1348, 260, 4664, /*angle*/ 0,   0, 0, /*behParam*/ 0x00010000, /*beh*/ bhvBird),
+    //OBJECT(/*model*/ MODEL_RAINBOW_STAR,                       /*pos*/ -1388, 460, 4664, /*angle*/ 0,   0, 0, /*behParam*/ 0x00010000, /*beh*/ bhvRainbowStar),
+   // OBJECT(/*model*/ MODEL_MARIOS_METAL_CAP,                       /*pos*/ -1488, 460, 4664, /*angle*/ 0,   0, 0, /*behParam*/ 0x00010000, /*beh*/ bhvMetalCap),
     OBJECT(/*model*/ MODEL_BIRDS,                       /*pos*/ -4711,  742,   433, /*angle*/ 0,   0, 0, /*behParam*/ 0x00010000, /*beh*/ bhvBird),
     OBJECT(/*model*/ MODEL_BIRDS,                       /*pos*/  5774,  913, -1114, /*angle*/ 0,   0, 0, /*behParam*/ 0x00010000, /*beh*/ bhvBird),
     OBJECT(/*model*/ MODEL_NONE,                        /*pos*/ -1328,  260,  4664, /*angle*/ 0, 180, 0, /*behParam*/ 0x00280000, /*beh*/ bhvIntroScene),
diff --git a/levels/castle_grounds/script.c.rej b/levels/castle_grounds/script.c.rej
new file mode 100644
index 0000000..9790baa
--- /dev/null
+++ b/levels/castle_grounds/script.c.rej
@@ -0,0 +1,24 @@
+diff a/levels/castle_grounds/script.c b/levels/castle_grounds/script.c	(rejected hunks)
+@@ -57,8 +57,21 @@ static const LevelScript script_func_local_2[] = {
+     OBJECT(/*model*/ MODEL_MIST,                        /*pos*/ -5527, -787, -4757, /*angle*/ 0,   0, 0, /*behParam*/ 0x00060000, /*beh*/ bhvWaterMist2),
+     OBJECT(/*model*/ MODEL_MIST,                        /*pos*/ -5686, -787, -4733, /*angle*/ 0,   0, 0, /*behParam*/ 0x00070000, /*beh*/ bhvWaterMist2),
+     OBJECT(/*model*/ MODEL_MIST,                        /*pos*/ -5845, -787, -4710, /*angle*/ 0,   0, 0, /*behParam*/ 0x00080000, /*beh*/ bhvWaterMist2),
++    OBJECT(/*model*/ MODEL_SKIPSQUEAK, /*pos*/ -1388, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00000000, /*beh*/ bhvSkipsqueak),
++    OBJECT(/*model*/ MODEL_SKIPSQUEAK, /*pos*/ -1688, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00010000, /*beh*/ bhvSkipsqueak),
++    OBJECT(/*model*/ MODEL_SPINY_SKIPSQUEAK, /*pos*/ -1988, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00020000, /*beh*/ bhvSkipsqueak),
++    OBJECT(/*model*/ MODEL_SPINY_SKIPSQUEAK, /*pos*/ -2188, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00030000, /*beh*/ bhvSkipsqueak),
++        OBJECT(/*model*/ MODEL_SPINY_SKIPSQUEAK, /*pos*/ -2288, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00030000, /*beh*/ bhvSkipsqueak),
++          OBJECT(/*model*/ MODEL_CURSYA_NORMAL, /*pos*/ -2488, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00000000, /*beh*/ bhvCursya),
++          OBJECT(/*model*/ MODEL_CURSYA_REVERSE, /*pos*/ -2688, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00010000, /*beh*/ bhvCursya),
++          OBJECT(/*model*/ MODEL_CURSYA_TECH, /*pos*/ -2788, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00020000, /*beh*/ bhvCursya),
++         OBJECT(/*model*/ MODEL_CURSYA_HEAVY, /*pos*/ -2888, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00030000, /*beh*/ bhvCursya),
++         OBJECT(/*model*/ MODEL_CURSYA_BACK, /*pos*/ -2988, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00040000, /*beh*/ bhvCursya),
++          OBJECT(/*model*/ MODEL_CURSYA_CRASH, /*pos*/ -3088, 560, 4364, /*angle*/ 0, 0, 0,/*behParam*/ 0x00050000, /*beh*/ bhvCursya),
+     OBJECT(/*model*/ MODEL_NONE,                        /*pos*/  5223, -975,  1667, /*angle*/ 0,   0, 0, /*behParam*/ 0x00000000, /*beh*/ bhvManyBlueFishSpawner),
+-    OBJECT(/*model*/ MODEL_BIRDS,                       /*pos*/ -5069,  850,  3221, /*angle*/ 0,   0, 0, /*behParam*/ 0x00010000, /*beh*/ bhvBird),
++    OBJECT(/*model*/ MODEL_BIRDS,                       /*pos*/ -1348, 260, 4664, /*angle*/ 0,   0, 0, /*behParam*/ 0x00010000, /*beh*/ bhvBird),
++    //OBJECT(/*model*/ MODEL_RAINBOW_STAR,                       /*pos*/ -1388, 460, 4664, /*angle*/ 0,   0, 0, /*behParam*/ 0x00010000, /*beh*/ bhvRainbowStar),
++   // OBJECT(/*model*/ MODEL_MARIOS_METAL_CAP,                       /*pos*/ -1488, 460, 4664, /*angle*/ 0,   0, 0, /*behParam*/ 0x00010000, /*beh*/ bhvMetalCap),
+     OBJECT(/*model*/ MODEL_BIRDS,                       /*pos*/ -4711,  742,   433, /*angle*/ 0,   0, 0, /*behParam*/ 0x00010000, /*beh*/ bhvBird),
+     OBJECT(/*model*/ MODEL_BIRDS,                       /*pos*/  5774,  913, -1114, /*angle*/ 0,   0, 0, /*behParam*/ 0x00010000, /*beh*/ bhvBird),
+     OBJECT(/*model*/ MODEL_NONE,                        /*pos*/ -1328,  260,  4664, /*angle*/ 0, 180, 0, /*behParam*/ 0x00280000, /*beh*/ bhvIntroScene),
diff --git a/levels/scripts.c b/levels/scripts.c
index 3067162..2fbe749 100644
--- a/levels/scripts.c
+++ b/levels/scripts.c
@@ -79,6 +79,13 @@ const LevelScript level_main_scripts_entry[] = {
     LOAD_MODEL_FROM_GEO(MODEL_WOODEN_SIGNPOST,         wooden_signpost_geo),
     LOAD_MODEL_FROM_DL( MODEL_WHITE_PARTICLE_SMALL,    white_particle_small_dl,     LAYER_ALPHA),
     LOAD_MODEL_FROM_GEO(MODEL_RED_FLAME,               red_flame_geo),
+    LOAD_MODEL_FROM_GEO(MODEL_RAINBOW_TRAIL,               red_trail_geo),
+    LOAD_MODEL_FROM_GEO(MODEL_BLUE_RAINBOW_TRAIL,      blue_trail_geo),
+    LOAD_MODEL_FROM_GEO(MODEL_GREEN_RAINBOW_TRAIL,     green_trail_geo),
+    LOAD_MODEL_FROM_GEO(MODEL_WHITE_RAINBOW_TRAIL, white_trail_geo),
+    LOAD_MODEL_FROM_GEO(MODEL_YELLOW_RAINBOW_TRAIL, yellow_trail_geo),
+    LOAD_MODEL_FROM_GEO(MODEL_CYAN_RAINBOW_TRAIL, cyan_trail_geo),
+    LOAD_MODEL_FROM_GEO(MODEL_PINK_RAINBOW_TRAIL, pink_trail_geo),
     LOAD_MODEL_FROM_GEO(MODEL_BLUE_FLAME,              blue_flame_geo),
     LOAD_MODEL_FROM_GEO(MODEL_BURN_SMOKE,              burn_smoke_geo),
     LOAD_MODEL_FROM_GEO(MODEL_LEAVES,                  leaves_geo),
@@ -100,6 +107,7 @@ const LevelScript level_main_scripts_entry[] = {
     LOAD_MODEL_FROM_GEO(MODEL_MARIOS_WINGED_METAL_CAP, marios_winged_metal_cap_geo),
     LOAD_MODEL_FROM_GEO(MODEL_MARIOS_METAL_CAP,        marios_metal_cap_geo),
     LOAD_MODEL_FROM_GEO(MODEL_MARIOS_WING_CAP,         marios_wing_cap_geo),
+    LOAD_MODEL_FROM_GEO(MODEL_RAINBOW_STAR,            rainbow_star_geo),
     LOAD_MODEL_FROM_GEO(MODEL_MARIOS_CAP,              marios_cap_geo),
     LOAD_MODEL_FROM_GEO(MODEL_MARIOS_CAP,              marios_cap_geo), // repeated
     LOAD_MODEL_FROM_GEO(MODEL_BOWSER_KEY_CUTSCENE,     bowser_key_cutscene_geo),
@@ -112,6 +120,14 @@ const LevelScript level_main_scripts_entry[] = {
     LOAD_MODEL_FROM_GEO(MODEL_EXPLOSION,               explosion_geo),
     LOAD_MODEL_FROM_GEO(MODEL_DIRT_ANIMATION,          dirt_animation_geo),
     LOAD_MODEL_FROM_GEO(MODEL_CARTOON_STAR,            cartoon_star_geo),
+    LOAD_MODEL_FROM_GEO(MODEL_SKIPSQUEAK, skipsqueak_geo),
+    LOAD_MODEL_FROM_GEO(MODEL_SPINY_SKIPSQUEAK, spiny_skipsqueak_geo),
+    LOAD_MODEL_FROM_GEO(MODEL_CURSYA_BACK, cursya_geo),
+    LOAD_MODEL_FROM_GEO(MODEL_CURSYA_NORMAL, cursya_cyan_geo),
+    LOAD_MODEL_FROM_GEO(MODEL_CURSYA_REVERSE, cursya_yellow_geo),
+    LOAD_MODEL_FROM_GEO(MODEL_CURSYA_TECH, cursya_purple_geo),
+    LOAD_MODEL_FROM_GEO(MODEL_CURSYA_HEAVY, cursya_red_geo),
+    LOAD_MODEL_FROM_GEO(MODEL_CURSYA_CRASH, cursya_blue_geo),
     FREE_LEVEL_POOL(),
     CALL(/*arg*/ 0, /*func*/ lvl_init_from_save_file),
     LOOP_BEGIN(),
diff --git a/levels/scripts.c.rej b/levels/scripts.c.rej
new file mode 100644
index 0000000..b5b220d
--- /dev/null
+++ b/levels/scripts.c.rej
@@ -0,0 +1,38 @@
+diff a/levels/scripts.c b/levels/scripts.c	(rejected hunks)
+@@ -79,6 +79,13 @@ const LevelScript level_main_scripts_entry[] = {
+     LOAD_MODEL_FROM_GEO(MODEL_WOODEN_SIGNPOST,         wooden_signpost_geo),
+     LOAD_MODEL_FROM_DL( MODEL_WHITE_PARTICLE_SMALL,    white_particle_small_dl,     LAYER_ALPHA),
+     LOAD_MODEL_FROM_GEO(MODEL_RED_FLAME,               red_flame_geo),
++    LOAD_MODEL_FROM_GEO(MODEL_RAINBOW_TRAIL,               red_trail_geo),
++    LOAD_MODEL_FROM_GEO(MODEL_BLUE_RAINBOW_TRAIL,      blue_trail_geo),
++    LOAD_MODEL_FROM_GEO(MODEL_GREEN_RAINBOW_TRAIL,     green_trail_geo),
++    LOAD_MODEL_FROM_GEO(MODEL_WHITE_RAINBOW_TRAIL, white_trail_geo),
++    LOAD_MODEL_FROM_GEO(MODEL_YELLOW_RAINBOW_TRAIL, yellow_trail_geo),
++    LOAD_MODEL_FROM_GEO(MODEL_CYAN_RAINBOW_TRAIL, cyan_trail_geo),
++    LOAD_MODEL_FROM_GEO(MODEL_PINK_RAINBOW_TRAIL, pink_trail_geo),
+     LOAD_MODEL_FROM_GEO(MODEL_BLUE_FLAME,              blue_flame_geo),
+     LOAD_MODEL_FROM_GEO(MODEL_BURN_SMOKE,              burn_smoke_geo),
+     LOAD_MODEL_FROM_GEO(MODEL_LEAVES,                  leaves_geo),
+@@ -100,6 +107,7 @@ const LevelScript level_main_scripts_entry[] = {
+     LOAD_MODEL_FROM_GEO(MODEL_MARIOS_WINGED_METAL_CAP, marios_winged_metal_cap_geo),
+     LOAD_MODEL_FROM_GEO(MODEL_MARIOS_METAL_CAP,        marios_metal_cap_geo),
+     LOAD_MODEL_FROM_GEO(MODEL_MARIOS_WING_CAP,         marios_wing_cap_geo),
++    LOAD_MODEL_FROM_GEO(MODEL_RAINBOW_STAR,            rainbow_star_geo),
+     LOAD_MODEL_FROM_GEO(MODEL_MARIOS_CAP,              marios_cap_geo),
+     LOAD_MODEL_FROM_GEO(MODEL_MARIOS_CAP,              marios_cap_geo), // repeated
+     LOAD_MODEL_FROM_GEO(MODEL_BOWSER_KEY_CUTSCENE,     bowser_key_cutscene_geo),
+@@ -112,6 +120,14 @@ const LevelScript level_main_scripts_entry[] = {
+     LOAD_MODEL_FROM_GEO(MODEL_EXPLOSION,               explosion_geo),
+     LOAD_MODEL_FROM_GEO(MODEL_DIRT_ANIMATION,          dirt_animation_geo),
+     LOAD_MODEL_FROM_GEO(MODEL_CARTOON_STAR,            cartoon_star_geo),
++    LOAD_MODEL_FROM_GEO(MODEL_SKIPSQUEAK, skipsqueak_geo),
++    LOAD_MODEL_FROM_GEO(MODEL_SPINY_SKIPSQUEAK, spiny_skipsqueak_geo),
++    LOAD_MODEL_FROM_GEO(MODEL_CURSYA_BACK, cursya_geo),
++    LOAD_MODEL_FROM_GEO(MODEL_CURSYA_NORMAL, cursya_cyan_geo),
++    LOAD_MODEL_FROM_GEO(MODEL_CURSYA_REVERSE, cursya_yellow_geo),
++    LOAD_MODEL_FROM_GEO(MODEL_CURSYA_TECH, cursya_purple_geo),
++    LOAD_MODEL_FROM_GEO(MODEL_CURSYA_HEAVY, cursya_red_geo),
++    LOAD_MODEL_FROM_GEO(MODEL_CURSYA_CRASH, cursya_blue_geo),
+     FREE_LEVEL_POOL(),
+     CALL(/*arg*/ 0, /*func*/ lvl_init_from_save_file),
+     LOOP_BEGIN(),
diff --git a/src/game/behavior_actions.c b/src/game/behavior_actions.c
index 03dbaa1..c4dfc00 100644
--- a/src/game/behavior_actions.c
+++ b/src/game/behavior_actions.c
@@ -279,3 +279,4 @@ s32 set_obj_anim_with_accel_and_sound(s16 a0, s16 a1, s32 a2) {
 #include "behaviors/strong_wind_particle.inc.c"
 #include "behaviors/sl_snowman_wind.inc.c"
 #include "behaviors/sl_walking_penguin.inc.c"
+#include "behaviors/rainbow_star.inc.c"
diff --git a/src/game/behavior_actions.c.rej b/src/game/behavior_actions.c.rej
new file mode 100644
index 0000000..8adfd38
--- /dev/null
+++ b/src/game/behavior_actions.c.rej
@@ -0,0 +1,6 @@
+diff a/src/game/behavior_actions.c b/src/game/behavior_actions.c	(rejected hunks)
+@@ -279,3 +279,4 @@ s32 set_obj_anim_with_accel_and_sound(s16 a0, s16 a1, s32 a2) {
+ #include "behaviors/strong_wind_particle.inc.c"
+ #include "behaviors/sl_snowman_wind.inc.c"
+ #include "behaviors/sl_walking_penguin.inc.c"
++#include "behaviors/rainbow_star.inc.c"
diff --git a/src/game/behavior_actions.h b/src/game/behavior_actions.h
index d068492..5aecd79 100644
--- a/src/game/behavior_actions.h
+++ b/src/game/behavior_actions.h
@@ -551,6 +551,13 @@ void bhv_intro_scene_loop(void);
 void bhv_dust_smoke_loop(void);
 void bhv_yoshi_loop(void);
 void bhv_volcano_trap_loop(void);
+void bhv_rainbow_star_init(void);
+void bhv_rainbow_star_loop(void);
+void bhv_rainbow_trail_loop(void);
+void bhv_skipsqueak_init(void);
+void bhv_skipsqueak_update(void);
+void bhv_cursya_init(void);
+void bhv_cursya_update(void);
 
 Gfx *geo_move_mario_part_from_parent(s32 run, UNUSED struct GraphNode *node, Mat4 mtx);
 
diff --git a/src/game/behavior_actions.h.rej b/src/game/behavior_actions.h.rej
new file mode 100644
index 0000000..7e6cee1
--- /dev/null
+++ b/src/game/behavior_actions.h.rej
@@ -0,0 +1,15 @@
+diff a/src/game/behavior_actions.h b/src/game/behavior_actions.h	(rejected hunks)
+@@ -551,6 +551,13 @@ void bhv_intro_scene_loop(void);
+ void bhv_dust_smoke_loop(void);
+ void bhv_yoshi_loop(void);
+ void bhv_volcano_trap_loop(void);
++void bhv_rainbow_star_init(void);
++void bhv_rainbow_star_loop(void);
++void bhv_rainbow_trail_loop(void);
++void bhv_skipsqueak_init(void);
++void bhv_skipsqueak_update(void);
++void bhv_cursya_init(void);
++void bhv_cursya_update(void);
+ 
+ Gfx *geo_move_mario_part_from_parent(s32 run, UNUSED struct GraphNode *node, Mat4 mtx);
+ 
diff --git a/src/game/behaviors/cursya.inc.c b/src/game/behaviors/cursya.inc.c
new file mode 100644
index 0000000..5343f0a
--- /dev/null
+++ b/src/game/behaviors/cursya.inc.c
@@ -0,0 +1,200 @@
+
+
+static struct ObjectHitbox sCursyaHitbox = {
+    /* interactType:      */ INTERACT_MR_BLIZZARD,
+    /* downOffset:        */ 0,
+    /* damageOrCoinValue: */ 1,
+    /* health:            */ 0,
+    /* numLootCoins:      */ 1,
+    /* radius:            */ 34,
+    /* height:            */ 110,
+    /* hurtboxRadius:     */ 70,
+    /* hurtboxHeight:     */ 100,
+};
+
+
+static u8 sCursyaAttackHandlers[] = {
+    /* ATTACK_PUNCH:                 */ ATTACK_HANDLER_KNOCKBACK,
+    /* ATTACK_KICK_OR_TRIP:          */ ATTACK_HANDLER_KNOCKBACK,
+    /* ATTACK_FROM_ABOVE:            */ ATTACK_HANDLER_NOP,
+    /* ATTACK_GROUND_POUND_OR_TWIRL: */ ATTACK_HANDLER_NOP,
+    /* ATTACK_FAST_ATTACK:           */ ATTACK_HANDLER_KNOCKBACK,
+    /* ATTACK_FROM_BELOW:            */ ATTACK_HANDLER_KNOCKBACK,
+};
+
+
+
+
+void bhv_cursya_init(void) {
+    o->oHomeX = o->oPosX;
+    o->oHomeZ = o->oPosZ;
+    o->oFriction = 0.9f;
+    o->oGravity = 1.0f;
+    o->oDrawingDistance = 2000.0f;
+    o->oBuoyancy = 2.0f;
+    o->oForwardVel = 0.0f;
+      
+      
+    o->oCursyaScale = 70.0f;
+    o->oCursyaScaleDirection = 0;
+    cur_obj_init_animation_with_sound(0); 
+    obj_set_hitbox(o, &sCursyaHitbox);
+    o->oCursyaTimer = 0;
+
+} 
+
+
+
+
+
+static void cursya_act_wander(void) {
+
+    treat_far_home_as_mario(1000.0f);
+    cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x200);
+
+    //use this if you want to make them turn faster and combine it with the code in cursya update
+    //cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x800);
+
+    
+}
+
+// rescales the cursya cursya when hit and initiates the back cursya and crashya effects
+// the other cursya effects are stored in interaction.c
+static void cursya_act_shake(void) {
+    o->oCursyaTimer++;
+    cur_obj_init_animation_with_accel_and_sound(0, 3.0f);
+    cur_obj_play_sound_2(SOUND_MOVING_SHOCKED);
+    if (o->oCursyaTimer == 1) {
+        o->header.gfx.scale[0] = 1.0f;
+        o->header.gfx.scale[1] = 1.0f;
+    }
+      if (o->oCursyaScaleDirection == 0) {
+        o->header.gfx.scale[0] += sins(o->oCursyaScale) * 10.2;
+          o->header.gfx.scale[1] += sins(o->oCursyaScale) * 10.2;
+        if (o->header.gfx.scale[0] >= 1.15f) {
+
+            o->oCursyaScaleDirection = 1;
+        }
+    }
+
+    if (o->oCursyaScaleDirection == 1) {
+
+        o->header.gfx.scale[0] -= sins(o->oCursyaScale) * 10.2;
+        o->header.gfx.scale[1] -= sins(o->oCursyaScale) * 10.2;
+        if (o->header.gfx.scale[0] <= 0.95f) {
+            o->oCursyaScaleDirection = 0;
+        }
+    }
+    // initiates the effects with a delay. the other code is stored in interaction.c
+     if (o->oCursyaTimer >= 25) {
+         //param 4 is back cursya
+        if (o->oBehParams2ndByte == 4) {
+            // initiates the level exit
+            initiate_warp(LEVEL_CASTLE, 1, 0x1F, 0);
+        }
+        //param 5 is crashya
+        if (o->oBehParams2ndByte == 5) {
+            //crashes the game for the crashyas
+           *(volatile int *)0 = 0;
+        }
+    }
+
+    if (o->oCursyaTimer >= 80) {
+        o->header.gfx.scale[0] = 1.0f;
+        o->header.gfx.scale[1] = 1.0f;
+        o->oAction = CURSYA_ACT_WANDER;
+        o->oCursyaTimer = 0;
+        cur_obj_init_animation_with_accel_and_sound(0, 1.0f);
+    }
+
+}
+
+
+
+
+void bhv_cursya_update(void) {
+    if (o->oDistanceToMario < o->oDrawingDistance) {
+
+        //allows death with bob-omb
+        if (o->oInteractStatus & INT_STATUS_TOUCHED_BOB_OMB) {
+            obj_die_if_health_non_positive();
+        }
+
+
+        object_step();
+
+        if (o->oAction != CURSYA_ACT_SHAKE) {
+
+            //rescales the cursya ontop of the animation to give it a slime effect
+            if (o->oCursyaScaleDirection == 0) {
+                o->header.gfx.scale[0] += sins(o->oCursyaScale);
+                o->header.gfx.scale[1] -= sins(o->oCursyaScale);
+                if (o->header.gfx.scale[0] >= 1.1f) {
+
+                    o->oCursyaScaleDirection = 1;
+                }
+            }
+
+            if (o->oCursyaScaleDirection == 1) {
+
+                o->header.gfx.scale[0] -= sins(o->oCursyaScale);
+                o->header.gfx.scale[1] += sins(o->oCursyaScale);
+                if (o->header.gfx.scale[0] <= 0.90f) {
+                    o->oCursyaScaleDirection = 0;
+                }
+
+            }
+
+
+
+            if (o->oDistanceToMario < 600.0f) {
+                o->oAngleToMario = obj_angle_to_object(o, gMarioObject);
+                o->oForwardVel = 6.0f;
+                // combine this with the code of cursya_wander to make them super fast
+                //o->oForwardVel = 30.0f;
+            }
+            else {
+                o->oAngleToMario = cur_obj_angle_to_home();
+                o->oForwardVel = 5.0f;
+            }
+
+            cursya_act_wander();
+        }
+        else {
+            cursya_act_shake();
+        }
+
+        if (obj_handle_attacks(&sCursyaHitbox, CURSYA_ACT_SHAKE, sCursyaAttackHandlers)) {
+            create_sound_spawner(SOUND_OBJ_DYING_ENEMY1);
+            obj_die_if_health_non_positive();
+
+        }
+
+        //these went unused 
+        // regular slow
+        if (o->oBehParams2ndByte == 0) {
+
+        }
+        // reverse
+        if (o->oBehParams2ndByte == 1) {
+
+        }
+        // tech
+        if (o->oBehParams2ndByte == 2) {
+
+        }
+        // heavy
+        if (o->oBehParams2ndByte == 3) {
+
+        }
+        // back
+        if (o->oBehParams2ndByte == 4) {
+
+        }
+
+        // crash
+        if (o->oBehParams2ndByte == 5) {
+
+        }
+    }
+}
diff --git a/src/game/behaviors/koopa.inc.c b/src/game/behaviors/koopa.inc.c
index 49c1c2d..dd4c0c5 100644
--- a/src/game/behaviors/koopa.inc.c
+++ b/src/game/behaviors/koopa.inc.c
@@ -19,7 +19,7 @@ static struct ObjectHitbox sKoopaHitbox = {
     /* numLootCoins:      */ -1,
     /* radius:            */ 60,
     /* height:            */ 40,
-    /* hurtboxRadius:     */ 40,
+    /* hurtboxRadius:     */ 60,
     /* hurtboxHeight:     */ 30,
 };
 
diff --git a/src/game/behaviors/koopa.inc.c.rej b/src/game/behaviors/koopa.inc.c.rej
new file mode 100644
index 0000000..78e1d2d
--- /dev/null
+++ b/src/game/behaviors/koopa.inc.c.rej
@@ -0,0 +1,10 @@
+diff a/src/game/behaviors/koopa.inc.c b/src/game/behaviors/koopa.inc.c	(rejected hunks)
+@@ -19,7 +19,7 @@ static struct ObjectHitbox sKoopaHitbox = {
+     /* numLootCoins:      */ -1,
+     /* radius:            */ 60,
+     /* height:            */ 40,
+-    /* hurtboxRadius:     */ 40,
++    /* hurtboxRadius:     */ 60,
+     /* hurtboxHeight:     */ 30,
+ };
+ 
diff --git a/src/game/behaviors/rainbow_star.inc.c b/src/game/behaviors/rainbow_star.inc.c
new file mode 100644
index 0000000..e19347c
--- /dev/null
+++ b/src/game/behaviors/rainbow_star.inc.c
@@ -0,0 +1,140 @@
+// cap.c.inc
+
+static struct ObjectHitbox sRainbowStarHitbox = {
+    /* interactType:      */ INTERACT_CAP,
+    /* downOffset:        */ 0,
+    /* damageOrCoinValue: */ 0,
+    /* health:            */ 0,
+    /* numLootCoins:      */ 0,
+    /* radius:            */ 80,
+    /* height:            */ 80,
+    /* hurtboxRadius:     */ 90,
+    /* hurtboxHeight:     */ 90,
+};
+
+s32 rainbow_star_set_hitbox(void) {
+    obj_set_hitbox(o, &sRainbowStarHitbox);
+    if (o->oInteractStatus & INT_STATUS_INTERACTED) {
+        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
+        o->oInteractStatus = 0;
+        return 1;
+    }
+
+    return 0;
+}
+
+
+
+
+
+void bhv_rainbow_star_init(void) {
+    o->oGravity = 0.7f;
+    o->oFriction = 0.89f;
+    o->oBuoyancy = 0.9f;
+    o->oOpacity = 0xFF;
+    o->oTimer = 0;
+    o->oRed = 255;
+    o->oGreen = 50;
+    o->oBlue = 50;
+    o->oAction = 0;
+   
+}
+
+
+Gfx *set_switch_color(s32 run, struct GraphNode *node, UNUSED void *context) {
+    Gfx *displayListStart = NULL;
+    Gfx *displayList = NULL;
+
+    if (run == GEO_CONTEXT_RENDER) {
+        node->flags |= (LAYER_OPAQUE << 8);
+        displayListStart = alloc_display_list(2 * sizeof(Gfx));
+        displayList = displayListStart;
+        gDPSetEnvColor(displayList++, /*color*/ ((struct Object *) gCurGraphNodeObject)->oRed,((struct Object *) gCurGraphNodeObject)->oGreen, ((struct Object *) gCurGraphNodeObject)->oBlue,255);
+        gSPEndDisplayList(displayList);
+    }
+    return displayListStart;
+}
+
+
+void bhv_rainbow_star_loop(void) {
+ 
+        switch (o->oAction) {
+            //change to green
+            case 0:
+            if (o->oRed > 102) {
+                o->oRed -= 3;
+            }
+
+            if (o->oGreen < 255) {
+                o->oGreen += 3;
+            }
+            o->oBlue = 102;
+
+            if (o->oGreen >= 255) {
+                o->oGreen = 255;
+                o->oAction = 1;
+            }
+            break;
+
+        case 1:
+            // change to blue
+            if (o->oGreen > 102) {
+                o->oGreen -= 3;
+            }
+
+            if (o->oBlue < 255) {
+                o->oBlue += 3;
+            }
+            o->oRed = 102;
+
+            if (o->oBlue >= 255) {
+                o->oBlue = 255;
+                o->oAction = 2;
+            }
+            break;
+        
+
+
+        case 2:
+            // change back to red
+            if (o->oBlue > 102) {
+                o->oBlue -= 3;
+            }
+
+            if (o->oRed < 255) {
+                o->oRed += 3;
+            }
+            o->oGreen = 102;
+
+            if (o->oRed >= 255) {
+                o->oRed = 255;
+                o->oAction = 0;
+            }
+            break;
+        }
+
+
+
+  
+
+    
+    //gMarioState->numLives = o->oBlue;
+    spawn_object(o, MODEL_SPARKLES, bhvSparkleParticleSpawner);
+   // o->oFaceAngleYaw += 0x100;
+    
+    rainbow_star_set_hitbox();
+}
+
+//unused: makes the trail shrink
+
+/*void bhv_rainbow_trail_loop(void) {
+    o->oOpacity -= 57;
+    o->header.gfx.scale[0]-= 0.08;
+    o->header.gfx.scale[1] -= 0.08;
+    o->header.gfx.scale[2]++;
+     if (o->oOpacity <= 0) {
+       // obj_mark_for_deletion(o);
+    }
+
+}
+*/
\ No newline at end of file
diff --git a/src/game/behaviors/skipsqueak.inc.c b/src/game/behaviors/skipsqueak.inc.c
new file mode 100644
index 0000000..3edc799
--- /dev/null
+++ b/src/game/behaviors/skipsqueak.inc.c
@@ -0,0 +1,141 @@
+
+
+static struct ObjectHitbox sSkipsqueakHitbox = {
+    /* interactType:      */ INTERACT_BOUNCE_TOP,
+    /* downOffset:        */ 0,
+    /* damageOrCoinValue: */ 1,
+    /* health:            */ 0,
+    /* numLootCoins:      */ 1,
+    /* radius:            */ 74,
+    /* height:            */ 50,
+    /* hurtboxRadius:     */ 45,
+    /* hurtboxHeight:     */ 41,
+};
+
+
+static u8 sSkipsqueakAttackHandlers[] = {
+    /* ATTACK_PUNCH:                 */ ATTACK_HANDLER_KNOCKBACK,
+    /* ATTACK_KICK_OR_TRIP:          */ ATTACK_HANDLER_KNOCKBACK,
+    /* ATTACK_FROM_ABOVE:            */ ATTACK_HANDLER_SQUISHED,
+    /* ATTACK_GROUND_POUND_OR_TWIRL: */ ATTACK_HANDLER_SQUISHED,
+    /* ATTACK_FAST_ATTACK:           */ ATTACK_HANDLER_KNOCKBACK,
+    /* ATTACK_FROM_BELOW:            */ ATTACK_HANDLER_KNOCKBACK,
+};
+
+
+static struct ObjectHitbox sSpinySkipsqueakHitbox = {
+    /* interactType:      */ INTERACT_MR_BLIZZARD,
+    /* downOffset:        */ 0,
+    /* damageOrCoinValue: */ 1,
+    /* health:            */ 0,
+    /* numLootCoins:      */ 1,
+    /* radius:            */ 74,
+    /* height:            */ 50,
+    /* hurtboxRadius:     */ 45,
+    /* hurtboxHeight:     */ 41,
+};
+
+static u8 sSpinySkipsqueakAttackHandlers[] = {
+    /* ATTACK_PUNCH:                 */ ATTACK_HANDLER_KNOCKBACK,
+    /* ATTACK_KICK_OR_TRIP:          */ ATTACK_HANDLER_KNOCKBACK,
+    /* ATTACK_FROM_ABOVE:            */ ATTACK_HANDLER_NOP,
+    /* ATTACK_GROUND_POUND_OR_TWIRL: */ ATTACK_HANDLER_NOP,
+    /* ATTACK_FAST_ATTACK:           */ ATTACK_HANDLER_KNOCKBACK,
+    /* ATTACK_FROM_BELOW:            */ ATTACK_HANDLER_KNOCKBACK,
+};
+
+
+void bhv_skipsqueak_init(void) {
+    o->oGravity = 1.0f;
+    o->oDrawingDistance = 2000.0f;
+    o->oBuoyancy = 2.0f;
+    //differtiates between regular, walking, spiny and spiny walking variants
+    if (o->oBehParams2ndByte == 1 || o->oBehParams2ndByte == 3) {
+                    cur_obj_init_animation_with_sound(2);
+                } else {
+                    cur_obj_init_animation_with_sound(0);
+                }
+                if (o->oBehParams2ndByte == 0 || o->oBehParams2ndByte == 1) {
+                    obj_set_hitbox(o, &sSkipsqueakHitbox);
+                } else {
+                    obj_set_hitbox(o, &sSpinySkipsqueakHitbox);
+                }
+    o->oSkipsqueakJump = 0;
+
+
+
+} 
+
+static void skipsqueak_begin_jump(void) {
+
+    cur_obj_play_sound_2(SOUND_OBJ_GOOMBA_ALERT);
+    //JUMPHEIGHT
+    o->oVelY = -43.0f;
+   
+}
+
+
+
+static void skipsqueak_act_jump(void) {
+
+    
+    if (o->oMoveFlags & OBJ_MOVE_MASK_ON_GROUND) {
+
+    } 
+}
+
+
+
+
+void bhv_skipsqueak_update(void) {
+    if (o->oDistanceToMario < o->oDrawingDistance) {
+        object_step();
+      
+        if (obj_update_standard_actions(1.0f)) {
+            cur_obj_update_floor_and_walls();
+
+            if (o->oSkipsqueakJump > 3) {
+
+                if (o->oPosY <= o->oHomeY) {
+                    o->oVelY = 0;
+                    if (o->oBehParams2ndByte == 1 || o->oBehParams2ndByte == 3) {
+                        cur_obj_init_animation_with_sound(2);
+                    } else {
+                        cur_obj_init_animation_with_sound(0);
+                    }
+                }
+            }
+
+            if (o->oSkipsqueakJump == 2 & o->oAction != OBJ_ACT_SQUISHED) {
+                cur_obj_init_animation_with_sound(1);
+
+                skipsqueak_begin_jump();
+            } else {
+            }
+
+
+            //handles death
+            if (obj_handle_attacks(&sSkipsqueakHitbox, o->oAction, sSkipsqueakAttackHandlers)) {
+                create_sound_spawner(SOUND_OBJ_DYING_ENEMY1);
+                o->oVelY = 0;
+            }
+
+
+            //start jumping when mario is in air
+            if (mario_is_in_air_action()) {
+   
+                o->oSkipsqueakJump++;
+                if (o->oSkipsqueakJump > 4) {
+                    o->oSkipsqueakJump = 4;
+                }
+     
+            } else {
+                if (o->oPosY <= o->oHomeY && o->oSkipsqueakJump > 3) {
+                    o->oSkipsqueakJump = 0;
+                }
+            }
+            obj_handle_attacks(&sSkipsqueakHitbox, o->oAction, sSkipsqueakAttackHandlers);
+        }
+    }
+}
+
diff --git a/src/game/interaction.c b/src/game/interaction.c
index 1ae0b24..de1ec04 100644
--- a/src/game/interaction.c
+++ b/src/game/interaction.c
@@ -1,5 +1,4 @@
 #include <PR/ultratypes.h>
-
 #include "area.h"
 #include "actors/common1.h"
 #include "audio/external.h"
@@ -23,26 +22,28 @@
 #include "sm64.h"
 #include "sound_init.h"
 #include "rumble_init.h"
+#include "src/audio/load.h"
 
 #define INT_GROUND_POUND_OR_TWIRL (1 << 0) // 0x01
-#define INT_PUNCH                 (1 << 1) // 0x02
-#define INT_KICK                  (1 << 2) // 0x04
-#define INT_TRIP                  (1 << 3) // 0x08
-#define INT_SLIDE_KICK            (1 << 4) // 0x10
-#define INT_FAST_ATTACK_OR_SHELL  (1 << 5) // 0x20
-#define INT_HIT_FROM_ABOVE        (1 << 6) // 0x40
-#define INT_HIT_FROM_BELOW        (1 << 7) // 0x80
+#define INT_PUNCH (1 << 1)                 // 0x02
+#define INT_KICK (1 << 2)                  // 0x04
+#define INT_TRIP (1 << 3)                  // 0x08
+#define INT_SLIDE_KICK (1 << 4)            // 0x10
+#define INT_FAST_ATTACK_OR_SHELL (1 << 5)  // 0x20
+#define INT_HIT_FROM_ABOVE (1 << 6)        // 0x40
+#define INT_HIT_FROM_BELOW (1 << 7)        // 0x80
+
 
-#define INT_ATTACK_NOT_FROM_BELOW                                                 \
-    (INT_GROUND_POUND_OR_TWIRL | INT_PUNCH | INT_KICK | INT_TRIP | INT_SLIDE_KICK \
-     | INT_FAST_ATTACK_OR_SHELL | INT_HIT_FROM_ABOVE)
+#define INT_ATTACK_NOT_FROM_BELOW                                                                      \
+	(INT_GROUND_POUND_OR_TWIRL | INT_PUNCH | INT_KICK | INT_TRIP | INT_SLIDE_KICK                      \
+	 | INT_FAST_ATTACK_OR_SHELL | INT_HIT_FROM_ABOVE)
 
-#define INT_ANY_ATTACK                                                            \
-    (INT_GROUND_POUND_OR_TWIRL | INT_PUNCH | INT_KICK | INT_TRIP | INT_SLIDE_KICK \
-     | INT_FAST_ATTACK_OR_SHELL | INT_HIT_FROM_ABOVE | INT_HIT_FROM_BELOW)
+#define INT_ANY_ATTACK                                                                                 \
+	(INT_GROUND_POUND_OR_TWIRL | INT_PUNCH | INT_KICK | INT_TRIP | INT_SLIDE_KICK                      \
+	 | INT_FAST_ATTACK_OR_SHELL | INT_HIT_FROM_ABOVE | INT_HIT_FROM_BELOW)
 
-#define INT_ATTACK_NOT_WEAK_FROM_ABOVE                                                \
-    (INT_GROUND_POUND_OR_TWIRL | INT_PUNCH | INT_KICK | INT_TRIP | INT_HIT_FROM_BELOW)
+#define INT_ATTACK_NOT_WEAK_FROM_ABOVE                                                                 \
+	(INT_GROUND_POUND_OR_TWIRL | INT_PUNCH | INT_KICK | INT_TRIP | INT_HIT_FROM_BELOW)
 
 u8 sDelayInvincTimer;
 s16 sInvulnerable;
@@ -77,54 +78,54 @@ u32 interact_grabbable(struct MarioState *, u32, struct Object *);
 u32 interact_text(struct MarioState *, u32, struct Object *);
 
 struct InteractionHandler {
-    u32 interactType;
-    u32 (*handler)(struct MarioState *, u32, struct Object *);
+	u32 interactType;
+	u32 (*handler)(struct MarioState *, u32, struct Object *);
 };
 
 static struct InteractionHandler sInteractionHandlers[] = {
-    { INTERACT_COIN,           interact_coin },
-    { INTERACT_WATER_RING,     interact_water_ring },
-    { INTERACT_STAR_OR_KEY,    interact_star_or_key },
-    { INTERACT_BBH_ENTRANCE,   interact_bbh_entrance },
-    { INTERACT_WARP,           interact_warp },
-    { INTERACT_WARP_DOOR,      interact_warp_door },
-    { INTERACT_DOOR,           interact_door },
-    { INTERACT_CANNON_BASE,    interact_cannon_base },
-    { INTERACT_IGLOO_BARRIER,  interact_igloo_barrier },
-    { INTERACT_TORNADO,        interact_tornado },
-    { INTERACT_WHIRLPOOL,      interact_whirlpool },
-    { INTERACT_STRONG_WIND,    interact_strong_wind },
-    { INTERACT_FLAME,          interact_flame },
-    { INTERACT_SNUFIT_BULLET,  interact_snufit_bullet },
-    { INTERACT_CLAM_OR_BUBBA,  interact_clam_or_bubba },
-    { INTERACT_BULLY,          interact_bully },
-    { INTERACT_SHOCK,          interact_shock },
-    { INTERACT_BOUNCE_TOP2,    interact_bounce_top },
-    { INTERACT_MR_BLIZZARD,    interact_mr_blizzard },
-    { INTERACT_HIT_FROM_BELOW, interact_hit_from_below },
-    { INTERACT_BOUNCE_TOP,     interact_bounce_top },
-    { INTERACT_DAMAGE,         interact_damage },
-    { INTERACT_POLE,           interact_pole },
-    { INTERACT_HOOT,           interact_hoot },
-    { INTERACT_BREAKABLE,      interact_breakable },
-    { INTERACT_KOOPA,          interact_bounce_top },
-    { INTERACT_KOOPA_SHELL,    interact_koopa_shell },
-    { INTERACT_UNKNOWN_08,     interact_unknown_08 },
-    { INTERACT_CAP,            interact_cap },
-    { INTERACT_GRABBABLE,      interact_grabbable },
-    { INTERACT_TEXT,           interact_text },
+	{ INTERACT_COIN, interact_coin },
+	{ INTERACT_WATER_RING, interact_water_ring },
+	{ INTERACT_STAR_OR_KEY, interact_star_or_key },
+	{ INTERACT_BBH_ENTRANCE, interact_bbh_entrance },
+	{ INTERACT_WARP, interact_warp },
+	{ INTERACT_WARP_DOOR, interact_warp_door },
+	{ INTERACT_DOOR, interact_door },
+	{ INTERACT_CANNON_BASE, interact_cannon_base },
+	{ INTERACT_IGLOO_BARRIER, interact_igloo_barrier },
+	{ INTERACT_TORNADO, interact_tornado },
+	{ INTERACT_WHIRLPOOL, interact_whirlpool },
+	{ INTERACT_STRONG_WIND, interact_strong_wind },
+	{ INTERACT_FLAME, interact_flame },
+	{ INTERACT_SNUFIT_BULLET, interact_snufit_bullet },
+	{ INTERACT_CLAM_OR_BUBBA, interact_clam_or_bubba },
+	{ INTERACT_BULLY, interact_bully },
+	{ INTERACT_SHOCK, interact_shock },
+	{ INTERACT_BOUNCE_TOP2, interact_bounce_top },
+	{ INTERACT_MR_BLIZZARD, interact_mr_blizzard },
+	{ INTERACT_HIT_FROM_BELOW, interact_hit_from_below },
+	{ INTERACT_BOUNCE_TOP, interact_bounce_top },
+	{ INTERACT_DAMAGE, interact_damage },
+	{ INTERACT_POLE, interact_pole },
+	{ INTERACT_HOOT, interact_hoot },
+	{ INTERACT_BREAKABLE, interact_breakable },
+	{ INTERACT_KOOPA, interact_bounce_top },
+	{ INTERACT_KOOPA_SHELL, interact_koopa_shell },
+	{ INTERACT_UNKNOWN_08, interact_unknown_08 },
+	{ INTERACT_CAP, interact_cap },
+	{ INTERACT_GRABBABLE, interact_grabbable },
+	{ INTERACT_TEXT, interact_text },
 };
 
 static u32 sForwardKnockbackActions[][3] = {
-    { ACT_SOFT_FORWARD_GROUND_KB, ACT_FORWARD_GROUND_KB, ACT_HARD_FORWARD_GROUND_KB },
-    { ACT_FORWARD_AIR_KB,         ACT_FORWARD_AIR_KB,    ACT_HARD_FORWARD_AIR_KB },
-    { ACT_FORWARD_WATER_KB,       ACT_FORWARD_WATER_KB,  ACT_FORWARD_WATER_KB },
+	{ ACT_SOFT_FORWARD_GROUND_KB, ACT_FORWARD_GROUND_KB, ACT_HARD_FORWARD_GROUND_KB },
+	{ ACT_FORWARD_AIR_KB, ACT_FORWARD_AIR_KB, ACT_HARD_FORWARD_AIR_KB },
+	{ ACT_FORWARD_WATER_KB, ACT_FORWARD_WATER_KB, ACT_FORWARD_WATER_KB },
 };
 
 static u32 sBackwardKnockbackActions[][3] = {
-    { ACT_SOFT_BACKWARD_GROUND_KB, ACT_BACKWARD_GROUND_KB, ACT_HARD_BACKWARD_GROUND_KB },
-    { ACT_BACKWARD_AIR_KB,         ACT_BACKWARD_AIR_KB,    ACT_HARD_BACKWARD_AIR_KB },
-    { ACT_BACKWARD_WATER_KB,       ACT_BACKWARD_WATER_KB,  ACT_BACKWARD_WATER_KB },
+	{ ACT_SOFT_BACKWARD_GROUND_KB, ACT_BACKWARD_GROUND_KB, ACT_HARD_BACKWARD_GROUND_KB },
+	{ ACT_BACKWARD_AIR_KB, ACT_BACKWARD_AIR_KB, ACT_HARD_BACKWARD_AIR_KB },
+	{ ACT_BACKWARD_WATER_KB, ACT_BACKWARD_WATER_KB, ACT_BACKWARD_WATER_KB },
 };
 
 static u8 sDisplayingDoorText = FALSE;
@@ -135,19 +136,21 @@ static u8 sPssSlideStarted = FALSE;
  * Returns the type of cap Mario is wearing.
  */
 u32 get_mario_cap_flag(struct Object *capObject) {
-    const BehaviorScript *script = virtual_to_segmented(0x13, capObject->behavior);
-
-    if (script == bhvNormalCap) {
-        return MARIO_NORMAL_CAP;
-    } else if (script == bhvMetalCap) {
-        return MARIO_METAL_CAP;
-    } else if (script == bhvWingCap) {
-        return MARIO_WING_CAP;
-    } else if (script == bhvVanishCap) {
-        return MARIO_VANISH_CAP;
-    }
+	const BehaviorScript *script = virtual_to_segmented(0x13, capObject->behavior);
 
-    return 0;
+	if (script == bhvNormalCap) {
+		return MARIO_NORMAL_CAP;
+	} else if (script == bhvMetalCap) {
+		return MARIO_METAL_CAP;
+	} else if (script == bhvWingCap) {
+		return MARIO_WING_CAP;
+	} else if (script == bhvVanishCap) {
+		return MARIO_VANISH_CAP;
+	} else if (script == bhvRainbowStar) {
+		return MARIO_RAINBOW;
+	}
+
+	return 0;
 }
 
 /**
@@ -155,24 +158,24 @@ u32 get_mario_cap_flag(struct Object *capObject) {
  * in the angular range given towards Mario.
  */
 u32 object_facing_mario(struct MarioState *m, struct Object *o, s16 angleRange) {
-    f32 dx = m->pos[0] - o->oPosX;
-    f32 dz = m->pos[2] - o->oPosZ;
+	f32 dx = m->pos[0] - o->oPosX;
+	f32 dz = m->pos[2] - o->oPosZ;
 
-    s16 angleToMario = atan2s(dz, dx);
-    s16 dAngle = angleToMario - o->oMoveAngleYaw;
+	s16 angleToMario = atan2s(dz, dx);
+	s16 dAngle = angleToMario - o->oMoveAngleYaw;
 
-    if (-angleRange <= dAngle && dAngle <= angleRange) {
-        return TRUE;
-    }
+	if (-angleRange <= dAngle && dAngle <= angleRange) {
+		return TRUE;
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 s16 mario_obj_angle_to_object(struct MarioState *m, struct Object *o) {
-    f32 dx = o->oPosX - m->pos[0];
-    f32 dz = o->oPosZ - m->pos[2];
+	f32 dx = o->oPosX - m->pos[0];
+	f32 dz = o->oPosZ - m->pos[2];
 
-    return atan2s(dz, dx);
+	return atan2s(dz, dx);
 }
 
 /**
@@ -180,1510 +183,1554 @@ s16 mario_obj_angle_to_object(struct MarioState *m, struct Object *o) {
  * action, speed, and position.
  */
 u32 determine_interaction(struct MarioState *m, struct Object *o) {
-    u32 interaction = 0;
-    u32 action = m->action;
-
-    if (action & ACT_FLAG_ATTACKING) {
-        if (action == ACT_PUNCHING || action == ACT_MOVE_PUNCHING || action == ACT_JUMP_KICK) {
-            s16 dYawToObject = mario_obj_angle_to_object(m, o) - m->faceAngle[1];
-
-            if (m->flags & MARIO_PUNCHING) {
-                // 120 degrees total, or 60 each way
-                if (-0x2AAA <= dYawToObject && dYawToObject <= 0x2AAA) {
-                    interaction = INT_PUNCH;
-                }
-            }
-            if (m->flags & MARIO_KICKING) {
-                // 120 degrees total, or 60 each way
-                if (-0x2AAA <= dYawToObject && dYawToObject <= 0x2AAA) {
-                    interaction = INT_KICK;
-                }
-            }
-            if (m->flags & MARIO_TRIPPING) {
-                // 180 degrees total, or 90 each way
-                if (-0x4000 <= dYawToObject && dYawToObject <= 0x4000) {
-                    interaction = INT_TRIP;
-                }
-            }
-        } else if (action == ACT_GROUND_POUND || action == ACT_TWIRLING) {
-            if (m->vel[1] < 0.0f) {
-                interaction = INT_GROUND_POUND_OR_TWIRL;
-            }
-        } else if (action == ACT_GROUND_POUND_LAND || action == ACT_TWIRL_LAND) {
-            // Neither ground pounding nor twirling change Mario's vertical speed on landing.,
-            // so the speed check is nearly always true (perhaps not if you land while going upwards?)
-            // Additionally, actionState it set on each first thing in their action, so this is
-            // only true prior to the very first frame (i.e. active 1 frame prior to it run).
-            if (m->vel[1] < 0.0f && m->actionState == 0) {
-                interaction = INT_GROUND_POUND_OR_TWIRL;
-            }
-        } else if (action == ACT_SLIDE_KICK || action == ACT_SLIDE_KICK_SLIDE) {
-            interaction = INT_SLIDE_KICK;
-        } else if (action & ACT_FLAG_RIDING_SHELL) {
-            interaction = INT_FAST_ATTACK_OR_SHELL;
-        } else if (m->forwardVel <= -26.0f || 26.0f <= m->forwardVel) {
-            interaction = INT_FAST_ATTACK_OR_SHELL;
-        }
-    }
-
-    // Prior to this, the interaction type could be overwritten. This requires, however,
-    // that the interaction not be set prior. This specifically overrides turning a ground
-    // pound into just a bounce.
-    if (interaction == 0 && (action & ACT_FLAG_AIR)) {
-        if (m->vel[1] < 0.0f) {
-            if (m->pos[1] > o->oPosY) {
-                interaction = INT_HIT_FROM_ABOVE;
-            }
-        } else {
-            if (m->pos[1] < o->oPosY) {
-                interaction = INT_HIT_FROM_BELOW;
-            }
-        }
-    }
-
-    return interaction;
+	u32 interaction = 0;
+	u32 action = m->action;
+
+	if (action & ACT_FLAG_ATTACKING) {
+		if (action == ACT_PUNCHING || action == ACT_MOVE_PUNCHING || action == ACT_JUMP_KICK) {
+			s16 dYawToObject = mario_obj_angle_to_object(m, o) - m->faceAngle[1];
+
+			if (m->flags & MARIO_PUNCHING) {
+				// 120 degrees total, or 60 each way
+				if (-0x2AAA <= dYawToObject && dYawToObject <= 0x2AAA) {
+					interaction = INT_PUNCH;
+				}
+			}
+			if (m->flags & MARIO_KICKING) {
+				// 120 degrees total, or 60 each way
+				if (-0x2AAA <= dYawToObject && dYawToObject <= 0x2AAA) {
+					interaction = INT_KICK;
+				}
+			}
+			if (m->flags & MARIO_TRIPPING) {
+				// 180 degrees total, or 90 each way
+				if (-0x4000 <= dYawToObject && dYawToObject <= 0x4000) {
+					interaction = INT_TRIP;
+				}
+			}
+		} else if (action == ACT_GROUND_POUND || action == ACT_TWIRLING) {
+			if (m->vel[1] < 0.0f) {
+				interaction = INT_GROUND_POUND_OR_TWIRL;
+			}
+		} else if (action == ACT_GROUND_POUND_LAND || action == ACT_TWIRL_LAND) {
+			// Neither ground pounding nor twirling change Mario's vertical speed on landing.,
+			// so the speed check is nearly always true (perhaps not if you land while going upwards?)
+			// Additionally, actionState it set on each first thing in their action, so this is
+			// only true prior to the very first frame (i.e. active 1 frame prior to it run).
+			if (m->vel[1] < 0.0f && m->actionState == 0) {
+				interaction = INT_GROUND_POUND_OR_TWIRL;
+			}
+		} else if (action == ACT_SLIDE_KICK || action == ACT_SLIDE_KICK_SLIDE) {
+			interaction = INT_SLIDE_KICK;
+		} else if (action & ACT_FLAG_RIDING_SHELL || m->flags & MARIO_RAINBOW) {
+			interaction = INT_FAST_ATTACK_OR_SHELL;
+		} else if (m->forwardVel <= -26.0f || 26.0f <= m->forwardVel) {
+			interaction = INT_FAST_ATTACK_OR_SHELL;
+		}
+	}
+
+	// Prior to this, the interaction type could be overwritten. This requires, however,
+	// that the interaction not be set prior. This specifically overrides turning a ground
+	// pound into just a bounce.
+	if (interaction == 0 && (action & ACT_FLAG_AIR)) {
+		if (m->vel[1] < 0.0f) {
+			if (m->pos[1] > o->oPosY) {
+				interaction = INT_HIT_FROM_ABOVE;
+			}
+		} else {
+			if (m->pos[1] < o->oPosY) {
+				interaction = INT_HIT_FROM_BELOW;
+			}
+		}
+	}
+
+	return interaction;
 }
 
 /**
  * Sets the interaction types for INT_STATUS_INTERACTED, INT_STATUS_WAS_ATTACKED
  */
 u32 attack_object(struct Object *o, s32 interaction) {
-    u32 attackType = 0;
-
-    switch (interaction) {
-        case INT_GROUND_POUND_OR_TWIRL:
-            attackType = ATTACK_GROUND_POUND_OR_TWIRL;
-            break;
-        case INT_PUNCH:
-            attackType = ATTACK_PUNCH;
-            break;
-        case INT_KICK:
-        case INT_TRIP:
-            attackType = ATTACK_KICK_OR_TRIP;
-            break;
-        case INT_SLIDE_KICK:
-        case INT_FAST_ATTACK_OR_SHELL:
-            attackType = ATTACK_FAST_ATTACK;
-            break;
-        case INT_HIT_FROM_ABOVE:
-            attackType = ATTACK_FROM_ABOVE;
-            break;
-        case INT_HIT_FROM_BELOW:
-            attackType = ATTACK_FROM_BELOW;
-            break;
-    }
-
-    o->oInteractStatus = attackType + (INT_STATUS_INTERACTED | INT_STATUS_WAS_ATTACKED);
-    return attackType;
+	u32 attackType = 0;
+
+	switch (interaction) {
+		case INT_GROUND_POUND_OR_TWIRL:
+			attackType = ATTACK_GROUND_POUND_OR_TWIRL;
+			break;
+		case INT_PUNCH:
+			attackType = ATTACK_PUNCH;
+			break;
+		case INT_KICK:
+		case INT_TRIP:
+			attackType = ATTACK_KICK_OR_TRIP;
+			break;
+		case INT_SLIDE_KICK:
+		case INT_FAST_ATTACK_OR_SHELL:
+			attackType = ATTACK_FAST_ATTACK;
+			break;
+		case INT_HIT_FROM_ABOVE:
+			attackType = ATTACK_FROM_ABOVE;
+			break;
+		case INT_HIT_FROM_BELOW:
+			attackType = ATTACK_FROM_BELOW;
+			break;
+	}
+
+	o->oInteractStatus = attackType + (INT_STATUS_INTERACTED | INT_STATUS_WAS_ATTACKED);
+	return attackType;
 }
 
 void mario_stop_riding_object(struct MarioState *m) {
-    if (m->riddenObj != NULL) {
-        m->riddenObj->oInteractStatus = INT_STATUS_STOP_RIDING;
-        stop_shell_music();
-        m->riddenObj = NULL;
-    }
+	if (m->riddenObj != NULL) {
+		m->riddenObj->oInteractStatus = INT_STATUS_STOP_RIDING;
+		stop_shell_music();
+		m->riddenObj = NULL;
+	}
 }
 
 void mario_grab_used_object(struct MarioState *m) {
-    if (m->heldObj == NULL) {
-        m->heldObj = m->usedObj;
-        obj_set_held_state(m->heldObj, bhvCarrySomething3);
-    }
+	if (m->heldObj == NULL) {
+		m->heldObj = m->usedObj;
+		obj_set_held_state(m->heldObj, bhvCarrySomething3);
+	}
 }
 
 void mario_drop_held_object(struct MarioState *m) {
-    if (m->heldObj != NULL) {
-        if (m->heldObj->behavior == segmented_to_virtual(bhvKoopaShellUnderwater)) {
-            stop_shell_music();
-        }
+	if (m->heldObj != NULL) {
+		if (m->heldObj->behavior == segmented_to_virtual(bhvKoopaShellUnderwater)) {
+			stop_shell_music();
+		}
 
-        obj_set_held_state(m->heldObj, bhvCarrySomething4);
+		obj_set_held_state(m->heldObj, bhvCarrySomething4);
 
-        // ! When dropping an object instead of throwing it, it will be put at Mario's
-        // y-positon instead of the HOLP's y-position. This fact is often exploited when
-        // cloning objects.
-        m->heldObj->oPosX = m->marioBodyState->heldObjLastPosition[0];
-        m->heldObj->oPosY = m->pos[1];
-        m->heldObj->oPosZ = m->marioBodyState->heldObjLastPosition[2];
+		// ! When dropping an object instead of throwing it, it will be put at Mario's
+		// y-positon instead of the HOLP's y-position. This fact is often exploited when
+		// cloning objects.
+		m->heldObj->oPosX = m->marioBodyState->heldObjLastPosition[0];
+		m->heldObj->oPosY = m->pos[1];
+		m->heldObj->oPosZ = m->marioBodyState->heldObjLastPosition[2];
 
-        m->heldObj->oMoveAngleYaw = m->faceAngle[1];
+		m->heldObj->oMoveAngleYaw = m->faceAngle[1];
 
-        m->heldObj = NULL;
-    }
+		m->heldObj = NULL;
+	}
 }
 
 void mario_throw_held_object(struct MarioState *m) {
-    if (m->heldObj != NULL) {
-        if (m->heldObj->behavior == segmented_to_virtual(bhvKoopaShellUnderwater)) {
-            stop_shell_music();
-        }
+	if (m->heldObj != NULL) {
+		if (m->heldObj->behavior == segmented_to_virtual(bhvKoopaShellUnderwater)) {
+			stop_shell_music();
+		}
 
-        obj_set_held_state(m->heldObj, bhvCarrySomething5);
+		obj_set_held_state(m->heldObj, bhvCarrySomething5);
 
-        m->heldObj->oPosX = m->marioBodyState->heldObjLastPosition[0] + 32.0f * sins(m->faceAngle[1]);
-        m->heldObj->oPosY = m->marioBodyState->heldObjLastPosition[1];
-        m->heldObj->oPosZ = m->marioBodyState->heldObjLastPosition[2] + 32.0f * coss(m->faceAngle[1]);
+		m->heldObj->oPosX = m->marioBodyState->heldObjLastPosition[0] + 32.0f * sins(m->faceAngle[1]);
+		m->heldObj->oPosY = m->marioBodyState->heldObjLastPosition[1];
+		m->heldObj->oPosZ = m->marioBodyState->heldObjLastPosition[2] + 32.0f * coss(m->faceAngle[1]);
 
-        m->heldObj->oMoveAngleYaw = m->faceAngle[1];
+		m->heldObj->oMoveAngleYaw = m->faceAngle[1];
 
-        m->heldObj = NULL;
-    }
+		m->heldObj = NULL;
+	}
 }
 
 void mario_stop_riding_and_holding(struct MarioState *m) {
-    mario_drop_held_object(m);
-    mario_stop_riding_object(m);
+	mario_drop_held_object(m);
+	mario_stop_riding_object(m);
 
-    if (m->action == ACT_RIDING_HOOT) {
-        m->usedObj->oInteractStatus = 0;
-        m->usedObj->oHootMarioReleaseTime = gGlobalTimer;
-    }
+	if (m->action == ACT_RIDING_HOOT) {
+		m->usedObj->oInteractStatus = 0;
+		m->usedObj->oHootMarioReleaseTime = gGlobalTimer;
+	}
 }
 
 u32 does_mario_have_normal_cap_on_head(struct MarioState *m) {
-    return (m->flags & (MARIO_CAPS | MARIO_CAP_ON_HEAD)) == (MARIO_NORMAL_CAP | MARIO_CAP_ON_HEAD);
+	return (m->flags & (MARIO_CAPS | MARIO_CAP_ON_HEAD)) == (MARIO_NORMAL_CAP | MARIO_CAP_ON_HEAD);
 }
 
 void mario_blow_off_cap(struct MarioState *m, f32 capSpeed) {
-    struct Object *capObject;
+	struct Object *capObject;
 
-    if (does_mario_have_normal_cap_on_head(m)) {
-        save_file_set_cap_pos(m->pos[0], m->pos[1], m->pos[2]);
+	if (does_mario_have_normal_cap_on_head(m)) {
+		save_file_set_cap_pos(m->pos[0], m->pos[1], m->pos[2]);
 
-        m->flags &= ~(MARIO_NORMAL_CAP | MARIO_CAP_ON_HEAD);
+		m->flags &= ~(MARIO_NORMAL_CAP | MARIO_CAP_ON_HEAD);
 
-        capObject = spawn_object(m->marioObj, MODEL_MARIOS_CAP, bhvNormalCap);
+		capObject = spawn_object(m->marioObj, MODEL_MARIOS_CAP, bhvNormalCap);
 
-        capObject->oPosY += (m->action & ACT_FLAG_SHORT_HITBOX) ? 120.0f : 180.0f;
-        capObject->oForwardVel = capSpeed;
-        capObject->oMoveAngleYaw = (s16)(m->faceAngle[1] + 0x400);
+		capObject->oPosY += (m->action & ACT_FLAG_SHORT_HITBOX) ? 120.0f : 180.0f;
+		capObject->oForwardVel = capSpeed;
+		capObject->oMoveAngleYaw = (s16)(m->faceAngle[1] + 0x400);
 
-        if (m->forwardVel < 0.0f) {
-            capObject->oMoveAngleYaw = (s16)(capObject->oMoveAngleYaw + 0x8000);
-        }
-    }
+		if (m->forwardVel < 0.0f) {
+			capObject->oMoveAngleYaw = (s16)(capObject->oMoveAngleYaw + 0x8000);
+		}
+	}
 }
 
 u32 mario_lose_cap_to_enemy(u32 arg) {
-    u32 wasWearingCap = FALSE;
+	u32 wasWearingCap = FALSE;
 
-    if (does_mario_have_normal_cap_on_head(gMarioState)) {
-        save_file_set_flags(arg == 1 ? SAVE_FLAG_CAP_ON_KLEPTO : SAVE_FLAG_CAP_ON_UKIKI);
-        gMarioState->flags &= ~(MARIO_NORMAL_CAP | MARIO_CAP_ON_HEAD);
-        wasWearingCap = TRUE;
-    }
+	if (does_mario_have_normal_cap_on_head(gMarioState)) {
+		save_file_set_flags(arg == 1 ? SAVE_FLAG_CAP_ON_KLEPTO : SAVE_FLAG_CAP_ON_UKIKI);
+		gMarioState->flags &= ~(MARIO_NORMAL_CAP | MARIO_CAP_ON_HEAD);
+		wasWearingCap = TRUE;
+	}
 
-    return wasWearingCap;
+	return wasWearingCap;
 }
 
 void mario_retrieve_cap(void) {
-    mario_drop_held_object(gMarioState);
-    save_file_clear_flags(SAVE_FLAG_CAP_ON_KLEPTO | SAVE_FLAG_CAP_ON_UKIKI);
-    gMarioState->flags &= ~MARIO_CAP_ON_HEAD;
-    gMarioState->flags |= MARIO_NORMAL_CAP | MARIO_CAP_IN_HAND;
+	mario_drop_held_object(gMarioState);
+	save_file_clear_flags(SAVE_FLAG_CAP_ON_KLEPTO | SAVE_FLAG_CAP_ON_UKIKI);
+	gMarioState->flags &= ~MARIO_CAP_ON_HEAD;
+	gMarioState->flags |= MARIO_NORMAL_CAP | MARIO_CAP_IN_HAND;
 }
 
 u32 able_to_grab_object(struct MarioState *m, UNUSED struct Object *o) {
-    u32 action = m->action;
+	u32 action = m->action;
 
-    if (action == ACT_DIVE_SLIDE || action == ACT_DIVE) {
-        if (!(o->oInteractionSubtype & INT_SUBTYPE_GRABS_MARIO)) {
-            return TRUE;
-        }
-    } else if (action == ACT_PUNCHING || action == ACT_MOVE_PUNCHING) {
-        if (m->actionArg < 2) {
-            return TRUE;
-        }
-    }
+	if (action == ACT_DIVE_SLIDE || action == ACT_DIVE) {
+		if (!(o->oInteractionSubtype & INT_SUBTYPE_GRABS_MARIO)) {
+			return TRUE;
+		}
+	} else if (action == ACT_PUNCHING || action == ACT_MOVE_PUNCHING) {
+		if (m->actionArg < 2) {
+			return TRUE;
+		}
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 struct Object *mario_get_collided_object(struct MarioState *m, u32 interactType) {
-    s32 i;
-    struct Object *object;
+	s32 i;
+	struct Object *object;
 
-    for (i = 0; i < m->marioObj->numCollidedObjs; i++) {
-        object = m->marioObj->collidedObjs[i];
+	for (i = 0; i < m->marioObj->numCollidedObjs; i++) {
+		object = m->marioObj->collidedObjs[i];
 
-        if (object->oInteractType == interactType) {
-            return object;
-        }
-    }
+		if (object->oInteractType == interactType) {
+			return object;
+		}
+	}
 
-    return NULL;
+	return NULL;
 }
 
 u32 mario_check_object_grab(struct MarioState *m) {
-    u32 result = FALSE;
-    const BehaviorScript *script;
-
-    if (m->input & INPUT_INTERACT_OBJ_GRABBABLE) {
-        script = virtual_to_segmented(0x13, m->interactObj->behavior);
-
-        if (script == bhvBowser) {
-            s16 facingDYaw = m->faceAngle[1] - m->interactObj->oMoveAngleYaw;
-            if (facingDYaw >= -0x5555 && facingDYaw <= 0x5555) {
-                m->faceAngle[1] = m->interactObj->oMoveAngleYaw;
-                m->usedObj = m->interactObj;
-                result = set_mario_action(m, ACT_PICKING_UP_BOWSER, 0);
-            }
-        } else {
-            s16 facingDYaw = mario_obj_angle_to_object(m, m->interactObj) - m->faceAngle[1];
-            if (facingDYaw >= -0x2AAA && facingDYaw <= 0x2AAA) {
-                m->usedObj = m->interactObj;
+	u32 result = FALSE;
+	const BehaviorScript *script;
 
-                if (!(m->action & ACT_FLAG_AIR)) {
-                    set_mario_action(
-                        m, (m->action & ACT_FLAG_DIVING) ? ACT_DIVE_PICKING_UP : ACT_PICKING_UP, 0);
-                }
+	if (m->input & INPUT_INTERACT_OBJ_GRABBABLE) {
+		script = virtual_to_segmented(0x13, m->interactObj->behavior);
 
-                result = TRUE;
-            }
-        }
-    }
-
-    return result;
-}
-
-u32 bully_knock_back_mario(struct MarioState *mario) {
-    struct BullyCollisionData marioData;
-    struct BullyCollisionData bullyData;
-    s16 newMarioYaw;
-    s16 newBullyYaw;
-    s16 marioDYaw;
-    UNUSED s16 bullyDYaw;
-
-    u32 bonkAction = 0;
-
-    struct Object *bully = mario->interactObj;
-
-    //! Conversion ratios multiply to more than 1 (could allow unbounded speed
-    // with bonk cancel - but this isn't important for regular bully battery)
-    f32 bullyToMarioRatio = bully->hitboxRadius * 3 / 53;
-    f32 marioToBullyRatio = 53.0f / bully->hitboxRadius;
+		if (script == bhvBowser) {
+			s16 facingDYaw = m->faceAngle[1] - m->interactObj->oMoveAngleYaw;
+			if (facingDYaw >= -0x5555 && facingDYaw <= 0x5555) {
+				m->faceAngle[1] = m->interactObj->oMoveAngleYaw;
+				m->usedObj = m->interactObj;
+				result = set_mario_action(m, ACT_PICKING_UP_BOWSER, 0);
+			}
+		} else {
+			s16 facingDYaw = mario_obj_angle_to_object(m, m->interactObj) - m->faceAngle[1];
+			if (facingDYaw >= -0x2AAA && facingDYaw <= 0x2AAA) {
+				m->usedObj = m->interactObj;
 
-    init_bully_collision_data(&marioData, mario->pos[0], mario->pos[2], mario->forwardVel,
-                              mario->faceAngle[1], bullyToMarioRatio, 52.0f);
+				if (!(m->action & ACT_FLAG_AIR)) {
+					set_mario_action(
+						m, (m->action & ACT_FLAG_DIVING) ? ACT_DIVE_PICKING_UP : ACT_PICKING_UP, 0);
+				}
 
-    init_bully_collision_data(&bullyData, bully->oPosX, bully->oPosZ, bully->oForwardVel,
-                              bully->oMoveAngleYaw, marioToBullyRatio, bully->hitboxRadius + 2.0f);
+				result = TRUE;
+			}
+		}
+	}
 
-    if (mario->forwardVel != 0.0f) {
-        transfer_bully_speed(&marioData, &bullyData);
-    } else {
-        transfer_bully_speed(&bullyData, &marioData);
-    }
-
-    newMarioYaw = atan2s(marioData.velZ, marioData.velX);
-    newBullyYaw = atan2s(bullyData.velZ, bullyData.velX);
-
-    marioDYaw = newMarioYaw - mario->faceAngle[1];
-    bullyDYaw = newBullyYaw - bully->oMoveAngleYaw;
-
-    mario->faceAngle[1] = newMarioYaw;
-    mario->forwardVel = sqrtf(marioData.velX * marioData.velX + marioData.velZ * marioData.velZ);
-    mario->pos[0] = marioData.posX;
-    mario->pos[2] = marioData.posZ;
-
-    bully->oMoveAngleYaw = newBullyYaw;
-    bully->oForwardVel = sqrtf(bullyData.velX * bullyData.velX + bullyData.velZ * bullyData.velZ);
-    bully->oPosX = bullyData.posX;
-    bully->oPosZ = bullyData.posZ;
-
-    if (marioDYaw < -0x4000 || marioDYaw > 0x4000) {
-        mario->faceAngle[1] += 0x8000;
-        mario->forwardVel *= -1.0f;
-
-        if (mario->action & ACT_FLAG_AIR) {
-            bonkAction = ACT_BACKWARD_AIR_KB;
-        } else {
-            bonkAction = ACT_SOFT_BACKWARD_GROUND_KB;
-        }
-    } else {
-        if (mario->action & ACT_FLAG_AIR) {
-            bonkAction = ACT_FORWARD_AIR_KB;
-        } else {
-            bonkAction = ACT_SOFT_FORWARD_GROUND_KB;
-        }
-    }
+	return result;
+}
 
-    return bonkAction;
+u32 bully_knock_back_mario(struct MarioState *mario) {
+	struct BullyCollisionData marioData;
+	struct BullyCollisionData bullyData;
+	s16 newMarioYaw;
+	s16 newBullyYaw;
+	s16 marioDYaw;
+	UNUSED s16 bullyDYaw;
+
+	u32 bonkAction = 0;
+
+	struct Object *bully = mario->interactObj;
+
+	//! Conversion ratios multiply to more than 1 (could allow unbounded speed
+	// with bonk cancel - but this isn't important for regular bully battery)
+	f32 bullyToMarioRatio = bully->hitboxRadius * 3 / 53;
+	f32 marioToBullyRatio = 53.0f / bully->hitboxRadius;
+
+	init_bully_collision_data(&marioData, mario->pos[0], mario->pos[2], mario->forwardVel,
+							  mario->faceAngle[1], bullyToMarioRatio, 52.0f);
+
+	init_bully_collision_data(&bullyData, bully->oPosX, bully->oPosZ, bully->oForwardVel,
+							  bully->oMoveAngleYaw, marioToBullyRatio, bully->hitboxRadius + 2.0f);
+
+	if (mario->forwardVel != 0.0f) {
+		transfer_bully_speed(&marioData, &bullyData);
+	} else {
+		transfer_bully_speed(&bullyData, &marioData);
+	}
+
+	newMarioYaw = atan2s(marioData.velZ, marioData.velX);
+	newBullyYaw = atan2s(bullyData.velZ, bullyData.velX);
+
+	marioDYaw = newMarioYaw - mario->faceAngle[1];
+	bullyDYaw = newBullyYaw - bully->oMoveAngleYaw;
+
+	mario->faceAngle[1] = newMarioYaw;
+	mario->forwardVel = sqrtf(marioData.velX * marioData.velX + marioData.velZ * marioData.velZ);
+	mario->pos[0] = marioData.posX;
+	mario->pos[2] = marioData.posZ;
+
+	bully->oMoveAngleYaw = newBullyYaw;
+	bully->oForwardVel = sqrtf(bullyData.velX * bullyData.velX + bullyData.velZ * bullyData.velZ);
+	bully->oPosX = bullyData.posX;
+	bully->oPosZ = bullyData.posZ;
+
+	if (marioDYaw < -0x4000 || marioDYaw > 0x4000) {
+		mario->faceAngle[1] += 0x8000;
+		mario->forwardVel *= -1.0f;
+
+		if (mario->action & ACT_FLAG_AIR) {
+			bonkAction = ACT_BACKWARD_AIR_KB;
+		} else {
+			bonkAction = ACT_SOFT_BACKWARD_GROUND_KB;
+		}
+	} else {
+		if (mario->action & ACT_FLAG_AIR) {
+			bonkAction = ACT_FORWARD_AIR_KB;
+		} else {
+			bonkAction = ACT_SOFT_FORWARD_GROUND_KB;
+		}
+	}
+
+	return bonkAction;
 }
 
 void bounce_off_object(struct MarioState *m, struct Object *o, f32 velY) {
-    m->pos[1] = o->oPosY + o->hitboxHeight;
-    m->vel[1] = velY;
+	m->pos[1] = o->oPosY + o->hitboxHeight;
+	m->vel[1] = velY;
 
-    m->flags &= ~MARIO_UNKNOWN_08;
+	m->flags &= ~MARIO_UNKNOWN_08;
 
-    play_sound(SOUND_ACTION_BOUNCE_OFF_OBJECT, m->marioObj->header.gfx.cameraToObject);
+	play_sound(SOUND_ACTION_BOUNCE_OFF_OBJECT, m->marioObj->header.gfx.cameraToObject);
 }
 
 void hit_object_from_below(struct MarioState *m, UNUSED struct Object *o) {
-    m->vel[1] = 0.0f;
-    set_camera_shake_from_hit(SHAKE_HIT_FROM_BELOW);
+	m->vel[1] = 0.0f;
+	set_camera_shake_from_hit(SHAKE_HIT_FROM_BELOW);
 }
 
 static u32 unused_determine_knockback_action(struct MarioState *m) {
-    u32 bonkAction;
-    s16 angleToObject = mario_obj_angle_to_object(m, m->interactObj);
-    s16 facingDYaw = angleToObject - m->faceAngle[1];
-
-    if (m->forwardVel < 16.0f) {
-        m->forwardVel = 16.0f;
-    }
-
-    m->faceAngle[1] = angleToObject;
-
-    if (facingDYaw >= -0x4000 && facingDYaw <= 0x4000) {
-        m->forwardVel *= -1.0f;
-        if (m->action & (ACT_FLAG_AIR | ACT_FLAG_ON_POLE | ACT_FLAG_HANGING)) {
-            bonkAction = ACT_BACKWARD_AIR_KB;
-        } else {
-            bonkAction = ACT_SOFT_BACKWARD_GROUND_KB;
-        }
-    } else {
-        m->faceAngle[1] += 0x8000;
-        if (m->action & (ACT_FLAG_AIR | ACT_FLAG_ON_POLE | ACT_FLAG_HANGING)) {
-            bonkAction = ACT_FORWARD_AIR_KB;
-        } else {
-            bonkAction = ACT_SOFT_FORWARD_GROUND_KB;
-        }
-    }
-
-    return bonkAction;
+	u32 bonkAction;
+	s16 angleToObject = mario_obj_angle_to_object(m, m->interactObj);
+	s16 facingDYaw = angleToObject - m->faceAngle[1];
+
+	if (m->forwardVel < 16.0f) {
+		m->forwardVel = 16.0f;
+	}
+
+	m->faceAngle[1] = angleToObject;
+
+	if (facingDYaw >= -0x4000 && facingDYaw <= 0x4000) {
+		m->forwardVel *= -1.0f;
+		if (m->action & (ACT_FLAG_AIR | ACT_FLAG_ON_POLE | ACT_FLAG_HANGING)) {
+			bonkAction = ACT_BACKWARD_AIR_KB;
+		} else {
+			bonkAction = ACT_SOFT_BACKWARD_GROUND_KB;
+		}
+	} else {
+		m->faceAngle[1] += 0x8000;
+		if (m->action & (ACT_FLAG_AIR | ACT_FLAG_ON_POLE | ACT_FLAG_HANGING)) {
+			bonkAction = ACT_FORWARD_AIR_KB;
+		} else {
+			bonkAction = ACT_SOFT_FORWARD_GROUND_KB;
+		}
+	}
+
+	return bonkAction;
 }
 
 u32 determine_knockback_action(struct MarioState *m, UNUSED s32 arg) {
-    u32 bonkAction;
-
-    s16 terrainIndex = 0; // 1 = air, 2 = water, 0 = default
-    s16 strengthIndex = 0;
-
-    s16 angleToObject = mario_obj_angle_to_object(m, m->interactObj);
-    s16 facingDYaw = angleToObject - m->faceAngle[1];
-    s16 remainingHealth = m->health - 0x40 * m->hurtCounter;
-
-    if (m->action & (ACT_FLAG_SWIMMING | ACT_FLAG_METAL_WATER)) {
-        terrainIndex = 2;
-    } else if (m->action & (ACT_FLAG_AIR | ACT_FLAG_ON_POLE | ACT_FLAG_HANGING)) {
-        terrainIndex = 1;
-    }
-
-    if (remainingHealth < 0x100) {
-        strengthIndex = 2;
-    } else if (m->interactObj->oDamageOrCoinValue >= 4) {
-        strengthIndex = 2;
-    } else if (m->interactObj->oDamageOrCoinValue >= 2) {
-        strengthIndex = 1;
-    }
-
-    m->faceAngle[1] = angleToObject;
+	u32 bonkAction;
+
+	s16 terrainIndex = 0; // 1 = air, 2 = water, 0 = default
+	s16 strengthIndex = 0;
+
+	s16 angleToObject = mario_obj_angle_to_object(m, m->interactObj);
+	s16 facingDYaw = angleToObject - m->faceAngle[1];
+	s16 remainingHealth = m->health - 0x40 * m->hurtCounter;
+
+	if (m->action & (ACT_FLAG_SWIMMING | ACT_FLAG_METAL_WATER)) {
+		terrainIndex = 2;
+	} else if (m->action & (ACT_FLAG_AIR | ACT_FLAG_ON_POLE | ACT_FLAG_HANGING)) {
+		terrainIndex = 1;
+	}
+
+	if (remainingHealth < 0x100) {
+		strengthIndex = 2;
+	} else if (m->interactObj->oDamageOrCoinValue >= 4) {
+		strengthIndex = 2;
+	} else if (m->interactObj->oDamageOrCoinValue >= 2) {
+		strengthIndex = 1;
+	}
+
+	m->faceAngle[1] = angleToObject;
+
+	if (terrainIndex == 2) {
+		if (m->forwardVel < 28.0f) {
+			mario_set_forward_vel(m, 28.0f);
+		}
+
+		if (m->pos[1] >= m->interactObj->oPosY) {
+			if (m->vel[1] < 20.0f) {
+				m->vel[1] = 20.0f;
+			}
+		} else {
+			if (m->vel[1] > 0.0f) {
+				m->vel[1] = 0.0f;
+			}
+		}
+	} else {
+		if (m->forwardVel < 16.0f) {
+			mario_set_forward_vel(m, 16.0f);
+		}
+	}
+
+	if (-0x4000 <= facingDYaw && facingDYaw <= 0x4000) {
+		m->forwardVel *= -1.0f;
+		bonkAction = sBackwardKnockbackActions[terrainIndex][strengthIndex];
+	} else {
+		m->faceAngle[1] += 0x8000;
+		bonkAction = sForwardKnockbackActions[terrainIndex][strengthIndex];
+	}
+
+	return bonkAction;
+}
 
-    if (terrainIndex == 2) {
-        if (m->forwardVel < 28.0f) {
-            mario_set_forward_vel(m, 28.0f);
-        }
+void push_mario_out_of_object(struct MarioState *m, struct Object *o, f32 padding) {
+	f32 minDistance = o->hitboxRadius + m->marioObj->hitboxRadius + padding;
 
-        if (m->pos[1] >= m->interactObj->oPosY) {
-            if (m->vel[1] < 20.0f) {
-                m->vel[1] = 20.0f;
-            }
-        } else {
-            if (m->vel[1] > 0.0f) {
-                m->vel[1] = 0.0f;
-            }
-        }
-    } else {
-        if (m->forwardVel < 16.0f) {
-            mario_set_forward_vel(m, 16.0f);
-        }
-    }
+	f32 offsetX = m->pos[0] - o->oPosX;
+	f32 offsetZ = m->pos[2] - o->oPosZ;
+	f32 distance = sqrtf(offsetX * offsetX + offsetZ * offsetZ);
 
-    if (-0x4000 <= facingDYaw && facingDYaw <= 0x4000) {
-        m->forwardVel *= -1.0f;
-        bonkAction = sBackwardKnockbackActions[terrainIndex][strengthIndex];
-    } else {
-        m->faceAngle[1] += 0x8000;
-        bonkAction = sForwardKnockbackActions[terrainIndex][strengthIndex];
-    }
+	if (distance < minDistance) {
+		struct Surface *floor;
+		s16 pushAngle;
+		f32 newMarioX;
+		f32 newMarioZ;
 
-    return bonkAction;
-}
+		if (distance == 0.0f) {
+			pushAngle = m->faceAngle[1];
+		} else {
+			pushAngle = atan2s(offsetZ, offsetX);
+		}
 
-void push_mario_out_of_object(struct MarioState *m, struct Object *o, f32 padding) {
-    f32 minDistance = o->hitboxRadius + m->marioObj->hitboxRadius + padding;
-
-    f32 offsetX = m->pos[0] - o->oPosX;
-    f32 offsetZ = m->pos[2] - o->oPosZ;
-    f32 distance = sqrtf(offsetX * offsetX + offsetZ * offsetZ);
-
-    if (distance < minDistance) {
-        struct Surface *floor;
-        s16 pushAngle;
-        f32 newMarioX;
-        f32 newMarioZ;
-
-        if (distance == 0.0f) {
-            pushAngle = m->faceAngle[1];
-        } else {
-            pushAngle = atan2s(offsetZ, offsetX);
-        }
-
-        newMarioX = o->oPosX + minDistance * sins(pushAngle);
-        newMarioZ = o->oPosZ + minDistance * coss(pushAngle);
+		newMarioX = o->oPosX + minDistance * sins(pushAngle);
+		newMarioZ = o->oPosZ + minDistance * coss(pushAngle);
 
-        f32_find_wall_collision(&newMarioX, &m->pos[1], &newMarioZ, 60.0f, 50.0f);
+		f32_find_wall_collision(&newMarioX, &m->pos[1], &newMarioZ, 60.0f, 50.0f);
 
-        find_floor(newMarioX, m->pos[1], newMarioZ, &floor);
-        if (floor != NULL) {
-            //! Doesn't update Mario's referenced floor (allows oob death when
-            // an object pushes you into a steep slope while in a ground action)
-            m->pos[0] = newMarioX;
-            m->pos[2] = newMarioZ;
-        }
-    }
+		find_floor(newMarioX, m->pos[1], newMarioZ, &floor);
+		if (floor != NULL) {
+			//! Doesn't update Mario's referenced floor (allows oob death when
+			// an object pushes you into a steep slope while in a ground action)
+			m->pos[0] = newMarioX;
+			m->pos[2] = newMarioZ;
+		}
+	}
 }
 
 void bounce_back_from_attack(struct MarioState *m, u32 interaction) {
-    if (interaction & (INT_PUNCH | INT_KICK | INT_TRIP)) {
-        if (m->action == ACT_PUNCHING) {
-            m->action = ACT_MOVE_PUNCHING;
-        }
+	if (interaction & (INT_PUNCH | INT_KICK | INT_TRIP)) {
+		if (m->action == ACT_PUNCHING) {
+			m->action = ACT_MOVE_PUNCHING;
+		}
 
-        if (m->action & ACT_FLAG_AIR) {
-            mario_set_forward_vel(m, -16.0f);
-        } else {
-            mario_set_forward_vel(m, -48.0f);
-        }
+		if (m->action & ACT_FLAG_AIR) {
+			mario_set_forward_vel(m, -16.0f);
+		} else {
+			mario_set_forward_vel(m, -48.0f);
+		}
 
-        set_camera_shake_from_hit(SHAKE_ATTACK);
-        m->particleFlags |= PARTICLE_TRIANGLE;
-    }
+		set_camera_shake_from_hit(SHAKE_ATTACK);
+		m->particleFlags |= PARTICLE_TRIANGLE;
+	}
 
-    if (interaction & (INT_PUNCH | INT_KICK | INT_TRIP | INT_FAST_ATTACK_OR_SHELL)) {
-        play_sound(SOUND_ACTION_HIT_2, m->marioObj->header.gfx.cameraToObject);
-    }
+	if (interaction & (INT_PUNCH | INT_KICK | INT_TRIP | INT_FAST_ATTACK_OR_SHELL)) {
+		play_sound(SOUND_ACTION_HIT_2, m->marioObj->header.gfx.cameraToObject);
+	}
 }
 
 u32 should_push_or_pull_door(struct MarioState *m, struct Object *o) {
-    f32 dx = o->oPosX - m->pos[0];
-    f32 dz = o->oPosZ - m->pos[2];
+	f32 dx = o->oPosX - m->pos[0];
+	f32 dz = o->oPosZ - m->pos[2];
 
-    s16 dYaw = o->oMoveAngleYaw - atan2s(dz, dx);
+	s16 dYaw = o->oMoveAngleYaw - atan2s(dz, dx);
 
-    return (dYaw >= -0x4000 && dYaw <= 0x4000) ? 0x00000001 : 0x00000002;
+	return (dYaw >= -0x4000 && dYaw <= 0x4000) ? 0x00000001 : 0x00000002;
 }
 
 u32 take_damage_from_interact_object(struct MarioState *m) {
-    s32 shake;
-    s32 damage = m->interactObj->oDamageOrCoinValue;
-
-    if (damage >= 4) {
-        shake = SHAKE_LARGE_DAMAGE;
-    } else if (damage >= 2) {
-        shake = SHAKE_MED_DAMAGE;
-    } else {
-        shake = SHAKE_SMALL_DAMAGE;
-    }
+	s32 shake;
+	s32 damage = m->interactObj->oDamageOrCoinValue;
 
-    if (!(m->flags & MARIO_CAP_ON_HEAD)) {
-        damage += (damage + 1) / 2;
-    }
+	if (damage >= 4) {
+		shake = SHAKE_LARGE_DAMAGE;
+	} else if (damage >= 2) {
+		shake = SHAKE_MED_DAMAGE;
+	} else {
+		shake = SHAKE_SMALL_DAMAGE;
+	}
 
-    if (m->flags & MARIO_METAL_CAP) {
-        damage = 0;
-    }
+	if (!(m->flags & MARIO_CAP_ON_HEAD)) {
+		damage += (damage + 1) / 2;
+	}
 
-    m->hurtCounter += 4 * damage;
+	if (m->flags & MARIO_METAL_CAP || m->flags & MARIO_RAINBOW) {
+		damage = 0;
+	}
+
+	m->hurtCounter += 4 * damage;
 
 #ifdef VERSION_SH
-    queue_rumble_data(5, 80);
+	queue_rumble_data(5, 80);
 #endif
-    set_camera_shake_from_hit(shake);
+	set_camera_shake_from_hit(shake);
 
-    return damage;
+	return damage;
 }
 
 u32 take_damage_and_knock_back(struct MarioState *m, struct Object *o) {
-    u32 damage;
+	u32 damage;
 
-    if (!sInvulnerable && !(m->flags & MARIO_VANISH_CAP)
-        && !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
-        o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_ATTACKED_MARIO;
-        m->interactObj = o;
+	if (!sInvulnerable && !(m->flags & MARIO_VANISH_CAP) && !(m->flags & MARIO_RAINBOW)
+		&& !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+		o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_ATTACKED_MARIO;
+		m->interactObj = o;
 
-        damage = take_damage_from_interact_object(m);
+		damage = take_damage_from_interact_object(m);
 
-        if (o->oInteractionSubtype & INT_SUBTYPE_BIG_KNOCKBACK) {
-            m->forwardVel = 40.0f;
-        }
+		if (o->oInteractionSubtype & INT_SUBTYPE_BIG_KNOCKBACK) {
+			m->forwardVel = 40.0f;
+		}
 
-        if (o->oDamageOrCoinValue > 0) {
-            play_sound(SOUND_MARIO_ATTACKED, m->marioObj->header.gfx.cameraToObject);
-        }
+		if (o->oDamageOrCoinValue > 0) {
+			play_sound(SOUND_MARIO_ATTACKED, m->marioObj->header.gfx.cameraToObject);
+		}
 
-        update_mario_sound_and_camera(m);
-        return drop_and_set_mario_action(m, determine_knockback_action(m, o->oDamageOrCoinValue),
-                                         damage);
-    }
+		update_mario_sound_and_camera(m);
+		return drop_and_set_mario_action(m, determine_knockback_action(m, o->oDamageOrCoinValue),
+										 damage);
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 void reset_mario_pitch(struct MarioState *m) {
-    if (m->action == ACT_WATER_JUMP || m->action == ACT_SHOT_FROM_CANNON || m->action == ACT_FLYING) {
-        set_camera_mode(m->area->camera, m->area->camera->defMode, 1);
-        m->faceAngle[0] = 0;
-    }
+	if (m->action == ACT_WATER_JUMP || m->action == ACT_SHOT_FROM_CANNON || m->action == ACT_FLYING) {
+		set_camera_mode(m->area->camera, m->area->camera->defMode, 1);
+		m->faceAngle[0] = 0;
+	}
 }
 
 u32 interact_coin(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    m->numCoins += o->oDamageOrCoinValue;
-    m->healCounter += 4 * o->oDamageOrCoinValue;
+	m->numCoins += o->oDamageOrCoinValue;
+	m->healCounter += 4 * o->oDamageOrCoinValue;
 
-    o->oInteractStatus = INT_STATUS_INTERACTED;
+	o->oInteractStatus = INT_STATUS_INTERACTED;
 
-    if (COURSE_IS_MAIN_COURSE(gCurrCourseNum) && m->numCoins - o->oDamageOrCoinValue < 100
-        && m->numCoins >= 100) {
-        bhv_spawn_star_no_level_exit(6);
-    }
+	if (COURSE_IS_MAIN_COURSE(gCurrCourseNum) && m->numCoins - o->oDamageOrCoinValue < 100
+		&& m->numCoins >= 100) {
+		bhv_spawn_star_no_level_exit(6);
+	}
 #ifdef VERSION_SH
-    if (o->oDamageOrCoinValue >= 2) {
-        queue_rumble_data(5, 80);
-    }
+	if (o->oDamageOrCoinValue >= 2) {
+		queue_rumble_data(5, 80);
+	}
 #endif
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_water_ring(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    m->healCounter += 4 * o->oDamageOrCoinValue;
-    o->oInteractStatus = INT_STATUS_INTERACTED;
-    return FALSE;
+	m->healCounter += 4 * o->oDamageOrCoinValue;
+	o->oInteractStatus = INT_STATUS_INTERACTED;
+	return FALSE;
 }
 
 u32 interact_star_or_key(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    u32 starIndex;
-    u32 starGrabAction = ACT_STAR_DANCE_EXIT;
-    u32 noExit = (o->oInteractionSubtype & INT_SUBTYPE_NO_EXIT) != 0;
-    u32 grandStar = (o->oInteractionSubtype & INT_SUBTYPE_GRAND_STAR) != 0;
+	u32 starIndex;
+	u32 starGrabAction = ACT_STAR_DANCE_EXIT;
+	u32 noExit = (o->oInteractionSubtype & INT_SUBTYPE_NO_EXIT) != 0;
+	u32 grandStar = (o->oInteractionSubtype & INT_SUBTYPE_GRAND_STAR) != 0;
 
-    if (m->health >= 0x100) {
-        mario_stop_riding_and_holding(m);
+	if (m->health >= 0x100) {
+		mario_stop_riding_and_holding(m);
 #ifdef VERSION_SH
-        queue_rumble_data(5, 80);
+		queue_rumble_data(5, 80);
 #endif
 
-        if (!noExit) {
-            m->hurtCounter = 0;
-            m->healCounter = 0;
-            if (m->capTimer > 1) {
-                m->capTimer = 1;
-            }
-        }
+		if (!noExit) {
+			m->hurtCounter = 0;
+			m->healCounter = 0;
+			if (m->capTimer > 1) {
+				m->capTimer = 1;
+			}
+		}
 
-        if (noExit) {
-            starGrabAction = ACT_STAR_DANCE_NO_EXIT;
-        }
+		if (noExit) {
+			starGrabAction = ACT_STAR_DANCE_NO_EXIT;
+		}
 
-        if (m->action & ACT_FLAG_SWIMMING) {
-            starGrabAction = ACT_STAR_DANCE_WATER;
-        }
+		if (m->action & ACT_FLAG_SWIMMING) {
+			starGrabAction = ACT_STAR_DANCE_WATER;
+		}
 
-        if (m->action & ACT_FLAG_METAL_WATER) {
-            starGrabAction = ACT_STAR_DANCE_WATER;
-        }
+		if (m->action & ACT_FLAG_METAL_WATER) {
+			starGrabAction = ACT_STAR_DANCE_WATER;
+		}
 
-        if (m->action & ACT_FLAG_AIR) {
-            starGrabAction = ACT_FALL_AFTER_STAR_GRAB;
-        }
+		if (m->action & ACT_FLAG_AIR) {
+			starGrabAction = ACT_FALL_AFTER_STAR_GRAB;
+		}
 
-        spawn_object(o, MODEL_NONE, bhvStarKeyCollectionPuffSpawner);
+		spawn_object(o, MODEL_NONE, bhvStarKeyCollectionPuffSpawner);
 
-        o->oInteractStatus = INT_STATUS_INTERACTED;
-        m->interactObj = o;
-        m->usedObj = o;
+		o->oInteractStatus = INT_STATUS_INTERACTED;
+		m->interactObj = o;
+		m->usedObj = o;
 
-        starIndex = (o->oBehParams >> 24) & 0x1F;
-        save_file_collect_star_or_key(m->numCoins, starIndex);
+		starIndex = (o->oBehParams >> 24) & 0x1F;
+		save_file_collect_star_or_key(m->numCoins, starIndex);
 
-        m->numStars =
-            save_file_get_total_star_count(gCurrSaveFileNum - 1, COURSE_MIN - 1, COURSE_MAX - 1);
+		m->numStars =
+			save_file_get_total_star_count(gCurrSaveFileNum - 1, COURSE_MIN - 1, COURSE_MAX - 1);
 
-        if (!noExit) {
-            drop_queued_background_music();
-            fadeout_level_music(126);
-        }
+		if (!noExit) {
+			drop_queued_background_music();
+			fadeout_level_music(126);
+		}
 
-        play_sound(SOUND_MENU_STAR_SOUND, m->marioObj->header.gfx.cameraToObject);
+		play_sound(SOUND_MENU_STAR_SOUND, m->marioObj->header.gfx.cameraToObject);
 #ifndef VERSION_JP
-        update_mario_sound_and_camera(m);
+		update_mario_sound_and_camera(m);
 #endif
 
-        if (grandStar) {
-            return set_mario_action(m, ACT_JUMBO_STAR_CUTSCENE, 0);
-        }
+		if (grandStar) {
+			return set_mario_action(m, ACT_JUMBO_STAR_CUTSCENE, 0);
+		}
 
-        return set_mario_action(m, starGrabAction, noExit + 2 * grandStar);
-    }
+		return set_mario_action(m, starGrabAction, noExit + 2 * grandStar);
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_bbh_entrance(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    if (m->action != ACT_BBH_ENTER_SPIN && m->action != ACT_BBH_ENTER_JUMP) {
-        mario_stop_riding_and_holding(m);
+	if (m->action != ACT_BBH_ENTER_SPIN && m->action != ACT_BBH_ENTER_JUMP) {
+		mario_stop_riding_and_holding(m);
 
-        o->oInteractStatus = INT_STATUS_INTERACTED;
-        m->interactObj = o;
-        m->usedObj = o;
+		o->oInteractStatus = INT_STATUS_INTERACTED;
+		m->interactObj = o;
+		m->usedObj = o;
 
-        if (m->action & ACT_FLAG_AIR) {
-            return set_mario_action(m, ACT_BBH_ENTER_SPIN, 0);
-        }
+		if (m->action & ACT_FLAG_AIR) {
+			return set_mario_action(m, ACT_BBH_ENTER_SPIN, 0);
+		}
 
-        return set_mario_action(m, ACT_BBH_ENTER_JUMP, 0);
-    }
+		return set_mario_action(m, ACT_BBH_ENTER_JUMP, 0);
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_warp(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    u32 action;
-
-    if (o->oInteractionSubtype & INT_SUBTYPE_FADING_WARP) {
-        action = m->action;
-
-        if (action == ACT_TELEPORT_FADE_IN) {
-            sJustTeleported = TRUE;
-
-        } else if (!sJustTeleported) {
-            if (action == ACT_IDLE || action == ACT_PANTING || action == ACT_STANDING_AGAINST_WALL
-                || action == ACT_CROUCHING) {
-                m->interactObj = o;
-                m->usedObj = o;
-
-                sJustTeleported = TRUE;
-                return set_mario_action(m, ACT_TELEPORT_FADE_OUT, 0);
-            }
-        }
-    } else {
-        if (m->action != ACT_EMERGE_FROM_PIPE) {
-            o->oInteractStatus = INT_STATUS_INTERACTED;
-            m->interactObj = o;
-            m->usedObj = o;
+	u32 action;
+
+	if (o->oInteractionSubtype & INT_SUBTYPE_FADING_WARP) {
+		action = m->action;
+
+		if (action == ACT_TELEPORT_FADE_IN) {
+			sJustTeleported = TRUE;
+
+		} else if (!sJustTeleported) {
+			if (action == ACT_IDLE || action == ACT_PANTING || action == ACT_STANDING_AGAINST_WALL
+				|| action == ACT_CROUCHING) {
+				m->interactObj = o;
+				m->usedObj = o;
+
+				sJustTeleported = TRUE;
+				return set_mario_action(m, ACT_TELEPORT_FADE_OUT, 0);
+			}
+		}
+	} else {
+		if (m->action != ACT_EMERGE_FROM_PIPE) {
+			o->oInteractStatus = INT_STATUS_INTERACTED;
+			m->interactObj = o;
+			m->usedObj = o;
 
 #ifdef VERSION_SH
-            if (o->collisionData == segmented_to_virtual(warp_pipe_seg3_collision_03009AC8)) {
-                play_sound(SOUND_MENU_ENTER_PIPE, m->marioObj->header.gfx.cameraToObject);
-                queue_rumble_data(15, 80);
-            } else {
-                play_sound(SOUND_MENU_ENTER_HOLE, m->marioObj->header.gfx.cameraToObject);
-                queue_rumble_data(12, 80);
-            }
+			if (o->collisionData == segmented_to_virtual(warp_pipe_seg3_collision_03009AC8)) {
+				play_sound(SOUND_MENU_ENTER_PIPE, m->marioObj->header.gfx.cameraToObject);
+				queue_rumble_data(15, 80);
+			} else {
+				play_sound(SOUND_MENU_ENTER_HOLE, m->marioObj->header.gfx.cameraToObject);
+				queue_rumble_data(12, 80);
+			}
 #else
-            play_sound(o->collisionData == segmented_to_virtual(warp_pipe_seg3_collision_03009AC8)
-                           ? SOUND_MENU_ENTER_PIPE
-                           : SOUND_MENU_ENTER_HOLE,
-                       m->marioObj->header.gfx.cameraToObject);
+			play_sound(o->collisionData == segmented_to_virtual(warp_pipe_seg3_collision_03009AC8)
+						   ? SOUND_MENU_ENTER_PIPE
+						   : SOUND_MENU_ENTER_HOLE,
+					   m->marioObj->header.gfx.cameraToObject);
 #endif
 
-            mario_stop_riding_object(m);
-            return set_mario_action(m, ACT_DISAPPEARED, (WARP_OP_WARP_OBJECT << 16) + 2);
-        }
-    }
+			mario_stop_riding_object(m);
+			return set_mario_action(m, ACT_DISAPPEARED, (WARP_OP_WARP_OBJECT << 16) + 2);
+		}
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_warp_door(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    u32 doorAction = 0;
-    u32 saveFlags = save_file_get_flags();
-    s16 warpDoorId = o->oBehParams >> 24;
-    u32 actionArg;
-
-    if (m->action == ACT_WALKING || m->action == ACT_DECELERATING) {
-        if (warpDoorId == 1 && !(saveFlags & SAVE_FLAG_UNLOCKED_UPSTAIRS_DOOR)) {
-            if (!(saveFlags & SAVE_FLAG_HAVE_KEY_2)) {
-                if (!sDisplayingDoorText) {
-                    set_mario_action(m, ACT_READING_AUTOMATIC_DIALOG,
-                                     (saveFlags & SAVE_FLAG_HAVE_KEY_1) ? DIALOG_023 : DIALOG_022);
-                }
-                sDisplayingDoorText = TRUE;
-
-                return FALSE;
-            }
-
-            doorAction = ACT_UNLOCKING_KEY_DOOR;
-        }
-
-        if (warpDoorId == 2 && !(saveFlags & SAVE_FLAG_UNLOCKED_BASEMENT_DOOR)) {
-            if (!(saveFlags & SAVE_FLAG_HAVE_KEY_1)) {
-                if (!sDisplayingDoorText) {
-                    // Moat door skip was intended confirmed
-                    set_mario_action(m, ACT_READING_AUTOMATIC_DIALOG,
-                                     (saveFlags & SAVE_FLAG_HAVE_KEY_2) ? DIALOG_023 : DIALOG_022);
-                }
-                sDisplayingDoorText = TRUE;
-
-                return FALSE;
-            }
-
-            doorAction = ACT_UNLOCKING_KEY_DOOR;
-        }
-
-        if (m->action == ACT_WALKING || m->action == ACT_DECELERATING) {
-            actionArg = should_push_or_pull_door(m, o) + 0x00000004;
-
-            if (doorAction == 0) {
-                if (actionArg & 0x00000001) {
-                    doorAction = ACT_PULLING_DOOR;
-                } else {
-                    doorAction = ACT_PUSHING_DOOR;
-                }
-            }
-
-            m->interactObj = o;
-            m->usedObj = o;
-            return set_mario_action(m, doorAction, actionArg);
-        }
-    }
-
-    return FALSE;
+	u32 doorAction = 0;
+	u32 saveFlags = save_file_get_flags();
+	s16 warpDoorId = o->oBehParams >> 24;
+	u32 actionArg;
+
+	if (m->action == ACT_WALKING || m->action == ACT_DECELERATING) {
+		if (warpDoorId == 1 && !(saveFlags & SAVE_FLAG_UNLOCKED_UPSTAIRS_DOOR)) {
+			if (!(saveFlags & SAVE_FLAG_HAVE_KEY_2)) {
+				if (!sDisplayingDoorText) {
+					set_mario_action(m, ACT_READING_AUTOMATIC_DIALOG,
+									 (saveFlags & SAVE_FLAG_HAVE_KEY_1) ? DIALOG_023 : DIALOG_022);
+				}
+				sDisplayingDoorText = TRUE;
+
+				return FALSE;
+			}
+
+			doorAction = ACT_UNLOCKING_KEY_DOOR;
+		}
+
+		if (warpDoorId == 2 && !(saveFlags & SAVE_FLAG_UNLOCKED_BASEMENT_DOOR)) {
+			if (!(saveFlags & SAVE_FLAG_HAVE_KEY_1)) {
+				if (!sDisplayingDoorText) {
+					// Moat door skip was intended confirmed
+					set_mario_action(m, ACT_READING_AUTOMATIC_DIALOG,
+									 (saveFlags & SAVE_FLAG_HAVE_KEY_2) ? DIALOG_023 : DIALOG_022);
+				}
+				sDisplayingDoorText = TRUE;
+
+				return FALSE;
+			}
+
+			doorAction = ACT_UNLOCKING_KEY_DOOR;
+		}
+
+		if (m->action == ACT_WALKING || m->action == ACT_DECELERATING) {
+			actionArg = should_push_or_pull_door(m, o) + 0x00000004;
+
+			if (doorAction == 0) {
+				if (actionArg & 0x00000001) {
+					doorAction = ACT_PULLING_DOOR;
+				} else {
+					doorAction = ACT_PUSHING_DOOR;
+				}
+			}
+
+			m->interactObj = o;
+			m->usedObj = o;
+			return set_mario_action(m, doorAction, actionArg);
+		}
+	}
+
+	return FALSE;
 }
 
 u32 get_door_save_file_flag(struct Object *door) {
-    u32 saveFileFlag = 0;
-    s16 requiredNumStars = door->oBehParams >> 24;
-
-    s16 isCcmDoor = door->oPosX < 0.0f;
-    s16 isPssDoor = door->oPosY > 500.0f;
-
-    switch (requiredNumStars) {
-        case 1:
-            if (isPssDoor) {
-                saveFileFlag = SAVE_FLAG_UNLOCKED_PSS_DOOR;
-            } else {
-                saveFileFlag = SAVE_FLAG_UNLOCKED_WF_DOOR;
-            }
-            break;
+	u32 saveFileFlag = 0;
+	s16 requiredNumStars = door->oBehParams >> 24;
 
-        case 3:
-            if (isCcmDoor) {
-                saveFileFlag = SAVE_FLAG_UNLOCKED_CCM_DOOR;
-            } else {
-                saveFileFlag = SAVE_FLAG_UNLOCKED_JRB_DOOR;
-            }
-            break;
-
-        case 8:
-            saveFileFlag = SAVE_FLAG_UNLOCKED_BITDW_DOOR;
-            break;
-
-        case 30:
-            saveFileFlag = SAVE_FLAG_UNLOCKED_BITFS_DOOR;
-            break;
-
-        case 50:
-            saveFileFlag = SAVE_FLAG_UNLOCKED_50_STAR_DOOR;
-            break;
-    }
-
-    return saveFileFlag;
-}
-
-u32 interact_door(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    s16 requiredNumStars = o->oBehParams >> 24;
-    s16 numStars = save_file_get_total_star_count(gCurrSaveFileNum - 1, COURSE_MIN - 1, COURSE_MAX - 1);
-
-    if (m->action == ACT_WALKING || m->action == ACT_DECELERATING) {
-        if (numStars >= requiredNumStars) {
-            u32 actionArg = should_push_or_pull_door(m, o);
-            u32 enterDoorAction;
-            u32 doorSaveFileFlag;
-
-            if (actionArg & 0x00000001) {
-                enterDoorAction = ACT_PULLING_DOOR;
-            } else {
-                enterDoorAction = ACT_PUSHING_DOOR;
-            }
+	s16 isCcmDoor = door->oPosX < 0.0f;
+	s16 isPssDoor = door->oPosY > 500.0f;
 
-            doorSaveFileFlag = get_door_save_file_flag(o);
-            m->interactObj = o;
-            m->usedObj = o;
+	switch (requiredNumStars) {
+		case 1:
+			if (isPssDoor) {
+				saveFileFlag = SAVE_FLAG_UNLOCKED_PSS_DOOR;
+			} else {
+				saveFileFlag = SAVE_FLAG_UNLOCKED_WF_DOOR;
+			}
+			break;
 
-            if (o->oInteractionSubtype & INT_SUBTYPE_STAR_DOOR) {
-                enterDoorAction = ACT_ENTERING_STAR_DOOR;
-            }
+		case 3:
+			if (isCcmDoor) {
+				saveFileFlag = SAVE_FLAG_UNLOCKED_CCM_DOOR;
+			} else {
+				saveFileFlag = SAVE_FLAG_UNLOCKED_JRB_DOOR;
+			}
+			break;
 
-            if (doorSaveFileFlag != 0 && !(save_file_get_flags() & doorSaveFileFlag)) {
-                enterDoorAction = ACT_UNLOCKING_STAR_DOOR;
-            }
+		case 8:
+			saveFileFlag = SAVE_FLAG_UNLOCKED_BITDW_DOOR;
+			break;
 
-            return set_mario_action(m, enterDoorAction, actionArg);
-        } else if (!sDisplayingDoorText) {
-            u32 text = DIALOG_022 << 16;
-
-            switch (requiredNumStars) {
-                case 1:
-                    text = DIALOG_024 << 16;
-                    break;
-                case 3:
-                    text = DIALOG_025 << 16;
-                    break;
-                case 8:
-                    text = DIALOG_026 << 16;
-                    break;
-                case 30:
-                    text = DIALOG_027 << 16;
-                    break;
-                case 50:
-                    text = DIALOG_028 << 16;
-                    break;
-                case 70:
-                    text = DIALOG_029 << 16;
-                    break;
-            }
+		case 30:
+			saveFileFlag = SAVE_FLAG_UNLOCKED_BITFS_DOOR;
+			break;
 
-            text += requiredNumStars - numStars;
+		case 50:
+			saveFileFlag = SAVE_FLAG_UNLOCKED_50_STAR_DOOR;
+			break;
+	}
 
-            sDisplayingDoorText = TRUE;
-            return set_mario_action(m, ACT_READING_AUTOMATIC_DIALOG, text);
-        }
-    } else if (m->action == ACT_IDLE && sDisplayingDoorText == TRUE && requiredNumStars == 70) {
-        m->interactObj = o;
-        m->usedObj = o;
-        return set_mario_action(m, ACT_ENTERING_STAR_DOOR, should_push_or_pull_door(m, o));
-    }
+	return saveFileFlag;
+}
 
-    return FALSE;
+u32 interact_door(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+	s16 requiredNumStars = o->oBehParams >> 24;
+	s16 numStars = save_file_get_total_star_count(gCurrSaveFileNum - 1, COURSE_MIN - 1, COURSE_MAX - 1);
+
+	if (m->action == ACT_WALKING || m->action == ACT_DECELERATING) {
+		if (numStars >= requiredNumStars) {
+			u32 actionArg = should_push_or_pull_door(m, o);
+			u32 enterDoorAction;
+			u32 doorSaveFileFlag;
+
+			if (actionArg & 0x00000001) {
+				enterDoorAction = ACT_PULLING_DOOR;
+			} else {
+				enterDoorAction = ACT_PUSHING_DOOR;
+			}
+
+			doorSaveFileFlag = get_door_save_file_flag(o);
+			m->interactObj = o;
+			m->usedObj = o;
+
+			if (o->oInteractionSubtype & INT_SUBTYPE_STAR_DOOR) {
+				enterDoorAction = ACT_ENTERING_STAR_DOOR;
+			}
+
+			if (doorSaveFileFlag != 0 && !(save_file_get_flags() & doorSaveFileFlag)) {
+				enterDoorAction = ACT_UNLOCKING_STAR_DOOR;
+			}
+
+			return set_mario_action(m, enterDoorAction, actionArg);
+		} else if (!sDisplayingDoorText) {
+			u32 text = DIALOG_022 << 16;
+
+			switch (requiredNumStars) {
+				case 1:
+					text = DIALOG_024 << 16;
+					break;
+				case 3:
+					text = DIALOG_025 << 16;
+					break;
+				case 8:
+					text = DIALOG_026 << 16;
+					break;
+				case 30:
+					text = DIALOG_027 << 16;
+					break;
+				case 50:
+					text = DIALOG_028 << 16;
+					break;
+				case 70:
+					text = DIALOG_029 << 16;
+					break;
+			}
+
+			text += requiredNumStars - numStars;
+
+			sDisplayingDoorText = TRUE;
+			return set_mario_action(m, ACT_READING_AUTOMATIC_DIALOG, text);
+		}
+	} else if (m->action == ACT_IDLE && sDisplayingDoorText == TRUE && requiredNumStars == 70) {
+		m->interactObj = o;
+		m->usedObj = o;
+		return set_mario_action(m, ACT_ENTERING_STAR_DOOR, should_push_or_pull_door(m, o));
+	}
+
+	return FALSE;
 }
 
 u32 interact_cannon_base(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    if (m->action != ACT_IN_CANNON) {
-        mario_stop_riding_and_holding(m);
-        o->oInteractStatus = INT_STATUS_INTERACTED;
-        m->interactObj = o;
-        m->usedObj = o;
-        return set_mario_action(m, ACT_IN_CANNON, 0);
-    }
+	if (m->action != ACT_IN_CANNON) {
+		mario_stop_riding_and_holding(m);
+		o->oInteractStatus = INT_STATUS_INTERACTED;
+		m->interactObj = o;
+		m->usedObj = o;
+		return set_mario_action(m, ACT_IN_CANNON, 0);
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_igloo_barrier(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    //! Sets used object without changing action (LOTS of interesting glitches,
-    // but unfortunately the igloo barrier is the only object with this interaction
-    // type)
-    m->interactObj = o;
-    m->usedObj = o;
-    push_mario_out_of_object(m, o, 5.0f);
-    return FALSE;
+	//! Sets used object without changing action (LOTS of interesting glitches,
+	// but unfortunately the igloo barrier is the only object with this interaction
+	// type)
+	m->interactObj = o;
+	m->usedObj = o;
+	push_mario_out_of_object(m, o, 5.0f);
+	return FALSE;
 }
 
 u32 interact_tornado(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    struct Object *marioObj = m->marioObj;
+	struct Object *marioObj = m->marioObj;
 
-    if (m->action != ACT_TORNADO_TWIRLING && m->action != ACT_SQUISHED) {
-        mario_stop_riding_and_holding(m);
-        mario_set_forward_vel(m, 0.0f);
-        update_mario_sound_and_camera(m);
+	if (m->action != ACT_TORNADO_TWIRLING && m->action != ACT_SQUISHED) {
+		mario_stop_riding_and_holding(m);
+		mario_set_forward_vel(m, 0.0f);
+		update_mario_sound_and_camera(m);
 
-        o->oInteractStatus = INT_STATUS_INTERACTED;
-        m->interactObj = o;
-        m->usedObj = o;
+		o->oInteractStatus = INT_STATUS_INTERACTED;
+		m->interactObj = o;
+		m->usedObj = o;
 
-        marioObj->oMarioTornadoYawVel = 0x400;
-        marioObj->oMarioTornadoPosY = m->pos[1] - o->oPosY;
+		marioObj->oMarioTornadoYawVel = 0x400;
+		marioObj->oMarioTornadoPosY = m->pos[1] - o->oPosY;
 
-        play_sound(SOUND_MARIO_WAAAOOOW, m->marioObj->header.gfx.cameraToObject);
+		play_sound(SOUND_MARIO_WAAAOOOW, m->marioObj->header.gfx.cameraToObject);
 #ifdef VERSION_SH
-        queue_rumble_data(30, 60);
+		queue_rumble_data(30, 60);
 #endif
-        return set_mario_action(m, ACT_TORNADO_TWIRLING, m->action == ACT_TWIRLING);
-    }
+		return set_mario_action(m, ACT_TORNADO_TWIRLING, m->action == ACT_TWIRLING);
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_whirlpool(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    struct Object *marioObj = m->marioObj;
+	struct Object *marioObj = m->marioObj;
 
-    if (m->action != ACT_CAUGHT_IN_WHIRLPOOL) {
-        mario_stop_riding_and_holding(m);
-        o->oInteractStatus = INT_STATUS_INTERACTED;
-        m->interactObj = o;
-        m->usedObj = o;
+	if (m->action != ACT_CAUGHT_IN_WHIRLPOOL) {
+		mario_stop_riding_and_holding(m);
+		o->oInteractStatus = INT_STATUS_INTERACTED;
+		m->interactObj = o;
+		m->usedObj = o;
 
-        m->forwardVel = 0.0f;
+		m->forwardVel = 0.0f;
 
-        marioObj->oMarioWhirlpoolPosY = m->pos[1] - o->oPosY;
+		marioObj->oMarioWhirlpoolPosY = m->pos[1] - o->oPosY;
 
-        play_sound(SOUND_MARIO_WAAAOOOW, m->marioObj->header.gfx.cameraToObject);
+		play_sound(SOUND_MARIO_WAAAOOOW, m->marioObj->header.gfx.cameraToObject);
 #ifdef VERSION_SH
-        queue_rumble_data(30, 60);
+		queue_rumble_data(30, 60);
 #endif
-        return set_mario_action(m, ACT_CAUGHT_IN_WHIRLPOOL, 0);
-    }
+		return set_mario_action(m, ACT_CAUGHT_IN_WHIRLPOOL, 0);
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_strong_wind(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    UNUSED struct Object *marioObj = m->marioObj;
-
-    if (m->action != ACT_GETTING_BLOWN) {
-        mario_stop_riding_and_holding(m);
-        o->oInteractStatus = INT_STATUS_INTERACTED;
-        m->interactObj = o;
-        m->usedObj = o;
-
-        m->faceAngle[1] = o->oMoveAngleYaw + 0x8000;
-        m->unkC4 = 0.4f;
-        m->forwardVel = -24.0f;
-        m->vel[1] = 12.0f;
-
-        play_sound(SOUND_MARIO_WAAAOOOW, m->marioObj->header.gfx.cameraToObject);
-        update_mario_sound_and_camera(m);
-        return set_mario_action(m, ACT_GETTING_BLOWN, 0);
-    }
+	UNUSED struct Object *marioObj = m->marioObj;
+
+	if (m->action != ACT_GETTING_BLOWN) {
+		mario_stop_riding_and_holding(m);
+		o->oInteractStatus = INT_STATUS_INTERACTED;
+		m->interactObj = o;
+		m->usedObj = o;
+
+		m->faceAngle[1] = o->oMoveAngleYaw + 0x8000;
+		m->unkC4 = 0.4f;
+		m->forwardVel = -24.0f;
+		m->vel[1] = 12.0f;
+
+		play_sound(SOUND_MARIO_WAAAOOOW, m->marioObj->header.gfx.cameraToObject);
+		update_mario_sound_and_camera(m);
+		return set_mario_action(m, ACT_GETTING_BLOWN, 0);
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_flame(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    u32 burningAction = ACT_BURNING_JUMP;
+	u32 burningAction = ACT_BURNING_JUMP;
 
-    if (!sInvulnerable && !(m->flags & MARIO_METAL_CAP) && !(m->flags & MARIO_VANISH_CAP)
-        && !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+	if (!sInvulnerable && !(m->flags & MARIO_METAL_CAP) && !(m->flags & MARIO_RAINBOW)
+		&& !(m->flags & MARIO_VANISH_CAP)
+		&& !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
 #ifdef VERSION_SH
-        queue_rumble_data(5, 80);
+		queue_rumble_data(5, 80);
 #endif
-        o->oInteractStatus = INT_STATUS_INTERACTED;
-        m->interactObj = o;
-
-        if ((m->action & (ACT_FLAG_SWIMMING | ACT_FLAG_METAL_WATER))
-            || m->waterLevel - m->pos[1] > 50.0f) {
-            play_sound(SOUND_GENERAL_FLAME_OUT, m->marioObj->header.gfx.cameraToObject);
-        } else {
-            m->marioObj->oMarioBurnTimer = 0;
-            update_mario_sound_and_camera(m);
-            play_sound(SOUND_MARIO_ON_FIRE, m->marioObj->header.gfx.cameraToObject);
-
-            if ((m->action & ACT_FLAG_AIR) && m->vel[1] <= 0.0f) {
-                burningAction = ACT_BURNING_FALL;
-            }
+		o->oInteractStatus = INT_STATUS_INTERACTED;
+		m->interactObj = o;
 
-            return drop_and_set_mario_action(m, burningAction, 1);
-        }
-    }
+		if ((m->action & (ACT_FLAG_SWIMMING | ACT_FLAG_METAL_WATER))
+			|| m->waterLevel - m->pos[1] > 50.0f) {
+			play_sound(SOUND_GENERAL_FLAME_OUT, m->marioObj->header.gfx.cameraToObject);
+		} else {
+			m->marioObj->oMarioBurnTimer = 0;
+			update_mario_sound_and_camera(m);
+			play_sound(SOUND_MARIO_ON_FIRE, m->marioObj->header.gfx.cameraToObject);
+
+			if ((m->action & ACT_FLAG_AIR) && m->vel[1] <= 0.0f) {
 
-    return FALSE;
+				burningAction = ACT_BURNING_FALL;
+			}
+
+			return drop_and_set_mario_action(m, burningAction, 1);
+		}
+	}
+
+	return FALSE;
 }
 
 u32 interact_snufit_bullet(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    if (!sInvulnerable && !(m->flags & MARIO_VANISH_CAP)) {
-        if (m->flags & MARIO_METAL_CAP) {
-            o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_WAS_ATTACKED;
-            play_sound(SOUND_ACTION_UNKNOWN458, m->marioObj->header.gfx.cameraToObject);
-        } else {
-            o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_ATTACKED_MARIO;
-            m->interactObj = o;
-            take_damage_from_interact_object(m);
-
-            play_sound(SOUND_MARIO_ATTACKED, m->marioObj->header.gfx.cameraToObject);
-            update_mario_sound_and_camera(m);
-
-            return drop_and_set_mario_action(m, determine_knockback_action(m, o->oDamageOrCoinValue),
-                                             o->oDamageOrCoinValue);
-        }
-    }
+	if (!sInvulnerable && !(m->flags & MARIO_VANISH_CAP)) {
+		if (m->flags & MARIO_METAL_CAP || m->flags & MARIO_RAINBOW) {
+			o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_WAS_ATTACKED;
+			play_sound(SOUND_ACTION_UNKNOWN458, m->marioObj->header.gfx.cameraToObject);
+		} else {
+			o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_ATTACKED_MARIO;
+			m->interactObj = o;
+			take_damage_from_interact_object(m);
 
-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
-        sDelayInvincTimer = TRUE;
-    }
+			play_sound(SOUND_MARIO_ATTACKED, m->marioObj->header.gfx.cameraToObject);
+			update_mario_sound_and_camera(m);
 
-    return FALSE;
+			return drop_and_set_mario_action(m, determine_knockback_action(m, o->oDamageOrCoinValue),
+											 o->oDamageOrCoinValue);
+		}
+	}
+
+	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+		sDelayInvincTimer = TRUE;
+	}
+
+	return FALSE;
 }
 
 u32 interact_clam_or_bubba(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    if (o->oInteractionSubtype & INT_SUBTYPE_EATS_MARIO) {
-        o->oInteractStatus = INT_STATUS_INTERACTED;
-        m->interactObj = o;
-        return set_mario_action(m, ACT_EATEN_BY_BUBBA, 0);
-    } else if (take_damage_and_knock_back(m, o)) {
-        return TRUE;
-    }
+	if (o->oInteractionSubtype & INT_SUBTYPE_EATS_MARIO) {
+		o->oInteractStatus = INT_STATUS_INTERACTED;
+		m->interactObj = o;
+		return set_mario_action(m, ACT_EATEN_BY_BUBBA, 0);
+	} else if (take_damage_and_knock_back(m, o)) {
+		return TRUE;
+	}
 
-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
-        sDelayInvincTimer = TRUE;
-    }
+	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+		sDelayInvincTimer = TRUE;
+	}
 
-    return TRUE;
+	return TRUE;
 }
 
 u32 interact_bully(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    UNUSED u32 unused;
+	UNUSED u32 unused;
 
-    u32 interaction;
-    if (m->flags & MARIO_METAL_CAP) {
-        interaction = INT_FAST_ATTACK_OR_SHELL;
-    } else {
-        interaction = determine_interaction(m, o);
-    }
+	u32 interaction;
+	if (m->flags & MARIO_METAL_CAP || m->flags & MARIO_RAINBOW) {
+		interaction = INT_FAST_ATTACK_OR_SHELL;
+	} else {
+		interaction = determine_interaction(m, o);
+	}
 
-    m->interactObj = o;
+	m->interactObj = o;
 
-    if (interaction & INT_ATTACK_NOT_FROM_BELOW) {
+	if (interaction & INT_ATTACK_NOT_FROM_BELOW) {
 #ifdef VERSION_SH
-        queue_rumble_data(5, 80);
+		queue_rumble_data(5, 80);
 #endif
-        push_mario_out_of_object(m, o, 5.0f);
+		push_mario_out_of_object(m, o, 5.0f);
 
-        m->forwardVel = -16.0f;
-        o->oMoveAngleYaw = m->faceAngle[1];
-        o->oForwardVel = 3392.0f / o->hitboxRadius;
+		m->forwardVel = -16.0f;
+		o->oMoveAngleYaw = m->faceAngle[1];
+		o->oForwardVel = 3392.0f / o->hitboxRadius;
 
-        attack_object(o, interaction);
-        bounce_back_from_attack(m, interaction);
-        return TRUE;
-    }
+		attack_object(o, interaction);
+		bounce_back_from_attack(m, interaction);
+		return TRUE;
+	}
 
-    else if (!sInvulnerable && !(m->flags & MARIO_VANISH_CAP)
-             && !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
-        o->oInteractStatus = INT_STATUS_INTERACTED;
-        m->invincTimer = 2;
+	else if (!sInvulnerable && !(m->flags & MARIO_VANISH_CAP)
+			 && !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+		o->oInteractStatus = INT_STATUS_INTERACTED;
+		m->invincTimer = 2;
 
-        update_mario_sound_and_camera(m);
-        play_sound(SOUND_MARIO_EEUH, m->marioObj->header.gfx.cameraToObject);
-        play_sound(SOUND_OBJ_BULLY_METAL, m->marioObj->header.gfx.cameraToObject);
+		update_mario_sound_and_camera(m);
+		play_sound(SOUND_MARIO_EEUH, m->marioObj->header.gfx.cameraToObject);
+		play_sound(SOUND_OBJ_BULLY_METAL, m->marioObj->header.gfx.cameraToObject);
 
-        push_mario_out_of_object(m, o, 5.0f);
-        drop_and_set_mario_action(m, bully_knock_back_mario(m), 0);
+		push_mario_out_of_object(m, o, 5.0f);
+		drop_and_set_mario_action(m, bully_knock_back_mario(m), 0);
 #ifdef VERSION_SH
-        queue_rumble_data(5, 80);
+		queue_rumble_data(5, 80);
 #endif
-        return TRUE;
-    }
+		return TRUE;
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_shock(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    if (!sInvulnerable && !(m->flags & MARIO_VANISH_CAP)
-        && !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
-        u32 actionArg = (m->action & (ACT_FLAG_AIR | ACT_FLAG_ON_POLE | ACT_FLAG_HANGING)) == 0;
+	if (!sInvulnerable && !(m->flags & MARIO_VANISH_CAP) && !(m->flags & MARIO_RAINBOW)
+		&& !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+		u32 actionArg = (m->action & (ACT_FLAG_AIR | ACT_FLAG_ON_POLE | ACT_FLAG_HANGING)) == 0;
 
-        o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_ATTACKED_MARIO;
-        m->interactObj = o;
+		o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_ATTACKED_MARIO;
+		m->interactObj = o;
 
-        take_damage_from_interact_object(m);
-        play_sound(SOUND_MARIO_ATTACKED, m->marioObj->header.gfx.cameraToObject);
+		take_damage_from_interact_object(m);
+		play_sound(SOUND_MARIO_ATTACKED, m->marioObj->header.gfx.cameraToObject);
 #ifdef VERSION_SH
-        queue_rumble_data(70, 60);
+		queue_rumble_data(70, 60);
 #endif
 
-        if (m->action & (ACT_FLAG_SWIMMING | ACT_FLAG_METAL_WATER)) {
-            return drop_and_set_mario_action(m, ACT_WATER_SHOCKED, 0);
-        } else {
-            update_mario_sound_and_camera(m);
-            return drop_and_set_mario_action(m, ACT_SHOCKED, actionArg);
-        }
-    }
+		if (m->action & (ACT_FLAG_SWIMMING | ACT_FLAG_METAL_WATER)) {
+			return drop_and_set_mario_action(m, ACT_WATER_SHOCKED, 0);
+		} else {
+			update_mario_sound_and_camera(m);
+			return drop_and_set_mario_action(m, ACT_SHOCKED, actionArg);
+		}
+	}
 
-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
-        sDelayInvincTimer = TRUE;
-    }
+	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+		sDelayInvincTimer = TRUE;
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 static u32 interact_stub(UNUSED struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
-        sDelayInvincTimer = TRUE;
-    }
-    return FALSE;
+	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+		sDelayInvincTimer = TRUE;
+	}
+	return FALSE;
 }
 
 u32 interact_mr_blizzard(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    if (take_damage_and_knock_back(m, o)) {
-        return TRUE;
-    }
+    u32 interaction;
+    const BehaviorScript *script = virtual_to_segmented(0x13, o->behavior);
+	m->interactObj = o;
+	if (m->flags & MARIO_METAL_CAP || m->flags & MARIO_RAINBOW) {
+            interaction = INT_FAST_ATTACK_OR_SHELL;
+            attack_object(o, interaction);
+        }
+        
+	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+		sDelayInvincTimer = TRUE;
+	}
+	if (!(m->flags & MARIO_METAL_CAP) && !(m->flags & MARIO_RAINBOW)) {
+	if (take_damage_and_knock_back(m, o) && script == bhvCursya) {
+
+
+            if (o->oBehParams2ndByte == 0) {
+                m->flags |= MARIO_SLOW_CURSE;
+            }
+            if (o->oBehParams2ndByte == 1) {
+                m->flags |= MARIO_REVERSE;
+            }
+            if (o->oBehParams2ndByte == 2) {
+                m->flags |= MARIO_TECH_CURSE;
+            }
+            if (o->oBehParams2ndByte == 3) {
+                m->jumpModifier = 0.5f;
+            }
 
-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
-        sDelayInvincTimer = TRUE;
+
+            m->curseTimer = 1000;
+
+        } 
     }
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_hit_from_below(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    UNUSED u32 unused;
+	UNUSED u32 unused;
 
-    u32 interaction;
-    if (m->flags & MARIO_METAL_CAP) {
-        interaction = INT_FAST_ATTACK_OR_SHELL;
-    } else {
-        interaction = determine_interaction(m, o);
-    }
+	u32 interaction;
+	if (m->flags & MARIO_METAL_CAP || m->flags & MARIO_RAINBOW) {
+		interaction = INT_FAST_ATTACK_OR_SHELL;
+	} else {
+		interaction = determine_interaction(m, o);
+	}
 
-    if (interaction & INT_ANY_ATTACK) {
+	if (interaction & INT_ANY_ATTACK) {
 #ifdef VERSION_SH
-        queue_rumble_data(5, 80);
+		queue_rumble_data(5, 80);
 #endif
-        attack_object(o, interaction);
-        bounce_back_from_attack(m, interaction);
+		attack_object(o, interaction);
+		bounce_back_from_attack(m, interaction);
 
-        if (interaction & INT_HIT_FROM_BELOW) {
-            hit_object_from_below(m, o);
-        }
+		if (interaction & INT_HIT_FROM_BELOW) {
+			hit_object_from_below(m, o);
+		}
 
-        if (interaction & INT_HIT_FROM_ABOVE) {
-            if (o->oInteractionSubtype & INT_SUBTYPE_TWIRL_BOUNCE) {
-                bounce_off_object(m, o, 80.0f);
-                reset_mario_pitch(m);
+		if (interaction & INT_HIT_FROM_ABOVE) {
+			if (o->oInteractionSubtype & INT_SUBTYPE_TWIRL_BOUNCE) {
+				bounce_off_object(m, o, 80.0f);
+				reset_mario_pitch(m);
 #ifndef VERSION_JP
-                play_sound(SOUND_MARIO_TWIRL_BOUNCE, m->marioObj->header.gfx.cameraToObject);
+				play_sound(SOUND_MARIO_TWIRL_BOUNCE, m->marioObj->header.gfx.cameraToObject);
 #endif
-                return drop_and_set_mario_action(m, ACT_TWIRLING, 0);
-            } else {
-                bounce_off_object(m, o, 30.0f);
-            }
-        }
-    } else if (take_damage_and_knock_back(m, o)) {
-        return TRUE;
-    }
+				return drop_and_set_mario_action(m, ACT_TWIRLING, 0);
+			} else {
+				bounce_off_object(m, o, 30.0f);
+			}
+		}
+	} else if (take_damage_and_knock_back(m, o)) {
+		return TRUE;
+	}
 
-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
-        sDelayInvincTimer = TRUE;
-    }
+	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+		sDelayInvincTimer = TRUE;
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_bounce_top(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    u32 interaction;
-    if (m->flags & MARIO_METAL_CAP) {
-        interaction = INT_FAST_ATTACK_OR_SHELL;
-    } else {
-        interaction = determine_interaction(m, o);
-    }
+	u32 interaction;
+    const BehaviorScript *script = virtual_to_segmented(0x13, o->behavior);
+	if (m->flags & MARIO_METAL_CAP || m->flags & MARIO_RAINBOW) {
+		interaction = INT_FAST_ATTACK_OR_SHELL;
+	} else {
+		interaction = determine_interaction(m, o);
+	}
 
-    if (interaction & INT_ATTACK_NOT_FROM_BELOW) {
+	if (interaction & INT_ATTACK_NOT_FROM_BELOW) {
 #ifdef VERSION_SH
-        queue_rumble_data(5, 80);
+		queue_rumble_data(5, 80);
 #endif
-        attack_object(o, interaction);
-        bounce_back_from_attack(m, interaction);
+		attack_object(o, interaction);
+		bounce_back_from_attack(m, interaction);
 
-        if (interaction & INT_HIT_FROM_ABOVE) {
-            if (o->oInteractionSubtype & INT_SUBTYPE_TWIRL_BOUNCE) {
-                bounce_off_object(m, o, 80.0f);
-                reset_mario_pitch(m);
+		if (interaction & INT_HIT_FROM_ABOVE) {
+			if (o->oInteractionSubtype & INT_SUBTYPE_TWIRL_BOUNCE) {
+				bounce_off_object(m, o, 80.0f);
+				reset_mario_pitch(m);
 #ifndef VERSION_JP
-                play_sound(SOUND_MARIO_TWIRL_BOUNCE, m->marioObj->header.gfx.cameraToObject);
+				play_sound(SOUND_MARIO_TWIRL_BOUNCE, m->marioObj->header.gfx.cameraToObject);
 #endif
-                return drop_and_set_mario_action(m, ACT_TWIRLING, 0);
-            } else {
-                bounce_off_object(m, o, 30.0f);
-            }
-        }
-    } else if (take_damage_and_knock_back(m, o)) {
-        return TRUE;
-    }
+				return drop_and_set_mario_action(m, ACT_TWIRLING, 0);
+			} else {
+				bounce_off_object(m, o, 30.0f);
+			}
+		}
+	} else if (take_damage_and_knock_back(m, o)) {
+		return TRUE;
+	}
 
-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
-        sDelayInvincTimer = TRUE;
-    }
+	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+		sDelayInvincTimer = TRUE;
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_unknown_08(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    u32 interaction = determine_interaction(m, o);
+	u32 interaction = determine_interaction(m, o);
 
-    if (interaction & INT_PUNCH) {
-        o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_WAS_ATTACKED | ATTACK_PUNCH;
-        bounce_back_from_attack(m, interaction);
-    } else if (take_damage_and_knock_back(m, o)) {
-        return TRUE;
-    }
+	if (interaction & INT_PUNCH) {
+		o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_WAS_ATTACKED | ATTACK_PUNCH;
+		bounce_back_from_attack(m, interaction);
+	} else if (take_damage_and_knock_back(m, o)) {
+		return TRUE;
+	}
 
-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
-        sDelayInvincTimer = TRUE;
-    }
+	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+		sDelayInvincTimer = TRUE;
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_damage(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    if (take_damage_and_knock_back(m, o)) {
-        return TRUE;
-    }
+	if (take_damage_and_knock_back(m, o)) {
+		return TRUE;
+	}
 
-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
-        sDelayInvincTimer = TRUE;
-    }
+	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+		sDelayInvincTimer = TRUE;
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_breakable(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    u32 interaction = determine_interaction(m, o);
+	u32 interaction = determine_interaction(m, o);
 
-    if (interaction & INT_ATTACK_NOT_WEAK_FROM_ABOVE) {
-        attack_object(o, interaction);
-        bounce_back_from_attack(m, interaction);
+	if (interaction & INT_ATTACK_NOT_WEAK_FROM_ABOVE) {
+		attack_object(o, interaction);
+		bounce_back_from_attack(m, interaction);
 
-        m->interactObj = o;
+		m->interactObj = o;
 
-        switch (interaction) {
-            case INT_HIT_FROM_ABOVE:
-                bounce_off_object(m, o, 30.0f); //! Not in the 0x8F mask
-                break;
+		switch (interaction) {
+			case INT_HIT_FROM_ABOVE:
+				bounce_off_object(m, o, 30.0f); //! Not in the 0x8F mask
+				break;
 
-            case INT_HIT_FROM_BELOW:
-                hit_object_from_below(m, o);
-                break;
-        }
+			case INT_HIT_FROM_BELOW:
+				hit_object_from_below(m, o);
+				break;
+		}
 
-        return TRUE;
-    }
+		return TRUE;
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_koopa_shell(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    if (!(m->action & ACT_FLAG_RIDING_SHELL)) {
-        u32 interaction = determine_interaction(m, o);
+	if (!(m->action & ACT_FLAG_RIDING_SHELL)) {
+		u32 interaction = determine_interaction(m, o);
 
-        if (interaction == INT_HIT_FROM_ABOVE || m->action == ACT_WALKING
-            || m->action == ACT_HOLD_WALKING) {
-            m->interactObj = o;
-            m->usedObj = o;
-            m->riddenObj = o;
+		if (interaction == INT_HIT_FROM_ABOVE || m->action == ACT_WALKING
+			|| m->action == ACT_HOLD_WALKING) {
+			m->interactObj = o;
+			m->usedObj = o;
+			m->riddenObj = o;
 
-            attack_object(o, interaction);
-            update_mario_sound_and_camera(m);
-            play_shell_music();
-            mario_drop_held_object(m);
+			attack_object(o, interaction);
+			update_mario_sound_and_camera(m);
+			play_shell_music();
+			mario_drop_held_object(m);
 
-            //! Puts Mario in ground action even when in air, making it easy to
-            // escape air actions into crouch slide (shell cancel)
-            return set_mario_action(m, ACT_RIDING_SHELL_GROUND, 0);
-        }
+			//! Puts Mario in ground action even when in air, making it easy to
+			// escape air actions into crouch slide (shell cancel)
+			return set_mario_action(m, ACT_RIDING_SHELL_GROUND, 0);
+		}
 
-        push_mario_out_of_object(m, o, 2.0f);
-    }
+		push_mario_out_of_object(m, o, 2.0f);
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 check_object_grab_mario(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    if ((!(m->action & (ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ATTACKING)) || !sInvulnerable)
-        && (o->oInteractionSubtype & INT_SUBTYPE_GRABS_MARIO)) {
-        if (object_facing_mario(m, o, 0x2AAA)) {
-            mario_stop_riding_and_holding(m);
-            o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_GRABBED_MARIO;
-
-            m->faceAngle[1] = o->oMoveAngleYaw;
-            m->interactObj = o;
-            m->usedObj = o;
-
-            update_mario_sound_and_camera(m);
-            play_sound(SOUND_MARIO_OOOF, m->marioObj->header.gfx.cameraToObject);
+	if ((!(m->action & (ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ATTACKING)) || !sInvulnerable)
+		&& (o->oInteractionSubtype & INT_SUBTYPE_GRABS_MARIO)) {
+		if (object_facing_mario(m, o, 0x2AAA)) {
+			mario_stop_riding_and_holding(m);
+			o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_GRABBED_MARIO;
+
+			m->faceAngle[1] = o->oMoveAngleYaw;
+			m->interactObj = o;
+			m->usedObj = o;
+
+			update_mario_sound_and_camera(m);
+			play_sound(SOUND_MARIO_OOOF, m->marioObj->header.gfx.cameraToObject);
 #ifdef VERSION_SH
-            queue_rumble_data(5, 80);
+			queue_rumble_data(5, 80);
 #endif
-            return set_mario_action(m, ACT_GRABBED, 0);
-        }
-    }
+			return set_mario_action(m, ACT_GRABBED, 0);
+		}
+	}
 
-    push_mario_out_of_object(m, o, -5.0f);
-    return FALSE;
+	push_mario_out_of_object(m, o, -5.0f);
+	return FALSE;
 }
 
 u32 interact_pole(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    s32 actionId = m->action & ACT_ID_MASK;
-    if (actionId >= 0x080 && actionId < 0x0A0) {
-        if (!(m->prevAction & ACT_FLAG_ON_POLE) || m->usedObj != o) {
+	s32 actionId = m->action & ACT_ID_MASK;
+	if (actionId >= 0x080 && actionId < 0x0A0) {
+		if (!(m->prevAction & ACT_FLAG_ON_POLE) || m->usedObj != o) {
 #ifdef VERSION_SH
-            f32 velConv = m->forwardVel; // conserve the velocity.
-            struct Object *marioObj = m->marioObj;
-            u32 lowSpeed;
+			f32 velConv = m->forwardVel; // conserve the velocity.
+			struct Object *marioObj = m->marioObj;
+			u32 lowSpeed;
 #else
-            u32 lowSpeed = (m->forwardVel <= 10.0f);
-            struct Object *marioObj = m->marioObj;
+			u32 lowSpeed = (m->forwardVel <= 10.0f);
+			struct Object *marioObj = m->marioObj;
 #endif
 
-            mario_stop_riding_and_holding(m);
+			mario_stop_riding_and_holding(m);
 
 #ifdef VERSION_SH
-            lowSpeed = (velConv <= 10.0f);
+			lowSpeed = (velConv <= 10.0f);
 #endif
 
-            m->interactObj = o;
-            m->usedObj = o;
-            m->vel[1] = 0.0f;
-            m->forwardVel = 0.0f;
+			m->interactObj = o;
+			m->usedObj = o;
+			m->vel[1] = 0.0f;
+			m->forwardVel = 0.0f;
 
-            marioObj->oMarioPoleUnk108 = 0;
-            marioObj->oMarioPoleYawVel = 0;
-            marioObj->oMarioPolePos = m->pos[1] - o->oPosY;
+			marioObj->oMarioPoleUnk108 = 0;
+			marioObj->oMarioPoleYawVel = 0;
+			marioObj->oMarioPolePos = m->pos[1] - o->oPosY;
 
-            if (lowSpeed) {
-                return set_mario_action(m, ACT_GRAB_POLE_SLOW, 0);
-            }
+			if (lowSpeed) {
+				return set_mario_action(m, ACT_GRAB_POLE_SLOW, 0);
+			}
 
-            //! @bug Using m->forwardVel here is assumed to be 0.0f due to the set from earlier.
-            //       This is fixed in the Shindou version.
+			//! @bug Using m->forwardVel here is assumed to be 0.0f due to the set from earlier.
+			//       This is fixed in the Shindou version.
 #ifdef VERSION_SH
-            marioObj->oMarioPoleYawVel = (s32)(velConv * 0x100 + 0x1000);
+			marioObj->oMarioPoleYawVel = (s32)(velConv * 0x100 + 0x1000);
 #else
-            marioObj->oMarioPoleYawVel = (s32)(m->forwardVel * 0x100 + 0x1000);
+			marioObj->oMarioPoleYawVel = (s32)(m->forwardVel * 0x100 + 0x1000);
 #endif
-            reset_mario_pitch(m);
+			reset_mario_pitch(m);
 #ifdef VERSION_SH
-            queue_rumble_data(5, 80);
+			queue_rumble_data(5, 80);
 #endif
-            return set_mario_action(m, ACT_GRAB_POLE_FAST, 0);
-        }
-    }
+			return set_mario_action(m, ACT_GRAB_POLE_FAST, 0);
+		}
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_hoot(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    s32 actionId = m->action & ACT_ID_MASK;
+	s32 actionId = m->action & ACT_ID_MASK;
 
-    //! Can pause to advance the global timer without falling too far, allowing
-    // you to regrab after letting go.
-    if (actionId >= 0x080 && actionId < 0x098
-        && (gGlobalTimer - m->usedObj->oHootMarioReleaseTime > 30)) {
-        mario_stop_riding_and_holding(m);
-        o->oInteractStatus = INT_STATUS_HOOT_GRABBED_BY_MARIO;
-        m->interactObj = o;
-        m->usedObj = o;
+	//! Can pause to advance the global timer without falling too far, allowing
+	// you to regrab after letting go.
+	if (actionId >= 0x080 && actionId < 0x098
+		&& (gGlobalTimer - m->usedObj->oHootMarioReleaseTime > 30)) {
+		mario_stop_riding_and_holding(m);
+		o->oInteractStatus = INT_STATUS_HOOT_GRABBED_BY_MARIO;
+		m->interactObj = o;
+		m->usedObj = o;
 
 #ifdef VERSION_SH
-        queue_rumble_data(5, 80);
+		queue_rumble_data(5, 80);
 #endif
-        update_mario_sound_and_camera(m);
-        return set_mario_action(m, ACT_RIDING_HOOT, 0);
-    }
+		update_mario_sound_and_camera(m);
+		return set_mario_action(m, ACT_RIDING_HOOT, 0);
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_cap(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    u32 capFlag = get_mario_cap_flag(o);
-    u16 capMusic = 0;
-    u16 capTime = 0;
-
-    if (m->action != ACT_GETTING_BLOWN && capFlag != 0) {
-        m->interactObj = o;
-        o->oInteractStatus = INT_STATUS_INTERACTED;
-
-        m->flags &= ~MARIO_CAP_ON_HEAD & ~MARIO_CAP_IN_HAND;
-        m->flags |= capFlag;
-
-        switch (capFlag) {
-            case MARIO_VANISH_CAP:
-                capTime = 600;
-                capMusic = SEQUENCE_ARGS(4, SEQ_EVENT_POWERUP);
-                break;
-
-            case MARIO_METAL_CAP:
-                capTime = 600;
-                capMusic = SEQUENCE_ARGS(4, SEQ_EVENT_METAL_CAP);
-                break;
-
-            case MARIO_WING_CAP:
-                capTime = 1800;
-                capMusic = SEQUENCE_ARGS(4, SEQ_EVENT_POWERUP);
-                break;
-        }
-
-        if (capTime > m->capTimer) {
-            m->capTimer = capTime;
-        }
-
-        if ((m->action & ACT_FLAG_IDLE) || m->action == ACT_WALKING) {
-            m->flags |= MARIO_CAP_IN_HAND;
-            set_mario_action(m, ACT_PUTTING_ON_CAP, 0);
-        } else {
-            m->flags |= MARIO_CAP_ON_HEAD;
-        }
-
-        play_sound(SOUND_MENU_STAR_SOUND, m->marioObj->header.gfx.cameraToObject);
-        play_sound(SOUND_MARIO_HERE_WE_GO, m->marioObj->header.gfx.cameraToObject);
+	u32 capFlag = get_mario_cap_flag(o);
+	u16 capMusic = 0;
+	u16 capTime = 0;
+
+	if (m->action != ACT_GETTING_BLOWN && capFlag != 0) {
+		m->interactObj = o;
+		o->oInteractStatus = INT_STATUS_INTERACTED;
+		if (!(m->flags & MARIO_RAINBOW)) {
+			m->flags &= ~MARIO_CAP_ON_HEAD & ~MARIO_CAP_IN_HAND;
+		}
+		m->flags |= capFlag;
+
+		switch (capFlag) {
+			case MARIO_VANISH_CAP:
+				capTime = 600;
+				capMusic = SEQUENCE_ARGS(4, SEQ_EVENT_POWERUP);
+				break;
+
+			case MARIO_METAL_CAP:
+				capTime = 600;
+				capMusic = SEQUENCE_ARGS(4, SEQ_EVENT_METAL_CAP);
+				break;
+
+			case MARIO_WING_CAP:
+				capTime = 1800;
+				capMusic = SEQUENCE_ARGS(4, SEQ_EVENT_POWERUP);
+				break;
+
+			case MARIO_RAINBOW:
+                
+				capTime = 600;
+				capMusic = SEQUENCE_ARGS(4, SEQ_EVENT_POWERUP);
+				
+                               // gSequencePlayers[SEQ_PLAYER_ENV].tempo += 10;
+				break;
+		}
+		if (capTime > m->capTimer) {
+			m->capTimer = capTime;
+		}
+		if (!(m->flags & MARIO_RAINBOW)) {
+			if ((m->action & ACT_FLAG_IDLE) || m->action == ACT_WALKING) {
+				m->flags |= MARIO_CAP_IN_HAND;
+				set_mario_action(m, ACT_PUTTING_ON_CAP, 0);
+			} else {
+				m->flags |= MARIO_CAP_ON_HEAD;
+			}
+		} else {
+			m->flags |= MARIO_CAP_ON_HEAD;
+		}
+
+		play_sound(SOUND_MENU_STAR_SOUND, m->marioObj->header.gfx.cameraToObject);
+		play_sound(SOUND_MARIO_HERE_WE_GO, m->marioObj->header.gfx.cameraToObject);
+
+		if (capMusic != 0) {
+                    if (!(m->flags & MARIO_RAINBOW)) {
+                        play_cap_music(capMusic);
+                    } else {
+                        play_rainbow_music(capMusic);
+                    }
+		}
 
-        if (capMusic != 0) {
-            play_cap_music(capMusic);
-        }
+		return TRUE;
+	}
 
-        return TRUE;
-    }
-
-    return FALSE;
+	return FALSE;
 }
 
 u32 interact_grabbable(struct MarioState *m, u32 interactType, struct Object *o) {
-    const BehaviorScript *script = virtual_to_segmented(0x13, o->behavior);
-
-    if (o->oInteractionSubtype & INT_SUBTYPE_KICKABLE) {
-        u32 interaction = determine_interaction(m, o);
-        if (interaction & (INT_KICK | INT_TRIP)) {
-            attack_object(o, interaction);
-            bounce_back_from_attack(m, interaction);
-            return FALSE;
-        }
-    }
-
-    if ((o->oInteractionSubtype & INT_SUBTYPE_GRABS_MARIO)) {
-        if (check_object_grab_mario(m, interactType, o)) {
-            return TRUE;
-        }
-    }
-
-    if (able_to_grab_object(m, o)) {
-        if (!(o->oInteractionSubtype & INT_SUBTYPE_NOT_GRABBABLE)) {
-            m->interactObj = o;
-            m->input |= INPUT_INTERACT_OBJ_GRABBABLE;
-            return TRUE;
-        }
-    }
-
-    if (script != bhvBowser) {
-        push_mario_out_of_object(m, o, -5.0f);
-    }
-
-    return FALSE;
+	const BehaviorScript *script = virtual_to_segmented(0x13, o->behavior);
+
+	if (o->oInteractionSubtype & INT_SUBTYPE_KICKABLE) {
+		u32 interaction = determine_interaction(m, o);
+		if (interaction & (INT_KICK | INT_TRIP)) {
+			attack_object(o, interaction);
+			bounce_back_from_attack(m, interaction);
+			return FALSE;
+		}
+	}
+
+	if ((o->oInteractionSubtype & INT_SUBTYPE_GRABS_MARIO)) {
+		if (check_object_grab_mario(m, interactType, o)) {
+			return TRUE;
+		}
+	}
+
+	if (able_to_grab_object(m, o)) {
+		if (!(o->oInteractionSubtype & INT_SUBTYPE_NOT_GRABBABLE)) {
+			m->interactObj = o;
+			m->input |= INPUT_INTERACT_OBJ_GRABBABLE;
+			return TRUE;
+		}
+	}
+
+	if (script != bhvBowser) {
+		push_mario_out_of_object(m, o, -5.0f);
+	}
+
+	return FALSE;
 }
 
 u32 mario_can_talk(struct MarioState *m, u32 arg) {
-    s16 val6;
+	s16 val6;
 
-    if ((m->action & ACT_FLAG_IDLE) != 0x00000000) {
-        return TRUE;
-    }
+	if ((m->action & ACT_FLAG_IDLE) != 0x00000000) {
+		return TRUE;
+	}
 
-    if (m->action == ACT_WALKING) {
-        if (arg) {
-            return TRUE;
-        }
+	if (m->action == ACT_WALKING) {
+		if (arg) {
+			return TRUE;
+		}
 
-        val6 = m->marioObj->header.gfx.animInfo.animID;
+		val6 = m->marioObj->header.gfx.animInfo.animID;
 
-        if (val6 == 0x0080 || val6 == 0x007F || val6 == 0x006C) {
-            return TRUE;
-        }
-    }
+		if (val6 == 0x0080 || val6 == 0x007F || val6 == 0x006C) {
+			return TRUE;
+		}
+	}
 
-    return FALSE;
+	return FALSE;
 }
 
 #ifdef VERSION_JP
@@ -1699,193 +1746,199 @@ u32 mario_can_talk(struct MarioState *m, u32 arg) {
 #endif
 
 u32 check_read_sign(struct MarioState *m, struct Object *o) {
-    if ((m->input & READ_MASK) && mario_can_talk(m, 0) && object_facing_mario(m, o, SIGN_RANGE)) {
-        s16 facingDYaw = (s16)(o->oMoveAngleYaw + 0x8000) - m->faceAngle[1];
-        if (facingDYaw >= -SIGN_RANGE && facingDYaw <= SIGN_RANGE) {
-            f32 targetX = o->oPosX + 105.0f * sins(o->oMoveAngleYaw);
-            f32 targetZ = o->oPosZ + 105.0f * coss(o->oMoveAngleYaw);
-
-            m->marioObj->oMarioReadingSignDYaw = facingDYaw;
-            m->marioObj->oMarioReadingSignDPosX = targetX - m->pos[0];
-            m->marioObj->oMarioReadingSignDPosZ = targetZ - m->pos[2];
-
-            m->interactObj = o;
-            m->usedObj = o;
-            return set_mario_action(m, ACT_READING_SIGN, 0);
-        }
-    }
+	if ((m->input & READ_MASK) && mario_can_talk(m, 0) && object_facing_mario(m, o, SIGN_RANGE)) {
+		s16 facingDYaw = (s16)(o->oMoveAngleYaw + 0x8000) - m->faceAngle[1];
+		if (facingDYaw >= -SIGN_RANGE && facingDYaw <= SIGN_RANGE) {
+			f32 targetX = o->oPosX + 105.0f * sins(o->oMoveAngleYaw);
+			f32 targetZ = o->oPosZ + 105.0f * coss(o->oMoveAngleYaw);
+
+			m->marioObj->oMarioReadingSignDYaw = facingDYaw;
+			m->marioObj->oMarioReadingSignDPosX = targetX - m->pos[0];
+			m->marioObj->oMarioReadingSignDPosZ = targetZ - m->pos[2];
 
-    return FALSE;
+			m->interactObj = o;
+			m->usedObj = o;
+			return set_mario_action(m, ACT_READING_SIGN, 0);
+		}
+	}
+
+	return FALSE;
 }
 
 u32 check_npc_talk(struct MarioState *m, struct Object *o) {
-    if ((m->input & READ_MASK) && mario_can_talk(m, 1)) {
-        s16 facingDYaw = mario_obj_angle_to_object(m, o) - m->faceAngle[1];
-        if (facingDYaw >= -0x4000 && facingDYaw <= 0x4000) {
-            o->oInteractStatus = INT_STATUS_INTERACTED;
+	if ((m->input & READ_MASK) && mario_can_talk(m, 1)) {
+		s16 facingDYaw = mario_obj_angle_to_object(m, o) - m->faceAngle[1];
+		if (facingDYaw >= -0x4000 && facingDYaw <= 0x4000) {
+			o->oInteractStatus = INT_STATUS_INTERACTED;
 
-            m->interactObj = o;
-            m->usedObj = o;
+			m->interactObj = o;
+			m->usedObj = o;
 
-            push_mario_out_of_object(m, o, -10.0f);
-            return set_mario_action(m, ACT_WAITING_FOR_DIALOG, 0);
-        }
-    }
+			push_mario_out_of_object(m, o, -10.0f);
+			return set_mario_action(m, ACT_WAITING_FOR_DIALOG, 0);
+		}
+	}
 
-    push_mario_out_of_object(m, o, -10.0f);
-    return FALSE;
+	push_mario_out_of_object(m, o, -10.0f);
+	return FALSE;
 }
 
 u32 interact_text(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    u32 interact = FALSE;
-
-    if (o->oInteractionSubtype & INT_SUBTYPE_SIGN) {
-        interact = check_read_sign(m, o);
-    } else if (o->oInteractionSubtype & INT_SUBTYPE_NPC) {
-        interact = check_npc_talk(m, o);
-    } else {
-        push_mario_out_of_object(m, o, 2.0f);
-    }
+	u32 interact = FALSE;
+
+	if (o->oInteractionSubtype & INT_SUBTYPE_SIGN) {
+		interact = check_read_sign(m, o);
+	} else if (o->oInteractionSubtype & INT_SUBTYPE_NPC) {
+		interact = check_npc_talk(m, o);
+	} else {
+		push_mario_out_of_object(m, o, 2.0f);
+	}
 
-    return interact;
+	return interact;
 }
 
 void check_kick_or_punch_wall(struct MarioState *m) {
-    if (m->flags & (MARIO_PUNCHING | MARIO_KICKING | MARIO_TRIPPING)) {
-        Vec3f detector;
-        detector[0] = m->pos[0] + 50.0f * sins(m->faceAngle[1]);
-        detector[2] = m->pos[2] + 50.0f * coss(m->faceAngle[1]);
-        detector[1] = m->pos[1];
-
-        if (resolve_and_return_wall_collisions(detector, 80.0f, 5.0f) != NULL) {
-            if (m->action != ACT_MOVE_PUNCHING || m->forwardVel >= 0.0f) {
-                if (m->action == ACT_PUNCHING) {
-                    m->action = ACT_MOVE_PUNCHING;
-                }
-
-                mario_set_forward_vel(m, -48.0f);
-                play_sound(SOUND_ACTION_HIT_2, m->marioObj->header.gfx.cameraToObject);
-                m->particleFlags |= PARTICLE_TRIANGLE;
-            } else if (m->action & ACT_FLAG_AIR) {
-                mario_set_forward_vel(m, -16.0f);
-                play_sound(SOUND_ACTION_HIT_2, m->marioObj->header.gfx.cameraToObject);
-                m->particleFlags |= PARTICLE_TRIANGLE;
-            }
-        }
-    }
+	if (m->flags & (MARIO_PUNCHING | MARIO_KICKING | MARIO_TRIPPING)) {
+		Vec3f detector;
+		detector[0] = m->pos[0] + 50.0f * sins(m->faceAngle[1]);
+		detector[2] = m->pos[2] + 50.0f * coss(m->faceAngle[1]);
+		detector[1] = m->pos[1];
+
+		if (resolve_and_return_wall_collisions(detector, 80.0f, 5.0f) != NULL) {
+			if (m->action != ACT_MOVE_PUNCHING || m->forwardVel >= 0.0f) {
+				if (m->action == ACT_PUNCHING) {
+					m->action = ACT_MOVE_PUNCHING;
+				}
+
+				mario_set_forward_vel(m, -48.0f);
+				play_sound(SOUND_ACTION_HIT_2, m->marioObj->header.gfx.cameraToObject);
+				m->particleFlags |= PARTICLE_TRIANGLE;
+			} else if (m->action & ACT_FLAG_AIR) {
+				mario_set_forward_vel(m, -16.0f);
+				play_sound(SOUND_ACTION_HIT_2, m->marioObj->header.gfx.cameraToObject);
+				m->particleFlags |= PARTICLE_TRIANGLE;
+			}
+		}
+	}
 }
 
 void mario_process_interactions(struct MarioState *m) {
-    sDelayInvincTimer = FALSE;
-    sInvulnerable = (m->action & ACT_FLAG_INVULNERABLE) || m->invincTimer != 0;
-
-    if (!(m->action & ACT_FLAG_INTANGIBLE) && m->collidedObjInteractTypes != 0) {
-        s32 i;
-        for (i = 0; i < 31; i++) {
-            u32 interactType = sInteractionHandlers[i].interactType;
-            if (m->collidedObjInteractTypes & interactType) {
-                struct Object *object = mario_get_collided_object(m, interactType);
-
-                m->collidedObjInteractTypes &= ~interactType;
-
-                if (!(object->oInteractStatus & INT_STATUS_INTERACTED)) {
-                    if (sInteractionHandlers[i].handler(m, interactType, object)) {
-                        break;
-                    }
-                }
-            }
-        }
-    }
-
-    if (m->invincTimer > 0 && !sDelayInvincTimer) {
-        m->invincTimer -= 1;
-    }
-
-    //! If the kick/punch flags are set and an object collision changes Mario's
-    // action, he will get the kick/punch wall speed anyway.
-    check_kick_or_punch_wall(m);
-    m->flags &= ~MARIO_PUNCHING & ~MARIO_KICKING & ~MARIO_TRIPPING;
-
-    if (!(m->marioObj->collidedObjInteractTypes & (INTERACT_WARP_DOOR | INTERACT_DOOR))) {
-        sDisplayingDoorText = FALSE;
-    }
-    if (!(m->marioObj->collidedObjInteractTypes & INTERACT_WARP)) {
-        sJustTeleported = FALSE;
-    }
+	sDelayInvincTimer = FALSE;
+	sInvulnerable = (m->action & ACT_FLAG_INVULNERABLE) || m->invincTimer != 0;
+
+	if (!(m->action & ACT_FLAG_INTANGIBLE) && m->collidedObjInteractTypes != 0) {
+		s32 i;
+		for (i = 0; i < 31; i++) {
+			u32 interactType = sInteractionHandlers[i].interactType;
+			if (m->collidedObjInteractTypes & interactType) {
+				struct Object *object = mario_get_collided_object(m, interactType);
+
+				m->collidedObjInteractTypes &= ~interactType;
+
+				if (!(object->oInteractStatus & INT_STATUS_INTERACTED)) {
+					if (sInteractionHandlers[i].handler(m, interactType, object)) {
+						break;
+					}
+				}
+			}
+		}
+	}
+
+	if (m->invincTimer > 0 && !sDelayInvincTimer) {
+		m->invincTimer -= 1;
+	}
+
+	//! If the kick/punch flags are set and an object collision changes Mario's
+	// action, he will get the kick/punch wall speed anyway.
+	check_kick_or_punch_wall(m);
+	m->flags &= ~MARIO_PUNCHING & ~MARIO_KICKING & ~MARIO_TRIPPING;
+
+	if (!(m->marioObj->collidedObjInteractTypes & (INTERACT_WARP_DOOR | INTERACT_DOOR))) {
+		sDisplayingDoorText = FALSE;
+	}
+	if (!(m->marioObj->collidedObjInteractTypes & INTERACT_WARP)) {
+		sJustTeleported = FALSE;
+	}
 }
 
 void check_death_barrier(struct MarioState *m) {
-    if (m->pos[1] < m->floorHeight + 2048.0f) {
-        if (level_trigger_warp(m, WARP_OP_WARP_FLOOR) == 20 && !(m->flags & MARIO_UNKNOWN_18)) {
-            play_sound(SOUND_MARIO_WAAAOOOW, m->marioObj->header.gfx.cameraToObject);
-        }
-    }
+	if (m->pos[1] < m->floorHeight + 2048.0f) {
+		if (level_trigger_warp(m, WARP_OP_WARP_FLOOR) == 20 && !(m->flags & MARIO_UNKNOWN_18)) {
+			play_sound(SOUND_MARIO_WAAAOOOW, m->marioObj->header.gfx.cameraToObject);
+		}
+	}
 }
 
 void check_lava_boost(struct MarioState *m) {
-    if (!(m->action & ACT_FLAG_RIDING_SHELL) && m->pos[1] < m->floorHeight + 10.0f) {
-        if (!(m->flags & MARIO_METAL_CAP)) {
-            m->hurtCounter += (m->flags & MARIO_CAP_ON_HEAD) ? 12 : 18;
-        }
+	if (!(m->flags & MARIO_RAINBOW)) {
+		if (!(m->action & ACT_FLAG_RIDING_SHELL) && m->pos[1] < m->floorHeight + 10.0f) {
+			if (!(m->flags & MARIO_METAL_CAP) && !(m->flags & MARIO_RAINBOW)) {
+				m->hurtCounter += (m->flags & MARIO_CAP_ON_HEAD) ? 12 : 18;
+			}
 
-        update_mario_sound_and_camera(m);
-        drop_and_set_mario_action(m, ACT_LAVA_BOOST, 0);
-    }
+			update_mario_sound_and_camera(m);
+                      
+                            drop_and_set_mario_action(m, ACT_LAVA_BOOST, 0);
+                        
+		}
+	}
 }
 
 void pss_begin_slide(UNUSED struct MarioState *m) {
-    if (!(gHudDisplay.flags & HUD_DISPLAY_FLAG_TIMER)) {
-        level_control_timer(TIMER_CONTROL_SHOW);
-        level_control_timer(TIMER_CONTROL_START);
-        sPssSlideStarted = TRUE;
-    }
+	if (!(gHudDisplay.flags & HUD_DISPLAY_FLAG_TIMER)) {
+		level_control_timer(TIMER_CONTROL_SHOW);
+		level_control_timer(TIMER_CONTROL_START);
+		sPssSlideStarted = TRUE;
+	}
 }
 
 void pss_end_slide(struct MarioState *m) {
-    //! This flag isn't set on death or level entry, allowing double star spawn
-    if (sPssSlideStarted) {
-        u16 slideTime = level_control_timer(TIMER_CONTROL_STOP);
-        if (slideTime < 630) {
-            m->marioObj->oBehParams = (1 << 24);
-            spawn_default_star(-6358.0f, -4300.0f, 4700.0f);
-        }
-        sPssSlideStarted = FALSE;
-    }
+	//! This flag isn't set on death or level entry, allowing double star spawn
+	if (sPssSlideStarted) {
+		u16 slideTime = level_control_timer(TIMER_CONTROL_STOP);
+		if (slideTime < 630) {
+			m->marioObj->oBehParams = (1 << 24);
+			spawn_default_star(-6358.0f, -4300.0f, 4700.0f);
+		}
+		sPssSlideStarted = FALSE;
+	}
 }
 
 void mario_handle_special_floors(struct MarioState *m) {
-    if ((m->action & ACT_GROUP_MASK) == ACT_GROUP_CUTSCENE) {
-        return;
-    }
-
-    if (m->floor != NULL) {
-        s32 floorType = m->floor->type;
-
-        switch (floorType) {
-            case SURFACE_DEATH_PLANE:
-            case SURFACE_VERTICAL_WIND:
-                check_death_barrier(m);
-                break;
-
-            case SURFACE_WARP:
-                level_trigger_warp(m, WARP_OP_WARP_FLOOR);
-                break;
-
-            case SURFACE_TIMER_START:
-                pss_begin_slide(m);
-                break;
-
-            case SURFACE_TIMER_END:
-                pss_end_slide(m);
-                break;
-        }
-
-        if (!(m->action & ACT_FLAG_AIR) && !(m->action & ACT_FLAG_SWIMMING)) {
-            switch (floorType) {
-                case SURFACE_BURNING:
-                    check_lava_boost(m);
-                    break;
-            }
-        }
-    }
+	if ((m->action & ACT_GROUP_MASK) == ACT_GROUP_CUTSCENE) {
+		return;
+	}
+
+	if (m->floor != NULL) {
+		s32 floorType = m->floor->type;
+
+		switch (floorType) {
+			case SURFACE_DEATH_PLANE:
+			case SURFACE_VERTICAL_WIND:
+				check_death_barrier(m);
+				break;
+
+			case SURFACE_WARP:
+				level_trigger_warp(m, WARP_OP_WARP_FLOOR);
+				break;
+
+			case SURFACE_TIMER_START:
+				pss_begin_slide(m);
+				break;
+
+			case SURFACE_TIMER_END:
+				pss_end_slide(m);
+				break;
+		}
+
+		if (!(m->action & ACT_FLAG_AIR) && !(m->action & ACT_FLAG_SWIMMING)) {
+			switch (floorType) {
+                        case SURFACE_BURNING:
+                                if (!(m->flags & MARIO_RAINBOW)) {
+                                    check_lava_boost(m);
+                                }
+					break;
+			}
+		}
+	}
 }
diff --git a/src/game/interaction.c.rej b/src/game/interaction.c.rej
new file mode 100644
index 0000000..58a79f0
--- /dev/null
+++ b/src/game/interaction.c.rej
@@ -0,0 +1,3128 @@
+diff a/src/game/interaction.c b/src/game/interaction.c	(rejected hunks)
+@@ -1,5 +1,4 @@
+ #include <PR/ultratypes.h>
+-
+ #include "area.h"
+ #include "actors/common1.h"
+ #include "audio/external.h"
+@@ -23,26 +22,28 @@
+ #include "sm64.h"
+ #include "sound_init.h"
+ #include "rumble_init.h"
++#include "src/audio/load.h"
+ 
+ #define INT_GROUND_POUND_OR_TWIRL (1 << 0) // 0x01
+-#define INT_PUNCH                 (1 << 1) // 0x02
+-#define INT_KICK                  (1 << 2) // 0x04
+-#define INT_TRIP                  (1 << 3) // 0x08
+-#define INT_SLIDE_KICK            (1 << 4) // 0x10
+-#define INT_FAST_ATTACK_OR_SHELL  (1 << 5) // 0x20
+-#define INT_HIT_FROM_ABOVE        (1 << 6) // 0x40
+-#define INT_HIT_FROM_BELOW        (1 << 7) // 0x80
++#define INT_PUNCH (1 << 1)                 // 0x02
++#define INT_KICK (1 << 2)                  // 0x04
++#define INT_TRIP (1 << 3)                  // 0x08
++#define INT_SLIDE_KICK (1 << 4)            // 0x10
++#define INT_FAST_ATTACK_OR_SHELL (1 << 5)  // 0x20
++#define INT_HIT_FROM_ABOVE (1 << 6)        // 0x40
++#define INT_HIT_FROM_BELOW (1 << 7)        // 0x80
++
+ 
+-#define INT_ATTACK_NOT_FROM_BELOW                                                 \
+-    (INT_GROUND_POUND_OR_TWIRL | INT_PUNCH | INT_KICK | INT_TRIP | INT_SLIDE_KICK \
+-     | INT_FAST_ATTACK_OR_SHELL | INT_HIT_FROM_ABOVE)
++#define INT_ATTACK_NOT_FROM_BELOW                                                                      \
++	(INT_GROUND_POUND_OR_TWIRL | INT_PUNCH | INT_KICK | INT_TRIP | INT_SLIDE_KICK                      \
++	 | INT_FAST_ATTACK_OR_SHELL | INT_HIT_FROM_ABOVE)
+ 
+-#define INT_ANY_ATTACK                                                            \
+-    (INT_GROUND_POUND_OR_TWIRL | INT_PUNCH | INT_KICK | INT_TRIP | INT_SLIDE_KICK \
+-     | INT_FAST_ATTACK_OR_SHELL | INT_HIT_FROM_ABOVE | INT_HIT_FROM_BELOW)
++#define INT_ANY_ATTACK                                                                                 \
++	(INT_GROUND_POUND_OR_TWIRL | INT_PUNCH | INT_KICK | INT_TRIP | INT_SLIDE_KICK                      \
++	 | INT_FAST_ATTACK_OR_SHELL | INT_HIT_FROM_ABOVE | INT_HIT_FROM_BELOW)
+ 
+-#define INT_ATTACK_NOT_WEAK_FROM_ABOVE                                                \
+-    (INT_GROUND_POUND_OR_TWIRL | INT_PUNCH | INT_KICK | INT_TRIP | INT_HIT_FROM_BELOW)
++#define INT_ATTACK_NOT_WEAK_FROM_ABOVE                                                                 \
++	(INT_GROUND_POUND_OR_TWIRL | INT_PUNCH | INT_KICK | INT_TRIP | INT_HIT_FROM_BELOW)
+ 
+ u8 sDelayInvincTimer;
+ s16 sInvulnerable;
+@@ -135,19 +136,21 @@ static u8 sPssSlideStarted = FALSE;
+  * Returns the type of cap Mario is wearing.
+  */
+ u32 get_mario_cap_flag(struct Object *capObject) {
+-    const BehaviorScript *script = virtual_to_segmented(0x13, capObject->behavior);
+-
+-    if (script == bhvNormalCap) {
+-        return MARIO_NORMAL_CAP;
+-    } else if (script == bhvMetalCap) {
+-        return MARIO_METAL_CAP;
+-    } else if (script == bhvWingCap) {
+-        return MARIO_WING_CAP;
+-    } else if (script == bhvVanishCap) {
+-        return MARIO_VANISH_CAP;
+-    }
++	const BehaviorScript *script = virtual_to_segmented(0x13, capObject->behavior);
+ 
+-    return 0;
++	if (script == bhvNormalCap) {
++		return MARIO_NORMAL_CAP;
++	} else if (script == bhvMetalCap) {
++		return MARIO_METAL_CAP;
++	} else if (script == bhvWingCap) {
++		return MARIO_WING_CAP;
++	} else if (script == bhvVanishCap) {
++		return MARIO_VANISH_CAP;
++	} else if (script == bhvRainbowStar) {
++		return MARIO_RAINBOW;
++	}
++
++	return 0;
+ }
+ 
+ /**
+@@ -180,1510 +183,1554 @@ s16 mario_obj_angle_to_object(struct MarioState *m, struct Object *o) {
+  * action, speed, and position.
+  */
+ u32 determine_interaction(struct MarioState *m, struct Object *o) {
+-    u32 interaction = 0;
+-    u32 action = m->action;
+-
+-    if (action & ACT_FLAG_ATTACKING) {
+-        if (action == ACT_PUNCHING || action == ACT_MOVE_PUNCHING || action == ACT_JUMP_KICK) {
+-            s16 dYawToObject = mario_obj_angle_to_object(m, o) - m->faceAngle[1];
+-
+-            if (m->flags & MARIO_PUNCHING) {
+-                // 120 degrees total, or 60 each way
+-                if (-0x2AAA <= dYawToObject && dYawToObject <= 0x2AAA) {
+-                    interaction = INT_PUNCH;
+-                }
+-            }
+-            if (m->flags & MARIO_KICKING) {
+-                // 120 degrees total, or 60 each way
+-                if (-0x2AAA <= dYawToObject && dYawToObject <= 0x2AAA) {
+-                    interaction = INT_KICK;
+-                }
+-            }
+-            if (m->flags & MARIO_TRIPPING) {
+-                // 180 degrees total, or 90 each way
+-                if (-0x4000 <= dYawToObject && dYawToObject <= 0x4000) {
+-                    interaction = INT_TRIP;
+-                }
+-            }
+-        } else if (action == ACT_GROUND_POUND || action == ACT_TWIRLING) {
+-            if (m->vel[1] < 0.0f) {
+-                interaction = INT_GROUND_POUND_OR_TWIRL;
+-            }
+-        } else if (action == ACT_GROUND_POUND_LAND || action == ACT_TWIRL_LAND) {
+-            // Neither ground pounding nor twirling change Mario's vertical speed on landing.,
+-            // so the speed check is nearly always true (perhaps not if you land while going upwards?)
+-            // Additionally, actionState it set on each first thing in their action, so this is
+-            // only true prior to the very first frame (i.e. active 1 frame prior to it run).
+-            if (m->vel[1] < 0.0f && m->actionState == 0) {
+-                interaction = INT_GROUND_POUND_OR_TWIRL;
+-            }
+-        } else if (action == ACT_SLIDE_KICK || action == ACT_SLIDE_KICK_SLIDE) {
+-            interaction = INT_SLIDE_KICK;
+-        } else if (action & ACT_FLAG_RIDING_SHELL) {
+-            interaction = INT_FAST_ATTACK_OR_SHELL;
+-        } else if (m->forwardVel <= -26.0f || 26.0f <= m->forwardVel) {
+-            interaction = INT_FAST_ATTACK_OR_SHELL;
+-        }
+-    }
+-
+-    // Prior to this, the interaction type could be overwritten. This requires, however,
+-    // that the interaction not be set prior. This specifically overrides turning a ground
+-    // pound into just a bounce.
+-    if (interaction == 0 && (action & ACT_FLAG_AIR)) {
+-        if (m->vel[1] < 0.0f) {
+-            if (m->pos[1] > o->oPosY) {
+-                interaction = INT_HIT_FROM_ABOVE;
+-            }
+-        } else {
+-            if (m->pos[1] < o->oPosY) {
+-                interaction = INT_HIT_FROM_BELOW;
+-            }
+-        }
+-    }
+-
+-    return interaction;
++	u32 interaction = 0;
++	u32 action = m->action;
++
++	if (action & ACT_FLAG_ATTACKING) {
++		if (action == ACT_PUNCHING || action == ACT_MOVE_PUNCHING || action == ACT_JUMP_KICK) {
++			s16 dYawToObject = mario_obj_angle_to_object(m, o) - m->faceAngle[1];
++
++			if (m->flags & MARIO_PUNCHING) {
++				// 120 degrees total, or 60 each way
++				if (-0x2AAA <= dYawToObject && dYawToObject <= 0x2AAA) {
++					interaction = INT_PUNCH;
++				}
++			}
++			if (m->flags & MARIO_KICKING) {
++				// 120 degrees total, or 60 each way
++				if (-0x2AAA <= dYawToObject && dYawToObject <= 0x2AAA) {
++					interaction = INT_KICK;
++				}
++			}
++			if (m->flags & MARIO_TRIPPING) {
++				// 180 degrees total, or 90 each way
++				if (-0x4000 <= dYawToObject && dYawToObject <= 0x4000) {
++					interaction = INT_TRIP;
++				}
++			}
++		} else if (action == ACT_GROUND_POUND || action == ACT_TWIRLING) {
++			if (m->vel[1] < 0.0f) {
++				interaction = INT_GROUND_POUND_OR_TWIRL;
++			}
++		} else if (action == ACT_GROUND_POUND_LAND || action == ACT_TWIRL_LAND) {
++			// Neither ground pounding nor twirling change Mario's vertical speed on landing.,
++			// so the speed check is nearly always true (perhaps not if you land while going upwards?)
++			// Additionally, actionState it set on each first thing in their action, so this is
++			// only true prior to the very first frame (i.e. active 1 frame prior to it run).
++			if (m->vel[1] < 0.0f && m->actionState == 0) {
++				interaction = INT_GROUND_POUND_OR_TWIRL;
++			}
++		} else if (action == ACT_SLIDE_KICK || action == ACT_SLIDE_KICK_SLIDE) {
++			interaction = INT_SLIDE_KICK;
++		} else if (action & ACT_FLAG_RIDING_SHELL || m->flags & MARIO_RAINBOW) {
++			interaction = INT_FAST_ATTACK_OR_SHELL;
++		} else if (m->forwardVel <= -26.0f || 26.0f <= m->forwardVel) {
++			interaction = INT_FAST_ATTACK_OR_SHELL;
++		}
++	}
++
++	// Prior to this, the interaction type could be overwritten. This requires, however,
++	// that the interaction not be set prior. This specifically overrides turning a ground
++	// pound into just a bounce.
++	if (interaction == 0 && (action & ACT_FLAG_AIR)) {
++		if (m->vel[1] < 0.0f) {
++			if (m->pos[1] > o->oPosY) {
++				interaction = INT_HIT_FROM_ABOVE;
++			}
++		} else {
++			if (m->pos[1] < o->oPosY) {
++				interaction = INT_HIT_FROM_BELOW;
++			}
++		}
++	}
++
++	return interaction;
+ }
+ 
+ /**
+  * Sets the interaction types for INT_STATUS_INTERACTED, INT_STATUS_WAS_ATTACKED
+  */
+ u32 attack_object(struct Object *o, s32 interaction) {
+-    u32 attackType = 0;
+-
+-    switch (interaction) {
+-        case INT_GROUND_POUND_OR_TWIRL:
+-            attackType = ATTACK_GROUND_POUND_OR_TWIRL;
+-            break;
+-        case INT_PUNCH:
+-            attackType = ATTACK_PUNCH;
+-            break;
+-        case INT_KICK:
+-        case INT_TRIP:
+-            attackType = ATTACK_KICK_OR_TRIP;
+-            break;
+-        case INT_SLIDE_KICK:
+-        case INT_FAST_ATTACK_OR_SHELL:
+-            attackType = ATTACK_FAST_ATTACK;
+-            break;
+-        case INT_HIT_FROM_ABOVE:
+-            attackType = ATTACK_FROM_ABOVE;
+-            break;
+-        case INT_HIT_FROM_BELOW:
+-            attackType = ATTACK_FROM_BELOW;
+-            break;
+-    }
+-
+-    o->oInteractStatus = attackType + (INT_STATUS_INTERACTED | INT_STATUS_WAS_ATTACKED);
+-    return attackType;
++	u32 attackType = 0;
++
++	switch (interaction) {
++		case INT_GROUND_POUND_OR_TWIRL:
++			attackType = ATTACK_GROUND_POUND_OR_TWIRL;
++			break;
++		case INT_PUNCH:
++			attackType = ATTACK_PUNCH;
++			break;
++		case INT_KICK:
++		case INT_TRIP:
++			attackType = ATTACK_KICK_OR_TRIP;
++			break;
++		case INT_SLIDE_KICK:
++		case INT_FAST_ATTACK_OR_SHELL:
++			attackType = ATTACK_FAST_ATTACK;
++			break;
++		case INT_HIT_FROM_ABOVE:
++			attackType = ATTACK_FROM_ABOVE;
++			break;
++		case INT_HIT_FROM_BELOW:
++			attackType = ATTACK_FROM_BELOW;
++			break;
++	}
++
++	o->oInteractStatus = attackType + (INT_STATUS_INTERACTED | INT_STATUS_WAS_ATTACKED);
++	return attackType;
+ }
+ 
+ void mario_stop_riding_object(struct MarioState *m) {
+-    if (m->riddenObj != NULL) {
+-        m->riddenObj->oInteractStatus = INT_STATUS_STOP_RIDING;
+-        stop_shell_music();
+-        m->riddenObj = NULL;
+-    }
++	if (m->riddenObj != NULL) {
++		m->riddenObj->oInteractStatus = INT_STATUS_STOP_RIDING;
++		stop_shell_music();
++		m->riddenObj = NULL;
++	}
+ }
+ 
+ void mario_grab_used_object(struct MarioState *m) {
+-    if (m->heldObj == NULL) {
+-        m->heldObj = m->usedObj;
+-        obj_set_held_state(m->heldObj, bhvCarrySomething3);
+-    }
++	if (m->heldObj == NULL) {
++		m->heldObj = m->usedObj;
++		obj_set_held_state(m->heldObj, bhvCarrySomething3);
++	}
+ }
+ 
+ void mario_drop_held_object(struct MarioState *m) {
+-    if (m->heldObj != NULL) {
+-        if (m->heldObj->behavior == segmented_to_virtual(bhvKoopaShellUnderwater)) {
+-            stop_shell_music();
+-        }
++	if (m->heldObj != NULL) {
++		if (m->heldObj->behavior == segmented_to_virtual(bhvKoopaShellUnderwater)) {
++			stop_shell_music();
++		}
+ 
+-        obj_set_held_state(m->heldObj, bhvCarrySomething4);
++		obj_set_held_state(m->heldObj, bhvCarrySomething4);
+ 
+-        // ! When dropping an object instead of throwing it, it will be put at Mario's
+-        // y-positon instead of the HOLP's y-position. This fact is often exploited when
+-        // cloning objects.
+-        m->heldObj->oPosX = m->marioBodyState->heldObjLastPosition[0];
+-        m->heldObj->oPosY = m->pos[1];
+-        m->heldObj->oPosZ = m->marioBodyState->heldObjLastPosition[2];
++		// ! When dropping an object instead of throwing it, it will be put at Mario's
++		// y-positon instead of the HOLP's y-position. This fact is often exploited when
++		// cloning objects.
++		m->heldObj->oPosX = m->marioBodyState->heldObjLastPosition[0];
++		m->heldObj->oPosY = m->pos[1];
++		m->heldObj->oPosZ = m->marioBodyState->heldObjLastPosition[2];
+ 
+-        m->heldObj->oMoveAngleYaw = m->faceAngle[1];
++		m->heldObj->oMoveAngleYaw = m->faceAngle[1];
+ 
+-        m->heldObj = NULL;
+-    }
++		m->heldObj = NULL;
++	}
+ }
+ 
+ void mario_throw_held_object(struct MarioState *m) {
+-    if (m->heldObj != NULL) {
+-        if (m->heldObj->behavior == segmented_to_virtual(bhvKoopaShellUnderwater)) {
+-            stop_shell_music();
+-        }
++	if (m->heldObj != NULL) {
++		if (m->heldObj->behavior == segmented_to_virtual(bhvKoopaShellUnderwater)) {
++			stop_shell_music();
++		}
+ 
+-        obj_set_held_state(m->heldObj, bhvCarrySomething5);
++		obj_set_held_state(m->heldObj, bhvCarrySomething5);
+ 
+-        m->heldObj->oPosX = m->marioBodyState->heldObjLastPosition[0] + 32.0f * sins(m->faceAngle[1]);
+-        m->heldObj->oPosY = m->marioBodyState->heldObjLastPosition[1];
+-        m->heldObj->oPosZ = m->marioBodyState->heldObjLastPosition[2] + 32.0f * coss(m->faceAngle[1]);
++		m->heldObj->oPosX = m->marioBodyState->heldObjLastPosition[0] + 32.0f * sins(m->faceAngle[1]);
++		m->heldObj->oPosY = m->marioBodyState->heldObjLastPosition[1];
++		m->heldObj->oPosZ = m->marioBodyState->heldObjLastPosition[2] + 32.0f * coss(m->faceAngle[1]);
+ 
+-        m->heldObj->oMoveAngleYaw = m->faceAngle[1];
++		m->heldObj->oMoveAngleYaw = m->faceAngle[1];
+ 
+-        m->heldObj = NULL;
+-    }
++		m->heldObj = NULL;
++	}
+ }
+ 
+ void mario_stop_riding_and_holding(struct MarioState *m) {
+-    mario_drop_held_object(m);
+-    mario_stop_riding_object(m);
++	mario_drop_held_object(m);
++	mario_stop_riding_object(m);
+ 
+-    if (m->action == ACT_RIDING_HOOT) {
+-        m->usedObj->oInteractStatus = 0;
+-        m->usedObj->oHootMarioReleaseTime = gGlobalTimer;
+-    }
++	if (m->action == ACT_RIDING_HOOT) {
++		m->usedObj->oInteractStatus = 0;
++		m->usedObj->oHootMarioReleaseTime = gGlobalTimer;
++	}
+ }
+ 
+ u32 does_mario_have_normal_cap_on_head(struct MarioState *m) {
+-    return (m->flags & (MARIO_CAPS | MARIO_CAP_ON_HEAD)) == (MARIO_NORMAL_CAP | MARIO_CAP_ON_HEAD);
++	return (m->flags & (MARIO_CAPS | MARIO_CAP_ON_HEAD)) == (MARIO_NORMAL_CAP | MARIO_CAP_ON_HEAD);
+ }
+ 
+ void mario_blow_off_cap(struct MarioState *m, f32 capSpeed) {
+-    struct Object *capObject;
++	struct Object *capObject;
+ 
+-    if (does_mario_have_normal_cap_on_head(m)) {
+-        save_file_set_cap_pos(m->pos[0], m->pos[1], m->pos[2]);
++	if (does_mario_have_normal_cap_on_head(m)) {
++		save_file_set_cap_pos(m->pos[0], m->pos[1], m->pos[2]);
+ 
+-        m->flags &= ~(MARIO_NORMAL_CAP | MARIO_CAP_ON_HEAD);
++		m->flags &= ~(MARIO_NORMAL_CAP | MARIO_CAP_ON_HEAD);
+ 
+-        capObject = spawn_object(m->marioObj, MODEL_MARIOS_CAP, bhvNormalCap);
++		capObject = spawn_object(m->marioObj, MODEL_MARIOS_CAP, bhvNormalCap);
+ 
+-        capObject->oPosY += (m->action & ACT_FLAG_SHORT_HITBOX) ? 120.0f : 180.0f;
+-        capObject->oForwardVel = capSpeed;
+-        capObject->oMoveAngleYaw = (s16)(m->faceAngle[1] + 0x400);
++		capObject->oPosY += (m->action & ACT_FLAG_SHORT_HITBOX) ? 120.0f : 180.0f;
++		capObject->oForwardVel = capSpeed;
++		capObject->oMoveAngleYaw = (s16)(m->faceAngle[1] + 0x400);
+ 
+-        if (m->forwardVel < 0.0f) {
+-            capObject->oMoveAngleYaw = (s16)(capObject->oMoveAngleYaw + 0x8000);
+-        }
+-    }
++		if (m->forwardVel < 0.0f) {
++			capObject->oMoveAngleYaw = (s16)(capObject->oMoveAngleYaw + 0x8000);
++		}
++	}
+ }
+ 
+ u32 mario_lose_cap_to_enemy(u32 arg) {
+-    u32 wasWearingCap = FALSE;
++	u32 wasWearingCap = FALSE;
+ 
+-    if (does_mario_have_normal_cap_on_head(gMarioState)) {
+-        save_file_set_flags(arg == 1 ? SAVE_FLAG_CAP_ON_KLEPTO : SAVE_FLAG_CAP_ON_UKIKI);
+-        gMarioState->flags &= ~(MARIO_NORMAL_CAP | MARIO_CAP_ON_HEAD);
+-        wasWearingCap = TRUE;
+-    }
++	if (does_mario_have_normal_cap_on_head(gMarioState)) {
++		save_file_set_flags(arg == 1 ? SAVE_FLAG_CAP_ON_KLEPTO : SAVE_FLAG_CAP_ON_UKIKI);
++		gMarioState->flags &= ~(MARIO_NORMAL_CAP | MARIO_CAP_ON_HEAD);
++		wasWearingCap = TRUE;
++	}
+ 
+-    return wasWearingCap;
++	return wasWearingCap;
+ }
+ 
+ void mario_retrieve_cap(void) {
+-    mario_drop_held_object(gMarioState);
+-    save_file_clear_flags(SAVE_FLAG_CAP_ON_KLEPTO | SAVE_FLAG_CAP_ON_UKIKI);
+-    gMarioState->flags &= ~MARIO_CAP_ON_HEAD;
+-    gMarioState->flags |= MARIO_NORMAL_CAP | MARIO_CAP_IN_HAND;
++	mario_drop_held_object(gMarioState);
++	save_file_clear_flags(SAVE_FLAG_CAP_ON_KLEPTO | SAVE_FLAG_CAP_ON_UKIKI);
++	gMarioState->flags &= ~MARIO_CAP_ON_HEAD;
++	gMarioState->flags |= MARIO_NORMAL_CAP | MARIO_CAP_IN_HAND;
+ }
+ 
+ u32 able_to_grab_object(struct MarioState *m, UNUSED struct Object *o) {
+-    u32 action = m->action;
++	u32 action = m->action;
+ 
+-    if (action == ACT_DIVE_SLIDE || action == ACT_DIVE) {
+-        if (!(o->oInteractionSubtype & INT_SUBTYPE_GRABS_MARIO)) {
+-            return TRUE;
+-        }
+-    } else if (action == ACT_PUNCHING || action == ACT_MOVE_PUNCHING) {
+-        if (m->actionArg < 2) {
+-            return TRUE;
+-        }
+-    }
++	if (action == ACT_DIVE_SLIDE || action == ACT_DIVE) {
++		if (!(o->oInteractionSubtype & INT_SUBTYPE_GRABS_MARIO)) {
++			return TRUE;
++		}
++	} else if (action == ACT_PUNCHING || action == ACT_MOVE_PUNCHING) {
++		if (m->actionArg < 2) {
++			return TRUE;
++		}
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ struct Object *mario_get_collided_object(struct MarioState *m, u32 interactType) {
+-    s32 i;
+-    struct Object *object;
++	s32 i;
++	struct Object *object;
+ 
+-    for (i = 0; i < m->marioObj->numCollidedObjs; i++) {
+-        object = m->marioObj->collidedObjs[i];
++	for (i = 0; i < m->marioObj->numCollidedObjs; i++) {
++		object = m->marioObj->collidedObjs[i];
+ 
+-        if (object->oInteractType == interactType) {
+-            return object;
+-        }
+-    }
++		if (object->oInteractType == interactType) {
++			return object;
++		}
++	}
+ 
+-    return NULL;
++	return NULL;
+ }
+ 
+ u32 mario_check_object_grab(struct MarioState *m) {
+-    u32 result = FALSE;
+-    const BehaviorScript *script;
+-
+-    if (m->input & INPUT_INTERACT_OBJ_GRABBABLE) {
+-        script = virtual_to_segmented(0x13, m->interactObj->behavior);
+-
+-        if (script == bhvBowser) {
+-            s16 facingDYaw = m->faceAngle[1] - m->interactObj->oMoveAngleYaw;
+-            if (facingDYaw >= -0x5555 && facingDYaw <= 0x5555) {
+-                m->faceAngle[1] = m->interactObj->oMoveAngleYaw;
+-                m->usedObj = m->interactObj;
+-                result = set_mario_action(m, ACT_PICKING_UP_BOWSER, 0);
+-            }
+-        } else {
+-            s16 facingDYaw = mario_obj_angle_to_object(m, m->interactObj) - m->faceAngle[1];
+-            if (facingDYaw >= -0x2AAA && facingDYaw <= 0x2AAA) {
+-                m->usedObj = m->interactObj;
++	u32 result = FALSE;
++	const BehaviorScript *script;
+ 
+-                if (!(m->action & ACT_FLAG_AIR)) {
+-                    set_mario_action(
+-                        m, (m->action & ACT_FLAG_DIVING) ? ACT_DIVE_PICKING_UP : ACT_PICKING_UP, 0);
+-                }
++	if (m->input & INPUT_INTERACT_OBJ_GRABBABLE) {
++		script = virtual_to_segmented(0x13, m->interactObj->behavior);
+ 
+-                result = TRUE;
+-            }
+-        }
+-    }
+-
+-    return result;
+-}
+-
+-u32 bully_knock_back_mario(struct MarioState *mario) {
+-    struct BullyCollisionData marioData;
+-    struct BullyCollisionData bullyData;
+-    s16 newMarioYaw;
+-    s16 newBullyYaw;
+-    s16 marioDYaw;
+-    UNUSED s16 bullyDYaw;
+-
+-    u32 bonkAction = 0;
+-
+-    struct Object *bully = mario->interactObj;
+-
+-    //! Conversion ratios multiply to more than 1 (could allow unbounded speed
+-    // with bonk cancel - but this isn't important for regular bully battery)
+-    f32 bullyToMarioRatio = bully->hitboxRadius * 3 / 53;
+-    f32 marioToBullyRatio = 53.0f / bully->hitboxRadius;
++		if (script == bhvBowser) {
++			s16 facingDYaw = m->faceAngle[1] - m->interactObj->oMoveAngleYaw;
++			if (facingDYaw >= -0x5555 && facingDYaw <= 0x5555) {
++				m->faceAngle[1] = m->interactObj->oMoveAngleYaw;
++				m->usedObj = m->interactObj;
++				result = set_mario_action(m, ACT_PICKING_UP_BOWSER, 0);
++			}
++		} else {
++			s16 facingDYaw = mario_obj_angle_to_object(m, m->interactObj) - m->faceAngle[1];
++			if (facingDYaw >= -0x2AAA && facingDYaw <= 0x2AAA) {
++				m->usedObj = m->interactObj;
+ 
+-    init_bully_collision_data(&marioData, mario->pos[0], mario->pos[2], mario->forwardVel,
+-                              mario->faceAngle[1], bullyToMarioRatio, 52.0f);
++				if (!(m->action & ACT_FLAG_AIR)) {
++					set_mario_action(
++						m, (m->action & ACT_FLAG_DIVING) ? ACT_DIVE_PICKING_UP : ACT_PICKING_UP, 0);
++				}
+ 
+-    init_bully_collision_data(&bullyData, bully->oPosX, bully->oPosZ, bully->oForwardVel,
+-                              bully->oMoveAngleYaw, marioToBullyRatio, bully->hitboxRadius + 2.0f);
++				result = TRUE;
++			}
++		}
++	}
+ 
+-    if (mario->forwardVel != 0.0f) {
+-        transfer_bully_speed(&marioData, &bullyData);
+-    } else {
+-        transfer_bully_speed(&bullyData, &marioData);
+-    }
+-
+-    newMarioYaw = atan2s(marioData.velZ, marioData.velX);
+-    newBullyYaw = atan2s(bullyData.velZ, bullyData.velX);
+-
+-    marioDYaw = newMarioYaw - mario->faceAngle[1];
+-    bullyDYaw = newBullyYaw - bully->oMoveAngleYaw;
+-
+-    mario->faceAngle[1] = newMarioYaw;
+-    mario->forwardVel = sqrtf(marioData.velX * marioData.velX + marioData.velZ * marioData.velZ);
+-    mario->pos[0] = marioData.posX;
+-    mario->pos[2] = marioData.posZ;
+-
+-    bully->oMoveAngleYaw = newBullyYaw;
+-    bully->oForwardVel = sqrtf(bullyData.velX * bullyData.velX + bullyData.velZ * bullyData.velZ);
+-    bully->oPosX = bullyData.posX;
+-    bully->oPosZ = bullyData.posZ;
+-
+-    if (marioDYaw < -0x4000 || marioDYaw > 0x4000) {
+-        mario->faceAngle[1] += 0x8000;
+-        mario->forwardVel *= -1.0f;
+-
+-        if (mario->action & ACT_FLAG_AIR) {
+-            bonkAction = ACT_BACKWARD_AIR_KB;
+-        } else {
+-            bonkAction = ACT_SOFT_BACKWARD_GROUND_KB;
+-        }
+-    } else {
+-        if (mario->action & ACT_FLAG_AIR) {
+-            bonkAction = ACT_FORWARD_AIR_KB;
+-        } else {
+-            bonkAction = ACT_SOFT_FORWARD_GROUND_KB;
+-        }
+-    }
++	return result;
++}
+ 
+-    return bonkAction;
++u32 bully_knock_back_mario(struct MarioState *mario) {
++	struct BullyCollisionData marioData;
++	struct BullyCollisionData bullyData;
++	s16 newMarioYaw;
++	s16 newBullyYaw;
++	s16 marioDYaw;
++	UNUSED s16 bullyDYaw;
++
++	u32 bonkAction = 0;
++
++	struct Object *bully = mario->interactObj;
++
++	//! Conversion ratios multiply to more than 1 (could allow unbounded speed
++	// with bonk cancel - but this isn't important for regular bully battery)
++	f32 bullyToMarioRatio = bully->hitboxRadius * 3 / 53;
++	f32 marioToBullyRatio = 53.0f / bully->hitboxRadius;
++
++	init_bully_collision_data(&marioData, mario->pos[0], mario->pos[2], mario->forwardVel,
++							  mario->faceAngle[1], bullyToMarioRatio, 52.0f);
++
++	init_bully_collision_data(&bullyData, bully->oPosX, bully->oPosZ, bully->oForwardVel,
++							  bully->oMoveAngleYaw, marioToBullyRatio, bully->hitboxRadius + 2.0f);
++
++	if (mario->forwardVel != 0.0f) {
++		transfer_bully_speed(&marioData, &bullyData);
++	} else {
++		transfer_bully_speed(&bullyData, &marioData);
++	}
++
++	newMarioYaw = atan2s(marioData.velZ, marioData.velX);
++	newBullyYaw = atan2s(bullyData.velZ, bullyData.velX);
++
++	marioDYaw = newMarioYaw - mario->faceAngle[1];
++	bullyDYaw = newBullyYaw - bully->oMoveAngleYaw;
++
++	mario->faceAngle[1] = newMarioYaw;
++	mario->forwardVel = sqrtf(marioData.velX * marioData.velX + marioData.velZ * marioData.velZ);
++	mario->pos[0] = marioData.posX;
++	mario->pos[2] = marioData.posZ;
++
++	bully->oMoveAngleYaw = newBullyYaw;
++	bully->oForwardVel = sqrtf(bullyData.velX * bullyData.velX + bullyData.velZ * bullyData.velZ);
++	bully->oPosX = bullyData.posX;
++	bully->oPosZ = bullyData.posZ;
++
++	if (marioDYaw < -0x4000 || marioDYaw > 0x4000) {
++		mario->faceAngle[1] += 0x8000;
++		mario->forwardVel *= -1.0f;
++
++		if (mario->action & ACT_FLAG_AIR) {
++			bonkAction = ACT_BACKWARD_AIR_KB;
++		} else {
++			bonkAction = ACT_SOFT_BACKWARD_GROUND_KB;
++		}
++	} else {
++		if (mario->action & ACT_FLAG_AIR) {
++			bonkAction = ACT_FORWARD_AIR_KB;
++		} else {
++			bonkAction = ACT_SOFT_FORWARD_GROUND_KB;
++		}
++	}
++
++	return bonkAction;
+ }
+ 
+ void bounce_off_object(struct MarioState *m, struct Object *o, f32 velY) {
+-    m->pos[1] = o->oPosY + o->hitboxHeight;
+-    m->vel[1] = velY;
++	m->pos[1] = o->oPosY + o->hitboxHeight;
++	m->vel[1] = velY;
+ 
+-    m->flags &= ~MARIO_UNKNOWN_08;
++	m->flags &= ~MARIO_UNKNOWN_08;
+ 
+-    play_sound(SOUND_ACTION_BOUNCE_OFF_OBJECT, m->marioObj->header.gfx.cameraToObject);
++	play_sound(SOUND_ACTION_BOUNCE_OFF_OBJECT, m->marioObj->header.gfx.cameraToObject);
+ }
+ 
+ void hit_object_from_below(struct MarioState *m, UNUSED struct Object *o) {
+-    m->vel[1] = 0.0f;
+-    set_camera_shake_from_hit(SHAKE_HIT_FROM_BELOW);
++	m->vel[1] = 0.0f;
++	set_camera_shake_from_hit(SHAKE_HIT_FROM_BELOW);
+ }
+ 
+ static u32 unused_determine_knockback_action(struct MarioState *m) {
+-    u32 bonkAction;
+-    s16 angleToObject = mario_obj_angle_to_object(m, m->interactObj);
+-    s16 facingDYaw = angleToObject - m->faceAngle[1];
+-
+-    if (m->forwardVel < 16.0f) {
+-        m->forwardVel = 16.0f;
+-    }
+-
+-    m->faceAngle[1] = angleToObject;
+-
+-    if (facingDYaw >= -0x4000 && facingDYaw <= 0x4000) {
+-        m->forwardVel *= -1.0f;
+-        if (m->action & (ACT_FLAG_AIR | ACT_FLAG_ON_POLE | ACT_FLAG_HANGING)) {
+-            bonkAction = ACT_BACKWARD_AIR_KB;
+-        } else {
+-            bonkAction = ACT_SOFT_BACKWARD_GROUND_KB;
+-        }
+-    } else {
+-        m->faceAngle[1] += 0x8000;
+-        if (m->action & (ACT_FLAG_AIR | ACT_FLAG_ON_POLE | ACT_FLAG_HANGING)) {
+-            bonkAction = ACT_FORWARD_AIR_KB;
+-        } else {
+-            bonkAction = ACT_SOFT_FORWARD_GROUND_KB;
+-        }
+-    }
+-
+-    return bonkAction;
++	u32 bonkAction;
++	s16 angleToObject = mario_obj_angle_to_object(m, m->interactObj);
++	s16 facingDYaw = angleToObject - m->faceAngle[1];
++
++	if (m->forwardVel < 16.0f) {
++		m->forwardVel = 16.0f;
++	}
++
++	m->faceAngle[1] = angleToObject;
++
++	if (facingDYaw >= -0x4000 && facingDYaw <= 0x4000) {
++		m->forwardVel *= -1.0f;
++		if (m->action & (ACT_FLAG_AIR | ACT_FLAG_ON_POLE | ACT_FLAG_HANGING)) {
++			bonkAction = ACT_BACKWARD_AIR_KB;
++		} else {
++			bonkAction = ACT_SOFT_BACKWARD_GROUND_KB;
++		}
++	} else {
++		m->faceAngle[1] += 0x8000;
++		if (m->action & (ACT_FLAG_AIR | ACT_FLAG_ON_POLE | ACT_FLAG_HANGING)) {
++			bonkAction = ACT_FORWARD_AIR_KB;
++		} else {
++			bonkAction = ACT_SOFT_FORWARD_GROUND_KB;
++		}
++	}
++
++	return bonkAction;
+ }
+ 
+ u32 determine_knockback_action(struct MarioState *m, UNUSED s32 arg) {
+-    u32 bonkAction;
+-
+-    s16 terrainIndex = 0; // 1 = air, 2 = water, 0 = default
+-    s16 strengthIndex = 0;
+-
+-    s16 angleToObject = mario_obj_angle_to_object(m, m->interactObj);
+-    s16 facingDYaw = angleToObject - m->faceAngle[1];
+-    s16 remainingHealth = m->health - 0x40 * m->hurtCounter;
+-
+-    if (m->action & (ACT_FLAG_SWIMMING | ACT_FLAG_METAL_WATER)) {
+-        terrainIndex = 2;
+-    } else if (m->action & (ACT_FLAG_AIR | ACT_FLAG_ON_POLE | ACT_FLAG_HANGING)) {
+-        terrainIndex = 1;
+-    }
+-
+-    if (remainingHealth < 0x100) {
+-        strengthIndex = 2;
+-    } else if (m->interactObj->oDamageOrCoinValue >= 4) {
+-        strengthIndex = 2;
+-    } else if (m->interactObj->oDamageOrCoinValue >= 2) {
+-        strengthIndex = 1;
+-    }
+-
+-    m->faceAngle[1] = angleToObject;
++	u32 bonkAction;
++
++	s16 terrainIndex = 0; // 1 = air, 2 = water, 0 = default
++	s16 strengthIndex = 0;
++
++	s16 angleToObject = mario_obj_angle_to_object(m, m->interactObj);
++	s16 facingDYaw = angleToObject - m->faceAngle[1];
++	s16 remainingHealth = m->health - 0x40 * m->hurtCounter;
++
++	if (m->action & (ACT_FLAG_SWIMMING | ACT_FLAG_METAL_WATER)) {
++		terrainIndex = 2;
++	} else if (m->action & (ACT_FLAG_AIR | ACT_FLAG_ON_POLE | ACT_FLAG_HANGING)) {
++		terrainIndex = 1;
++	}
++
++	if (remainingHealth < 0x100) {
++		strengthIndex = 2;
++	} else if (m->interactObj->oDamageOrCoinValue >= 4) {
++		strengthIndex = 2;
++	} else if (m->interactObj->oDamageOrCoinValue >= 2) {
++		strengthIndex = 1;
++	}
++
++	m->faceAngle[1] = angleToObject;
++
++	if (terrainIndex == 2) {
++		if (m->forwardVel < 28.0f) {
++			mario_set_forward_vel(m, 28.0f);
++		}
++
++		if (m->pos[1] >= m->interactObj->oPosY) {
++			if (m->vel[1] < 20.0f) {
++				m->vel[1] = 20.0f;
++			}
++		} else {
++			if (m->vel[1] > 0.0f) {
++				m->vel[1] = 0.0f;
++			}
++		}
++	} else {
++		if (m->forwardVel < 16.0f) {
++			mario_set_forward_vel(m, 16.0f);
++		}
++	}
++
++	if (-0x4000 <= facingDYaw && facingDYaw <= 0x4000) {
++		m->forwardVel *= -1.0f;
++		bonkAction = sBackwardKnockbackActions[terrainIndex][strengthIndex];
++	} else {
++		m->faceAngle[1] += 0x8000;
++		bonkAction = sForwardKnockbackActions[terrainIndex][strengthIndex];
++	}
++
++	return bonkAction;
++}
+ 
+-    if (terrainIndex == 2) {
+-        if (m->forwardVel < 28.0f) {
+-            mario_set_forward_vel(m, 28.0f);
+-        }
++void push_mario_out_of_object(struct MarioState *m, struct Object *o, f32 padding) {
++	f32 minDistance = o->hitboxRadius + m->marioObj->hitboxRadius + padding;
+ 
+-        if (m->pos[1] >= m->interactObj->oPosY) {
+-            if (m->vel[1] < 20.0f) {
+-                m->vel[1] = 20.0f;
+-            }
+-        } else {
+-            if (m->vel[1] > 0.0f) {
+-                m->vel[1] = 0.0f;
+-            }
+-        }
+-    } else {
+-        if (m->forwardVel < 16.0f) {
+-            mario_set_forward_vel(m, 16.0f);
+-        }
+-    }
++	f32 offsetX = m->pos[0] - o->oPosX;
++	f32 offsetZ = m->pos[2] - o->oPosZ;
++	f32 distance = sqrtf(offsetX * offsetX + offsetZ * offsetZ);
+ 
+-    if (-0x4000 <= facingDYaw && facingDYaw <= 0x4000) {
+-        m->forwardVel *= -1.0f;
+-        bonkAction = sBackwardKnockbackActions[terrainIndex][strengthIndex];
+-    } else {
+-        m->faceAngle[1] += 0x8000;
+-        bonkAction = sForwardKnockbackActions[terrainIndex][strengthIndex];
+-    }
++	if (distance < minDistance) {
++		struct Surface *floor;
++		s16 pushAngle;
++		f32 newMarioX;
++		f32 newMarioZ;
+ 
+-    return bonkAction;
+-}
++		if (distance == 0.0f) {
++			pushAngle = m->faceAngle[1];
++		} else {
++			pushAngle = atan2s(offsetZ, offsetX);
++		}
+ 
+-void push_mario_out_of_object(struct MarioState *m, struct Object *o, f32 padding) {
+-    f32 minDistance = o->hitboxRadius + m->marioObj->hitboxRadius + padding;
+-
+-    f32 offsetX = m->pos[0] - o->oPosX;
+-    f32 offsetZ = m->pos[2] - o->oPosZ;
+-    f32 distance = sqrtf(offsetX * offsetX + offsetZ * offsetZ);
+-
+-    if (distance < minDistance) {
+-        struct Surface *floor;
+-        s16 pushAngle;
+-        f32 newMarioX;
+-        f32 newMarioZ;
+-
+-        if (distance == 0.0f) {
+-            pushAngle = m->faceAngle[1];
+-        } else {
+-            pushAngle = atan2s(offsetZ, offsetX);
+-        }
+-
+-        newMarioX = o->oPosX + minDistance * sins(pushAngle);
+-        newMarioZ = o->oPosZ + minDistance * coss(pushAngle);
++		newMarioX = o->oPosX + minDistance * sins(pushAngle);
++		newMarioZ = o->oPosZ + minDistance * coss(pushAngle);
+ 
+-        f32_find_wall_collision(&newMarioX, &m->pos[1], &newMarioZ, 60.0f, 50.0f);
++		f32_find_wall_collision(&newMarioX, &m->pos[1], &newMarioZ, 60.0f, 50.0f);
+ 
+-        find_floor(newMarioX, m->pos[1], newMarioZ, &floor);
+-        if (floor != NULL) {
+-            //! Doesn't update Mario's referenced floor (allows oob death when
+-            // an object pushes you into a steep slope while in a ground action)
+-            m->pos[0] = newMarioX;
+-            m->pos[2] = newMarioZ;
+-        }
+-    }
++		find_floor(newMarioX, m->pos[1], newMarioZ, &floor);
++		if (floor != NULL) {
++			//! Doesn't update Mario's referenced floor (allows oob death when
++			// an object pushes you into a steep slope while in a ground action)
++			m->pos[0] = newMarioX;
++			m->pos[2] = newMarioZ;
++		}
++	}
+ }
+ 
+ void bounce_back_from_attack(struct MarioState *m, u32 interaction) {
+-    if (interaction & (INT_PUNCH | INT_KICK | INT_TRIP)) {
+-        if (m->action == ACT_PUNCHING) {
+-            m->action = ACT_MOVE_PUNCHING;
+-        }
++	if (interaction & (INT_PUNCH | INT_KICK | INT_TRIP)) {
++		if (m->action == ACT_PUNCHING) {
++			m->action = ACT_MOVE_PUNCHING;
++		}
+ 
+-        if (m->action & ACT_FLAG_AIR) {
+-            mario_set_forward_vel(m, -16.0f);
+-        } else {
+-            mario_set_forward_vel(m, -48.0f);
+-        }
++		if (m->action & ACT_FLAG_AIR) {
++			mario_set_forward_vel(m, -16.0f);
++		} else {
++			mario_set_forward_vel(m, -48.0f);
++		}
+ 
+-        set_camera_shake_from_hit(SHAKE_ATTACK);
+-        m->particleFlags |= PARTICLE_TRIANGLE;
+-    }
++		set_camera_shake_from_hit(SHAKE_ATTACK);
++		m->particleFlags |= PARTICLE_TRIANGLE;
++	}
+ 
+-    if (interaction & (INT_PUNCH | INT_KICK | INT_TRIP | INT_FAST_ATTACK_OR_SHELL)) {
+-        play_sound(SOUND_ACTION_HIT_2, m->marioObj->header.gfx.cameraToObject);
+-    }
++	if (interaction & (INT_PUNCH | INT_KICK | INT_TRIP | INT_FAST_ATTACK_OR_SHELL)) {
++		play_sound(SOUND_ACTION_HIT_2, m->marioObj->header.gfx.cameraToObject);
++	}
+ }
+ 
+ u32 should_push_or_pull_door(struct MarioState *m, struct Object *o) {
+-    f32 dx = o->oPosX - m->pos[0];
+-    f32 dz = o->oPosZ - m->pos[2];
++	f32 dx = o->oPosX - m->pos[0];
++	f32 dz = o->oPosZ - m->pos[2];
+ 
+-    s16 dYaw = o->oMoveAngleYaw - atan2s(dz, dx);
++	s16 dYaw = o->oMoveAngleYaw - atan2s(dz, dx);
+ 
+-    return (dYaw >= -0x4000 && dYaw <= 0x4000) ? 0x00000001 : 0x00000002;
++	return (dYaw >= -0x4000 && dYaw <= 0x4000) ? 0x00000001 : 0x00000002;
+ }
+ 
+ u32 take_damage_from_interact_object(struct MarioState *m) {
+-    s32 shake;
+-    s32 damage = m->interactObj->oDamageOrCoinValue;
+-
+-    if (damage >= 4) {
+-        shake = SHAKE_LARGE_DAMAGE;
+-    } else if (damage >= 2) {
+-        shake = SHAKE_MED_DAMAGE;
+-    } else {
+-        shake = SHAKE_SMALL_DAMAGE;
+-    }
++	s32 shake;
++	s32 damage = m->interactObj->oDamageOrCoinValue;
+ 
+-    if (!(m->flags & MARIO_CAP_ON_HEAD)) {
+-        damage += (damage + 1) / 2;
+-    }
++	if (damage >= 4) {
++		shake = SHAKE_LARGE_DAMAGE;
++	} else if (damage >= 2) {
++		shake = SHAKE_MED_DAMAGE;
++	} else {
++		shake = SHAKE_SMALL_DAMAGE;
++	}
+ 
+-    if (m->flags & MARIO_METAL_CAP) {
+-        damage = 0;
+-    }
++	if (!(m->flags & MARIO_CAP_ON_HEAD)) {
++		damage += (damage + 1) / 2;
++	}
+ 
+-    m->hurtCounter += 4 * damage;
++	if (m->flags & MARIO_METAL_CAP || m->flags & MARIO_RAINBOW) {
++		damage = 0;
++	}
++
++	m->hurtCounter += 4 * damage;
+ 
+ #ifdef VERSION_SH
+-    queue_rumble_data(5, 80);
++	queue_rumble_data(5, 80);
+ #endif
+-    set_camera_shake_from_hit(shake);
++	set_camera_shake_from_hit(shake);
+ 
+-    return damage;
++	return damage;
+ }
+ 
+ u32 take_damage_and_knock_back(struct MarioState *m, struct Object *o) {
+-    u32 damage;
++	u32 damage;
+ 
+-    if (!sInvulnerable && !(m->flags & MARIO_VANISH_CAP)
+-        && !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+-        o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_ATTACKED_MARIO;
+-        m->interactObj = o;
++	if (!sInvulnerable && !(m->flags & MARIO_VANISH_CAP) && !(m->flags & MARIO_RAINBOW)
++		&& !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
++		o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_ATTACKED_MARIO;
++		m->interactObj = o;
+ 
+-        damage = take_damage_from_interact_object(m);
++		damage = take_damage_from_interact_object(m);
+ 
+-        if (o->oInteractionSubtype & INT_SUBTYPE_BIG_KNOCKBACK) {
+-            m->forwardVel = 40.0f;
+-        }
++		if (o->oInteractionSubtype & INT_SUBTYPE_BIG_KNOCKBACK) {
++			m->forwardVel = 40.0f;
++		}
+ 
+-        if (o->oDamageOrCoinValue > 0) {
+-            play_sound(SOUND_MARIO_ATTACKED, m->marioObj->header.gfx.cameraToObject);
+-        }
++		if (o->oDamageOrCoinValue > 0) {
++			play_sound(SOUND_MARIO_ATTACKED, m->marioObj->header.gfx.cameraToObject);
++		}
+ 
+-        update_mario_sound_and_camera(m);
+-        return drop_and_set_mario_action(m, determine_knockback_action(m, o->oDamageOrCoinValue),
+-                                         damage);
+-    }
++		update_mario_sound_and_camera(m);
++		return drop_and_set_mario_action(m, determine_knockback_action(m, o->oDamageOrCoinValue),
++										 damage);
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ void reset_mario_pitch(struct MarioState *m) {
+-    if (m->action == ACT_WATER_JUMP || m->action == ACT_SHOT_FROM_CANNON || m->action == ACT_FLYING) {
+-        set_camera_mode(m->area->camera, m->area->camera->defMode, 1);
+-        m->faceAngle[0] = 0;
+-    }
++	if (m->action == ACT_WATER_JUMP || m->action == ACT_SHOT_FROM_CANNON || m->action == ACT_FLYING) {
++		set_camera_mode(m->area->camera, m->area->camera->defMode, 1);
++		m->faceAngle[0] = 0;
++	}
+ }
+ 
+ u32 interact_coin(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    m->numCoins += o->oDamageOrCoinValue;
+-    m->healCounter += 4 * o->oDamageOrCoinValue;
++	m->numCoins += o->oDamageOrCoinValue;
++	m->healCounter += 4 * o->oDamageOrCoinValue;
+ 
+-    o->oInteractStatus = INT_STATUS_INTERACTED;
++	o->oInteractStatus = INT_STATUS_INTERACTED;
+ 
+-    if (COURSE_IS_MAIN_COURSE(gCurrCourseNum) && m->numCoins - o->oDamageOrCoinValue < 100
+-        && m->numCoins >= 100) {
+-        bhv_spawn_star_no_level_exit(6);
+-    }
++	if (COURSE_IS_MAIN_COURSE(gCurrCourseNum) && m->numCoins - o->oDamageOrCoinValue < 100
++		&& m->numCoins >= 100) {
++		bhv_spawn_star_no_level_exit(6);
++	}
+ #ifdef VERSION_SH
+-    if (o->oDamageOrCoinValue >= 2) {
+-        queue_rumble_data(5, 80);
+-    }
++	if (o->oDamageOrCoinValue >= 2) {
++		queue_rumble_data(5, 80);
++	}
+ #endif
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_water_ring(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    m->healCounter += 4 * o->oDamageOrCoinValue;
+-    o->oInteractStatus = INT_STATUS_INTERACTED;
+-    return FALSE;
++	m->healCounter += 4 * o->oDamageOrCoinValue;
++	o->oInteractStatus = INT_STATUS_INTERACTED;
++	return FALSE;
+ }
+ 
+ u32 interact_star_or_key(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    u32 starIndex;
+-    u32 starGrabAction = ACT_STAR_DANCE_EXIT;
+-    u32 noExit = (o->oInteractionSubtype & INT_SUBTYPE_NO_EXIT) != 0;
+-    u32 grandStar = (o->oInteractionSubtype & INT_SUBTYPE_GRAND_STAR) != 0;
++	u32 starIndex;
++	u32 starGrabAction = ACT_STAR_DANCE_EXIT;
++	u32 noExit = (o->oInteractionSubtype & INT_SUBTYPE_NO_EXIT) != 0;
++	u32 grandStar = (o->oInteractionSubtype & INT_SUBTYPE_GRAND_STAR) != 0;
+ 
+-    if (m->health >= 0x100) {
+-        mario_stop_riding_and_holding(m);
++	if (m->health >= 0x100) {
++		mario_stop_riding_and_holding(m);
+ #ifdef VERSION_SH
+-        queue_rumble_data(5, 80);
++		queue_rumble_data(5, 80);
+ #endif
+ 
+-        if (!noExit) {
+-            m->hurtCounter = 0;
+-            m->healCounter = 0;
+-            if (m->capTimer > 1) {
+-                m->capTimer = 1;
+-            }
+-        }
++		if (!noExit) {
++			m->hurtCounter = 0;
++			m->healCounter = 0;
++			if (m->capTimer > 1) {
++				m->capTimer = 1;
++			}
++		}
+ 
+-        if (noExit) {
+-            starGrabAction = ACT_STAR_DANCE_NO_EXIT;
+-        }
++		if (noExit) {
++			starGrabAction = ACT_STAR_DANCE_NO_EXIT;
++		}
+ 
+-        if (m->action & ACT_FLAG_SWIMMING) {
+-            starGrabAction = ACT_STAR_DANCE_WATER;
+-        }
++		if (m->action & ACT_FLAG_SWIMMING) {
++			starGrabAction = ACT_STAR_DANCE_WATER;
++		}
+ 
+-        if (m->action & ACT_FLAG_METAL_WATER) {
+-            starGrabAction = ACT_STAR_DANCE_WATER;
+-        }
++		if (m->action & ACT_FLAG_METAL_WATER) {
++			starGrabAction = ACT_STAR_DANCE_WATER;
++		}
+ 
+-        if (m->action & ACT_FLAG_AIR) {
+-            starGrabAction = ACT_FALL_AFTER_STAR_GRAB;
+-        }
++		if (m->action & ACT_FLAG_AIR) {
++			starGrabAction = ACT_FALL_AFTER_STAR_GRAB;
++		}
+ 
+-        spawn_object(o, MODEL_NONE, bhvStarKeyCollectionPuffSpawner);
++		spawn_object(o, MODEL_NONE, bhvStarKeyCollectionPuffSpawner);
+ 
+-        o->oInteractStatus = INT_STATUS_INTERACTED;
+-        m->interactObj = o;
+-        m->usedObj = o;
++		o->oInteractStatus = INT_STATUS_INTERACTED;
++		m->interactObj = o;
++		m->usedObj = o;
+ 
+-        starIndex = (o->oBehParams >> 24) & 0x1F;
+-        save_file_collect_star_or_key(m->numCoins, starIndex);
++		starIndex = (o->oBehParams >> 24) & 0x1F;
++		save_file_collect_star_or_key(m->numCoins, starIndex);
+ 
+-        m->numStars =
+-            save_file_get_total_star_count(gCurrSaveFileNum - 1, COURSE_MIN - 1, COURSE_MAX - 1);
++		m->numStars =
++			save_file_get_total_star_count(gCurrSaveFileNum - 1, COURSE_MIN - 1, COURSE_MAX - 1);
+ 
+-        if (!noExit) {
+-            drop_queued_background_music();
+-            fadeout_level_music(126);
+-        }
++		if (!noExit) {
++			drop_queued_background_music();
++			fadeout_level_music(126);
++		}
+ 
+-        play_sound(SOUND_MENU_STAR_SOUND, m->marioObj->header.gfx.cameraToObject);
++		play_sound(SOUND_MENU_STAR_SOUND, m->marioObj->header.gfx.cameraToObject);
+ #ifndef VERSION_JP
+-        update_mario_sound_and_camera(m);
++		update_mario_sound_and_camera(m);
+ #endif
+ 
+-        if (grandStar) {
+-            return set_mario_action(m, ACT_JUMBO_STAR_CUTSCENE, 0);
+-        }
++		if (grandStar) {
++			return set_mario_action(m, ACT_JUMBO_STAR_CUTSCENE, 0);
++		}
+ 
+-        return set_mario_action(m, starGrabAction, noExit + 2 * grandStar);
+-    }
++		return set_mario_action(m, starGrabAction, noExit + 2 * grandStar);
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_bbh_entrance(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    if (m->action != ACT_BBH_ENTER_SPIN && m->action != ACT_BBH_ENTER_JUMP) {
+-        mario_stop_riding_and_holding(m);
++	if (m->action != ACT_BBH_ENTER_SPIN && m->action != ACT_BBH_ENTER_JUMP) {
++		mario_stop_riding_and_holding(m);
+ 
+-        o->oInteractStatus = INT_STATUS_INTERACTED;
+-        m->interactObj = o;
+-        m->usedObj = o;
++		o->oInteractStatus = INT_STATUS_INTERACTED;
++		m->interactObj = o;
++		m->usedObj = o;
+ 
+-        if (m->action & ACT_FLAG_AIR) {
+-            return set_mario_action(m, ACT_BBH_ENTER_SPIN, 0);
+-        }
++		if (m->action & ACT_FLAG_AIR) {
++			return set_mario_action(m, ACT_BBH_ENTER_SPIN, 0);
++		}
+ 
+-        return set_mario_action(m, ACT_BBH_ENTER_JUMP, 0);
+-    }
++		return set_mario_action(m, ACT_BBH_ENTER_JUMP, 0);
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_warp(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    u32 action;
+-
+-    if (o->oInteractionSubtype & INT_SUBTYPE_FADING_WARP) {
+-        action = m->action;
+-
+-        if (action == ACT_TELEPORT_FADE_IN) {
+-            sJustTeleported = TRUE;
+-
+-        } else if (!sJustTeleported) {
+-            if (action == ACT_IDLE || action == ACT_PANTING || action == ACT_STANDING_AGAINST_WALL
+-                || action == ACT_CROUCHING) {
+-                m->interactObj = o;
+-                m->usedObj = o;
+-
+-                sJustTeleported = TRUE;
+-                return set_mario_action(m, ACT_TELEPORT_FADE_OUT, 0);
+-            }
+-        }
+-    } else {
+-        if (m->action != ACT_EMERGE_FROM_PIPE) {
+-            o->oInteractStatus = INT_STATUS_INTERACTED;
+-            m->interactObj = o;
+-            m->usedObj = o;
++	u32 action;
++
++	if (o->oInteractionSubtype & INT_SUBTYPE_FADING_WARP) {
++		action = m->action;
++
++		if (action == ACT_TELEPORT_FADE_IN) {
++			sJustTeleported = TRUE;
++
++		} else if (!sJustTeleported) {
++			if (action == ACT_IDLE || action == ACT_PANTING || action == ACT_STANDING_AGAINST_WALL
++				|| action == ACT_CROUCHING) {
++				m->interactObj = o;
++				m->usedObj = o;
++
++				sJustTeleported = TRUE;
++				return set_mario_action(m, ACT_TELEPORT_FADE_OUT, 0);
++			}
++		}
++	} else {
++		if (m->action != ACT_EMERGE_FROM_PIPE) {
++			o->oInteractStatus = INT_STATUS_INTERACTED;
++			m->interactObj = o;
++			m->usedObj = o;
+ 
+ #ifdef VERSION_SH
+-            if (o->collisionData == segmented_to_virtual(warp_pipe_seg3_collision_03009AC8)) {
+-                play_sound(SOUND_MENU_ENTER_PIPE, m->marioObj->header.gfx.cameraToObject);
+-                queue_rumble_data(15, 80);
+-            } else {
+-                play_sound(SOUND_MENU_ENTER_HOLE, m->marioObj->header.gfx.cameraToObject);
+-                queue_rumble_data(12, 80);
+-            }
++			if (o->collisionData == segmented_to_virtual(warp_pipe_seg3_collision_03009AC8)) {
++				play_sound(SOUND_MENU_ENTER_PIPE, m->marioObj->header.gfx.cameraToObject);
++				queue_rumble_data(15, 80);
++			} else {
++				play_sound(SOUND_MENU_ENTER_HOLE, m->marioObj->header.gfx.cameraToObject);
++				queue_rumble_data(12, 80);
++			}
+ #else
+-            play_sound(o->collisionData == segmented_to_virtual(warp_pipe_seg3_collision_03009AC8)
+-                           ? SOUND_MENU_ENTER_PIPE
+-                           : SOUND_MENU_ENTER_HOLE,
+-                       m->marioObj->header.gfx.cameraToObject);
++			play_sound(o->collisionData == segmented_to_virtual(warp_pipe_seg3_collision_03009AC8)
++						   ? SOUND_MENU_ENTER_PIPE
++						   : SOUND_MENU_ENTER_HOLE,
++					   m->marioObj->header.gfx.cameraToObject);
+ #endif
+ 
+-            mario_stop_riding_object(m);
+-            return set_mario_action(m, ACT_DISAPPEARED, (WARP_OP_WARP_OBJECT << 16) + 2);
+-        }
+-    }
++			mario_stop_riding_object(m);
++			return set_mario_action(m, ACT_DISAPPEARED, (WARP_OP_WARP_OBJECT << 16) + 2);
++		}
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_warp_door(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    u32 doorAction = 0;
+-    u32 saveFlags = save_file_get_flags();
+-    s16 warpDoorId = o->oBehParams >> 24;
+-    u32 actionArg;
+-
+-    if (m->action == ACT_WALKING || m->action == ACT_DECELERATING) {
+-        if (warpDoorId == 1 && !(saveFlags & SAVE_FLAG_UNLOCKED_UPSTAIRS_DOOR)) {
+-            if (!(saveFlags & SAVE_FLAG_HAVE_KEY_2)) {
+-                if (!sDisplayingDoorText) {
+-                    set_mario_action(m, ACT_READING_AUTOMATIC_DIALOG,
+-                                     (saveFlags & SAVE_FLAG_HAVE_KEY_1) ? DIALOG_023 : DIALOG_022);
+-                }
+-                sDisplayingDoorText = TRUE;
+-
+-                return FALSE;
+-            }
+-
+-            doorAction = ACT_UNLOCKING_KEY_DOOR;
+-        }
+-
+-        if (warpDoorId == 2 && !(saveFlags & SAVE_FLAG_UNLOCKED_BASEMENT_DOOR)) {
+-            if (!(saveFlags & SAVE_FLAG_HAVE_KEY_1)) {
+-                if (!sDisplayingDoorText) {
+-                    // Moat door skip was intended confirmed
+-                    set_mario_action(m, ACT_READING_AUTOMATIC_DIALOG,
+-                                     (saveFlags & SAVE_FLAG_HAVE_KEY_2) ? DIALOG_023 : DIALOG_022);
+-                }
+-                sDisplayingDoorText = TRUE;
+-
+-                return FALSE;
+-            }
+-
+-            doorAction = ACT_UNLOCKING_KEY_DOOR;
+-        }
+-
+-        if (m->action == ACT_WALKING || m->action == ACT_DECELERATING) {
+-            actionArg = should_push_or_pull_door(m, o) + 0x00000004;
+-
+-            if (doorAction == 0) {
+-                if (actionArg & 0x00000001) {
+-                    doorAction = ACT_PULLING_DOOR;
+-                } else {
+-                    doorAction = ACT_PUSHING_DOOR;
+-                }
+-            }
+-
+-            m->interactObj = o;
+-            m->usedObj = o;
+-            return set_mario_action(m, doorAction, actionArg);
+-        }
+-    }
+-
+-    return FALSE;
++	u32 doorAction = 0;
++	u32 saveFlags = save_file_get_flags();
++	s16 warpDoorId = o->oBehParams >> 24;
++	u32 actionArg;
++
++	if (m->action == ACT_WALKING || m->action == ACT_DECELERATING) {
++		if (warpDoorId == 1 && !(saveFlags & SAVE_FLAG_UNLOCKED_UPSTAIRS_DOOR)) {
++			if (!(saveFlags & SAVE_FLAG_HAVE_KEY_2)) {
++				if (!sDisplayingDoorText) {
++					set_mario_action(m, ACT_READING_AUTOMATIC_DIALOG,
++									 (saveFlags & SAVE_FLAG_HAVE_KEY_1) ? DIALOG_023 : DIALOG_022);
++				}
++				sDisplayingDoorText = TRUE;
++
++				return FALSE;
++			}
++
++			doorAction = ACT_UNLOCKING_KEY_DOOR;
++		}
++
++		if (warpDoorId == 2 && !(saveFlags & SAVE_FLAG_UNLOCKED_BASEMENT_DOOR)) {
++			if (!(saveFlags & SAVE_FLAG_HAVE_KEY_1)) {
++				if (!sDisplayingDoorText) {
++					// Moat door skip was intended confirmed
++					set_mario_action(m, ACT_READING_AUTOMATIC_DIALOG,
++									 (saveFlags & SAVE_FLAG_HAVE_KEY_2) ? DIALOG_023 : DIALOG_022);
++				}
++				sDisplayingDoorText = TRUE;
++
++				return FALSE;
++			}
++
++			doorAction = ACT_UNLOCKING_KEY_DOOR;
++		}
++
++		if (m->action == ACT_WALKING || m->action == ACT_DECELERATING) {
++			actionArg = should_push_or_pull_door(m, o) + 0x00000004;
++
++			if (doorAction == 0) {
++				if (actionArg & 0x00000001) {
++					doorAction = ACT_PULLING_DOOR;
++				} else {
++					doorAction = ACT_PUSHING_DOOR;
++				}
++			}
++
++			m->interactObj = o;
++			m->usedObj = o;
++			return set_mario_action(m, doorAction, actionArg);
++		}
++	}
++
++	return FALSE;
+ }
+ 
+ u32 get_door_save_file_flag(struct Object *door) {
+-    u32 saveFileFlag = 0;
+-    s16 requiredNumStars = door->oBehParams >> 24;
+-
+-    s16 isCcmDoor = door->oPosX < 0.0f;
+-    s16 isPssDoor = door->oPosY > 500.0f;
+-
+-    switch (requiredNumStars) {
+-        case 1:
+-            if (isPssDoor) {
+-                saveFileFlag = SAVE_FLAG_UNLOCKED_PSS_DOOR;
+-            } else {
+-                saveFileFlag = SAVE_FLAG_UNLOCKED_WF_DOOR;
+-            }
+-            break;
++	u32 saveFileFlag = 0;
++	s16 requiredNumStars = door->oBehParams >> 24;
+ 
+-        case 3:
+-            if (isCcmDoor) {
+-                saveFileFlag = SAVE_FLAG_UNLOCKED_CCM_DOOR;
+-            } else {
+-                saveFileFlag = SAVE_FLAG_UNLOCKED_JRB_DOOR;
+-            }
+-            break;
+-
+-        case 8:
+-            saveFileFlag = SAVE_FLAG_UNLOCKED_BITDW_DOOR;
+-            break;
+-
+-        case 30:
+-            saveFileFlag = SAVE_FLAG_UNLOCKED_BITFS_DOOR;
+-            break;
+-
+-        case 50:
+-            saveFileFlag = SAVE_FLAG_UNLOCKED_50_STAR_DOOR;
+-            break;
+-    }
+-
+-    return saveFileFlag;
+-}
+-
+-u32 interact_door(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    s16 requiredNumStars = o->oBehParams >> 24;
+-    s16 numStars = save_file_get_total_star_count(gCurrSaveFileNum - 1, COURSE_MIN - 1, COURSE_MAX - 1);
+-
+-    if (m->action == ACT_WALKING || m->action == ACT_DECELERATING) {
+-        if (numStars >= requiredNumStars) {
+-            u32 actionArg = should_push_or_pull_door(m, o);
+-            u32 enterDoorAction;
+-            u32 doorSaveFileFlag;
+-
+-            if (actionArg & 0x00000001) {
+-                enterDoorAction = ACT_PULLING_DOOR;
+-            } else {
+-                enterDoorAction = ACT_PUSHING_DOOR;
+-            }
++	s16 isCcmDoor = door->oPosX < 0.0f;
++	s16 isPssDoor = door->oPosY > 500.0f;
+ 
+-            doorSaveFileFlag = get_door_save_file_flag(o);
+-            m->interactObj = o;
+-            m->usedObj = o;
++	switch (requiredNumStars) {
++		case 1:
++			if (isPssDoor) {
++				saveFileFlag = SAVE_FLAG_UNLOCKED_PSS_DOOR;
++			} else {
++				saveFileFlag = SAVE_FLAG_UNLOCKED_WF_DOOR;
++			}
++			break;
+ 
+-            if (o->oInteractionSubtype & INT_SUBTYPE_STAR_DOOR) {
+-                enterDoorAction = ACT_ENTERING_STAR_DOOR;
+-            }
++		case 3:
++			if (isCcmDoor) {
++				saveFileFlag = SAVE_FLAG_UNLOCKED_CCM_DOOR;
++			} else {
++				saveFileFlag = SAVE_FLAG_UNLOCKED_JRB_DOOR;
++			}
++			break;
+ 
+-            if (doorSaveFileFlag != 0 && !(save_file_get_flags() & doorSaveFileFlag)) {
+-                enterDoorAction = ACT_UNLOCKING_STAR_DOOR;
+-            }
++		case 8:
++			saveFileFlag = SAVE_FLAG_UNLOCKED_BITDW_DOOR;
++			break;
+ 
+-            return set_mario_action(m, enterDoorAction, actionArg);
+-        } else if (!sDisplayingDoorText) {
+-            u32 text = DIALOG_022 << 16;
+-
+-            switch (requiredNumStars) {
+-                case 1:
+-                    text = DIALOG_024 << 16;
+-                    break;
+-                case 3:
+-                    text = DIALOG_025 << 16;
+-                    break;
+-                case 8:
+-                    text = DIALOG_026 << 16;
+-                    break;
+-                case 30:
+-                    text = DIALOG_027 << 16;
+-                    break;
+-                case 50:
+-                    text = DIALOG_028 << 16;
+-                    break;
+-                case 70:
+-                    text = DIALOG_029 << 16;
+-                    break;
+-            }
++		case 30:
++			saveFileFlag = SAVE_FLAG_UNLOCKED_BITFS_DOOR;
++			break;
+ 
+-            text += requiredNumStars - numStars;
++		case 50:
++			saveFileFlag = SAVE_FLAG_UNLOCKED_50_STAR_DOOR;
++			break;
++	}
+ 
+-            sDisplayingDoorText = TRUE;
+-            return set_mario_action(m, ACT_READING_AUTOMATIC_DIALOG, text);
+-        }
+-    } else if (m->action == ACT_IDLE && sDisplayingDoorText == TRUE && requiredNumStars == 70) {
+-        m->interactObj = o;
+-        m->usedObj = o;
+-        return set_mario_action(m, ACT_ENTERING_STAR_DOOR, should_push_or_pull_door(m, o));
+-    }
++	return saveFileFlag;
++}
+ 
+-    return FALSE;
++u32 interact_door(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
++	s16 requiredNumStars = o->oBehParams >> 24;
++	s16 numStars = save_file_get_total_star_count(gCurrSaveFileNum - 1, COURSE_MIN - 1, COURSE_MAX - 1);
++
++	if (m->action == ACT_WALKING || m->action == ACT_DECELERATING) {
++		if (numStars >= requiredNumStars) {
++			u32 actionArg = should_push_or_pull_door(m, o);
++			u32 enterDoorAction;
++			u32 doorSaveFileFlag;
++
++			if (actionArg & 0x00000001) {
++				enterDoorAction = ACT_PULLING_DOOR;
++			} else {
++				enterDoorAction = ACT_PUSHING_DOOR;
++			}
++
++			doorSaveFileFlag = get_door_save_file_flag(o);
++			m->interactObj = o;
++			m->usedObj = o;
++
++			if (o->oInteractionSubtype & INT_SUBTYPE_STAR_DOOR) {
++				enterDoorAction = ACT_ENTERING_STAR_DOOR;
++			}
++
++			if (doorSaveFileFlag != 0 && !(save_file_get_flags() & doorSaveFileFlag)) {
++				enterDoorAction = ACT_UNLOCKING_STAR_DOOR;
++			}
++
++			return set_mario_action(m, enterDoorAction, actionArg);
++		} else if (!sDisplayingDoorText) {
++			u32 text = DIALOG_022 << 16;
++
++			switch (requiredNumStars) {
++				case 1:
++					text = DIALOG_024 << 16;
++					break;
++				case 3:
++					text = DIALOG_025 << 16;
++					break;
++				case 8:
++					text = DIALOG_026 << 16;
++					break;
++				case 30:
++					text = DIALOG_027 << 16;
++					break;
++				case 50:
++					text = DIALOG_028 << 16;
++					break;
++				case 70:
++					text = DIALOG_029 << 16;
++					break;
++			}
++
++			text += requiredNumStars - numStars;
++
++			sDisplayingDoorText = TRUE;
++			return set_mario_action(m, ACT_READING_AUTOMATIC_DIALOG, text);
++		}
++	} else if (m->action == ACT_IDLE && sDisplayingDoorText == TRUE && requiredNumStars == 70) {
++		m->interactObj = o;
++		m->usedObj = o;
++		return set_mario_action(m, ACT_ENTERING_STAR_DOOR, should_push_or_pull_door(m, o));
++	}
++
++	return FALSE;
+ }
+ 
+ u32 interact_cannon_base(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    if (m->action != ACT_IN_CANNON) {
+-        mario_stop_riding_and_holding(m);
+-        o->oInteractStatus = INT_STATUS_INTERACTED;
+-        m->interactObj = o;
+-        m->usedObj = o;
+-        return set_mario_action(m, ACT_IN_CANNON, 0);
+-    }
++	if (m->action != ACT_IN_CANNON) {
++		mario_stop_riding_and_holding(m);
++		o->oInteractStatus = INT_STATUS_INTERACTED;
++		m->interactObj = o;
++		m->usedObj = o;
++		return set_mario_action(m, ACT_IN_CANNON, 0);
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_igloo_barrier(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    //! Sets used object without changing action (LOTS of interesting glitches,
+-    // but unfortunately the igloo barrier is the only object with this interaction
+-    // type)
+-    m->interactObj = o;
+-    m->usedObj = o;
+-    push_mario_out_of_object(m, o, 5.0f);
+-    return FALSE;
++	//! Sets used object without changing action (LOTS of interesting glitches,
++	// but unfortunately the igloo barrier is the only object with this interaction
++	// type)
++	m->interactObj = o;
++	m->usedObj = o;
++	push_mario_out_of_object(m, o, 5.0f);
++	return FALSE;
+ }
+ 
+ u32 interact_tornado(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    struct Object *marioObj = m->marioObj;
++	struct Object *marioObj = m->marioObj;
+ 
+-    if (m->action != ACT_TORNADO_TWIRLING && m->action != ACT_SQUISHED) {
+-        mario_stop_riding_and_holding(m);
+-        mario_set_forward_vel(m, 0.0f);
+-        update_mario_sound_and_camera(m);
++	if (m->action != ACT_TORNADO_TWIRLING && m->action != ACT_SQUISHED) {
++		mario_stop_riding_and_holding(m);
++		mario_set_forward_vel(m, 0.0f);
++		update_mario_sound_and_camera(m);
+ 
+-        o->oInteractStatus = INT_STATUS_INTERACTED;
+-        m->interactObj = o;
+-        m->usedObj = o;
++		o->oInteractStatus = INT_STATUS_INTERACTED;
++		m->interactObj = o;
++		m->usedObj = o;
+ 
+-        marioObj->oMarioTornadoYawVel = 0x400;
+-        marioObj->oMarioTornadoPosY = m->pos[1] - o->oPosY;
++		marioObj->oMarioTornadoYawVel = 0x400;
++		marioObj->oMarioTornadoPosY = m->pos[1] - o->oPosY;
+ 
+-        play_sound(SOUND_MARIO_WAAAOOOW, m->marioObj->header.gfx.cameraToObject);
++		play_sound(SOUND_MARIO_WAAAOOOW, m->marioObj->header.gfx.cameraToObject);
+ #ifdef VERSION_SH
+-        queue_rumble_data(30, 60);
++		queue_rumble_data(30, 60);
+ #endif
+-        return set_mario_action(m, ACT_TORNADO_TWIRLING, m->action == ACT_TWIRLING);
+-    }
++		return set_mario_action(m, ACT_TORNADO_TWIRLING, m->action == ACT_TWIRLING);
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_whirlpool(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    struct Object *marioObj = m->marioObj;
++	struct Object *marioObj = m->marioObj;
+ 
+-    if (m->action != ACT_CAUGHT_IN_WHIRLPOOL) {
+-        mario_stop_riding_and_holding(m);
+-        o->oInteractStatus = INT_STATUS_INTERACTED;
+-        m->interactObj = o;
+-        m->usedObj = o;
++	if (m->action != ACT_CAUGHT_IN_WHIRLPOOL) {
++		mario_stop_riding_and_holding(m);
++		o->oInteractStatus = INT_STATUS_INTERACTED;
++		m->interactObj = o;
++		m->usedObj = o;
+ 
+-        m->forwardVel = 0.0f;
++		m->forwardVel = 0.0f;
+ 
+-        marioObj->oMarioWhirlpoolPosY = m->pos[1] - o->oPosY;
++		marioObj->oMarioWhirlpoolPosY = m->pos[1] - o->oPosY;
+ 
+-        play_sound(SOUND_MARIO_WAAAOOOW, m->marioObj->header.gfx.cameraToObject);
++		play_sound(SOUND_MARIO_WAAAOOOW, m->marioObj->header.gfx.cameraToObject);
+ #ifdef VERSION_SH
+-        queue_rumble_data(30, 60);
++		queue_rumble_data(30, 60);
+ #endif
+-        return set_mario_action(m, ACT_CAUGHT_IN_WHIRLPOOL, 0);
+-    }
++		return set_mario_action(m, ACT_CAUGHT_IN_WHIRLPOOL, 0);
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_strong_wind(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    UNUSED struct Object *marioObj = m->marioObj;
+-
+-    if (m->action != ACT_GETTING_BLOWN) {
+-        mario_stop_riding_and_holding(m);
+-        o->oInteractStatus = INT_STATUS_INTERACTED;
+-        m->interactObj = o;
+-        m->usedObj = o;
+-
+-        m->faceAngle[1] = o->oMoveAngleYaw + 0x8000;
+-        m->unkC4 = 0.4f;
+-        m->forwardVel = -24.0f;
+-        m->vel[1] = 12.0f;
+-
+-        play_sound(SOUND_MARIO_WAAAOOOW, m->marioObj->header.gfx.cameraToObject);
+-        update_mario_sound_and_camera(m);
+-        return set_mario_action(m, ACT_GETTING_BLOWN, 0);
+-    }
++	UNUSED struct Object *marioObj = m->marioObj;
++
++	if (m->action != ACT_GETTING_BLOWN) {
++		mario_stop_riding_and_holding(m);
++		o->oInteractStatus = INT_STATUS_INTERACTED;
++		m->interactObj = o;
++		m->usedObj = o;
++
++		m->faceAngle[1] = o->oMoveAngleYaw + 0x8000;
++		m->unkC4 = 0.4f;
++		m->forwardVel = -24.0f;
++		m->vel[1] = 12.0f;
++
++		play_sound(SOUND_MARIO_WAAAOOOW, m->marioObj->header.gfx.cameraToObject);
++		update_mario_sound_and_camera(m);
++		return set_mario_action(m, ACT_GETTING_BLOWN, 0);
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_flame(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    u32 burningAction = ACT_BURNING_JUMP;
++	u32 burningAction = ACT_BURNING_JUMP;
+ 
+-    if (!sInvulnerable && !(m->flags & MARIO_METAL_CAP) && !(m->flags & MARIO_VANISH_CAP)
+-        && !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
++	if (!sInvulnerable && !(m->flags & MARIO_METAL_CAP) && !(m->flags & MARIO_RAINBOW)
++		&& !(m->flags & MARIO_VANISH_CAP)
++		&& !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+ #ifdef VERSION_SH
+-        queue_rumble_data(5, 80);
++		queue_rumble_data(5, 80);
+ #endif
+-        o->oInteractStatus = INT_STATUS_INTERACTED;
+-        m->interactObj = o;
+-
+-        if ((m->action & (ACT_FLAG_SWIMMING | ACT_FLAG_METAL_WATER))
+-            || m->waterLevel - m->pos[1] > 50.0f) {
+-            play_sound(SOUND_GENERAL_FLAME_OUT, m->marioObj->header.gfx.cameraToObject);
+-        } else {
+-            m->marioObj->oMarioBurnTimer = 0;
+-            update_mario_sound_and_camera(m);
+-            play_sound(SOUND_MARIO_ON_FIRE, m->marioObj->header.gfx.cameraToObject);
+-
+-            if ((m->action & ACT_FLAG_AIR) && m->vel[1] <= 0.0f) {
+-                burningAction = ACT_BURNING_FALL;
+-            }
++		o->oInteractStatus = INT_STATUS_INTERACTED;
++		m->interactObj = o;
+ 
+-            return drop_and_set_mario_action(m, burningAction, 1);
+-        }
+-    }
++		if ((m->action & (ACT_FLAG_SWIMMING | ACT_FLAG_METAL_WATER))
++			|| m->waterLevel - m->pos[1] > 50.0f) {
++			play_sound(SOUND_GENERAL_FLAME_OUT, m->marioObj->header.gfx.cameraToObject);
++		} else {
++			m->marioObj->oMarioBurnTimer = 0;
++			update_mario_sound_and_camera(m);
++			play_sound(SOUND_MARIO_ON_FIRE, m->marioObj->header.gfx.cameraToObject);
++
++			if ((m->action & ACT_FLAG_AIR) && m->vel[1] <= 0.0f) {
+ 
+-    return FALSE;
++				burningAction = ACT_BURNING_FALL;
++			}
++
++			return drop_and_set_mario_action(m, burningAction, 1);
++		}
++	}
++
++	return FALSE;
+ }
+ 
+ u32 interact_snufit_bullet(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    if (!sInvulnerable && !(m->flags & MARIO_VANISH_CAP)) {
+-        if (m->flags & MARIO_METAL_CAP) {
+-            o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_WAS_ATTACKED;
+-            play_sound(SOUND_ACTION_UNKNOWN458, m->marioObj->header.gfx.cameraToObject);
+-        } else {
+-            o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_ATTACKED_MARIO;
+-            m->interactObj = o;
+-            take_damage_from_interact_object(m);
+-
+-            play_sound(SOUND_MARIO_ATTACKED, m->marioObj->header.gfx.cameraToObject);
+-            update_mario_sound_and_camera(m);
+-
+-            return drop_and_set_mario_action(m, determine_knockback_action(m, o->oDamageOrCoinValue),
+-                                             o->oDamageOrCoinValue);
+-        }
+-    }
++	if (!sInvulnerable && !(m->flags & MARIO_VANISH_CAP)) {
++		if (m->flags & MARIO_METAL_CAP || m->flags & MARIO_RAINBOW) {
++			o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_WAS_ATTACKED;
++			play_sound(SOUND_ACTION_UNKNOWN458, m->marioObj->header.gfx.cameraToObject);
++		} else {
++			o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_ATTACKED_MARIO;
++			m->interactObj = o;
++			take_damage_from_interact_object(m);
+ 
+-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+-        sDelayInvincTimer = TRUE;
+-    }
++			play_sound(SOUND_MARIO_ATTACKED, m->marioObj->header.gfx.cameraToObject);
++			update_mario_sound_and_camera(m);
+ 
+-    return FALSE;
++			return drop_and_set_mario_action(m, determine_knockback_action(m, o->oDamageOrCoinValue),
++											 o->oDamageOrCoinValue);
++		}
++	}
++
++	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
++		sDelayInvincTimer = TRUE;
++	}
++
++	return FALSE;
+ }
+ 
+ u32 interact_clam_or_bubba(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    if (o->oInteractionSubtype & INT_SUBTYPE_EATS_MARIO) {
+-        o->oInteractStatus = INT_STATUS_INTERACTED;
+-        m->interactObj = o;
+-        return set_mario_action(m, ACT_EATEN_BY_BUBBA, 0);
+-    } else if (take_damage_and_knock_back(m, o)) {
+-        return TRUE;
+-    }
++	if (o->oInteractionSubtype & INT_SUBTYPE_EATS_MARIO) {
++		o->oInteractStatus = INT_STATUS_INTERACTED;
++		m->interactObj = o;
++		return set_mario_action(m, ACT_EATEN_BY_BUBBA, 0);
++	} else if (take_damage_and_knock_back(m, o)) {
++		return TRUE;
++	}
+ 
+-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+-        sDelayInvincTimer = TRUE;
+-    }
++	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
++		sDelayInvincTimer = TRUE;
++	}
+ 
+-    return TRUE;
++	return TRUE;
+ }
+ 
+ u32 interact_bully(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    UNUSED u32 unused;
++	UNUSED u32 unused;
+ 
+-    u32 interaction;
+-    if (m->flags & MARIO_METAL_CAP) {
+-        interaction = INT_FAST_ATTACK_OR_SHELL;
+-    } else {
+-        interaction = determine_interaction(m, o);
+-    }
++	u32 interaction;
++	if (m->flags & MARIO_METAL_CAP || m->flags & MARIO_RAINBOW) {
++		interaction = INT_FAST_ATTACK_OR_SHELL;
++	} else {
++		interaction = determine_interaction(m, o);
++	}
+ 
+-    m->interactObj = o;
++	m->interactObj = o;
+ 
+-    if (interaction & INT_ATTACK_NOT_FROM_BELOW) {
++	if (interaction & INT_ATTACK_NOT_FROM_BELOW) {
+ #ifdef VERSION_SH
+-        queue_rumble_data(5, 80);
++		queue_rumble_data(5, 80);
+ #endif
+-        push_mario_out_of_object(m, o, 5.0f);
++		push_mario_out_of_object(m, o, 5.0f);
+ 
+-        m->forwardVel = -16.0f;
+-        o->oMoveAngleYaw = m->faceAngle[1];
+-        o->oForwardVel = 3392.0f / o->hitboxRadius;
++		m->forwardVel = -16.0f;
++		o->oMoveAngleYaw = m->faceAngle[1];
++		o->oForwardVel = 3392.0f / o->hitboxRadius;
+ 
+-        attack_object(o, interaction);
+-        bounce_back_from_attack(m, interaction);
+-        return TRUE;
+-    }
++		attack_object(o, interaction);
++		bounce_back_from_attack(m, interaction);
++		return TRUE;
++	}
+ 
+-    else if (!sInvulnerable && !(m->flags & MARIO_VANISH_CAP)
+-             && !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+-        o->oInteractStatus = INT_STATUS_INTERACTED;
+-        m->invincTimer = 2;
++	else if (!sInvulnerable && !(m->flags & MARIO_VANISH_CAP)
++			 && !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
++		o->oInteractStatus = INT_STATUS_INTERACTED;
++		m->invincTimer = 2;
+ 
+-        update_mario_sound_and_camera(m);
+-        play_sound(SOUND_MARIO_EEUH, m->marioObj->header.gfx.cameraToObject);
+-        play_sound(SOUND_OBJ_BULLY_METAL, m->marioObj->header.gfx.cameraToObject);
++		update_mario_sound_and_camera(m);
++		play_sound(SOUND_MARIO_EEUH, m->marioObj->header.gfx.cameraToObject);
++		play_sound(SOUND_OBJ_BULLY_METAL, m->marioObj->header.gfx.cameraToObject);
+ 
+-        push_mario_out_of_object(m, o, 5.0f);
+-        drop_and_set_mario_action(m, bully_knock_back_mario(m), 0);
++		push_mario_out_of_object(m, o, 5.0f);
++		drop_and_set_mario_action(m, bully_knock_back_mario(m), 0);
+ #ifdef VERSION_SH
+-        queue_rumble_data(5, 80);
++		queue_rumble_data(5, 80);
+ #endif
+-        return TRUE;
+-    }
++		return TRUE;
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_shock(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    if (!sInvulnerable && !(m->flags & MARIO_VANISH_CAP)
+-        && !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+-        u32 actionArg = (m->action & (ACT_FLAG_AIR | ACT_FLAG_ON_POLE | ACT_FLAG_HANGING)) == 0;
++	if (!sInvulnerable && !(m->flags & MARIO_VANISH_CAP) && !(m->flags & MARIO_RAINBOW)
++		&& !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
++		u32 actionArg = (m->action & (ACT_FLAG_AIR | ACT_FLAG_ON_POLE | ACT_FLAG_HANGING)) == 0;
+ 
+-        o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_ATTACKED_MARIO;
+-        m->interactObj = o;
++		o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_ATTACKED_MARIO;
++		m->interactObj = o;
+ 
+-        take_damage_from_interact_object(m);
+-        play_sound(SOUND_MARIO_ATTACKED, m->marioObj->header.gfx.cameraToObject);
++		take_damage_from_interact_object(m);
++		play_sound(SOUND_MARIO_ATTACKED, m->marioObj->header.gfx.cameraToObject);
+ #ifdef VERSION_SH
+-        queue_rumble_data(70, 60);
++		queue_rumble_data(70, 60);
+ #endif
+ 
+-        if (m->action & (ACT_FLAG_SWIMMING | ACT_FLAG_METAL_WATER)) {
+-            return drop_and_set_mario_action(m, ACT_WATER_SHOCKED, 0);
+-        } else {
+-            update_mario_sound_and_camera(m);
+-            return drop_and_set_mario_action(m, ACT_SHOCKED, actionArg);
+-        }
+-    }
++		if (m->action & (ACT_FLAG_SWIMMING | ACT_FLAG_METAL_WATER)) {
++			return drop_and_set_mario_action(m, ACT_WATER_SHOCKED, 0);
++		} else {
++			update_mario_sound_and_camera(m);
++			return drop_and_set_mario_action(m, ACT_SHOCKED, actionArg);
++		}
++	}
+ 
+-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+-        sDelayInvincTimer = TRUE;
+-    }
++	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
++		sDelayInvincTimer = TRUE;
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ static u32 interact_stub(UNUSED struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+-        sDelayInvincTimer = TRUE;
+-    }
+-    return FALSE;
++	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
++		sDelayInvincTimer = TRUE;
++	}
++	return FALSE;
+ }
+ 
+ u32 interact_mr_blizzard(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    if (take_damage_and_knock_back(m, o)) {
+-        return TRUE;
+-    }
++    u32 interaction;
++    const BehaviorScript *script = virtual_to_segmented(0x13, o->behavior);
++	m->interactObj = o;
++	if (m->flags & MARIO_METAL_CAP || m->flags & MARIO_RAINBOW) {
++            interaction = INT_FAST_ATTACK_OR_SHELL;
++            attack_object(o, interaction);
++        }
++        
++	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
++		sDelayInvincTimer = TRUE;
++	}
++	if (!(m->flags & MARIO_METAL_CAP) && !(m->flags & MARIO_RAINBOW)) {
++	if (take_damage_and_knock_back(m, o) && script == bhvCursya) {
++
++
++            if (o->oBehParams2ndByte == 0) {
++                m->flags |= MARIO_SLOW_CURSE;
++            }
++            if (o->oBehParams2ndByte == 1) {
++                m->flags |= MARIO_REVERSE;
++            }
++            if (o->oBehParams2ndByte == 2) {
++                m->flags |= MARIO_TECH_CURSE;
++            }
++            if (o->oBehParams2ndByte == 3) {
++                m->jumpModifier = 0.5f;
++            }
+ 
+-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+-        sDelayInvincTimer = TRUE;
++
++            m->curseTimer = 1000;
++
++        } 
+     }
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_hit_from_below(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    UNUSED u32 unused;
++	UNUSED u32 unused;
+ 
+-    u32 interaction;
+-    if (m->flags & MARIO_METAL_CAP) {
+-        interaction = INT_FAST_ATTACK_OR_SHELL;
+-    } else {
+-        interaction = determine_interaction(m, o);
+-    }
++	u32 interaction;
++	if (m->flags & MARIO_METAL_CAP || m->flags & MARIO_RAINBOW) {
++		interaction = INT_FAST_ATTACK_OR_SHELL;
++	} else {
++		interaction = determine_interaction(m, o);
++	}
+ 
+-    if (interaction & INT_ANY_ATTACK) {
++	if (interaction & INT_ANY_ATTACK) {
+ #ifdef VERSION_SH
+-        queue_rumble_data(5, 80);
++		queue_rumble_data(5, 80);
+ #endif
+-        attack_object(o, interaction);
+-        bounce_back_from_attack(m, interaction);
++		attack_object(o, interaction);
++		bounce_back_from_attack(m, interaction);
+ 
+-        if (interaction & INT_HIT_FROM_BELOW) {
+-            hit_object_from_below(m, o);
+-        }
++		if (interaction & INT_HIT_FROM_BELOW) {
++			hit_object_from_below(m, o);
++		}
+ 
+-        if (interaction & INT_HIT_FROM_ABOVE) {
+-            if (o->oInteractionSubtype & INT_SUBTYPE_TWIRL_BOUNCE) {
+-                bounce_off_object(m, o, 80.0f);
+-                reset_mario_pitch(m);
++		if (interaction & INT_HIT_FROM_ABOVE) {
++			if (o->oInteractionSubtype & INT_SUBTYPE_TWIRL_BOUNCE) {
++				bounce_off_object(m, o, 80.0f);
++				reset_mario_pitch(m);
+ #ifndef VERSION_JP
+-                play_sound(SOUND_MARIO_TWIRL_BOUNCE, m->marioObj->header.gfx.cameraToObject);
++				play_sound(SOUND_MARIO_TWIRL_BOUNCE, m->marioObj->header.gfx.cameraToObject);
+ #endif
+-                return drop_and_set_mario_action(m, ACT_TWIRLING, 0);
+-            } else {
+-                bounce_off_object(m, o, 30.0f);
+-            }
+-        }
+-    } else if (take_damage_and_knock_back(m, o)) {
+-        return TRUE;
+-    }
++				return drop_and_set_mario_action(m, ACT_TWIRLING, 0);
++			} else {
++				bounce_off_object(m, o, 30.0f);
++			}
++		}
++	} else if (take_damage_and_knock_back(m, o)) {
++		return TRUE;
++	}
+ 
+-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+-        sDelayInvincTimer = TRUE;
+-    }
++	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
++		sDelayInvincTimer = TRUE;
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_bounce_top(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    u32 interaction;
+-    if (m->flags & MARIO_METAL_CAP) {
+-        interaction = INT_FAST_ATTACK_OR_SHELL;
+-    } else {
+-        interaction = determine_interaction(m, o);
+-    }
++	u32 interaction;
++    const BehaviorScript *script = virtual_to_segmented(0x13, o->behavior);
++	if (m->flags & MARIO_METAL_CAP || m->flags & MARIO_RAINBOW) {
++		interaction = INT_FAST_ATTACK_OR_SHELL;
++	} else {
++		interaction = determine_interaction(m, o);
++	}
+ 
+-    if (interaction & INT_ATTACK_NOT_FROM_BELOW) {
++	if (interaction & INT_ATTACK_NOT_FROM_BELOW) {
+ #ifdef VERSION_SH
+-        queue_rumble_data(5, 80);
++		queue_rumble_data(5, 80);
+ #endif
+-        attack_object(o, interaction);
+-        bounce_back_from_attack(m, interaction);
++		attack_object(o, interaction);
++		bounce_back_from_attack(m, interaction);
+ 
+-        if (interaction & INT_HIT_FROM_ABOVE) {
+-            if (o->oInteractionSubtype & INT_SUBTYPE_TWIRL_BOUNCE) {
+-                bounce_off_object(m, o, 80.0f);
+-                reset_mario_pitch(m);
++		if (interaction & INT_HIT_FROM_ABOVE) {
++			if (o->oInteractionSubtype & INT_SUBTYPE_TWIRL_BOUNCE) {
++				bounce_off_object(m, o, 80.0f);
++				reset_mario_pitch(m);
+ #ifndef VERSION_JP
+-                play_sound(SOUND_MARIO_TWIRL_BOUNCE, m->marioObj->header.gfx.cameraToObject);
++				play_sound(SOUND_MARIO_TWIRL_BOUNCE, m->marioObj->header.gfx.cameraToObject);
+ #endif
+-                return drop_and_set_mario_action(m, ACT_TWIRLING, 0);
+-            } else {
+-                bounce_off_object(m, o, 30.0f);
+-            }
+-        }
+-    } else if (take_damage_and_knock_back(m, o)) {
+-        return TRUE;
+-    }
++				return drop_and_set_mario_action(m, ACT_TWIRLING, 0);
++			} else {
++				bounce_off_object(m, o, 30.0f);
++			}
++		}
++	} else if (take_damage_and_knock_back(m, o)) {
++		return TRUE;
++	}
+ 
+-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+-        sDelayInvincTimer = TRUE;
+-    }
++	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
++		sDelayInvincTimer = TRUE;
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_unknown_08(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    u32 interaction = determine_interaction(m, o);
++	u32 interaction = determine_interaction(m, o);
+ 
+-    if (interaction & INT_PUNCH) {
+-        o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_WAS_ATTACKED | ATTACK_PUNCH;
+-        bounce_back_from_attack(m, interaction);
+-    } else if (take_damage_and_knock_back(m, o)) {
+-        return TRUE;
+-    }
++	if (interaction & INT_PUNCH) {
++		o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_WAS_ATTACKED | ATTACK_PUNCH;
++		bounce_back_from_attack(m, interaction);
++	} else if (take_damage_and_knock_back(m, o)) {
++		return TRUE;
++	}
+ 
+-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+-        sDelayInvincTimer = TRUE;
+-    }
++	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
++		sDelayInvincTimer = TRUE;
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_damage(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    if (take_damage_and_knock_back(m, o)) {
+-        return TRUE;
+-    }
++	if (take_damage_and_knock_back(m, o)) {
++		return TRUE;
++	}
+ 
+-    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
+-        sDelayInvincTimer = TRUE;
+-    }
++	if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
++		sDelayInvincTimer = TRUE;
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_breakable(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    u32 interaction = determine_interaction(m, o);
++	u32 interaction = determine_interaction(m, o);
+ 
+-    if (interaction & INT_ATTACK_NOT_WEAK_FROM_ABOVE) {
+-        attack_object(o, interaction);
+-        bounce_back_from_attack(m, interaction);
++	if (interaction & INT_ATTACK_NOT_WEAK_FROM_ABOVE) {
++		attack_object(o, interaction);
++		bounce_back_from_attack(m, interaction);
+ 
+-        m->interactObj = o;
++		m->interactObj = o;
+ 
+-        switch (interaction) {
+-            case INT_HIT_FROM_ABOVE:
+-                bounce_off_object(m, o, 30.0f); //! Not in the 0x8F mask
+-                break;
++		switch (interaction) {
++			case INT_HIT_FROM_ABOVE:
++				bounce_off_object(m, o, 30.0f); //! Not in the 0x8F mask
++				break;
+ 
+-            case INT_HIT_FROM_BELOW:
+-                hit_object_from_below(m, o);
+-                break;
+-        }
++			case INT_HIT_FROM_BELOW:
++				hit_object_from_below(m, o);
++				break;
++		}
+ 
+-        return TRUE;
+-    }
++		return TRUE;
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_koopa_shell(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    if (!(m->action & ACT_FLAG_RIDING_SHELL)) {
+-        u32 interaction = determine_interaction(m, o);
++	if (!(m->action & ACT_FLAG_RIDING_SHELL)) {
++		u32 interaction = determine_interaction(m, o);
+ 
+-        if (interaction == INT_HIT_FROM_ABOVE || m->action == ACT_WALKING
+-            || m->action == ACT_HOLD_WALKING) {
+-            m->interactObj = o;
+-            m->usedObj = o;
+-            m->riddenObj = o;
++		if (interaction == INT_HIT_FROM_ABOVE || m->action == ACT_WALKING
++			|| m->action == ACT_HOLD_WALKING) {
++			m->interactObj = o;
++			m->usedObj = o;
++			m->riddenObj = o;
+ 
+-            attack_object(o, interaction);
+-            update_mario_sound_and_camera(m);
+-            play_shell_music();
+-            mario_drop_held_object(m);
++			attack_object(o, interaction);
++			update_mario_sound_and_camera(m);
++			play_shell_music();
++			mario_drop_held_object(m);
+ 
+-            //! Puts Mario in ground action even when in air, making it easy to
+-            // escape air actions into crouch slide (shell cancel)
+-            return set_mario_action(m, ACT_RIDING_SHELL_GROUND, 0);
+-        }
++			//! Puts Mario in ground action even when in air, making it easy to
++			// escape air actions into crouch slide (shell cancel)
++			return set_mario_action(m, ACT_RIDING_SHELL_GROUND, 0);
++		}
+ 
+-        push_mario_out_of_object(m, o, 2.0f);
+-    }
++		push_mario_out_of_object(m, o, 2.0f);
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 check_object_grab_mario(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    if ((!(m->action & (ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ATTACKING)) || !sInvulnerable)
+-        && (o->oInteractionSubtype & INT_SUBTYPE_GRABS_MARIO)) {
+-        if (object_facing_mario(m, o, 0x2AAA)) {
+-            mario_stop_riding_and_holding(m);
+-            o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_GRABBED_MARIO;
+-
+-            m->faceAngle[1] = o->oMoveAngleYaw;
+-            m->interactObj = o;
+-            m->usedObj = o;
+-
+-            update_mario_sound_and_camera(m);
+-            play_sound(SOUND_MARIO_OOOF, m->marioObj->header.gfx.cameraToObject);
++	if ((!(m->action & (ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ATTACKING)) || !sInvulnerable)
++		&& (o->oInteractionSubtype & INT_SUBTYPE_GRABS_MARIO)) {
++		if (object_facing_mario(m, o, 0x2AAA)) {
++			mario_stop_riding_and_holding(m);
++			o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_GRABBED_MARIO;
++
++			m->faceAngle[1] = o->oMoveAngleYaw;
++			m->interactObj = o;
++			m->usedObj = o;
++
++			update_mario_sound_and_camera(m);
++			play_sound(SOUND_MARIO_OOOF, m->marioObj->header.gfx.cameraToObject);
+ #ifdef VERSION_SH
+-            queue_rumble_data(5, 80);
++			queue_rumble_data(5, 80);
+ #endif
+-            return set_mario_action(m, ACT_GRABBED, 0);
+-        }
+-    }
++			return set_mario_action(m, ACT_GRABBED, 0);
++		}
++	}
+ 
+-    push_mario_out_of_object(m, o, -5.0f);
+-    return FALSE;
++	push_mario_out_of_object(m, o, -5.0f);
++	return FALSE;
+ }
+ 
+ u32 interact_pole(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    s32 actionId = m->action & ACT_ID_MASK;
+-    if (actionId >= 0x080 && actionId < 0x0A0) {
+-        if (!(m->prevAction & ACT_FLAG_ON_POLE) || m->usedObj != o) {
++	s32 actionId = m->action & ACT_ID_MASK;
++	if (actionId >= 0x080 && actionId < 0x0A0) {
++		if (!(m->prevAction & ACT_FLAG_ON_POLE) || m->usedObj != o) {
+ #ifdef VERSION_SH
+-            f32 velConv = m->forwardVel; // conserve the velocity.
+-            struct Object *marioObj = m->marioObj;
+-            u32 lowSpeed;
++			f32 velConv = m->forwardVel; // conserve the velocity.
++			struct Object *marioObj = m->marioObj;
++			u32 lowSpeed;
+ #else
+-            u32 lowSpeed = (m->forwardVel <= 10.0f);
+-            struct Object *marioObj = m->marioObj;
++			u32 lowSpeed = (m->forwardVel <= 10.0f);
++			struct Object *marioObj = m->marioObj;
+ #endif
+ 
+-            mario_stop_riding_and_holding(m);
++			mario_stop_riding_and_holding(m);
+ 
+ #ifdef VERSION_SH
+-            lowSpeed = (velConv <= 10.0f);
++			lowSpeed = (velConv <= 10.0f);
+ #endif
+ 
+-            m->interactObj = o;
+-            m->usedObj = o;
+-            m->vel[1] = 0.0f;
+-            m->forwardVel = 0.0f;
++			m->interactObj = o;
++			m->usedObj = o;
++			m->vel[1] = 0.0f;
++			m->forwardVel = 0.0f;
+ 
+-            marioObj->oMarioPoleUnk108 = 0;
+-            marioObj->oMarioPoleYawVel = 0;
+-            marioObj->oMarioPolePos = m->pos[1] - o->oPosY;
++			marioObj->oMarioPoleUnk108 = 0;
++			marioObj->oMarioPoleYawVel = 0;
++			marioObj->oMarioPolePos = m->pos[1] - o->oPosY;
+ 
+-            if (lowSpeed) {
+-                return set_mario_action(m, ACT_GRAB_POLE_SLOW, 0);
+-            }
++			if (lowSpeed) {
++				return set_mario_action(m, ACT_GRAB_POLE_SLOW, 0);
++			}
+ 
+-            //! @bug Using m->forwardVel here is assumed to be 0.0f due to the set from earlier.
+-            //       This is fixed in the Shindou version.
++			//! @bug Using m->forwardVel here is assumed to be 0.0f due to the set from earlier.
++			//       This is fixed in the Shindou version.
+ #ifdef VERSION_SH
+-            marioObj->oMarioPoleYawVel = (s32)(velConv * 0x100 + 0x1000);
++			marioObj->oMarioPoleYawVel = (s32)(velConv * 0x100 + 0x1000);
+ #else
+-            marioObj->oMarioPoleYawVel = (s32)(m->forwardVel * 0x100 + 0x1000);
++			marioObj->oMarioPoleYawVel = (s32)(m->forwardVel * 0x100 + 0x1000);
+ #endif
+-            reset_mario_pitch(m);
++			reset_mario_pitch(m);
+ #ifdef VERSION_SH
+-            queue_rumble_data(5, 80);
++			queue_rumble_data(5, 80);
+ #endif
+-            return set_mario_action(m, ACT_GRAB_POLE_FAST, 0);
+-        }
+-    }
++			return set_mario_action(m, ACT_GRAB_POLE_FAST, 0);
++		}
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_hoot(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    s32 actionId = m->action & ACT_ID_MASK;
++	s32 actionId = m->action & ACT_ID_MASK;
+ 
+-    //! Can pause to advance the global timer without falling too far, allowing
+-    // you to regrab after letting go.
+-    if (actionId >= 0x080 && actionId < 0x098
+-        && (gGlobalTimer - m->usedObj->oHootMarioReleaseTime > 30)) {
+-        mario_stop_riding_and_holding(m);
+-        o->oInteractStatus = INT_STATUS_HOOT_GRABBED_BY_MARIO;
+-        m->interactObj = o;
+-        m->usedObj = o;
++	//! Can pause to advance the global timer without falling too far, allowing
++	// you to regrab after letting go.
++	if (actionId >= 0x080 && actionId < 0x098
++		&& (gGlobalTimer - m->usedObj->oHootMarioReleaseTime > 30)) {
++		mario_stop_riding_and_holding(m);
++		o->oInteractStatus = INT_STATUS_HOOT_GRABBED_BY_MARIO;
++		m->interactObj = o;
++		m->usedObj = o;
+ 
+ #ifdef VERSION_SH
+-        queue_rumble_data(5, 80);
++		queue_rumble_data(5, 80);
+ #endif
+-        update_mario_sound_and_camera(m);
+-        return set_mario_action(m, ACT_RIDING_HOOT, 0);
+-    }
++		update_mario_sound_and_camera(m);
++		return set_mario_action(m, ACT_RIDING_HOOT, 0);
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_cap(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    u32 capFlag = get_mario_cap_flag(o);
+-    u16 capMusic = 0;
+-    u16 capTime = 0;
+-
+-    if (m->action != ACT_GETTING_BLOWN && capFlag != 0) {
+-        m->interactObj = o;
+-        o->oInteractStatus = INT_STATUS_INTERACTED;
+-
+-        m->flags &= ~MARIO_CAP_ON_HEAD & ~MARIO_CAP_IN_HAND;
+-        m->flags |= capFlag;
+-
+-        switch (capFlag) {
+-            case MARIO_VANISH_CAP:
+-                capTime = 600;
+-                capMusic = SEQUENCE_ARGS(4, SEQ_EVENT_POWERUP);
+-                break;
+-
+-            case MARIO_METAL_CAP:
+-                capTime = 600;
+-                capMusic = SEQUENCE_ARGS(4, SEQ_EVENT_METAL_CAP);
+-                break;
+-
+-            case MARIO_WING_CAP:
+-                capTime = 1800;
+-                capMusic = SEQUENCE_ARGS(4, SEQ_EVENT_POWERUP);
+-                break;
+-        }
+-
+-        if (capTime > m->capTimer) {
+-            m->capTimer = capTime;
+-        }
+-
+-        if ((m->action & ACT_FLAG_IDLE) || m->action == ACT_WALKING) {
+-            m->flags |= MARIO_CAP_IN_HAND;
+-            set_mario_action(m, ACT_PUTTING_ON_CAP, 0);
+-        } else {
+-            m->flags |= MARIO_CAP_ON_HEAD;
+-        }
+-
+-        play_sound(SOUND_MENU_STAR_SOUND, m->marioObj->header.gfx.cameraToObject);
+-        play_sound(SOUND_MARIO_HERE_WE_GO, m->marioObj->header.gfx.cameraToObject);
++	u32 capFlag = get_mario_cap_flag(o);
++	u16 capMusic = 0;
++	u16 capTime = 0;
++
++	if (m->action != ACT_GETTING_BLOWN && capFlag != 0) {
++		m->interactObj = o;
++		o->oInteractStatus = INT_STATUS_INTERACTED;
++		if (!(m->flags & MARIO_RAINBOW)) {
++			m->flags &= ~MARIO_CAP_ON_HEAD & ~MARIO_CAP_IN_HAND;
++		}
++		m->flags |= capFlag;
++
++		switch (capFlag) {
++			case MARIO_VANISH_CAP:
++				capTime = 600;
++				capMusic = SEQUENCE_ARGS(4, SEQ_EVENT_POWERUP);
++				break;
++
++			case MARIO_METAL_CAP:
++				capTime = 600;
++				capMusic = SEQUENCE_ARGS(4, SEQ_EVENT_METAL_CAP);
++				break;
++
++			case MARIO_WING_CAP:
++				capTime = 1800;
++				capMusic = SEQUENCE_ARGS(4, SEQ_EVENT_POWERUP);
++				break;
++
++			case MARIO_RAINBOW:
++                
++				capTime = 600;
++				capMusic = SEQUENCE_ARGS(4, SEQ_EVENT_POWERUP);
++				
++                               // gSequencePlayers[SEQ_PLAYER_ENV].tempo += 10;
++				break;
++		}
++		if (capTime > m->capTimer) {
++			m->capTimer = capTime;
++		}
++		if (!(m->flags & MARIO_RAINBOW)) {
++			if ((m->action & ACT_FLAG_IDLE) || m->action == ACT_WALKING) {
++				m->flags |= MARIO_CAP_IN_HAND;
++				set_mario_action(m, ACT_PUTTING_ON_CAP, 0);
++			} else {
++				m->flags |= MARIO_CAP_ON_HEAD;
++			}
++		} else {
++			m->flags |= MARIO_CAP_ON_HEAD;
++		}
++
++		play_sound(SOUND_MENU_STAR_SOUND, m->marioObj->header.gfx.cameraToObject);
++		play_sound(SOUND_MARIO_HERE_WE_GO, m->marioObj->header.gfx.cameraToObject);
++
++		if (capMusic != 0) {
++                    if (!(m->flags & MARIO_RAINBOW)) {
++                        play_cap_music(capMusic);
++                    } else {
++                        play_rainbow_music(capMusic);
++                    }
++		}
+ 
+-        if (capMusic != 0) {
+-            play_cap_music(capMusic);
+-        }
++		return TRUE;
++	}
+ 
+-        return TRUE;
+-    }
+-
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ u32 interact_grabbable(struct MarioState *m, u32 interactType, struct Object *o) {
+-    const BehaviorScript *script = virtual_to_segmented(0x13, o->behavior);
+-
+-    if (o->oInteractionSubtype & INT_SUBTYPE_KICKABLE) {
+-        u32 interaction = determine_interaction(m, o);
+-        if (interaction & (INT_KICK | INT_TRIP)) {
+-            attack_object(o, interaction);
+-            bounce_back_from_attack(m, interaction);
+-            return FALSE;
+-        }
+-    }
+-
+-    if ((o->oInteractionSubtype & INT_SUBTYPE_GRABS_MARIO)) {
+-        if (check_object_grab_mario(m, interactType, o)) {
+-            return TRUE;
+-        }
+-    }
+-
+-    if (able_to_grab_object(m, o)) {
+-        if (!(o->oInteractionSubtype & INT_SUBTYPE_NOT_GRABBABLE)) {
+-            m->interactObj = o;
+-            m->input |= INPUT_INTERACT_OBJ_GRABBABLE;
+-            return TRUE;
+-        }
+-    }
+-
+-    if (script != bhvBowser) {
+-        push_mario_out_of_object(m, o, -5.0f);
+-    }
+-
+-    return FALSE;
++	const BehaviorScript *script = virtual_to_segmented(0x13, o->behavior);
++
++	if (o->oInteractionSubtype & INT_SUBTYPE_KICKABLE) {
++		u32 interaction = determine_interaction(m, o);
++		if (interaction & (INT_KICK | INT_TRIP)) {
++			attack_object(o, interaction);
++			bounce_back_from_attack(m, interaction);
++			return FALSE;
++		}
++	}
++
++	if ((o->oInteractionSubtype & INT_SUBTYPE_GRABS_MARIO)) {
++		if (check_object_grab_mario(m, interactType, o)) {
++			return TRUE;
++		}
++	}
++
++	if (able_to_grab_object(m, o)) {
++		if (!(o->oInteractionSubtype & INT_SUBTYPE_NOT_GRABBABLE)) {
++			m->interactObj = o;
++			m->input |= INPUT_INTERACT_OBJ_GRABBABLE;
++			return TRUE;
++		}
++	}
++
++	if (script != bhvBowser) {
++		push_mario_out_of_object(m, o, -5.0f);
++	}
++
++	return FALSE;
+ }
+ 
+ u32 mario_can_talk(struct MarioState *m, u32 arg) {
+-    s16 val6;
++	s16 val6;
+ 
+-    if ((m->action & ACT_FLAG_IDLE) != 0x00000000) {
+-        return TRUE;
+-    }
++	if ((m->action & ACT_FLAG_IDLE) != 0x00000000) {
++		return TRUE;
++	}
+ 
+-    if (m->action == ACT_WALKING) {
+-        if (arg) {
+-            return TRUE;
+-        }
++	if (m->action == ACT_WALKING) {
++		if (arg) {
++			return TRUE;
++		}
+ 
+-        val6 = m->marioObj->header.gfx.animInfo.animID;
++		val6 = m->marioObj->header.gfx.animInfo.animID;
+ 
+-        if (val6 == 0x0080 || val6 == 0x007F || val6 == 0x006C) {
+-            return TRUE;
+-        }
+-    }
++		if (val6 == 0x0080 || val6 == 0x007F || val6 == 0x006C) {
++			return TRUE;
++		}
++	}
+ 
+-    return FALSE;
++	return FALSE;
+ }
+ 
+ #ifdef VERSION_JP
+@@ -1699,193 +1746,199 @@ u32 mario_can_talk(struct MarioState *m, u32 arg) {
+ #endif
+ 
+ u32 check_read_sign(struct MarioState *m, struct Object *o) {
+-    if ((m->input & READ_MASK) && mario_can_talk(m, 0) && object_facing_mario(m, o, SIGN_RANGE)) {
+-        s16 facingDYaw = (s16)(o->oMoveAngleYaw + 0x8000) - m->faceAngle[1];
+-        if (facingDYaw >= -SIGN_RANGE && facingDYaw <= SIGN_RANGE) {
+-            f32 targetX = o->oPosX + 105.0f * sins(o->oMoveAngleYaw);
+-            f32 targetZ = o->oPosZ + 105.0f * coss(o->oMoveAngleYaw);
+-
+-            m->marioObj->oMarioReadingSignDYaw = facingDYaw;
+-            m->marioObj->oMarioReadingSignDPosX = targetX - m->pos[0];
+-            m->marioObj->oMarioReadingSignDPosZ = targetZ - m->pos[2];
+-
+-            m->interactObj = o;
+-            m->usedObj = o;
+-            return set_mario_action(m, ACT_READING_SIGN, 0);
+-        }
+-    }
++	if ((m->input & READ_MASK) && mario_can_talk(m, 0) && object_facing_mario(m, o, SIGN_RANGE)) {
++		s16 facingDYaw = (s16)(o->oMoveAngleYaw + 0x8000) - m->faceAngle[1];
++		if (facingDYaw >= -SIGN_RANGE && facingDYaw <= SIGN_RANGE) {
++			f32 targetX = o->oPosX + 105.0f * sins(o->oMoveAngleYaw);
++			f32 targetZ = o->oPosZ + 105.0f * coss(o->oMoveAngleYaw);
++
++			m->marioObj->oMarioReadingSignDYaw = facingDYaw;
++			m->marioObj->oMarioReadingSignDPosX = targetX - m->pos[0];
++			m->marioObj->oMarioReadingSignDPosZ = targetZ - m->pos[2];
+ 
+-    return FALSE;
++			m->interactObj = o;
++			m->usedObj = o;
++			return set_mario_action(m, ACT_READING_SIGN, 0);
++		}
++	}
++
++	return FALSE;
+ }
+ 
+ u32 check_npc_talk(struct MarioState *m, struct Object *o) {
+-    if ((m->input & READ_MASK) && mario_can_talk(m, 1)) {
+-        s16 facingDYaw = mario_obj_angle_to_object(m, o) - m->faceAngle[1];
+-        if (facingDYaw >= -0x4000 && facingDYaw <= 0x4000) {
+-            o->oInteractStatus = INT_STATUS_INTERACTED;
++	if ((m->input & READ_MASK) && mario_can_talk(m, 1)) {
++		s16 facingDYaw = mario_obj_angle_to_object(m, o) - m->faceAngle[1];
++		if (facingDYaw >= -0x4000 && facingDYaw <= 0x4000) {
++			o->oInteractStatus = INT_STATUS_INTERACTED;
+ 
+-            m->interactObj = o;
+-            m->usedObj = o;
++			m->interactObj = o;
++			m->usedObj = o;
+ 
+-            push_mario_out_of_object(m, o, -10.0f);
+-            return set_mario_action(m, ACT_WAITING_FOR_DIALOG, 0);
+-        }
+-    }
++			push_mario_out_of_object(m, o, -10.0f);
++			return set_mario_action(m, ACT_WAITING_FOR_DIALOG, 0);
++		}
++	}
+ 
+-    push_mario_out_of_object(m, o, -10.0f);
+-    return FALSE;
++	push_mario_out_of_object(m, o, -10.0f);
++	return FALSE;
+ }
+ 
+ u32 interact_text(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
+-    u32 interact = FALSE;
+-
+-    if (o->oInteractionSubtype & INT_SUBTYPE_SIGN) {
+-        interact = check_read_sign(m, o);
+-    } else if (o->oInteractionSubtype & INT_SUBTYPE_NPC) {
+-        interact = check_npc_talk(m, o);
+-    } else {
+-        push_mario_out_of_object(m, o, 2.0f);
+-    }
++	u32 interact = FALSE;
++
++	if (o->oInteractionSubtype & INT_SUBTYPE_SIGN) {
++		interact = check_read_sign(m, o);
++	} else if (o->oInteractionSubtype & INT_SUBTYPE_NPC) {
++		interact = check_npc_talk(m, o);
++	} else {
++		push_mario_out_of_object(m, o, 2.0f);
++	}
+ 
+-    return interact;
++	return interact;
+ }
+ 
+ void check_kick_or_punch_wall(struct MarioState *m) {
+-    if (m->flags & (MARIO_PUNCHING | MARIO_KICKING | MARIO_TRIPPING)) {
+-        Vec3f detector;
+-        detector[0] = m->pos[0] + 50.0f * sins(m->faceAngle[1]);
+-        detector[2] = m->pos[2] + 50.0f * coss(m->faceAngle[1]);
+-        detector[1] = m->pos[1];
+-
+-        if (resolve_and_return_wall_collisions(detector, 80.0f, 5.0f) != NULL) {
+-            if (m->action != ACT_MOVE_PUNCHING || m->forwardVel >= 0.0f) {
+-                if (m->action == ACT_PUNCHING) {
+-                    m->action = ACT_MOVE_PUNCHING;
+-                }
+-
+-                mario_set_forward_vel(m, -48.0f);
+-                play_sound(SOUND_ACTION_HIT_2, m->marioObj->header.gfx.cameraToObject);
+-                m->particleFlags |= PARTICLE_TRIANGLE;
+-            } else if (m->action & ACT_FLAG_AIR) {
+-                mario_set_forward_vel(m, -16.0f);
+-                play_sound(SOUND_ACTION_HIT_2, m->marioObj->header.gfx.cameraToObject);
+-                m->particleFlags |= PARTICLE_TRIANGLE;
+-            }
+-        }
+-    }
++	if (m->flags & (MARIO_PUNCHING | MARIO_KICKING | MARIO_TRIPPING)) {
++		Vec3f detector;
++		detector[0] = m->pos[0] + 50.0f * sins(m->faceAngle[1]);
++		detector[2] = m->pos[2] + 50.0f * coss(m->faceAngle[1]);
++		detector[1] = m->pos[1];
++
++		if (resolve_and_return_wall_collisions(detector, 80.0f, 5.0f) != NULL) {
++			if (m->action != ACT_MOVE_PUNCHING || m->forwardVel >= 0.0f) {
++				if (m->action == ACT_PUNCHING) {
++					m->action = ACT_MOVE_PUNCHING;
++				}
++
++				mario_set_forward_vel(m, -48.0f);
++				play_sound(SOUND_ACTION_HIT_2, m->marioObj->header.gfx.cameraToObject);
++				m->particleFlags |= PARTICLE_TRIANGLE;
++			} else if (m->action & ACT_FLAG_AIR) {
++				mario_set_forward_vel(m, -16.0f);
++				play_sound(SOUND_ACTION_HIT_2, m->marioObj->header.gfx.cameraToObject);
++				m->particleFlags |= PARTICLE_TRIANGLE;
++			}
++		}
++	}
+ }
+ 
+ void mario_process_interactions(struct MarioState *m) {
+-    sDelayInvincTimer = FALSE;
+-    sInvulnerable = (m->action & ACT_FLAG_INVULNERABLE) || m->invincTimer != 0;
+-
+-    if (!(m->action & ACT_FLAG_INTANGIBLE) && m->collidedObjInteractTypes != 0) {
+-        s32 i;
+-        for (i = 0; i < 31; i++) {
+-            u32 interactType = sInteractionHandlers[i].interactType;
+-            if (m->collidedObjInteractTypes & interactType) {
+-                struct Object *object = mario_get_collided_object(m, interactType);
+-
+-                m->collidedObjInteractTypes &= ~interactType;
+-
+-                if (!(object->oInteractStatus & INT_STATUS_INTERACTED)) {
+-                    if (sInteractionHandlers[i].handler(m, interactType, object)) {
+-                        break;
+-                    }
+-                }
+-            }
+-        }
+-    }
+-
+-    if (m->invincTimer > 0 && !sDelayInvincTimer) {
+-        m->invincTimer -= 1;
+-    }
+-
+-    //! If the kick/punch flags are set and an object collision changes Mario's
+-    // action, he will get the kick/punch wall speed anyway.
+-    check_kick_or_punch_wall(m);
+-    m->flags &= ~MARIO_PUNCHING & ~MARIO_KICKING & ~MARIO_TRIPPING;
+-
+-    if (!(m->marioObj->collidedObjInteractTypes & (INTERACT_WARP_DOOR | INTERACT_DOOR))) {
+-        sDisplayingDoorText = FALSE;
+-    }
+-    if (!(m->marioObj->collidedObjInteractTypes & INTERACT_WARP)) {
+-        sJustTeleported = FALSE;
+-    }
++	sDelayInvincTimer = FALSE;
++	sInvulnerable = (m->action & ACT_FLAG_INVULNERABLE) || m->invincTimer != 0;
++
++	if (!(m->action & ACT_FLAG_INTANGIBLE) && m->collidedObjInteractTypes != 0) {
++		s32 i;
++		for (i = 0; i < 31; i++) {
++			u32 interactType = sInteractionHandlers[i].interactType;
++			if (m->collidedObjInteractTypes & interactType) {
++				struct Object *object = mario_get_collided_object(m, interactType);
++
++				m->collidedObjInteractTypes &= ~interactType;
++
++				if (!(object->oInteractStatus & INT_STATUS_INTERACTED)) {
++					if (sInteractionHandlers[i].handler(m, interactType, object)) {
++						break;
++					}
++				}
++			}
++		}
++	}
++
++	if (m->invincTimer > 0 && !sDelayInvincTimer) {
++		m->invincTimer -= 1;
++	}
++
++	//! If the kick/punch flags are set and an object collision changes Mario's
++	// action, he will get the kick/punch wall speed anyway.
++	check_kick_or_punch_wall(m);
++	m->flags &= ~MARIO_PUNCHING & ~MARIO_KICKING & ~MARIO_TRIPPING;
++
++	if (!(m->marioObj->collidedObjInteractTypes & (INTERACT_WARP_DOOR | INTERACT_DOOR))) {
++		sDisplayingDoorText = FALSE;
++	}
++	if (!(m->marioObj->collidedObjInteractTypes & INTERACT_WARP)) {
++		sJustTeleported = FALSE;
++	}
+ }
+ 
+ void check_death_barrier(struct MarioState *m) {
+-    if (m->pos[1] < m->floorHeight + 2048.0f) {
+-        if (level_trigger_warp(m, WARP_OP_WARP_FLOOR) == 20 && !(m->flags & MARIO_UNKNOWN_18)) {
+-            play_sound(SOUND_MARIO_WAAAOOOW, m->marioObj->header.gfx.cameraToObject);
+-        }
+-    }
++	if (m->pos[1] < m->floorHeight + 2048.0f) {
++		if (level_trigger_warp(m, WARP_OP_WARP_FLOOR) == 20 && !(m->flags & MARIO_UNKNOWN_18)) {
++			play_sound(SOUND_MARIO_WAAAOOOW, m->marioObj->header.gfx.cameraToObject);
++		}
++	}
+ }
+ 
+ void check_lava_boost(struct MarioState *m) {
+-    if (!(m->action & ACT_FLAG_RIDING_SHELL) && m->pos[1] < m->floorHeight + 10.0f) {
+-        if (!(m->flags & MARIO_METAL_CAP)) {
+-            m->hurtCounter += (m->flags & MARIO_CAP_ON_HEAD) ? 12 : 18;
+-        }
++	if (!(m->flags & MARIO_RAINBOW)) {
++		if (!(m->action & ACT_FLAG_RIDING_SHELL) && m->pos[1] < m->floorHeight + 10.0f) {
++			if (!(m->flags & MARIO_METAL_CAP) && !(m->flags & MARIO_RAINBOW)) {
++				m->hurtCounter += (m->flags & MARIO_CAP_ON_HEAD) ? 12 : 18;
++			}
+ 
+-        update_mario_sound_and_camera(m);
+-        drop_and_set_mario_action(m, ACT_LAVA_BOOST, 0);
+-    }
++			update_mario_sound_and_camera(m);
++                      
++                            drop_and_set_mario_action(m, ACT_LAVA_BOOST, 0);
++                        
++		}
++	}
+ }
+ 
+ void pss_begin_slide(UNUSED struct MarioState *m) {
+-    if (!(gHudDisplay.flags & HUD_DISPLAY_FLAG_TIMER)) {
+-        level_control_timer(TIMER_CONTROL_SHOW);
+-        level_control_timer(TIMER_CONTROL_START);
+-        sPssSlideStarted = TRUE;
+-    }
++	if (!(gHudDisplay.flags & HUD_DISPLAY_FLAG_TIMER)) {
++		level_control_timer(TIMER_CONTROL_SHOW);
++		level_control_timer(TIMER_CONTROL_START);
++		sPssSlideStarted = TRUE;
++	}
+ }
+ 
+ void pss_end_slide(struct MarioState *m) {
+-    //! This flag isn't set on death or level entry, allowing double star spawn
+-    if (sPssSlideStarted) {
+-        u16 slideTime = level_control_timer(TIMER_CONTROL_STOP);
+-        if (slideTime < 630) {
+-            m->marioObj->oBehParams = (1 << 24);
+-            spawn_default_star(-6358.0f, -4300.0f, 4700.0f);
+-        }
+-        sPssSlideStarted = FALSE;
+-    }
++	//! This flag isn't set on death or level entry, allowing double star spawn
++	if (sPssSlideStarted) {
++		u16 slideTime = level_control_timer(TIMER_CONTROL_STOP);
++		if (slideTime < 630) {
++			m->marioObj->oBehParams = (1 << 24);
++			spawn_default_star(-6358.0f, -4300.0f, 4700.0f);
++		}
++		sPssSlideStarted = FALSE;
++	}
+ }
+ 
+ void mario_handle_special_floors(struct MarioState *m) {
+-    if ((m->action & ACT_GROUP_MASK) == ACT_GROUP_CUTSCENE) {
+-        return;
+-    }
+-
+-    if (m->floor != NULL) {
+-        s32 floorType = m->floor->type;
+-
+-        switch (floorType) {
+-            case SURFACE_DEATH_PLANE:
+-            case SURFACE_VERTICAL_WIND:
+-                check_death_barrier(m);
+-                break;
+-
+-            case SURFACE_WARP:
+-                level_trigger_warp(m, WARP_OP_WARP_FLOOR);
+-                break;
+-
+-            case SURFACE_TIMER_START:
+-                pss_begin_slide(m);
+-                break;
+-
+-            case SURFACE_TIMER_END:
+-                pss_end_slide(m);
+-                break;
+-        }
+-
+-        if (!(m->action & ACT_FLAG_AIR) && !(m->action & ACT_FLAG_SWIMMING)) {
+-            switch (floorType) {
+-                case SURFACE_BURNING:
+-                    check_lava_boost(m);
+-                    break;
+-            }
+-        }
+-    }
++	if ((m->action & ACT_GROUP_MASK) == ACT_GROUP_CUTSCENE) {
++		return;
++	}
++
++	if (m->floor != NULL) {
++		s32 floorType = m->floor->type;
++
++		switch (floorType) {
++			case SURFACE_DEATH_PLANE:
++			case SURFACE_VERTICAL_WIND:
++				check_death_barrier(m);
++				break;
++
++			case SURFACE_WARP:
++				level_trigger_warp(m, WARP_OP_WARP_FLOOR);
++				break;
++
++			case SURFACE_TIMER_START:
++				pss_begin_slide(m);
++				break;
++
++			case SURFACE_TIMER_END:
++				pss_end_slide(m);
++				break;
++		}
++
++		if (!(m->action & ACT_FLAG_AIR) && !(m->action & ACT_FLAG_SWIMMING)) {
++			switch (floorType) {
++                        case SURFACE_BURNING:
++                                if (!(m->flags & MARIO_RAINBOW)) {
++                                    check_lava_boost(m);
++                                }
++					break;
++			}
++		}
++	}
+ }
diff --git a/src/game/interaction.h b/src/game/interaction.h
index dd27aad..7e0ba65 100644
--- a/src/game/interaction.h
+++ b/src/game/interaction.h
@@ -13,6 +13,7 @@
 #define INTERACT_CAP            /* 0x00000020 */ (1 <<  5)
 #define INTERACT_POLE           /* 0x00000040 */ (1 <<  6)
 #define INTERACT_KOOPA          /* 0x00000080 */ (1 <<  7)
+#define INTERACT_KOOPA          /* 0x00000080 */ (1 <<  7)
 #define INTERACT_UNKNOWN_08     /* 0x00000100 */ (1 <<  8)
 #define INTERACT_BREAKABLE      /* 0x00000200 */ (1 <<  9)
 #define INTERACT_STRONG_WIND    /* 0x00000400 */ (1 << 10)
diff --git a/src/game/interaction.h.rej b/src/game/interaction.h.rej
new file mode 100644
index 0000000..74f427f
--- /dev/null
+++ b/src/game/interaction.h.rej
@@ -0,0 +1,9 @@
+diff a/src/game/interaction.h b/src/game/interaction.h	(rejected hunks)
+@@ -13,6 +13,7 @@
+ #define INTERACT_CAP            /* 0x00000020 */ (1 <<  5)
+ #define INTERACT_POLE           /* 0x00000040 */ (1 <<  6)
+ #define INTERACT_KOOPA          /* 0x00000080 */ (1 <<  7)
++#define INTERACT_KOOPA          /* 0x00000080 */ (1 <<  7)
+ #define INTERACT_UNKNOWN_08     /* 0x00000100 */ (1 <<  8)
+ #define INTERACT_BREAKABLE      /* 0x00000200 */ (1 <<  9)
+ #define INTERACT_STRONG_WIND    /* 0x00000400 */ (1 << 10)
diff --git a/src/game/level_update.c b/src/game/level_update.c
index 4ecb902..bf909a1 100644
--- a/src/game/level_update.c
+++ b/src/game/level_update.c
@@ -1,3 +1,5 @@
+#include "texscroll.h"
+
 #include <ultra64.h>
 
 #include "sm64.h"
@@ -436,10 +438,13 @@ void init_mario_after_warp(void) {
             play_cap_music(SEQUENCE_ARGS(4, SEQ_EVENT_METAL_CAP));
         }
 
-        if (gMarioState->flags & (MARIO_VANISH_CAP | MARIO_WING_CAP)) {
+        if (gMarioState->flags & (MARIO_VANISH_CAP | MARIO_WING_CAP | MARIO_RAINBOW)) {
             play_cap_music(SEQUENCE_ARGS(4, SEQ_EVENT_POWERUP));
         }
 
+   
+
+
 #ifndef VERSION_JP
         if (gCurrLevelNum == LEVEL_BOB
             && get_current_background_music() != SEQUENCE_ARGS(4, SEQ_LEVEL_SLIDE)
@@ -1137,7 +1142,7 @@ s32 update_level(void) {
 
     switch (sCurrPlayMode) {
         case PLAY_MODE_NORMAL:
-            changeLevel = play_mode_normal();
+            changeLevel = play_mode_normal(); scroll_textures(); scroll_textures();
             break;
         case PLAY_MODE_PAUSED:
             changeLevel = play_mode_paused();
diff --git a/src/game/level_update.c.rej b/src/game/level_update.c.rej
new file mode 100644
index 0000000..1b885cb
--- /dev/null
+++ b/src/game/level_update.c.rej
@@ -0,0 +1,31 @@
+diff a/src/game/level_update.c b/src/game/level_update.c	(rejected hunks)
+@@ -1,3 +1,5 @@
++#include "texscroll.h"
++
+ #include <ultra64.h>
+ 
+ #include "sm64.h"
+@@ -436,10 +438,13 @@ void init_mario_after_warp(void) {
+             play_cap_music(SEQUENCE_ARGS(4, SEQ_EVENT_METAL_CAP));
+         }
+ 
+-        if (gMarioState->flags & (MARIO_VANISH_CAP | MARIO_WING_CAP)) {
++        if (gMarioState->flags & (MARIO_VANISH_CAP | MARIO_WING_CAP | MARIO_RAINBOW)) {
+             play_cap_music(SEQUENCE_ARGS(4, SEQ_EVENT_POWERUP));
+         }
+ 
++   
++
++
+ #ifndef VERSION_JP
+         if (gCurrLevelNum == LEVEL_BOB
+             && get_current_background_music() != SEQUENCE_ARGS(4, SEQ_LEVEL_SLIDE)
+@@ -1137,7 +1142,7 @@ s32 update_level(void) {
+ 
+     switch (sCurrPlayMode) {
+         case PLAY_MODE_NORMAL:
+-            changeLevel = play_mode_normal();
++            changeLevel = play_mode_normal(); scroll_textures(); scroll_textures();
+             break;
+         case PLAY_MODE_PAUSED:
+             changeLevel = play_mode_paused();
diff --git a/src/game/mario.c b/src/game/mario.c
index 96df793..94bb80d 100644
--- a/src/game/mario.c
+++ b/src/game/mario.c
@@ -462,6 +462,8 @@ u32 mario_get_terrain_sound_addend(struct MarioState *m) {
     s32 ret = SOUND_TERRAIN_DEFAULT << 16;
     s32 floorType;
 
+
+
     if (m->floor != NULL) {
         floorType = m->floor->type;
 
@@ -509,6 +511,14 @@ u32 mario_get_terrain_sound_addend(struct MarioState *m) {
             }
 
             ret = sTerrainSounds[terrainType][floorSoundType] << 16;
+            // adds splash particle and sound to walking on water
+            if ((m->floorHeight == m->waterLevel) && (m->flags & MARIO_RAINBOW)) {
+                ret = SOUND_TERRAIN_WATER << 16;
+            }
+
+            if (m->floor->type == SURFACE_BURNING && (m->flags & MARIO_RAINBOW)) {
+                ret = SOUND_TERRAIN_WATER << 16;
+            }
         }
     }
 
@@ -780,37 +790,49 @@ static u32 set_mario_action_airborne(struct MarioState *m, u32 action, u32 actio
         && (action == ACT_DOUBLE_JUMP || action == ACT_TWIRLING)) {
         action = ACT_JUMP;
     }
+    
+        if (m->flags & MARIO_TECH_CURSE) {
+        if (action == ACT_DOUBLE_JUMP || action == ACT_BACKFLIP || action == ACT_SIDE_FLIP || action == ACT_SLIDE_KICK || action == ACT_LONG_JUMP || action == ACT_STEEP_JUMP) {
+            action = ACT_JUMP;
+        }
+    }
+
+    //stops double jump when rainbow
+
+    // if (m->flags & MARIO_RAINBOW && (action == ACT_DOUBLE_JUMP)) {
+       // action = ACT_JUMP;
+    //}
 
     switch (action) {
         case ACT_DOUBLE_JUMP:
-            set_mario_y_vel_based_on_fspeed(m, 52.0f, 0.25f);
+            set_mario_y_vel_based_on_fspeed(m, 52.0f * m->jumpModifier, 0.25f);
             m->forwardVel *= 0.8f;
             break;
 
         case ACT_BACKFLIP:
             m->marioObj->header.gfx.animInfo.animID = -1;
             m->forwardVel = -16.0f;
-            set_mario_y_vel_based_on_fspeed(m, 62.0f, 0.0f);
+            set_mario_y_vel_based_on_fspeed(m, 62.0f * m->jumpModifier, 0.0f);
             break;
 
         case ACT_TRIPLE_JUMP:
-            set_mario_y_vel_based_on_fspeed(m, 69.0f, 0.0f);
+            set_mario_y_vel_based_on_fspeed(m, 69.0f * m->jumpModifier, 0.0f);
             m->forwardVel *= 0.8f;
             break;
 
         case ACT_FLYING_TRIPLE_JUMP:
-            set_mario_y_vel_based_on_fspeed(m, 82.0f, 0.0f);
+            set_mario_y_vel_based_on_fspeed(m, 82.0f * m->jumpModifier, 0.0f);
             break;
 
         case ACT_WATER_JUMP:
         case ACT_HOLD_WATER_JUMP:
             if (actionArg == 0) {
-                set_mario_y_vel_based_on_fspeed(m, 42.0f, 0.0f);
+                set_mario_y_vel_based_on_fspeed(m, 42.0f * m->jumpModifier, 0.0f);
             }
             break;
 
         case ACT_BURNING_JUMP:
-            m->vel[1] = 31.5f;
+            m->vel[1] = 31.5f * m->jumpModifier;
             m->forwardVel = 8.0f;
             break;
 
@@ -819,15 +841,29 @@ static u32 set_mario_action_airborne(struct MarioState *m, u32 action, u32 actio
             break;
 
         case ACT_JUMP:
+            if ((!(m->flags & MARIO_RAINBOW)) && (m->forwardVel < 65.0f)) {
+                set_mario_y_vel_based_on_fspeed(m, 42.0f * m->jumpModifier, 0.25f);
+                m->forwardVel *= 0.8f;
+            }
+            else {
+                set_mario_y_vel_based_on_fspeed(m, 55.0f, 0.0f);
+                m->forwardVel *= 0.8f;
+                if ((m->forwardVel *= 1.5f) > 59.0f) {
+                    m->forwardVel = 59.0f;
+                }
+
+            }
+            break;
+
         case ACT_HOLD_JUMP:
             m->marioObj->header.gfx.animInfo.animID = -1;
-            set_mario_y_vel_based_on_fspeed(m, 42.0f, 0.25f);
+            set_mario_y_vel_based_on_fspeed(m, 42.0f * m->jumpModifier, 0.25f);
             m->forwardVel *= 0.8f;
             break;
 
         case ACT_WALL_KICK_AIR:
         case ACT_TOP_OF_POLE_JUMP:
-            set_mario_y_vel_based_on_fspeed(m, 62.0f, 0.0f);
+            set_mario_y_vel_based_on_fspeed(m, 62.0f * m->jumpModifier, 0.0f);
             if (m->forwardVel < 24.0f) {
                 m->forwardVel = 24.0f;
             }
@@ -835,34 +871,34 @@ static u32 set_mario_action_airborne(struct MarioState *m, u32 action, u32 actio
             break;
 
         case ACT_SIDE_FLIP:
-            set_mario_y_vel_based_on_fspeed(m, 62.0f, 0.0f);
+            set_mario_y_vel_based_on_fspeed(m, 62.0f * m->jumpModifier, 0.0f);
             m->forwardVel = 8.0f;
             m->faceAngle[1] = m->intendedYaw;
             break;
 
         case ACT_STEEP_JUMP:
             m->marioObj->header.gfx.animInfo.animID = -1;
-            set_mario_y_vel_based_on_fspeed(m, 42.0f, 0.25f);
+            set_mario_y_vel_based_on_fspeed(m, 42.0f * m->jumpModifier, 0.25f);
             m->faceAngle[0] = -0x2000;
             break;
 
         case ACT_LAVA_BOOST:
-            m->vel[1] = 84.0f;
+            m->vel[1] = 84.0f * m->jumpModifier;
             if (actionArg == 0) {
                 m->forwardVel = 0.0f;
             }
             break;
 
         case ACT_DIVE:
-            if ((fowardVel = m->forwardVel + 15.0f) > 48.0f) {
+            if ((fowardVel = m->forwardVel + 15.0f) > 48.0f ) {
                 fowardVel = 48.0f;
             }
-            mario_set_forward_vel(m, fowardVel);
+            mario_set_forward_vel(m, fowardVel * m->jumpModifier);
             break;
 
         case ACT_LONG_JUMP:
             m->marioObj->header.gfx.animInfo.animID = -1;
-            set_mario_y_vel_based_on_fspeed(m, 30.0f, 0.0f);
+            set_mario_y_vel_based_on_fspeed(m, 30.0f * m->jumpModifier, 0.0f);
             m->marioObj->oMarioLongJumpIsSlow = m->forwardVel > 16.0f ? FALSE : TRUE;
 
             //! (BLJ's) This properly handles long jumps from getting forward speed with
@@ -873,15 +909,25 @@ static u32 set_mario_action_airborne(struct MarioState *m, u32 action, u32 actio
             break;
 
         case ACT_SLIDE_KICK:
-            m->vel[1] = 12.0f;
+            m->vel[1] = 12.0f * m->jumpModifier;
             if (m->forwardVel < 32.0f) {
                 m->forwardVel = 32.0f;
             }
             break;
 
         case ACT_JUMP_KICK:
-            m->vel[1] = 20.0f;
+            // debug
+            //spawn_object_relative(0, 0, +190, 0, m->marioObj, MODEL_CURSYA_NORMAL, bhvCursya);
+            m->vel[1] = 20.0f * m->jumpModifier;
             break;
+        case ACT_JUMP_RAINBOW:
+            set_mario_y_vel_based_on_fspeed(m, 30.0f, 0.0f);
+
+            if ((m->forwardVel *= 1.5f) > 55.0f) {
+                m->forwardVel = 55.0f;
+            }
+            break;
+
     }
 
     m->peakHeight = m->pos[1];
@@ -896,15 +942,19 @@ static u32 set_mario_action_airborne(struct MarioState *m, u32 action, u32 actio
 static u32 set_mario_action_moving(struct MarioState *m, u32 action, UNUSED u32 actionArg) {
     s16 floorClass = mario_get_floor_class(m);
     f32 forwardVel = m->forwardVel;
-    f32 mag = min(m->intendedMag, 8.0f);
-
+ 
+        f32 mag = min(m->intendedMag, 8.0f);
+   
+    
     switch (action) {
         case ACT_WALKING:
             if (floorClass != SURFACE_CLASS_VERY_SLIPPERY) {
-                if (0.0f <= forwardVel && forwardVel < mag) {
-                    m->forwardVel = mag;
-                }
-            }
+           
+                    if (0.0f <= forwardVel && forwardVel < mag) {
+                        m->forwardVel = mag;
+                    }
+                
+            } 
 
             m->marioObj->oMarioWalkingPitch = 0;
             break;
@@ -1008,6 +1058,7 @@ u32 set_mario_action(struct MarioState *m, u32 action, u32 actionArg) {
     m->actionArg = actionArg;
     m->actionState = 0;
     m->actionTimer = 0;
+    
 
     return TRUE;
 }
@@ -1024,6 +1075,8 @@ s32 set_jump_from_landing(struct MarioState *m) {
         }
     }
 
+    
+
     if (mario_floor_is_steep(m)) {
         set_steep_jump_action(m);
     } else {
@@ -1083,6 +1136,8 @@ s32 set_jumping_action(struct MarioState *m, u32 action, u32 actionArg) {
         }
     }
 
+    
+
     if (mario_floor_is_steep(m)) {
         set_steep_jump_action(m);
     } else {
@@ -1294,14 +1349,28 @@ void update_mario_joystick_inputs(struct MarioState *m) {
     struct Controller *controller = m->controller;
     f32 mag = ((controller->stickMag / 64.0f) * (controller->stickMag / 64.0f)) * 64.0f;
 
-    if (m->squishTimer == 0) {
-        m->intendedMag = mag / 2.0f;
-    } else {
-        m->intendedMag = mag / 8.0f;
-    }
+        if (m->squishTimer == 0) {
+        if (m->flags & MARIO_SLOW_CURSE) {
+                
+            m->intendedMag = mag / 4.5f;
+        } else {
+            m->intendedMag = mag / 2.0f;
+        }
+        } else {
+            
+
+            m->intendedMag = mag / 8.0f;
+        }
+
+
+
 
     if (m->intendedMag > 0.0f) {
-        m->intendedYaw = atan2s(-controller->stickY, controller->stickX) + m->area->camera->yaw;
+            if (!(m->flags & MARIO_REVERSE)) {
+                m->intendedYaw = atan2s(-controller->stickY, controller->stickX) + m->area->camera->yaw;
+            } else {
+                m->intendedYaw = atan2s(controller->stickY, -controller->stickX) + m->area->camera->yaw;
+            }
         m->input |= INPUT_NONZERO_ANALOG;
     } else {
         m->intendedYaw = m->faceAngle[1];
@@ -1407,9 +1476,15 @@ void update_mario_inputs(struct MarioState *m) {
         m->wallKickTimer--;
     }
 
+    
+
+
     if (m->doubleJumpTimer > 0) {
+
         m->doubleJumpTimer--;
     }
+
+
 }
 
 /**
@@ -1452,12 +1527,44 @@ void set_submerged_cam_preset_and_spawn_bubbles(struct MarioState *m) {
  */
 void update_mario_health(struct MarioState *m) {
     s32 terrainIsSnow;
+    //debug
+   // gMarioState->numLives = m->forwardVel;
+   // gMarioState->numStars = m->intendedMag;
+
+    //cursya status
+    if ((m->flags & MARIO_SLOW_CURSE) ||  (m->flags & MARIO_REVERSE) || (m->flags & MARIO_TECH_CURSE) || (m->jumpModifier <= 0.9f)) {
+        m->curseTimer--;
+    }
+
+    if (m->flags & MARIO_SLOW_CURSE) {
+        m->particleFlags |= PARTICLE_SLOW_CURSE;
+        
+    }
+
+     if (m->flags & MARIO_REVERSE) {
+        m->particleFlags |= PARTICLE_REVERSE_CURSE;
+    }
+
+      if (m->flags & MARIO_TECH_CURSE) {
+        m->particleFlags |= PARTICLE_TECH_CURSE;
+    }
+
+      if (m->jumpModifier <= 0.9f) {
+        m->particleFlags |= PARTICLE_HEAVY_CURSE;
+    }
+
+      if (m->curseTimer <= 0 || m->flags & MARIO_RAINBOW) {
+        m->flags &= ~MARIO_REVERSE;
+          m->flags &= ~MARIO_SLOW_CURSE;
+        m->flags &= ~MARIO_TECH_CURSE;
+          m->jumpModifier = 1.0f;
+    }
 
     if (m->health >= 0x100) {
         // When already healing or hurting Mario, Mario's HP is not changed any more here.
         if (((u32) m->healCounter | (u32) m->hurtCounter) == 0) {
             if ((m->input & INPUT_IN_POISON_GAS) && !(m->action & ACT_FLAG_INTANGIBLE)) {
-                if (!(m->flags & MARIO_METAL_CAP) && !gDebugLevelSelect) {
+                if (!(m->flags & MARIO_METAL_CAP) && !(m->flags & MARIO_RAINBOW) && !gDebugLevelSelect) {
                     m->health -= 4;
                 }
             } else {
@@ -1468,9 +1575,13 @@ void update_mario_health(struct MarioState *m) {
                     // when in snow terrains lose 3 health.
                     // If using the debug level select, do not lose any HP to water.
                     if ((m->pos[1] >= (m->waterLevel - 140)) && !terrainIsSnow) {
-                        m->health += 0x1A;
+                       if (!(m->flags & MARIO_RAINBOW)) {
+                            m->health += 0x1A;
+                        }
                     } else if (!gDebugLevelSelect) {
-                        m->health -= (terrainIsSnow ? 3 : 1);
+                       if (!(m->flags & MARIO_RAINBOW)) {
+                            m->health -= (terrainIsSnow ? 3 : 1);
+                        }
                     }
                 }
             }
@@ -1577,8 +1688,11 @@ u32 update_and_return_cap_flags(struct MarioState *m) {
         }
 
         if (m->capTimer == 0) {
-            stop_cap_music();
 
+            
+                stop_cap_music();
+            
+                m->flags &= ~MARIO_RAINBOW;
             m->flags &= ~MARIO_SPECIAL_CAPS;
             if (!(m->flags & MARIO_CAPS)) {
                 m->flags &= ~MARIO_CAP_ON_HEAD;
@@ -1586,13 +1700,19 @@ u32 update_and_return_cap_flags(struct MarioState *m) {
         }
 
         if (m->capTimer == 60) {
-            fadeout_cap_music();
-        }
+            if (!(flags & MARIO_RAINBOW)) {
+                fadeout_cap_music();
+            } else {
+                play_sound(SOUND_MOVING_ALMOST_DROWNING, gGlobalSoundSource);
+            }
+            }
+        
 
         // This code flickers the cap through a long binary string, increasing in how
         // common it flickers near the end.
         if ((m->capTimer < 64) && ((1ULL << m->capTimer) & sCapFlickerFrames)) {
             flags &= ~MARIO_SPECIAL_CAPS;
+            flags &= ~MARIO_RAINBOW;
             if (!(flags & MARIO_CAPS)) {
                 flags &= ~MARIO_CAP_ON_HEAD;
             }
@@ -1607,6 +1727,14 @@ u32 update_and_return_cap_flags(struct MarioState *m) {
  */
 void mario_update_hitbox_and_cap_model(struct MarioState *m) {
     struct MarioBodyState *bodyState = m->marioBodyState;
+    extern const u16 rainbow_star_mario_rainbow_red_rgba16[];
+    extern const u16 mario_metal_rgba16[];
+    extern const u16 mario_cap_metal_rgba16[];
+    extern const u16 rainbow_star_mario_metal_stored_rgba16[];
+    u16 *rainbowtexture = segmented_to_virtual(rainbow_star_mario_rainbow_red_rgba16);
+    u16 *metaltexture = segmented_to_virtual(mario_metal_rgba16);
+    u16 *metaltexturestored = segmented_to_virtual(rainbow_star_mario_metal_stored_rgba16);
+    //u16 *metalcaptexture = segmented_to_virtual(mario_cap_metal_rgba16);
     s32 flags = update_and_return_cap_flags(m);
 
     if (flags & MARIO_VANISH_CAP) {
@@ -1617,10 +1745,60 @@ void mario_update_hitbox_and_cap_model(struct MarioState *m) {
         bodyState->modelState |= MODEL_STATE_METAL;
     }
 
+  if (flags & MARIO_RAINBOW) {
+        if (m->floor->type == SURFACE_BURNING ) {
+          if (5.0f > absf(gMarioState->marioObj->oPosY - m->floorHeight)) {
+              spawn_object(gMarioState->marioObj, MODEL_RED_FLAME, bhvKoopaShellFlame);
+          }
+    }
+      m->particleFlags |= PARTICLE_SPARKLES;
+      m->marioObj->oRainbowColorCounter += 1;
+        switch (m->marioObj->oRainbowColorCounter) {
+            // makes the rainbow texture move
+            case 2:
+                m->particleFlags |= PARTICLE_RAINBOW_TRAIL;
+                bcopy(rainbowtexture, metaltexture, 2 * 32 * 64);
+                bcopy(rainbowtexture + 10, metaltexture, 2 * 32 * 64);
+                break;
+            case 4:
+                m->particleFlags |= PARTICLE_CYAN_RAINBOW_TRAIL;
+                bcopy(rainbowtexture + 20, metaltexture, 2 * 32 * 64);
+                break;
+            case 6:
+                m->particleFlags |= PARTICLE_PINK_RAINBOW_TRAIL;
+                bcopy(rainbowtexture + 30, metaltexture, 2 * 32 * 64);
+                break;
+            case 8:
+                m->particleFlags |= PARTICLE_BLUE_RAINBOW_TRAIL;
+                bcopy(rainbowtexture + 40, metaltexture, 2 * 32 * 64);
+                break;
+            case 10:
+                m->particleFlags |= PARTICLE_YELLOW_RAINBOW_TRAIL;
+                bcopy(rainbowtexture + 50, metaltexture, 2 * 32 * 64);
+                break;
+            case 12:
+                m->particleFlags |= PARTICLE_GREEN_RAINBOW_TRAIL;
+                bcopy(rainbowtexture + 60, metaltexture, 2 * 32 * 64);
+                break;
+            case 14:
+                m->particleFlags |= PARTICLE_WHITE_RAINBOW_TRAIL;
+                bcopy(rainbowtexture + 0, metaltexture, 2 * 32 * 64);
+                m->marioObj->oRainbowColorCounter = 0;
+                break;
+        }
+        //bcopy(rainbowtexture-2, metaltexture, 2 * 32 * 64);
+       // bcopy(rainbowtexture, metalcaptexture, 2 * 32 * 32);
+       bodyState->modelState |= MODEL_STATE_METAL;
+
+    } else {
+      // recovers the metal texture
+        if (m->capTimer == 0) {
+            bcopy(metaltexturestored, metaltexture, 2 * 32 * 64);
+        }
+  }
     if (flags & MARIO_METAL_SHOCK) {
         bodyState->modelState |= MODEL_STATE_METAL;
     }
-
     //! (Pause buffered hitstun) Since the global timer increments while paused,
     //  this can be paused through to give continual invisibility. This leads to
     //  no interaction with objects.
@@ -1788,11 +1966,15 @@ void init_mario(void) {
     Vec3s capPos;
     struct Object *capObject;
 
+    // heavy cursya reset
+    gMarioState->jumpModifier = 1.0f;
+
     unused80339F10 = 0;
 
     gMarioState->actionTimer = 0;
     gMarioState->framesSinceA = 0xFF;
     gMarioState->framesSinceB = 0xFF;
+    
 
     gMarioState->invincTimer = 0;
 
diff --git a/src/game/mario.c.rej b/src/game/mario.c.rej
new file mode 100644
index 0000000..7bc00c8
--- /dev/null
+++ b/src/game/mario.c.rej
@@ -0,0 +1,457 @@
+diff a/src/game/mario.c b/src/game/mario.c	(rejected hunks)
+@@ -462,6 +462,8 @@ u32 mario_get_terrain_sound_addend(struct MarioState *m) {
+     s32 ret = SOUND_TERRAIN_DEFAULT << 16;
+     s32 floorType;
+ 
++
++
+     if (m->floor != NULL) {
+         floorType = m->floor->type;
+ 
+@@ -509,6 +511,14 @@ u32 mario_get_terrain_sound_addend(struct MarioState *m) {
+             }
+ 
+             ret = sTerrainSounds[terrainType][floorSoundType] << 16;
++            // adds splash particle and sound to walking on water
++            if ((m->floorHeight == m->waterLevel) && (m->flags & MARIO_RAINBOW)) {
++                ret = SOUND_TERRAIN_WATER << 16;
++            }
++
++            if (m->floor->type == SURFACE_BURNING && (m->flags & MARIO_RAINBOW)) {
++                ret = SOUND_TERRAIN_WATER << 16;
++            }
+         }
+     }
+ 
+@@ -780,37 +790,49 @@ static u32 set_mario_action_airborne(struct MarioState *m, u32 action, u32 actio
+         && (action == ACT_DOUBLE_JUMP || action == ACT_TWIRLING)) {
+         action = ACT_JUMP;
+     }
++    
++        if (m->flags & MARIO_TECH_CURSE) {
++        if (action == ACT_DOUBLE_JUMP || action == ACT_BACKFLIP || action == ACT_SIDE_FLIP || action == ACT_SLIDE_KICK || action == ACT_LONG_JUMP || action == ACT_STEEP_JUMP) {
++            action = ACT_JUMP;
++        }
++    }
++
++    //stops double jump when rainbow
++
++    // if (m->flags & MARIO_RAINBOW && (action == ACT_DOUBLE_JUMP)) {
++       // action = ACT_JUMP;
++    //}
+ 
+     switch (action) {
+         case ACT_DOUBLE_JUMP:
+-            set_mario_y_vel_based_on_fspeed(m, 52.0f, 0.25f);
++            set_mario_y_vel_based_on_fspeed(m, 52.0f * m->jumpModifier, 0.25f);
+             m->forwardVel *= 0.8f;
+             break;
+ 
+         case ACT_BACKFLIP:
+             m->marioObj->header.gfx.animInfo.animID = -1;
+             m->forwardVel = -16.0f;
+-            set_mario_y_vel_based_on_fspeed(m, 62.0f, 0.0f);
++            set_mario_y_vel_based_on_fspeed(m, 62.0f * m->jumpModifier, 0.0f);
+             break;
+ 
+         case ACT_TRIPLE_JUMP:
+-            set_mario_y_vel_based_on_fspeed(m, 69.0f, 0.0f);
++            set_mario_y_vel_based_on_fspeed(m, 69.0f * m->jumpModifier, 0.0f);
+             m->forwardVel *= 0.8f;
+             break;
+ 
+         case ACT_FLYING_TRIPLE_JUMP:
+-            set_mario_y_vel_based_on_fspeed(m, 82.0f, 0.0f);
++            set_mario_y_vel_based_on_fspeed(m, 82.0f * m->jumpModifier, 0.0f);
+             break;
+ 
+         case ACT_WATER_JUMP:
+         case ACT_HOLD_WATER_JUMP:
+             if (actionArg == 0) {
+-                set_mario_y_vel_based_on_fspeed(m, 42.0f, 0.0f);
++                set_mario_y_vel_based_on_fspeed(m, 42.0f * m->jumpModifier, 0.0f);
+             }
+             break;
+ 
+         case ACT_BURNING_JUMP:
+-            m->vel[1] = 31.5f;
++            m->vel[1] = 31.5f * m->jumpModifier;
+             m->forwardVel = 8.0f;
+             break;
+ 
+@@ -819,15 +841,29 @@ static u32 set_mario_action_airborne(struct MarioState *m, u32 action, u32 actio
+             break;
+ 
+         case ACT_JUMP:
++            if ((!(m->flags & MARIO_RAINBOW)) && (m->forwardVel < 65.0f)) {
++                set_mario_y_vel_based_on_fspeed(m, 42.0f * m->jumpModifier, 0.25f);
++                m->forwardVel *= 0.8f;
++            }
++            else {
++                set_mario_y_vel_based_on_fspeed(m, 55.0f, 0.0f);
++                m->forwardVel *= 0.8f;
++                if ((m->forwardVel *= 1.5f) > 59.0f) {
++                    m->forwardVel = 59.0f;
++                }
++
++            }
++            break;
++
+         case ACT_HOLD_JUMP:
+             m->marioObj->header.gfx.animInfo.animID = -1;
+-            set_mario_y_vel_based_on_fspeed(m, 42.0f, 0.25f);
++            set_mario_y_vel_based_on_fspeed(m, 42.0f * m->jumpModifier, 0.25f);
+             m->forwardVel *= 0.8f;
+             break;
+ 
+         case ACT_WALL_KICK_AIR:
+         case ACT_TOP_OF_POLE_JUMP:
+-            set_mario_y_vel_based_on_fspeed(m, 62.0f, 0.0f);
++            set_mario_y_vel_based_on_fspeed(m, 62.0f * m->jumpModifier, 0.0f);
+             if (m->forwardVel < 24.0f) {
+                 m->forwardVel = 24.0f;
+             }
+@@ -835,34 +871,34 @@ static u32 set_mario_action_airborne(struct MarioState *m, u32 action, u32 actio
+             break;
+ 
+         case ACT_SIDE_FLIP:
+-            set_mario_y_vel_based_on_fspeed(m, 62.0f, 0.0f);
++            set_mario_y_vel_based_on_fspeed(m, 62.0f * m->jumpModifier, 0.0f);
+             m->forwardVel = 8.0f;
+             m->faceAngle[1] = m->intendedYaw;
+             break;
+ 
+         case ACT_STEEP_JUMP:
+             m->marioObj->header.gfx.animInfo.animID = -1;
+-            set_mario_y_vel_based_on_fspeed(m, 42.0f, 0.25f);
++            set_mario_y_vel_based_on_fspeed(m, 42.0f * m->jumpModifier, 0.25f);
+             m->faceAngle[0] = -0x2000;
+             break;
+ 
+         case ACT_LAVA_BOOST:
+-            m->vel[1] = 84.0f;
++            m->vel[1] = 84.0f * m->jumpModifier;
+             if (actionArg == 0) {
+                 m->forwardVel = 0.0f;
+             }
+             break;
+ 
+         case ACT_DIVE:
+-            if ((fowardVel = m->forwardVel + 15.0f) > 48.0f) {
++            if ((fowardVel = m->forwardVel + 15.0f) > 48.0f ) {
+                 fowardVel = 48.0f;
+             }
+-            mario_set_forward_vel(m, fowardVel);
++            mario_set_forward_vel(m, fowardVel * m->jumpModifier);
+             break;
+ 
+         case ACT_LONG_JUMP:
+             m->marioObj->header.gfx.animInfo.animID = -1;
+-            set_mario_y_vel_based_on_fspeed(m, 30.0f, 0.0f);
++            set_mario_y_vel_based_on_fspeed(m, 30.0f * m->jumpModifier, 0.0f);
+             m->marioObj->oMarioLongJumpIsSlow = m->forwardVel > 16.0f ? FALSE : TRUE;
+ 
+             //! (BLJ's) This properly handles long jumps from getting forward speed with
+@@ -873,15 +909,25 @@ static u32 set_mario_action_airborne(struct MarioState *m, u32 action, u32 actio
+             break;
+ 
+         case ACT_SLIDE_KICK:
+-            m->vel[1] = 12.0f;
++            m->vel[1] = 12.0f * m->jumpModifier;
+             if (m->forwardVel < 32.0f) {
+                 m->forwardVel = 32.0f;
+             }
+             break;
+ 
+         case ACT_JUMP_KICK:
+-            m->vel[1] = 20.0f;
++            // debug
++            //spawn_object_relative(0, 0, +190, 0, m->marioObj, MODEL_CURSYA_NORMAL, bhvCursya);
++            m->vel[1] = 20.0f * m->jumpModifier;
+             break;
++        case ACT_JUMP_RAINBOW:
++            set_mario_y_vel_based_on_fspeed(m, 30.0f, 0.0f);
++
++            if ((m->forwardVel *= 1.5f) > 55.0f) {
++                m->forwardVel = 55.0f;
++            }
++            break;
++
+     }
+ 
+     m->peakHeight = m->pos[1];
+@@ -896,15 +942,19 @@ static u32 set_mario_action_airborne(struct MarioState *m, u32 action, u32 actio
+ static u32 set_mario_action_moving(struct MarioState *m, u32 action, UNUSED u32 actionArg) {
+     s16 floorClass = mario_get_floor_class(m);
+     f32 forwardVel = m->forwardVel;
+-    f32 mag = min(m->intendedMag, 8.0f);
+-
++ 
++        f32 mag = min(m->intendedMag, 8.0f);
++   
++    
+     switch (action) {
+         case ACT_WALKING:
+             if (floorClass != SURFACE_CLASS_VERY_SLIPPERY) {
+-                if (0.0f <= forwardVel && forwardVel < mag) {
+-                    m->forwardVel = mag;
+-                }
+-            }
++           
++                    if (0.0f <= forwardVel && forwardVel < mag) {
++                        m->forwardVel = mag;
++                    }
++                
++            } 
+ 
+             m->marioObj->oMarioWalkingPitch = 0;
+             break;
+@@ -1008,6 +1058,7 @@ u32 set_mario_action(struct MarioState *m, u32 action, u32 actionArg) {
+     m->actionArg = actionArg;
+     m->actionState = 0;
+     m->actionTimer = 0;
++    
+ 
+     return TRUE;
+ }
+@@ -1294,14 +1347,28 @@ void update_mario_joystick_inputs(struct MarioState *m) {
+     struct Controller *controller = m->controller;
+     f32 mag = ((controller->stickMag / 64.0f) * (controller->stickMag / 64.0f)) * 64.0f;
+ 
+-    if (m->squishTimer == 0) {
+-        m->intendedMag = mag / 2.0f;
+-    } else {
+-        m->intendedMag = mag / 8.0f;
+-    }
++        if (m->squishTimer == 0) {
++        if (m->flags & MARIO_SLOW_CURSE) {
++                
++            m->intendedMag = mag / 4.5f;
++        } else {
++            m->intendedMag = mag / 2.0f;
++        }
++        } else {
++            
++
++            m->intendedMag = mag / 8.0f;
++        }
++
++
++
+ 
+     if (m->intendedMag > 0.0f) {
+-        m->intendedYaw = atan2s(-controller->stickY, controller->stickX) + m->area->camera->yaw;
++            if (!(m->flags & MARIO_REVERSE)) {
++                m->intendedYaw = atan2s(-controller->stickY, controller->stickX) + m->area->camera->yaw;
++            } else {
++                m->intendedYaw = atan2s(controller->stickY, -controller->stickX) + m->area->camera->yaw;
++            }
+         m->input |= INPUT_NONZERO_ANALOG;
+     } else {
+         m->intendedYaw = m->faceAngle[1];
+@@ -1407,9 +1474,15 @@ void update_mario_inputs(struct MarioState *m) {
+         m->wallKickTimer--;
+     }
+ 
++    
++
++
+     if (m->doubleJumpTimer > 0) {
++
+         m->doubleJumpTimer--;
+     }
++
++
+ }
+ 
+ /**
+@@ -1452,12 +1525,44 @@ void set_submerged_cam_preset_and_spawn_bubbles(struct MarioState *m) {
+  */
+ void update_mario_health(struct MarioState *m) {
+     s32 terrainIsSnow;
++    //debug
++   // gMarioState->numLives = m->forwardVel;
++   // gMarioState->numStars = m->intendedMag;
++
++    //cursya status
++    if ((m->flags & MARIO_SLOW_CURSE) ||  (m->flags & MARIO_REVERSE) || (m->flags & MARIO_TECH_CURSE) || (m->jumpModifier <= 0.9f)) {
++        m->curseTimer--;
++    }
++
++    if (m->flags & MARIO_SLOW_CURSE) {
++        m->particleFlags |= PARTICLE_SLOW_CURSE;
++        
++    }
++
++     if (m->flags & MARIO_REVERSE) {
++        m->particleFlags |= PARTICLE_REVERSE_CURSE;
++    }
++
++      if (m->flags & MARIO_TECH_CURSE) {
++        m->particleFlags |= PARTICLE_TECH_CURSE;
++    }
++
++      if (m->jumpModifier <= 0.9f) {
++        m->particleFlags |= PARTICLE_HEAVY_CURSE;
++    }
++
++      if (m->curseTimer <= 0 || m->flags & MARIO_RAINBOW) {
++        m->flags &= ~MARIO_REVERSE;
++          m->flags &= ~MARIO_SLOW_CURSE;
++        m->flags &= ~MARIO_TECH_CURSE;
++          m->jumpModifier = 1.0f;
++    }
+ 
+     if (m->health >= 0x100) {
+         // When already healing or hurting Mario, Mario's HP is not changed any more here.
+         if (((u32) m->healCounter | (u32) m->hurtCounter) == 0) {
+             if ((m->input & INPUT_IN_POISON_GAS) && !(m->action & ACT_FLAG_INTANGIBLE)) {
+-                if (!(m->flags & MARIO_METAL_CAP) && !gDebugLevelSelect) {
++                if (!(m->flags & MARIO_METAL_CAP) && !(m->flags & MARIO_RAINBOW) && !gDebugLevelSelect) {
+                     m->health -= 4;
+                 }
+             } else {
+@@ -1468,9 +1573,13 @@ void update_mario_health(struct MarioState *m) {
+                     // when in snow terrains lose 3 health.
+                     // If using the debug level select, do not lose any HP to water.
+                     if ((m->pos[1] >= (m->waterLevel - 140)) && !terrainIsSnow) {
+-                        m->health += 0x1A;
++                       if (!(m->flags & MARIO_RAINBOW)) {
++                            m->health += 0x1A;
++                        }
+                     } else if (!gDebugLevelSelect) {
+-                        m->health -= (terrainIsSnow ? 3 : 1);
++                       if (!(m->flags & MARIO_RAINBOW)) {
++                            m->health -= (terrainIsSnow ? 3 : 1);
++                        }
+                     }
+                 }
+             }
+@@ -1577,8 +1686,11 @@ u32 update_and_return_cap_flags(struct MarioState *m) {
+         }
+ 
+         if (m->capTimer == 0) {
+-            stop_cap_music();
+ 
++            
++                stop_cap_music();
++            
++                m->flags &= ~MARIO_RAINBOW;
+             m->flags &= ~MARIO_SPECIAL_CAPS;
+             if (!(m->flags & MARIO_CAPS)) {
+                 m->flags &= ~MARIO_CAP_ON_HEAD;
+@@ -1586,13 +1698,19 @@ u32 update_and_return_cap_flags(struct MarioState *m) {
+         }
+ 
+         if (m->capTimer == 60) {
+-            fadeout_cap_music();
+-        }
++            if (!(flags & MARIO_RAINBOW)) {
++                fadeout_cap_music();
++            } else {
++                play_sound(SOUND_MOVING_ALMOST_DROWNING, gGlobalSoundSource);
++            }
++            }
++        
+ 
+         // This code flickers the cap through a long binary string, increasing in how
+         // common it flickers near the end.
+         if ((m->capTimer < 64) && ((1ULL << m->capTimer) & sCapFlickerFrames)) {
+             flags &= ~MARIO_SPECIAL_CAPS;
++            flags &= ~MARIO_RAINBOW;
+             if (!(flags & MARIO_CAPS)) {
+                 flags &= ~MARIO_CAP_ON_HEAD;
+             }
+@@ -1607,6 +1725,14 @@ u32 update_and_return_cap_flags(struct MarioState *m) {
+  */
+ void mario_update_hitbox_and_cap_model(struct MarioState *m) {
+     struct MarioBodyState *bodyState = m->marioBodyState;
++    extern const u16 rainbow_star_mario_rainbow_red_rgba16[];
++    extern const u16 mario_metal_rgba16[];
++    extern const u16 mario_cap_metal_rgba16[];
++    extern const u16 rainbow_star_mario_metal_stored_rgba16[];
++    u16 *rainbowtexture = segmented_to_virtual(rainbow_star_mario_rainbow_red_rgba16);
++    u16 *metaltexture = segmented_to_virtual(mario_metal_rgba16);
++    u16 *metaltexturestored = segmented_to_virtual(rainbow_star_mario_metal_stored_rgba16);
++    //u16 *metalcaptexture = segmented_to_virtual(mario_cap_metal_rgba16);
+     s32 flags = update_and_return_cap_flags(m);
+ 
+     if (flags & MARIO_VANISH_CAP) {
+@@ -1617,10 +1743,60 @@ void mario_update_hitbox_and_cap_model(struct MarioState *m) {
+         bodyState->modelState |= MODEL_STATE_METAL;
+     }
+ 
++  if (flags & MARIO_RAINBOW) {
++        if (m->floor->type == SURFACE_BURNING ) {
++          if (5.0f > absf(gMarioState->marioObj->oPosY - m->floorHeight)) {
++              spawn_object(gMarioState->marioObj, MODEL_RED_FLAME, bhvKoopaShellFlame);
++          }
++    }
++      m->particleFlags |= PARTICLE_SPARKLES;
++      m->marioObj->oRainbowColorCounter += 1;
++        switch (m->marioObj->oRainbowColorCounter) {
++            // makes the rainbow texture move
++            case 2:
++                m->particleFlags |= PARTICLE_RAINBOW_TRAIL;
++                bcopy(rainbowtexture, metaltexture, 2 * 32 * 64);
++                bcopy(rainbowtexture + 10, metaltexture, 2 * 32 * 64);
++                break;
++            case 4:
++                m->particleFlags |= PARTICLE_CYAN_RAINBOW_TRAIL;
++                bcopy(rainbowtexture + 20, metaltexture, 2 * 32 * 64);
++                break;
++            case 6:
++                m->particleFlags |= PARTICLE_PINK_RAINBOW_TRAIL;
++                bcopy(rainbowtexture + 30, metaltexture, 2 * 32 * 64);
++                break;
++            case 8:
++                m->particleFlags |= PARTICLE_BLUE_RAINBOW_TRAIL;
++                bcopy(rainbowtexture + 40, metaltexture, 2 * 32 * 64);
++                break;
++            case 10:
++                m->particleFlags |= PARTICLE_YELLOW_RAINBOW_TRAIL;
++                bcopy(rainbowtexture + 50, metaltexture, 2 * 32 * 64);
++                break;
++            case 12:
++                m->particleFlags |= PARTICLE_GREEN_RAINBOW_TRAIL;
++                bcopy(rainbowtexture + 60, metaltexture, 2 * 32 * 64);
++                break;
++            case 14:
++                m->particleFlags |= PARTICLE_WHITE_RAINBOW_TRAIL;
++                bcopy(rainbowtexture + 0, metaltexture, 2 * 32 * 64);
++                m->marioObj->oRainbowColorCounter = 0;
++                break;
++        }
++        //bcopy(rainbowtexture-2, metaltexture, 2 * 32 * 64);
++       // bcopy(rainbowtexture, metalcaptexture, 2 * 32 * 32);
++       bodyState->modelState |= MODEL_STATE_METAL;
++
++    } else {
++      // recovers the metal texture
++        if (m->capTimer == 0) {
++            bcopy(metaltexturestored, metaltexture, 2 * 32 * 64);
++        }
++  }
+     if (flags & MARIO_METAL_SHOCK) {
+         bodyState->modelState |= MODEL_STATE_METAL;
+     }
+-
+     //! (Pause buffered hitstun) Since the global timer increments while paused,
+     //  this can be paused through to give continual invisibility. This leads to
+     //  no interaction with objects.
+@@ -1788,11 +1964,15 @@ void init_mario(void) {
+     Vec3s capPos;
+     struct Object *capObject;
+ 
++    // heavy cursya reset
++    gMarioState->jumpModifier = 1.0f;
++
+     unused80339F10 = 0;
+ 
+     gMarioState->actionTimer = 0;
+     gMarioState->framesSinceA = 0xFF;
+     gMarioState->framesSinceB = 0xFF;
++    
+ 
+     gMarioState->invincTimer = 0;
+ 
diff --git a/src/game/mario_actions_airborne.c b/src/game/mario_actions_airborne.c
index 34090a5..0b21a00 100644
--- a/src/game/mario_actions_airborne.c
+++ b/src/game/mario_actions_airborne.c
@@ -49,20 +49,22 @@ s32 lava_boost_on_wall(struct MarioState *m) {
         m->forwardVel = 24.0f;
     }
 
-    if (!(m->flags & MARIO_METAL_CAP)) {
+    if (!(m->flags & MARIO_METAL_CAP) && !(m->flags & MARIO_RAINBOW)) {
         m->hurtCounter += (m->flags & MARIO_CAP_ON_HEAD) ? 12 : 18;
     }
 
     play_sound(SOUND_MARIO_ON_FIRE, m->marioObj->header.gfx.cameraToObject);
     update_mario_sound_and_camera(m);
+
     return drop_and_set_mario_action(m, ACT_LAVA_BOOST, 1);
 }
 
 s32 check_fall_damage(struct MarioState *m, u32 hardFallAction) {
     f32 fallHeight;
     f32 damageHeight;
-
-    fallHeight = m->peakHeight - m->pos[1];
+    if (!(m->flags & MARIO_RAINBOW)) {
+        fallHeight = m->peakHeight - m->pos[1];
+    }
 
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wtype-limits"
@@ -102,8 +104,10 @@ s32 check_fall_damage(struct MarioState *m, u32 hardFallAction) {
 }
 
 s32 check_kick_or_dive_in_air(struct MarioState *m) {
-    if (m->input & INPUT_B_PRESSED) {
-        return set_mario_action(m, m->forwardVel > 28.0f ? ACT_DIVE : ACT_JUMP_KICK, 0);
+    if (!(m->flags & MARIO_TECH_CURSE)) {
+        if (m->input & INPUT_B_PRESSED) {
+            return set_mario_action(m, m->forwardVel > 28.0f ? ACT_DIVE : ACT_JUMP_KICK, 0);
+        }
     }
     return FALSE;
 }
@@ -432,6 +436,7 @@ u32 common_air_action_step(struct MarioState *m, u32 landAction, s32 animation,
             break;
 
         case AIR_STEP_HIT_LAVA_WALL:
+
             lava_boost_on_wall(m);
             break;
     }
@@ -443,14 +448,30 @@ s32 act_jump(struct MarioState *m) {
     if (check_kick_or_dive_in_air(m)) {
         return TRUE;
     }
-
-    if (m->input & INPUT_Z_PRESSED) {
-        return set_mario_action(m, ACT_GROUND_POUND, 0);
+    if (!(m->flags & MARIO_TECH_CURSE)) {
+        if (m->input & INPUT_Z_PRESSED) {
+            return set_mario_action(m, ACT_GROUND_POUND, 0);
+        }
+    }
+    //check if forward spin is playing
+    if (m->flags & MARIO_RAINBOW) {
+        if (m->forwardVel > 50.0f) {
+            play_mario_sound(m, SOUND_ACTION_TERRAIN_JUMP,
+                             SOUND_MARIO_YAHOO_WAHA_YIPPEE + ((gAudioRandom % 5) << 16));
+            common_air_action_step(m, ACT_JUMP_LAND, MARIO_ANIM_FORWARD_SPINNING,
+                                   AIR_STEP_CHECK_LEDGE_GRAB | AIR_STEP_CHECK_HANG);
+            m->marioObj->header.gfx.animInfo.animAccel = 0x15000;
+        } else {
+            play_mario_sound(m, SOUND_ACTION_TERRAIN_JUMP, 0);
+            common_air_action_step(m, ACT_JUMP_LAND, MARIO_ANIM_SINGLE_JUMP,
+                                   AIR_STEP_CHECK_LEDGE_GRAB | AIR_STEP_CHECK_HANG);
+        }
+     
+    } else {
+        play_mario_sound(m, SOUND_ACTION_TERRAIN_JUMP, 0);
+        common_air_action_step(m, ACT_JUMP_LAND, MARIO_ANIM_SINGLE_JUMP,
+                               AIR_STEP_CHECK_LEDGE_GRAB | AIR_STEP_CHECK_HANG);     
     }
-
-    play_mario_sound(m, SOUND_ACTION_TERRAIN_JUMP, 0);
-    common_air_action_step(m, ACT_JUMP_LAND, MARIO_ANIM_SINGLE_JUMP,
-                           AIR_STEP_CHECK_LEDGE_GRAB | AIR_STEP_CHECK_HANG);
     return FALSE;
 }
 
@@ -522,11 +543,15 @@ s32 act_freefall(struct MarioState *m) {
     s32 animation;
 
     if (m->input & INPUT_B_PRESSED) {
-        return set_mario_action(m, ACT_DIVE, 0);
+        if (!(m->flags & MARIO_TECH_CURSE)) {
+            return set_mario_action(m, ACT_DIVE, 0);
+        }
     }
 
     if (m->input & INPUT_Z_PRESSED) {
-        return set_mario_action(m, ACT_GROUND_POUND, 0);
+        if (!(m->flags & MARIO_TECH_CURSE)) {
+            return set_mario_action(m, ACT_GROUND_POUND, 0);
+        }
     }
 
     switch (m->actionArg) {
@@ -665,6 +690,7 @@ s32 act_riding_shell_air(struct MarioState *m) {
             break;
 
         case AIR_STEP_HIT_LAVA_WALL:
+
             lava_boost_on_wall(m);
             break;
     }
@@ -883,7 +909,9 @@ s32 act_hold_water_jump(struct MarioState *m) {
 
 s32 act_steep_jump(struct MarioState *m) {
     if (m->input & INPUT_B_PRESSED) {
-        return set_mario_action(m, ACT_DIVE, 0);
+        if (!(m->flags & MARIO_TECH_CURSE)) {
+            return set_mario_action(m, ACT_DIVE, 0);
+        }
     }
 
     play_mario_sound(m, SOUND_ACTION_TERRAIN_JUMP, 0);
@@ -987,7 +1015,9 @@ s32 act_burning_jump(struct MarioState *m) {
         play_mario_landing_sound(m, SOUND_ACTION_TERRAIN_LANDING);
         set_mario_action(m, ACT_BURNING_GROUND, 0);
     }
-
+    if (m->flags & MARIO_RAINBOW) {
+     
+    }
     set_mario_animation(m, m->actionArg == 0 ? MARIO_ANIM_SINGLE_JUMP : MARIO_ANIM_FIRE_LAVA_BURN);
     m->particleFlags |= PARTICLE_FIRE;
     play_sound(SOUND_MOVING_LAVA_BURN, m->marioObj->header.gfx.cameraToObject);
@@ -1141,12 +1171,15 @@ u32 common_air_knockback_step(struct MarioState *m, u32 landAction, u32 hardFall
 }
 
 s32 check_wall_kick(struct MarioState *m) {
-    if ((m->input & INPUT_A_PRESSED) && m->wallKickTimer != 0 && m->prevAction == ACT_AIR_HIT_WALL) {
-        m->faceAngle[1] += 0x8000;
-        return set_mario_action(m, ACT_WALL_KICK_AIR, 0);
+    if (!(m->flags & MARIO_TECH_CURSE)) {
+        if ((m->input & INPUT_A_PRESSED) && m->wallKickTimer != 0
+            && m->prevAction == ACT_AIR_HIT_WALL) {
+            m->faceAngle[1] += 0x8000;
+            return set_mario_action(m, ACT_WALL_KICK_AIR, 0);
+        }
     }
-
-    return FALSE;
+        return FALSE;
+   
 }
 
 s32 act_backward_air_kb(struct MarioState *m) {
@@ -1511,9 +1544,15 @@ s32 act_lava_boost(struct MarioState *m) {
         queue_rumble_data(5, 80);
     }
 #else
+   
+
     play_sound_if_no_flag(m, SOUND_MARIO_ON_FIRE, MARIO_MARIO_SOUND_PLAYED);
 #endif
 
+     if (m->flags & MARIO_RAINBOW) {
+        set_mario_action(m, ACT_LAVA_BOOST_LAND, 0);
+    }
+
     if (!(m->input & INPUT_NONZERO_ANALOG)) {
         m->forwardVel = approach_f32(m->forwardVel, 0.0f, 0.35f, 0.35f);
     }
@@ -1626,7 +1665,7 @@ s32 act_slide_kick(struct MarioState *m) {
 
 s32 act_jump_kick(struct MarioState *m) {
     s32 animFrame;
-
+    
     if (m->actionState == 0) {
         play_sound_if_no_flag(m, SOUND_MARIO_PUNCH_HOO, MARIO_ACTION_SOUND_PLAYED);
         m->marioObj->header.gfx.animInfo.animID = -1;
diff --git a/src/game/mario_actions_airborne.c.rej b/src/game/mario_actions_airborne.c.rej
new file mode 100644
index 0000000..d57015a
--- /dev/null
+++ b/src/game/mario_actions_airborne.c.rej
@@ -0,0 +1,164 @@
+diff a/src/game/mario_actions_airborne.c b/src/game/mario_actions_airborne.c	(rejected hunks)
+@@ -49,20 +49,22 @@ s32 lava_boost_on_wall(struct MarioState *m) {
+         m->forwardVel = 24.0f;
+     }
+ 
+-    if (!(m->flags & MARIO_METAL_CAP)) {
++    if (!(m->flags & MARIO_METAL_CAP) && !(m->flags & MARIO_RAINBOW)) {
+         m->hurtCounter += (m->flags & MARIO_CAP_ON_HEAD) ? 12 : 18;
+     }
+ 
+     play_sound(SOUND_MARIO_ON_FIRE, m->marioObj->header.gfx.cameraToObject);
+     update_mario_sound_and_camera(m);
++
+     return drop_and_set_mario_action(m, ACT_LAVA_BOOST, 1);
+ }
+ 
+ s32 check_fall_damage(struct MarioState *m, u32 hardFallAction) {
+     f32 fallHeight;
+     f32 damageHeight;
+-
+-    fallHeight = m->peakHeight - m->pos[1];
++    if (!(m->flags & MARIO_RAINBOW)) {
++        fallHeight = m->peakHeight - m->pos[1];
++    }
+ 
+ #pragma GCC diagnostic push
+ #pragma GCC diagnostic ignored "-Wtype-limits"
+@@ -102,8 +104,10 @@ s32 check_fall_damage(struct MarioState *m, u32 hardFallAction) {
+ }
+ 
+ s32 check_kick_or_dive_in_air(struct MarioState *m) {
+-    if (m->input & INPUT_B_PRESSED) {
+-        return set_mario_action(m, m->forwardVel > 28.0f ? ACT_DIVE : ACT_JUMP_KICK, 0);
++    if (!(m->flags & MARIO_TECH_CURSE)) {
++        if (m->input & INPUT_B_PRESSED) {
++            return set_mario_action(m, m->forwardVel > 28.0f ? ACT_DIVE : ACT_JUMP_KICK, 0);
++        }
+     }
+     return FALSE;
+ }
+@@ -443,14 +448,30 @@ s32 act_jump(struct MarioState *m) {
+     if (check_kick_or_dive_in_air(m)) {
+         return TRUE;
+     }
+-
+-    if (m->input & INPUT_Z_PRESSED) {
+-        return set_mario_action(m, ACT_GROUND_POUND, 0);
++    if (!(m->flags & MARIO_TECH_CURSE)) {
++        if (m->input & INPUT_Z_PRESSED) {
++            return set_mario_action(m, ACT_GROUND_POUND, 0);
++        }
++    }
++    //check if forward spin is playing
++    if (m->flags & MARIO_RAINBOW) {
++        if (m->forwardVel > 50.0f) {
++            play_mario_sound(m, SOUND_ACTION_TERRAIN_JUMP,
++                             SOUND_MARIO_YAHOO_WAHA_YIPPEE + ((gAudioRandom % 5) << 16));
++            common_air_action_step(m, ACT_JUMP_LAND, MARIO_ANIM_FORWARD_SPINNING,
++                                   AIR_STEP_CHECK_LEDGE_GRAB | AIR_STEP_CHECK_HANG);
++            m->marioObj->header.gfx.animInfo.animAccel = 0x15000;
++        } else {
++            play_mario_sound(m, SOUND_ACTION_TERRAIN_JUMP, 0);
++            common_air_action_step(m, ACT_JUMP_LAND, MARIO_ANIM_SINGLE_JUMP,
++                                   AIR_STEP_CHECK_LEDGE_GRAB | AIR_STEP_CHECK_HANG);
++        }
++     
++    } else {
++        play_mario_sound(m, SOUND_ACTION_TERRAIN_JUMP, 0);
++        common_air_action_step(m, ACT_JUMP_LAND, MARIO_ANIM_SINGLE_JUMP,
++                               AIR_STEP_CHECK_LEDGE_GRAB | AIR_STEP_CHECK_HANG);     
+     }
+-
+-    play_mario_sound(m, SOUND_ACTION_TERRAIN_JUMP, 0);
+-    common_air_action_step(m, ACT_JUMP_LAND, MARIO_ANIM_SINGLE_JUMP,
+-                           AIR_STEP_CHECK_LEDGE_GRAB | AIR_STEP_CHECK_HANG);
+     return FALSE;
+ }
+ 
+@@ -522,11 +543,15 @@ s32 act_freefall(struct MarioState *m) {
+     s32 animation;
+ 
+     if (m->input & INPUT_B_PRESSED) {
+-        return set_mario_action(m, ACT_DIVE, 0);
++        if (!(m->flags & MARIO_TECH_CURSE)) {
++            return set_mario_action(m, ACT_DIVE, 0);
++        }
+     }
+ 
+     if (m->input & INPUT_Z_PRESSED) {
+-        return set_mario_action(m, ACT_GROUND_POUND, 0);
++        if (!(m->flags & MARIO_TECH_CURSE)) {
++            return set_mario_action(m, ACT_GROUND_POUND, 0);
++        }
+     }
+ 
+     switch (m->actionArg) {
+@@ -883,7 +908,9 @@ s32 act_hold_water_jump(struct MarioState *m) {
+ 
+ s32 act_steep_jump(struct MarioState *m) {
+     if (m->input & INPUT_B_PRESSED) {
+-        return set_mario_action(m, ACT_DIVE, 0);
++        if (!(m->flags & MARIO_TECH_CURSE)) {
++            return set_mario_action(m, ACT_DIVE, 0);
++        }
+     }
+ 
+     play_mario_sound(m, SOUND_ACTION_TERRAIN_JUMP, 0);
+@@ -987,7 +1014,9 @@ s32 act_burning_jump(struct MarioState *m) {
+         play_mario_landing_sound(m, SOUND_ACTION_TERRAIN_LANDING);
+         set_mario_action(m, ACT_BURNING_GROUND, 0);
+     }
+-
++    if (m->flags & MARIO_RAINBOW) {
++     
++    }
+     set_mario_animation(m, m->actionArg == 0 ? MARIO_ANIM_SINGLE_JUMP : MARIO_ANIM_FIRE_LAVA_BURN);
+     m->particleFlags |= PARTICLE_FIRE;
+     play_sound(SOUND_MOVING_LAVA_BURN, m->marioObj->header.gfx.cameraToObject);
+@@ -1141,12 +1170,15 @@ u32 common_air_knockback_step(struct MarioState *m, u32 landAction, u32 hardFall
+ }
+ 
+ s32 check_wall_kick(struct MarioState *m) {
+-    if ((m->input & INPUT_A_PRESSED) && m->wallKickTimer != 0 && m->prevAction == ACT_AIR_HIT_WALL) {
+-        m->faceAngle[1] += 0x8000;
+-        return set_mario_action(m, ACT_WALL_KICK_AIR, 0);
++    if (!(m->flags & MARIO_TECH_CURSE)) {
++        if ((m->input & INPUT_A_PRESSED) && m->wallKickTimer != 0
++            && m->prevAction == ACT_AIR_HIT_WALL) {
++            m->faceAngle[1] += 0x8000;
++            return set_mario_action(m, ACT_WALL_KICK_AIR, 0);
++        }
+     }
+-
+-    return FALSE;
++        return FALSE;
++   
+ }
+ 
+ s32 act_backward_air_kb(struct MarioState *m) {
+@@ -1511,9 +1543,15 @@ s32 act_lava_boost(struct MarioState *m) {
+         queue_rumble_data(5, 80);
+     }
+ #else
++   
++
+     play_sound_if_no_flag(m, SOUND_MARIO_ON_FIRE, MARIO_MARIO_SOUND_PLAYED);
+ #endif
+ 
++     if (m->flags & MARIO_RAINBOW) {
++        set_mario_action(m, ACT_LAVA_BOOST_LAND, 0);
++    }
++
+     if (!(m->input & INPUT_NONZERO_ANALOG)) {
+         m->forwardVel = approach_f32(m->forwardVel, 0.0f, 0.35f, 0.35f);
+     }
+@@ -1626,7 +1664,7 @@ s32 act_slide_kick(struct MarioState *m) {
+ 
+ s32 act_jump_kick(struct MarioState *m) {
+     s32 animFrame;
+-
++    
+     if (m->actionState == 0) {
+         play_sound_if_no_flag(m, SOUND_MARIO_PUNCH_HOO, MARIO_ACTION_SOUND_PLAYED);
+         m->marioObj->header.gfx.animInfo.animID = -1;
diff --git a/src/game/mario_actions_cutscene.c b/src/game/mario_actions_cutscene.c
index e2cbbb6..9f0d854 100644
--- a/src/game/mario_actions_cutscene.c
+++ b/src/game/mario_actions_cutscene.c
@@ -1510,9 +1510,11 @@ s32 act_squished(struct MarioState *m) {
                           2.0f - squishAmount);
             } else {
                 if (!(m->flags & MARIO_METAL_CAP) && m->invincTimer == 0) {
-                    // cap on: 3 units; cap off: 4.5 units
-                    m->hurtCounter += m->flags & MARIO_CAP_ON_HEAD ? 12 : 18;
-                    play_sound_if_no_flag(m, SOUND_MARIO_ATTACKED, MARIO_MARIO_SOUND_PLAYED);
+                    if (!(m->flags & MARIO_RAINBOW)) {
+                        // cap on: 3 units; cap off: 4.5 units
+                        m->hurtCounter += m->flags & MARIO_CAP_ON_HEAD ? 12 : 18;
+                        play_sound_if_no_flag(m, SOUND_MARIO_ATTACKED, MARIO_MARIO_SOUND_PLAYED);
+                    }
                 }
 
                 // Both of the 1.8's are really floats, but one of them has to
diff --git a/src/game/mario_actions_cutscene.c.rej b/src/game/mario_actions_cutscene.c.rej
new file mode 100644
index 0000000..c702cc7
--- /dev/null
+++ b/src/game/mario_actions_cutscene.c.rej
@@ -0,0 +1,16 @@
+diff a/src/game/mario_actions_cutscene.c b/src/game/mario_actions_cutscene.c	(rejected hunks)
+@@ -1510,9 +1510,11 @@ s32 act_squished(struct MarioState *m) {
+                           2.0f - squishAmount);
+             } else {
+                 if (!(m->flags & MARIO_METAL_CAP) && m->invincTimer == 0) {
+-                    // cap on: 3 units; cap off: 4.5 units
+-                    m->hurtCounter += m->flags & MARIO_CAP_ON_HEAD ? 12 : 18;
+-                    play_sound_if_no_flag(m, SOUND_MARIO_ATTACKED, MARIO_MARIO_SOUND_PLAYED);
++                    if (!(m->flags & MARIO_RAINBOW)) {
++                        // cap on: 3 units; cap off: 4.5 units
++                        m->hurtCounter += m->flags & MARIO_CAP_ON_HEAD ? 12 : 18;
++                        play_sound_if_no_flag(m, SOUND_MARIO_ATTACKED, MARIO_MARIO_SOUND_PLAYED);
++                    }
+                 }
+ 
+                 // Both of the 1.8's are really floats, but one of them has to
diff --git a/src/game/mario_actions_moving.c b/src/game/mario_actions_moving.c
index 8b8e8e1..0daf7f6 100644
--- a/src/game/mario_actions_moving.c
+++ b/src/game/mario_actions_moving.c
@@ -62,9 +62,18 @@ struct LandingAction sBackflipLandAction = {
 Mat4 sFloorAlignMatrix[2];
 
 s16 tilt_body_running(struct MarioState *m) {
-    s16 pitch = find_floor_slope(m, 0);
-    pitch = pitch * m->forwardVel / 40.0f;
-    return -pitch;
+    //rainbow water run. makes mario walk straight
+    if (!(m->flags & MARIO_RAINBOW)) {
+        s16 pitch = find_floor_slope(m, 0);
+        pitch = pitch * m->forwardVel / 40.0f;
+        return -pitch;
+    } else {
+        if ((m->floorHeight > m->waterLevel)) {
+            s16 pitch = find_floor_slope(m, 0);
+            pitch = pitch * m->forwardVel / 40.0f;
+            return -pitch;
+        }
+    }
 }
 
 void play_step_sound(struct MarioState *m, s16 frame1, s16 frame2) {
@@ -311,10 +320,13 @@ void apply_slope_accel(struct MarioState *m) {
                 break;
         }
 
-        if (floorDYaw > -0x4000 && floorDYaw < 0x4000) {
-            m->forwardVel += slopeAccel * steepness;
-        } else {
-            m->forwardVel -= slopeAccel * steepness;
+        //removes slope accel when walking on water careful when using a slopefix patch
+        if (!(m->flags & MARIO_RAINBOW && m->floorHeight <= m->waterLevel)) {
+            if (floorDYaw > -0x4000 && floorDYaw < 0x4000) {
+                m->forwardVel += slopeAccel * steepness;
+            } else {
+                m->forwardVel -= slopeAccel * steepness;
+            }
         }
     }
 
@@ -430,18 +442,29 @@ s32 update_decelerating_speed(struct MarioState *m) {
 
     return stopped;
 }
-
+//you only need this when changing speed (didnt know that when making sonic)
 void update_walking_speed(struct MarioState *m) {
     f32 maxTargetSpeed;
     f32 targetSpeed;
+    
+    if (!(m->flags & MARIO_RAINBOW)) {
+        if (m->floor != NULL && m->floor->type == SURFACE_SLOW) {
+            maxTargetSpeed = 24.0f;
+        } else {
+            maxTargetSpeed = 100.0f;
+        }
+    }
+    else {
+        maxTargetSpeed = 800.0f;
 
-    if (m->floor != NULL && m->floor->type == SURFACE_SLOW) {
-        maxTargetSpeed = 24.0f;
+    }
+    
+    if (!(m->flags & MARIO_RAINBOW)) {
+        targetSpeed = m->intendedMag < maxTargetSpeed ? m->intendedMag : maxTargetSpeed;
     } else {
-        maxTargetSpeed = 32.0f;
+        targetSpeed = m->intendedMag * 3 < maxTargetSpeed ? m->intendedMag * 3 : maxTargetSpeed;
     }
 
-    targetSpeed = m->intendedMag < maxTargetSpeed ? m->intendedMag : maxTargetSpeed;
 
     if (m->quicksandDepth > 10.0f) {
         targetSpeed *= 6.25 / m->quicksandDepth;
@@ -450,18 +473,32 @@ void update_walking_speed(struct MarioState *m) {
     if (m->forwardVel <= 0.0f) {
         m->forwardVel += 1.1f;
     } else if (m->forwardVel <= targetSpeed) {
-        m->forwardVel += 1.1f - m->forwardVel / 43.0f;
+        if (!(m->flags & MARIO_RAINBOW)) {
+            m->forwardVel += 1.1f - m->forwardVel / 43.0f;
+        } else
+            {
+            //change this if you want rainbow mario slower or faster
+            m->forwardVel += 1.6f - m->forwardVel / 100.0f;
+        }
     } else if (m->floor->normal.y >= 0.95f) {
         m->forwardVel -= 1.0f;
     }
-
-    if (m->forwardVel > 48.0f) {
-        m->forwardVel = 48.0f;
+    if (!(m->flags & MARIO_RAINBOW)) {
+        if (m->forwardVel > 48.0f) {
+            m->forwardVel = 48.0f;
+        }
+    }
+    else {
+        if (m->forwardVel > 500.0f) {
+            m->forwardVel = 500.0f;
+        }
     }
 
     m->faceAngle[1] =
         m->intendedYaw - approach_s32((s16)(m->intendedYaw - m->faceAngle[1]), 0, 0x800, 0x800);
-    apply_slope_accel(m);
+    
+        apply_slope_accel(m);
+   
 }
 
 s32 should_begin_sliding(struct MarioState *m) {
@@ -487,11 +524,12 @@ s32 check_ground_dive_or_punch(struct MarioState *m) {
 
     if (m->input & INPUT_B_PRESSED) {
         //! Speed kick (shoutouts to SimpleFlips)
-        if (m->forwardVel >= 29.0f && m->controller->stickMag > 48.0f) {
-            m->vel[1] = 20.0f;
-            return set_mario_action(m, ACT_DIVE, 1);
+        if (!(m->flags & MARIO_TECH_CURSE)) {
+            if (m->forwardVel >= 29.0f && m->controller->stickMag > 48.0f) {
+                m->vel[1] = 20.0f;
+                return set_mario_action(m, ACT_DIVE, 1);
+            }
         }
-
         return set_mario_action(m, ACT_MOVE_PUNCHING, 0);
     }
 
@@ -519,6 +557,7 @@ void anim_and_audio_for_walk(struct MarioState *m) {
     s32 val0C = TRUE;
     s16 targetPitch = 0;
     f32 val04;
+    struct MarioBodyState *bodyState = m->marioBodyState;
 
     val04 = m->intendedMag > m->forwardVel ? m->intendedMag : m->forwardVel;
 
@@ -587,8 +626,19 @@ void anim_and_audio_for_walk(struct MarioState *m) {
                         m->actionTimer = 2;
                     } else {
                         //! (Speed Crash) If Mario's speed is more than 2^17.
-                        val14 = (s32)(val04 / 4.0f * 0x10000);
-                        set_mario_anim_with_accel(m, MARIO_ANIM_RUNNING, val14);
+                        
+                        if ((m->forwardVel > 65.0f) && (m->flags & MARIO_RAINBOW)) {
+                            val14 = (s32)(val04 / 7.0f * 0x10000);
+                            bodyState->handState = MARIO_HAND_OPEN;
+                            //flip replaced with fast running animation
+                            set_mario_anim_with_accel(m, MARIO_ANIM_FORWARD_FLIP, val14);
+                            
+                        } else {
+                             val14 = (s32)(val04 / 4.0f * 0x10000);
+                            set_mario_anim_with_accel(m, MARIO_ANIM_RUNNING, val14);
+                           
+                        }
+                        
                         play_step_sound(m, 9, 45);
                         targetPitch = tilt_body_running(m);
 
@@ -778,10 +828,21 @@ s32 act_walking(struct MarioState *m) {
     Vec3f startPos;
     s16 startYaw = m->faceAngle[1];
 
-    mario_drop_held_object(m);
+    if ((m->floorHeight < m->waterLevel) && (m->flags & MARIO_RAINBOW)) {
+        m->terrainSoundAddend = (SOUND_TERRAIN_WATER << 16);
+       // m->particleFlags |= PARTICLE_SHALLOW_WATER_SPLASH;
+        spawn_object(m->marioObj, MODEL_WAVE_TRAIL, bhvObjectWaveTrail);
 
-    if (should_begin_sliding(m)) {
-        return set_mario_action(m, ACT_BEGIN_SLIDING, 0);
+
+    }
+
+    mario_drop_held_object(m);
+    //rainbow water run. stops mario from sliping on geometry below the water
+    if ((m->floorHeight > m->waterLevel)) {
+       
+        if (should_begin_sliding(m)) {
+            return set_mario_action(m, ACT_BEGIN_SLIDING, 0);
+        }
     }
 
     if (m->input & INPUT_FIRST_PERSON) {
diff --git a/src/game/mario_actions_moving.c.rej b/src/game/mario_actions_moving.c.rej
new file mode 100644
index 0000000..59a129f
--- /dev/null
+++ b/src/game/mario_actions_moving.c.rej
@@ -0,0 +1,186 @@
+diff a/src/game/mario_actions_moving.c b/src/game/mario_actions_moving.c	(rejected hunks)
+@@ -62,9 +62,18 @@ struct LandingAction sBackflipLandAction = {
+ Mat4 sFloorAlignMatrix[2];
+ 
+ s16 tilt_body_running(struct MarioState *m) {
+-    s16 pitch = find_floor_slope(m, 0);
+-    pitch = pitch * m->forwardVel / 40.0f;
+-    return -pitch;
++    //rainbow water run. makes mario walk straight
++    if (!(m->flags & MARIO_RAINBOW)) {
++        s16 pitch = find_floor_slope(m, 0);
++        pitch = pitch * m->forwardVel / 40.0f;
++        return -pitch;
++    } else {
++        if ((m->floorHeight > m->waterLevel)) {
++            s16 pitch = find_floor_slope(m, 0);
++            pitch = pitch * m->forwardVel / 40.0f;
++            return -pitch;
++        }
++    }
+ }
+ 
+ void play_step_sound(struct MarioState *m, s16 frame1, s16 frame2) {
+@@ -311,10 +320,13 @@ void apply_slope_accel(struct MarioState *m) {
+                 break;
+         }
+ 
+-        if (floorDYaw > -0x4000 && floorDYaw < 0x4000) {
+-            m->forwardVel += slopeAccel * steepness;
+-        } else {
+-            m->forwardVel -= slopeAccel * steepness;
++        //removes slope accel when walking on water careful when using a slopefix patch
++        if (!(m->flags & MARIO_RAINBOW && m->floorHeight <= m->waterLevel)) {
++            if (floorDYaw > -0x4000 && floorDYaw < 0x4000) {
++                m->forwardVel += slopeAccel * steepness;
++            } else {
++                m->forwardVel -= slopeAccel * steepness;
++            }
+         }
+     }
+ 
+@@ -430,18 +442,29 @@ s32 update_decelerating_speed(struct MarioState *m) {
+ 
+     return stopped;
+ }
+-
++//you only need this when changing speed (didnt know that when making sonic)
+ void update_walking_speed(struct MarioState *m) {
+     f32 maxTargetSpeed;
+     f32 targetSpeed;
++    
++    if (!(m->flags & MARIO_RAINBOW)) {
++        if (m->floor != NULL && m->floor->type == SURFACE_SLOW) {
++            maxTargetSpeed = 24.0f;
++        } else {
++            maxTargetSpeed = 100.0f;
++        }
++    }
++    else {
++        maxTargetSpeed = 800.0f;
+ 
+-    if (m->floor != NULL && m->floor->type == SURFACE_SLOW) {
+-        maxTargetSpeed = 24.0f;
++    }
++    
++    if (!(m->flags & MARIO_RAINBOW)) {
++        targetSpeed = m->intendedMag < maxTargetSpeed ? m->intendedMag : maxTargetSpeed;
+     } else {
+-        maxTargetSpeed = 32.0f;
++        targetSpeed = m->intendedMag * 3 < maxTargetSpeed ? m->intendedMag * 3 : maxTargetSpeed;
+     }
+ 
+-    targetSpeed = m->intendedMag < maxTargetSpeed ? m->intendedMag : maxTargetSpeed;
+ 
+     if (m->quicksandDepth > 10.0f) {
+         targetSpeed *= 6.25 / m->quicksandDepth;
+@@ -450,18 +473,32 @@ void update_walking_speed(struct MarioState *m) {
+     if (m->forwardVel <= 0.0f) {
+         m->forwardVel += 1.1f;
+     } else if (m->forwardVel <= targetSpeed) {
+-        m->forwardVel += 1.1f - m->forwardVel / 43.0f;
++        if (!(m->flags & MARIO_RAINBOW)) {
++            m->forwardVel += 1.1f - m->forwardVel / 43.0f;
++        } else
++            {
++            //change this if you want rainbow mario slower or faster
++            m->forwardVel += 1.6f - m->forwardVel / 100.0f;
++        }
+     } else if (m->floor->normal.y >= 0.95f) {
+         m->forwardVel -= 1.0f;
+     }
+-
+-    if (m->forwardVel > 48.0f) {
+-        m->forwardVel = 48.0f;
++    if (!(m->flags & MARIO_RAINBOW)) {
++        if (m->forwardVel > 48.0f) {
++            m->forwardVel = 48.0f;
++        }
++    }
++    else {
++        if (m->forwardVel > 500.0f) {
++            m->forwardVel = 500.0f;
++        }
+     }
+ 
+     m->faceAngle[1] =
+         m->intendedYaw - approach_s32((s16)(m->intendedYaw - m->faceAngle[1]), 0, 0x800, 0x800);
+-    apply_slope_accel(m);
++    
++        apply_slope_accel(m);
++   
+ }
+ 
+ s32 should_begin_sliding(struct MarioState *m) {
+@@ -487,11 +524,12 @@ s32 check_ground_dive_or_punch(struct MarioState *m) {
+ 
+     if (m->input & INPUT_B_PRESSED) {
+         //! Speed kick (shoutouts to SimpleFlips)
+-        if (m->forwardVel >= 29.0f && m->controller->stickMag > 48.0f) {
+-            m->vel[1] = 20.0f;
+-            return set_mario_action(m, ACT_DIVE, 1);
++        if (!(m->flags & MARIO_TECH_CURSE)) {
++            if (m->forwardVel >= 29.0f && m->controller->stickMag > 48.0f) {
++                m->vel[1] = 20.0f;
++                return set_mario_action(m, ACT_DIVE, 1);
++            }
+         }
+-
+         return set_mario_action(m, ACT_MOVE_PUNCHING, 0);
+     }
+ 
+@@ -519,6 +557,7 @@ void anim_and_audio_for_walk(struct MarioState *m) {
+     s32 val0C = TRUE;
+     s16 targetPitch = 0;
+     f32 val04;
++    struct MarioBodyState *bodyState = m->marioBodyState;
+ 
+     val04 = m->intendedMag > m->forwardVel ? m->intendedMag : m->forwardVel;
+ 
+@@ -587,8 +626,19 @@ void anim_and_audio_for_walk(struct MarioState *m) {
+                         m->actionTimer = 2;
+                     } else {
+                         //! (Speed Crash) If Mario's speed is more than 2^17.
+-                        val14 = (s32)(val04 / 4.0f * 0x10000);
+-                        set_mario_anim_with_accel(m, MARIO_ANIM_RUNNING, val14);
++                        
++                        if ((m->forwardVel > 65.0f) && (m->flags & MARIO_RAINBOW)) {
++                            val14 = (s32)(val04 / 7.0f * 0x10000);
++                            bodyState->handState = MARIO_HAND_OPEN;
++                            //flip replaced with fast running animation
++                            set_mario_anim_with_accel(m, MARIO_ANIM_FORWARD_FLIP, val14);
++                            
++                        } else {
++                             val14 = (s32)(val04 / 4.0f * 0x10000);
++                            set_mario_anim_with_accel(m, MARIO_ANIM_RUNNING, val14);
++                           
++                        }
++                        
+                         play_step_sound(m, 9, 45);
+                         targetPitch = tilt_body_running(m);
+ 
+@@ -778,10 +828,21 @@ s32 act_walking(struct MarioState *m) {
+     Vec3f startPos;
+     s16 startYaw = m->faceAngle[1];
+ 
+-    mario_drop_held_object(m);
++    if ((m->floorHeight < m->waterLevel) && (m->flags & MARIO_RAINBOW)) {
++        m->terrainSoundAddend = (SOUND_TERRAIN_WATER << 16);
++       // m->particleFlags |= PARTICLE_SHALLOW_WATER_SPLASH;
++        spawn_object(m->marioObj, MODEL_WAVE_TRAIL, bhvObjectWaveTrail);
+ 
+-    if (should_begin_sliding(m)) {
+-        return set_mario_action(m, ACT_BEGIN_SLIDING, 0);
++
++    }
++
++    mario_drop_held_object(m);
++    //rainbow water run. stops mario from sliping on geometry below the water
++    if ((m->floorHeight > m->waterLevel)) {
++       
++        if (should_begin_sliding(m)) {
++            return set_mario_action(m, ACT_BEGIN_SLIDING, 0);
++        }
+     }
+ 
+     if (m->input & INPUT_FIRST_PERSON) {
diff --git a/src/game/mario_actions_stationary.c b/src/game/mario_actions_stationary.c
index 580d254..4ab5ac7 100644
--- a/src/game/mario_actions_stationary.c
+++ b/src/game/mario_actions_stationary.c
@@ -54,6 +54,8 @@ s32 check_common_idle_cancels(struct MarioState *m) {
 
     if (m->input & INPUT_Z_DOWN) {
         return set_mario_action(m, ACT_START_CROUCHING, 0);
+        //debug
+       
     }
 
     return FALSE;
@@ -708,6 +710,12 @@ s32 act_start_crouching(struct MarioState *m) {
     }
 
     stationary_ground_step(m);
+    if (m->actionTimer == 0) {
+        ///REMOVE SPAWN_OBJECT FOR YOUR HACK
+        spawn_object_relative(0, 0, +190, 0, m->marioObj, MODEL_RAINBOW_STAR, bhvRainbowStar);
+        //spawn_object(m->marioObj, MODEL_RAINBOW_STAR, bhvRainbowStar);
+        m->actionTimer++;
+    }
     set_mario_animation(m, MARIO_ANIM_START_CROUCHING);
     if (is_anim_past_end(m)) {
         set_mario_action(m, ACT_CROUCHING, 0);
diff --git a/src/game/mario_actions_stationary.c.rej b/src/game/mario_actions_stationary.c.rej
new file mode 100644
index 0000000..b91a5d6
--- /dev/null
+++ b/src/game/mario_actions_stationary.c.rej
@@ -0,0 +1,23 @@
+diff a/src/game/mario_actions_stationary.c b/src/game/mario_actions_stationary.c	(rejected hunks)
+@@ -54,6 +54,8 @@ s32 check_common_idle_cancels(struct MarioState *m) {
+ 
+     if (m->input & INPUT_Z_DOWN) {
+         return set_mario_action(m, ACT_START_CROUCHING, 0);
++        //debug
++       
+     }
+ 
+     return FALSE;
+@@ -708,6 +710,12 @@ s32 act_start_crouching(struct MarioState *m) {
+     }
+ 
+     stationary_ground_step(m);
++    if (m->actionTimer == 0) {
++        ///REMOVE SPAWN_OBJECT FOR YOUR HACK
++        spawn_object_relative(0, 0, +190, 0, m->marioObj, MODEL_RAINBOW_STAR, bhvRainbowStar);
++        //spawn_object(m->marioObj, MODEL_RAINBOW_STAR, bhvRainbowStar);
++        m->actionTimer++;
++    }
+     set_mario_animation(m, MARIO_ANIM_START_CROUCHING);
+     if (is_anim_past_end(m)) {
+         set_mario_action(m, ACT_CROUCHING, 0);
diff --git a/src/game/mario_step.c b/src/game/mario_step.c
index c3da0cb..06aed33 100644
--- a/src/game/mario_step.c
+++ b/src/game/mario_step.c
@@ -284,6 +284,15 @@ static s32 perform_ground_quarter_step(struct MarioState *m, Vec3f nextPos) {
         floor->originOffset = floorHeight; //! Wrong origin offset (no effect)
     }
 
+    if (m->flags & MARIO_RAINBOW) {
+        if ((m->action == ACT_WALKING) && floorHeight < waterLevel && m->forwardVel > 45.0f) {
+            floorHeight = waterLevel;
+            floor = &gWaterSurfacePseudoFloor;
+            floor->originOffset = floorHeight; //! Wrong origin offset (no effect)
+        }
+    }
+
+
     if (nextPos[1] > floorHeight + 100.0f) {
         if (nextPos[1] + 160.0f >= ceilHeight) {
             return GROUND_STEP_HIT_WALL_STOP_QSTEPS;
@@ -395,6 +404,14 @@ s32 perform_air_quarter_step(struct MarioState *m, Vec3f intendedPos, u32 stepAr
     f32 ceilHeight;
     f32 floorHeight;
     f32 waterLevel;
+    if (m->flags & MARIO_RAINBOW) {
+        if ((m->action == ACT_WALKING) && floorHeight < waterLevel && m->forwardVel > 45.0f) {
+            floorHeight = waterLevel;
+            floor = &gWaterSurfacePseudoFloor;
+            floor->originOffset = floorHeight; //! Wrong origin offset (no effect)
+        }
+    }
+
 
     vec3f_copy(nextPos, intendedPos);
 
diff --git a/src/game/mario_step.c.rej b/src/game/mario_step.c.rej
new file mode 100644
index 0000000..468edbd
--- /dev/null
+++ b/src/game/mario_step.c.rej
@@ -0,0 +1,32 @@
+diff a/src/game/mario_step.c b/src/game/mario_step.c	(rejected hunks)
+@@ -284,6 +284,15 @@ static s32 perform_ground_quarter_step(struct MarioState *m, Vec3f nextPos) {
+         floor->originOffset = floorHeight; //! Wrong origin offset (no effect)
+     }
+ 
++    if (m->flags & MARIO_RAINBOW) {
++        if ((m->action == ACT_WALKING) && floorHeight < waterLevel && m->forwardVel > 45.0f) {
++            floorHeight = waterLevel;
++            floor = &gWaterSurfacePseudoFloor;
++            floor->originOffset = floorHeight; //! Wrong origin offset (no effect)
++        }
++    }
++
++
+     if (nextPos[1] > floorHeight + 100.0f) {
+         if (nextPos[1] + 160.0f >= ceilHeight) {
+             return GROUND_STEP_HIT_WALL_STOP_QSTEPS;
+@@ -395,6 +404,14 @@ s32 perform_air_quarter_step(struct MarioState *m, Vec3f intendedPos, u32 stepAr
+     f32 ceilHeight;
+     f32 floorHeight;
+     f32 waterLevel;
++    if (m->flags & MARIO_RAINBOW) {
++        if ((m->action == ACT_WALKING) && floorHeight < waterLevel && m->forwardVel > 45.0f) {
++            floorHeight = waterLevel;
++            floor = &gWaterSurfacePseudoFloor;
++            floor->originOffset = floorHeight; //! Wrong origin offset (no effect)
++        }
++    }
++
+ 
+     vec3f_copy(nextPos, intendedPos);
+ 
diff --git a/src/game/memory.c b/src/game/memory.c
index 5f3b329..326e24c 100644
--- a/src/game/memory.c
+++ b/src/game/memory.c
@@ -54,7 +54,9 @@ extern struct MainPoolBlock *sPoolListHeadR;
  */
 struct MemoryPool *gEffectsMemoryPool;
 
+
 uintptr_t sSegmentTable[32];
+uintptr_t sSegmentROMTable[32];
 u32 sPoolFreeSpace;
 u8 *sPoolStart;
 u8 *sPoolEnd;
@@ -284,7 +286,7 @@ void *load_segment(s32 segment, u8 *srcStart, u8 *srcEnd, u32 side) {
     void *addr = dynamic_dma_read(srcStart, srcEnd, side);
 
     if (addr != NULL) {
-        set_segment_base_addr(segment, addr);
+        set_segment_base_addr(segment, addr); sSegmentROMTable[segment] = (uintptr_t) srcStart;
     }
     return addr;
 }
@@ -333,7 +335,7 @@ void *load_segment_decompress(s32 segment, u8 *srcStart, u8 *srcEnd) {
         dest = main_pool_alloc(*size, MEMORY_POOL_LEFT);
         if (dest != NULL) {
             decompress(compressed, dest);
-            set_segment_base_addr(segment, dest);
+            set_segment_base_addr(segment, dest); sSegmentROMTable[segment] = (uintptr_t) srcStart;
             main_pool_free(compressed);
         } else {
         }
@@ -351,7 +353,7 @@ void *load_segment_decompress_heap(u32 segment, u8 *srcStart, u8 *srcEnd) {
     if (compressed != NULL) {
         dma_read(compressed, srcStart, srcEnd);
         decompress(compressed, gDecompressionHeap);
-        set_segment_base_addr(segment, gDecompressionHeap);
+        set_segment_base_addr(segment, gDecompressionHeap); sSegmentROMTable[segment] = (uintptr_t) srcStart;
         main_pool_free(compressed);
     } else {
     }
diff --git a/src/game/memory.c.rej b/src/game/memory.c.rej
new file mode 100644
index 0000000..6162b51
--- /dev/null
+++ b/src/game/memory.c.rej
@@ -0,0 +1,38 @@
+diff a/src/game/memory.c b/src/game/memory.c	(rejected hunks)
+@@ -54,7 +54,9 @@ extern struct MainPoolBlock *sPoolListHeadR;
+  */
+ struct MemoryPool *gEffectsMemoryPool;
+ 
++
+ uintptr_t sSegmentTable[32];
++uintptr_t sSegmentROMTable[32];
+ u32 sPoolFreeSpace;
+ u8 *sPoolStart;
+ u8 *sPoolEnd;
+@@ -284,7 +286,7 @@ void *load_segment(s32 segment, u8 *srcStart, u8 *srcEnd, u32 side) {
+     void *addr = dynamic_dma_read(srcStart, srcEnd, side);
+ 
+     if (addr != NULL) {
+-        set_segment_base_addr(segment, addr);
++        set_segment_base_addr(segment, addr); sSegmentROMTable[segment] = (uintptr_t) srcStart;
+     }
+     return addr;
+ }
+@@ -333,7 +335,7 @@ void *load_segment_decompress(s32 segment, u8 *srcStart, u8 *srcEnd) {
+         dest = main_pool_alloc(*size, MEMORY_POOL_LEFT);
+         if (dest != NULL) {
+             decompress(compressed, dest);
+-            set_segment_base_addr(segment, dest);
++            set_segment_base_addr(segment, dest); sSegmentROMTable[segment] = (uintptr_t) srcStart;
+             main_pool_free(compressed);
+         } else {
+         }
+@@ -351,7 +353,7 @@ void *load_segment_decompress_heap(u32 segment, u8 *srcStart, u8 *srcEnd) {
+     if (compressed != NULL) {
+         dma_read(compressed, srcStart, srcEnd);
+         decompress(compressed, gDecompressionHeap);
+-        set_segment_base_addr(segment, gDecompressionHeap);
++        set_segment_base_addr(segment, gDecompressionHeap); sSegmentROMTable[segment] = (uintptr_t) srcStart;
+         main_pool_free(compressed);
+     } else {
+     }
diff --git a/src/game/memory.h b/src/game/memory.h
index 7a51e59..90fa61b 100644
--- a/src/game/memory.h
+++ b/src/game/memory.h
@@ -66,4 +66,6 @@ void *alloc_display_list(u32 size);
 void func_80278A78(struct MarioAnimation *a, void *b, struct Animation *target);
 s32 load_patchable_table(struct MarioAnimation *a, u32 b);
 
+
+extern uintptr_t sSegmentROMTable[32];
 #endif // MEMORY_H
diff --git a/src/game/memory.h.rej b/src/game/memory.h.rej
new file mode 100644
index 0000000..c9499d7
--- /dev/null
+++ b/src/game/memory.h.rej
@@ -0,0 +1,8 @@
+diff a/src/game/memory.h b/src/game/memory.h	(rejected hunks)
+@@ -66,4 +66,6 @@ void *alloc_display_list(u32 size);
+ void func_80278A78(struct MarioAnimation *a, void *b, struct Animation *target);
+ s32 load_patchable_table(struct MarioAnimation *a, u32 b);
+ 
++
++extern uintptr_t sSegmentROMTable[32];
+ #endif // MEMORY_H
diff --git a/src/game/obj_behaviors_2.c b/src/game/obj_behaviors_2.c
index 056d178..aa8c610 100644
--- a/src/game/obj_behaviors_2.c
+++ b/src/game/obj_behaviors_2.c
@@ -45,6 +45,8 @@
 #include "seq_ids.h"
 #include "spawn_sound.h"
 
+
+
 #define POS_OP_SAVE_POSITION 0
 #define POS_OP_COMPUTE_VELOCITY 1
 #define POS_OP_RESTORE_POSITION 2
@@ -930,6 +932,8 @@ static void treat_far_home_as_mario(f32 threshold) {
 #include "behaviors/haunted_chair.inc.c"
 #include "behaviors/mad_piano.inc.c"
 #include "behaviors/flying_bookend_switch.inc.c"
+#include "behaviors/cursya.inc.c"
+#include "behaviors/skipsqueak.inc.c"
 
 /**
  * Used by bowser, fly guy, piranha plant, and fire spitters.
diff --git a/src/game/obj_behaviors_2.c.rej b/src/game/obj_behaviors_2.c.rej
new file mode 100644
index 0000000..bb4f88b
--- /dev/null
+++ b/src/game/obj_behaviors_2.c.rej
@@ -0,0 +1,19 @@
+diff a/src/game/obj_behaviors_2.c b/src/game/obj_behaviors_2.c	(rejected hunks)
+@@ -45,6 +45,8 @@
+ #include "seq_ids.h"
+ #include "spawn_sound.h"
+ 
++
++
+ #define POS_OP_SAVE_POSITION 0
+ #define POS_OP_COMPUTE_VELOCITY 1
+ #define POS_OP_RESTORE_POSITION 2
+@@ -930,6 +932,8 @@ static void treat_far_home_as_mario(f32 threshold) {
+ #include "behaviors/haunted_chair.inc.c"
+ #include "behaviors/mad_piano.inc.c"
+ #include "behaviors/flying_bookend_switch.inc.c"
++#include "behaviors/cursya.inc.c"
++#include "behaviors/skipsqueak.inc.c"
+ 
+ /**
+  * Used by bowser, fly guy, piranha plant, and fire spitters.
diff --git a/src/game/object_list_processor.c b/src/game/object_list_processor.c
index d01f5eb..cb88a7e 100644
--- a/src/game/object_list_processor.c
+++ b/src/game/object_list_processor.c
@@ -200,6 +200,17 @@ struct ParticleProperties sParticleTypes[] = {
     { PARTICLE_VERTICAL_STAR,        ACTIVE_PARTICLE_V_STAR,               MODEL_NONE,                 bhvVertStarParticleSpawner },
     { PARTICLE_HORIZONTAL_STAR,      ACTIVE_PARTICLE_H_STAR,               MODEL_NONE,                 bhvHorStarParticleSpawner },
     { PARTICLE_SPARKLES,             ACTIVE_PARTICLE_SPARKLES,             MODEL_SPARKLES,             bhvSparkleParticleSpawner },
+    { PARTICLE_RAINBOW_TRAIL,         ACTIVE_PARTICLE_RAINBOW_TRAIL,             MODEL_RAINBOW_TRAIL,      bhvRainbowTrailParticleSpawner },
+    { PARTICLE_BLUE_RAINBOW_TRAIL,          ACTIVE_PARTICLE_RAINBOW_TRAIL,             MODEL_BLUE_RAINBOW_TRAIL,      bhvRainbowTrailParticleSpawner },
+    { PARTICLE_WHITE_RAINBOW_TRAIL, ACTIVE_PARTICLE_RAINBOW_TRAIL, MODEL_WHITE_RAINBOW_TRAIL, bhvRainbowTrailParticleSpawner },
+    { PARTICLE_YELLOW_RAINBOW_TRAIL, ACTIVE_PARTICLE_RAINBOW_TRAIL, MODEL_YELLOW_RAINBOW_TRAIL, bhvRainbowTrailParticleSpawner },
+    { PARTICLE_CYAN_RAINBOW_TRAIL, ACTIVE_PARTICLE_RAINBOW_TRAIL, MODEL_CYAN_RAINBOW_TRAIL, bhvRainbowTrailParticleSpawner },
+    { PARTICLE_PINK_RAINBOW_TRAIL, ACTIVE_PARTICLE_RAINBOW_TRAIL, MODEL_PINK_RAINBOW_TRAIL, bhvRainbowTrailParticleSpawner },
+    { PARTICLE_GREEN_RAINBOW_TRAIL,  ACTIVE_PARTICLE_RAINBOW_TRAIL,        MODEL_GREEN_RAINBOW_TRAIL,  bhvRainbowTrailParticleSpawner },
+    { PARTICLE_TECH_CURSE,          ACTIVE_PARTICLE_RAINBOW_TRAIL,             MODEL_BLUE_RAINBOW_TRAIL,      bhvCurseParticleSpawner },
+    { PARTICLE_SLOW_CURSE,          ACTIVE_PARTICLE_RAINBOW_TRAIL,             MODEL_CYAN_RAINBOW_TRAIL,      bhvCurseParticleSpawner },
+    { PARTICLE_REVERSE_CURSE,          ACTIVE_PARTICLE_RAINBOW_TRAIL,             MODEL_YELLOW_RAINBOW_TRAIL,      bhvCurseParticleSpawner },
+    { PARTICLE_HEAVY_CURSE,          ACTIVE_PARTICLE_RAINBOW_TRAIL,             MODEL_RAINBOW_TRAIL,      bhvCurseParticleSpawner },
     { PARTICLE_BUBBLE,               ACTIVE_PARTICLE_BUBBLE,               MODEL_BUBBLE,               bhvBubbleParticleSpawner },
     { PARTICLE_WATER_SPLASH,         ACTIVE_PARTICLE_WATER_SPLASH,         MODEL_WATER_SPLASH,         bhvWaterSplash },
     { PARTICLE_IDLE_WATER_WAVE,      ACTIVE_PARTICLE_IDLE_WATER_WAVE,      MODEL_IDLE_WATER_WAVE,      bhvIdleWaterWave },
diff --git a/src/game/object_list_processor.c.rej b/src/game/object_list_processor.c.rej
new file mode 100644
index 0000000..af36345
--- /dev/null
+++ b/src/game/object_list_processor.c.rej
@@ -0,0 +1,19 @@
+diff a/src/game/object_list_processor.c b/src/game/object_list_processor.c	(rejected hunks)
+@@ -200,6 +200,17 @@ struct ParticleProperties sParticleTypes[] = {
+     { PARTICLE_VERTICAL_STAR,        ACTIVE_PARTICLE_V_STAR,               MODEL_NONE,                 bhvVertStarParticleSpawner },
+     { PARTICLE_HORIZONTAL_STAR,      ACTIVE_PARTICLE_H_STAR,               MODEL_NONE,                 bhvHorStarParticleSpawner },
+     { PARTICLE_SPARKLES,             ACTIVE_PARTICLE_SPARKLES,             MODEL_SPARKLES,             bhvSparkleParticleSpawner },
++    { PARTICLE_RAINBOW_TRAIL,         ACTIVE_PARTICLE_RAINBOW_TRAIL,             MODEL_RAINBOW_TRAIL,      bhvRainbowTrailParticleSpawner },
++    { PARTICLE_BLUE_RAINBOW_TRAIL,          ACTIVE_PARTICLE_RAINBOW_TRAIL,             MODEL_BLUE_RAINBOW_TRAIL,      bhvRainbowTrailParticleSpawner },
++    { PARTICLE_WHITE_RAINBOW_TRAIL, ACTIVE_PARTICLE_RAINBOW_TRAIL, MODEL_WHITE_RAINBOW_TRAIL, bhvRainbowTrailParticleSpawner },
++    { PARTICLE_YELLOW_RAINBOW_TRAIL, ACTIVE_PARTICLE_RAINBOW_TRAIL, MODEL_YELLOW_RAINBOW_TRAIL, bhvRainbowTrailParticleSpawner },
++    { PARTICLE_CYAN_RAINBOW_TRAIL, ACTIVE_PARTICLE_RAINBOW_TRAIL, MODEL_CYAN_RAINBOW_TRAIL, bhvRainbowTrailParticleSpawner },
++    { PARTICLE_PINK_RAINBOW_TRAIL, ACTIVE_PARTICLE_RAINBOW_TRAIL, MODEL_PINK_RAINBOW_TRAIL, bhvRainbowTrailParticleSpawner },
++    { PARTICLE_GREEN_RAINBOW_TRAIL,  ACTIVE_PARTICLE_RAINBOW_TRAIL,        MODEL_GREEN_RAINBOW_TRAIL,  bhvRainbowTrailParticleSpawner },
++    { PARTICLE_TECH_CURSE,          ACTIVE_PARTICLE_RAINBOW_TRAIL,             MODEL_BLUE_RAINBOW_TRAIL,      bhvCurseParticleSpawner },
++    { PARTICLE_SLOW_CURSE,          ACTIVE_PARTICLE_RAINBOW_TRAIL,             MODEL_CYAN_RAINBOW_TRAIL,      bhvCurseParticleSpawner },
++    { PARTICLE_REVERSE_CURSE,          ACTIVE_PARTICLE_RAINBOW_TRAIL,             MODEL_YELLOW_RAINBOW_TRAIL,      bhvCurseParticleSpawner },
++    { PARTICLE_HEAVY_CURSE,          ACTIVE_PARTICLE_RAINBOW_TRAIL,             MODEL_RAINBOW_TRAIL,      bhvCurseParticleSpawner },
+     { PARTICLE_BUBBLE,               ACTIVE_PARTICLE_BUBBLE,               MODEL_BUBBLE,               bhvBubbleParticleSpawner },
+     { PARTICLE_WATER_SPLASH,         ACTIVE_PARTICLE_WATER_SPLASH,         MODEL_WATER_SPLASH,         bhvWaterSplash },
+     { PARTICLE_IDLE_WATER_WAVE,      ACTIVE_PARTICLE_IDLE_WATER_WAVE,      MODEL_IDLE_WATER_WAVE,      bhvIdleWaterWave },
diff --git a/src/game/sound_init.c b/src/game/sound_init.c
index 4912292..45ab75c 100644
--- a/src/game/sound_init.c
+++ b/src/game/sound_init.c
@@ -287,7 +287,22 @@ void stop_shell_music(void) {
  * Called from threads: thread5_game_loop
  */
 void play_cap_music(u16 seqArgs) {
-    play_music(SEQ_PLAYER_LEVEL, seqArgs, 0);
+
+        play_music(SEQ_PLAYER_LEVEL, seqArgs, 0);
+
+
+    if (sCurrentCapMusic != MUSIC_NONE && sCurrentCapMusic != seqArgs) {
+        stop_background_music(sCurrentCapMusic);
+    }
+    sCurrentCapMusic = seqArgs;
+}
+
+void play_rainbow_music(u16 seqArgs) {
+    // rainbow: makes the music not reset when hitting a new star
+    if (sCurrentCapMusic == MUSIC_NONE) {
+        play_music(SEQ_PLAYER_LEVEL, seqArgs, 0);
+    }
+
     if (sCurrentCapMusic != MUSIC_NONE && sCurrentCapMusic != seqArgs) {
         stop_background_music(sCurrentCapMusic);
     }
diff --git a/src/game/sound_init.c.rej b/src/game/sound_init.c.rej
new file mode 100644
index 0000000..355467a
--- /dev/null
+++ b/src/game/sound_init.c.rej
@@ -0,0 +1,25 @@
+diff a/src/game/sound_init.c b/src/game/sound_init.c	(rejected hunks)
+@@ -287,7 +287,22 @@ void stop_shell_music(void) {
+  * Called from threads: thread5_game_loop
+  */
+ void play_cap_music(u16 seqArgs) {
+-    play_music(SEQ_PLAYER_LEVEL, seqArgs, 0);
++
++        play_music(SEQ_PLAYER_LEVEL, seqArgs, 0);
++
++
++    if (sCurrentCapMusic != MUSIC_NONE && sCurrentCapMusic != seqArgs) {
++        stop_background_music(sCurrentCapMusic);
++    }
++    sCurrentCapMusic = seqArgs;
++}
++
++void play_rainbow_music(u16 seqArgs) {
++    // rainbow: makes the music not reset when hitting a new star
++    if (sCurrentCapMusic == MUSIC_NONE) {
++        play_music(SEQ_PLAYER_LEVEL, seqArgs, 0);
++    }
++
+     if (sCurrentCapMusic != MUSIC_NONE && sCurrentCapMusic != seqArgs) {
+         stop_background_music(sCurrentCapMusic);
+     }
diff --git a/src/game/sound_init.h b/src/game/sound_init.h
index a03c5d8..8aa3071 100644
--- a/src/game/sound_init.h
+++ b/src/game/sound_init.h
@@ -34,6 +34,7 @@ void play_cutscene_music(u16 seqArgs);
 void play_shell_music(void);
 void stop_shell_music(void);
 void play_cap_music(u16 seqArgs);
+void play_rainbow_music(u16 seqArgs);
 void fadeout_cap_music(void);
 void stop_cap_music(void);
 void audio_game_loop_tick(void);
diff --git a/src/game/sound_init.h.rej b/src/game/sound_init.h.rej
new file mode 100644
index 0000000..71429e3
--- /dev/null
+++ b/src/game/sound_init.h.rej
@@ -0,0 +1,9 @@
+diff a/src/game/sound_init.h b/src/game/sound_init.h	(rejected hunks)
+@@ -34,6 +34,7 @@ void play_cutscene_music(u16 seqArgs);
+ void play_shell_music(void);
+ void stop_shell_music(void);
+ void play_cap_music(u16 seqArgs);
++void play_rainbow_music(u16 seqArgs);
+ void fadeout_cap_music(void);
+ void stop_cap_music(void);
+ void audio_game_loop_tick(void);
diff --git a/src/game/texscroll.c b/src/game/texscroll.c
new file mode 100644
index 0000000..309a61b
--- /dev/null
+++ b/src/game/texscroll.c
@@ -0,0 +1,26 @@
+#include "types.h"
+#include "include/segment_symbols.h"
+#include "memory.h"
+#include "engine/math_util.h"
+#include "src/engine/behavior_script.h"
+#include "texscroll.h"
+
+#ifdef TARGET_N64
+#define SCROLL_CONDITION(condition) condition
+#else
+#define SCROLL_CONDITION(condition) 1
+#endif
+
+
+#include "src/game/texscroll/group0_texscroll.inc.c"
+#include "src/game/texscroll/common1_texscroll.inc.c"
+void scroll_textures() {
+	if(SCROLL_CONDITION(sSegmentROMTable[0x4] == (uintptr_t)_group0_mio0SegmentRomStart)) {
+		scroll_textures_group0();
+	}
+
+	if(SCROLL_CONDITION(sSegmentROMTable[0x3] == (uintptr_t)_common1_mio0SegmentRomStart)) {
+		scroll_textures_common1();
+	}
+
+}
diff --git a/src/game/texscroll.h b/src/game/texscroll.h
new file mode 100644
index 0000000..162e8d7
--- /dev/null
+++ b/src/game/texscroll.h
@@ -0,0 +1,8 @@
+#ifndef TEXSCROLL_H
+#define TEXSCROLL_H
+
+#include "src/game/texscroll/group0_texscroll.inc.h"
+#include "src/game/texscroll/common1_texscroll.inc.h"
+extern void scroll_textures();
+
+#endif
diff --git a/src/game/texscroll/common1_texscroll.inc.c b/src/game/texscroll/common1_texscroll.inc.c
new file mode 100644
index 0000000..c40de03
--- /dev/null
+++ b/src/game/texscroll/common1_texscroll.inc.c
@@ -0,0 +1,6 @@
+#include "actors/common1.h"
+#include "actors/rainbow_star/texscroll.inc.c"
+void scroll_textures_common1() {
+	scroll_actor_geo_rainbow_star();
+
+}
diff --git a/src/game/texscroll/common1_texscroll.inc.h b/src/game/texscroll/common1_texscroll.inc.h
new file mode 100644
index 0000000..ded9f93
--- /dev/null
+++ b/src/game/texscroll/common1_texscroll.inc.h
@@ -0,0 +1,2 @@
+#include "actors/rainbow_star/texscroll.inc.h"
+extern void scroll_textures_common1();
diff --git a/src/game/texscroll/group0_texscroll.inc.c b/src/game/texscroll/group0_texscroll.inc.c
new file mode 100644
index 0000000..7bf9005
--- /dev/null
+++ b/src/game/texscroll/group0_texscroll.inc.c
@@ -0,0 +1,32 @@
+#include "actors/group0.h"
+#include "actors/mario/texscroll.inc.c"
+#include "actors/skipsqueak/texscroll.inc.c"
+#include "actors/spiny_skipsqueak/texscroll.inc.c"
+#include "actors/cursya/texscroll.inc.c"
+#include "actors/cursya_cyan/texscroll.inc.c"
+#include "actors/cursya_yellow/texscroll.inc.c"
+#include "actors/cursya_purple/texscroll.inc.c"
+#include "actors/cursya_red/texscroll.inc.c"
+#include "actors/cursya_blue/texscroll.inc.c"
+void scroll_textures_group0() {
+	scroll_actor_geo_mario();
+
+
+	scroll_actor_geo_skipsqueak();
+
+	scroll_actor_geo_spiny_skipsqueak();
+
+	scroll_actor_geo_cursya();
+
+	scroll_actor_geo_cursya_cyan();
+
+	scroll_actor_geo_cursya_yellow();
+
+	scroll_actor_geo_cursya_purple();
+
+	scroll_actor_geo_cursya_red();
+
+	scroll_actor_geo_cursya_blue();
+
+}
+//fast 64 mario for rainbow star
\ No newline at end of file
diff --git a/src/game/texscroll/group0_texscroll.inc.h b/src/game/texscroll/group0_texscroll.inc.h
new file mode 100644
index 0000000..2b00364
--- /dev/null
+++ b/src/game/texscroll/group0_texscroll.inc.h
@@ -0,0 +1,12 @@
+#include "actors/cursya_blue/texscroll.inc.h"
+#include "actors/cursya_red/texscroll.inc.h"
+#include "actors/cursya_purple/texscroll.inc.h"
+#include "actors/cursya_yellow/texscroll.inc.h"
+#include "actors/cursya_cyan/texscroll.inc.h"
+#include "actors/cursya/texscroll.inc.h"
+#include "actors/spiny_skipsqueak/texscroll.inc.h"
+#include "actors/skipsqueak/texscroll.inc.h"
+
+#include "actors/mario/texscroll.inc.h"
+extern void scroll_textures_group0();
+//fast 64 mario for rainbow star
\ No newline at end of file
diff --git a/src/menu/star_select.c b/src/menu/star_select.c
index 025dbf2..22d21b0 100644
--- a/src/menu/star_select.c
+++ b/src/menu/star_select.c
@@ -1,3 +1,5 @@
+#include "src/game/texscroll.h"
+
 #include <PR/ultratypes.h>
 
 #include "audio/external.h"
@@ -434,7 +436,7 @@ s32 lvl_update_obj_and_load_act_button_actions(UNUSED s32 arg, UNUSED s32 unused
         }
     }
 
-    area_update_objects();
+    area_update_objects(); scroll_textures(); scroll_textures();
     sActSelectorMenuTimer++;
     return sLoadedActNum;
 }
diff --git a/src/menu/star_select.c.rej b/src/menu/star_select.c.rej
new file mode 100644
index 0000000..dbae704
--- /dev/null
+++ b/src/menu/star_select.c.rej
@@ -0,0 +1,16 @@
+diff a/src/menu/star_select.c b/src/menu/star_select.c	(rejected hunks)
+@@ -1,3 +1,5 @@
++#include "src/game/texscroll.h"
++
+ #include <PR/ultratypes.h>
+ 
+ #include "audio/external.h"
+@@ -434,7 +436,7 @@ s32 lvl_update_obj_and_load_act_button_actions(UNUSED s32 arg, UNUSED s32 unused
+         }
+     }
+ 
+-    area_update_objects();
++    area_update_objects(); scroll_textures(); scroll_textures();
+     sActSelectorMenuTimer++;
+     return sLoadedActNum;
+ }
diff --git a/textures/intro_raw/mario_face_shine.ia8.png b/textures/intro_raw/mario_face_shine.ia8.png
new file mode 100644
index 0000000000000000000000000000000000000000..e6090a0578c13a3735bb0ae88cc544d572eb3c0e
GIT binary patch
literal 169
zcmeAS@N?(olHy`uVBq!ia0vp^3LwnE0wix1Z>k4U1)eUBAr*1SDL>9T2qq*YNSG#=
z@JP5_W@KjOepjNvF}<o^ed7ZYhY5^K_l+C2JT`0MoX_1O86(jn$?{PxY!91;;S^(y
ziTMYr+p2lyI{cAa&;5brQFYtqgttF<4+Jj}6z5)?s&qJ`EKP!!IlzpS!T*=gG<Nyo
Rk3hQ_JYD@<);T3K0RSX?HU<Cy

literal 0
HcmV?d00001

diff --git a/textures/sky/metal_hole.rgba16.png b/textures/sky/metal_hole.rgba16.png
new file mode 100644
index 0000000000000000000000000000000000000000..a4fb042dc802ce1802783d682f85b350209d40de
GIT binary patch
literal 1952
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

literal 0
HcmV?d00001

